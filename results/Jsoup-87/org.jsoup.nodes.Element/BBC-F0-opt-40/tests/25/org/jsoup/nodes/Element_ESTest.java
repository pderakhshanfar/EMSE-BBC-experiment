/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 21:16:32 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeFilter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Tag tag0 = Tag.valueOf("Oj'R-IxD$y");
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("Oj'R-IxD$y", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertEquals("Oj'R-IxD$y", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "Tag name must not be evpty.", attributes0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("Oj'R-IxD$y", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertEquals("Oj'R-IxD$y", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(0, attributes0.size());
      assertEquals("Tag name must not be evpty.", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("Oj'R-IxD$y", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("Oj'R-IxD$y", formElement0.tagName());
      assertNotNull(formElement0);
      
      Element element0 = formElement0.val((String) null);
      assertSame(formElement0, element0);
      assertSame(element0, formElement0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("Oj'R-IxD$y", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertEquals("Oj'R-IxD$y", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(1, attributes0.size());
      assertEquals("Tag name must not be evpty.", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("Oj'R-IxD$y", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("Oj'R-IxD$y", formElement0.tagName());
      assertEquals("Tag name must not be evpty.", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Oj'R-IxD$y", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Oj'R-IxD$y", element0.tagName());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      MockPrintWriter mockPrintWriter0 = formElement0.html((MockPrintWriter) null);
      assertSame(formElement0, element0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("Oj'R-IxD$y", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertEquals("Oj'R-IxD$y", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(1, attributes0.size());
      assertEquals("Tag name must not be evpty.", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("Oj'R-IxD$y", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("Oj'R-IxD$y", formElement0.tagName());
      assertNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        element0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Tag tag0 = Tag.valueOf("0;/E@V!`a~xil4f>{");
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertNotNull(tag0);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "ascii", (Attributes) null);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("ascii", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.tagName());
      assertNotNull(pseudoTextElement0);
      
      PseudoTextElement pseudoTextElement1 = (PseudoTextElement)pseudoTextElement0.toggleClass("0;/E@V!`a~xil4f>{");
      assertSame(pseudoTextElement0, pseudoTextElement1);
      assertSame(pseudoTextElement1, pseudoTextElement0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("ascii", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.tagName());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement1.tagName());
      assertEquals(0, pseudoTextElement1.siblingIndex());
      assertEquals(0, pseudoTextElement1.childNodeSize());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement1.nodeName());
      assertEquals("ascii", pseudoTextElement1.baseUri());
      assertFalse(pseudoTextElement1.isBlock());
      assertFalse(pseudoTextElement1.hasParent());
      assertNotNull(pseudoTextElement1);
      
      PseudoTextElement pseudoTextElement2 = (PseudoTextElement)pseudoTextElement0.toggleClass("0");
      assertSame(pseudoTextElement0, pseudoTextElement2);
      assertSame(pseudoTextElement0, pseudoTextElement1);
      assertSame(pseudoTextElement2, pseudoTextElement0);
      assertSame(pseudoTextElement2, pseudoTextElement1);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("ascii", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement2.isBlock());
      assertEquals("ascii", pseudoTextElement2.baseUri());
      assertEquals(0, pseudoTextElement2.siblingIndex());
      assertEquals(0, pseudoTextElement2.childNodeSize());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement2.nodeName());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement2.tagName());
      assertFalse(pseudoTextElement2.hasParent());
      assertNotNull(pseudoTextElement2);
      
      pseudoTextElement1.setSiblingIndex((-1));
      assertSame(pseudoTextElement0, pseudoTextElement2);
      assertSame(pseudoTextElement0, pseudoTextElement1);
      assertSame(pseudoTextElement1, pseudoTextElement2);
      assertSame(pseudoTextElement1, pseudoTextElement0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals((-1), pseudoTextElement0.siblingIndex());
      assertEquals("ascii", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.tagName());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement1.tagName());
      assertEquals((-1), pseudoTextElement1.siblingIndex());
      assertEquals(0, pseudoTextElement1.childNodeSize());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement1.nodeName());
      assertEquals("ascii", pseudoTextElement1.baseUri());
      assertFalse(pseudoTextElement1.isBlock());
      assertFalse(pseudoTextElement1.hasParent());
      
      boolean boolean0 = pseudoTextElement1.hasClass("\"8Vk4E`:D");
      assertFalse(boolean0);
      assertSame(pseudoTextElement0, pseudoTextElement2);
      assertSame(pseudoTextElement0, pseudoTextElement1);
      assertSame(pseudoTextElement1, pseudoTextElement2);
      assertSame(pseudoTextElement1, pseudoTextElement0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals((-1), pseudoTextElement0.siblingIndex());
      assertEquals("ascii", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.tagName());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement1.tagName());
      assertEquals((-1), pseudoTextElement1.siblingIndex());
      assertEquals(0, pseudoTextElement1.childNodeSize());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement1.nodeName());
      assertEquals("ascii", pseudoTextElement1.baseUri());
      assertFalse(pseudoTextElement1.isBlock());
      assertFalse(pseudoTextElement1.hasParent());
      
      PseudoTextElement pseudoTextElement3 = (PseudoTextElement)pseudoTextElement1.toggleClass("#root");
      assertSame(pseudoTextElement0, pseudoTextElement3);
      assertSame(pseudoTextElement0, pseudoTextElement2);
      assertSame(pseudoTextElement0, pseudoTextElement1);
      assertSame(pseudoTextElement1, pseudoTextElement3);
      assertSame(pseudoTextElement1, pseudoTextElement2);
      assertSame(pseudoTextElement1, pseudoTextElement0);
      assertSame(pseudoTextElement3, pseudoTextElement1);
      assertSame(pseudoTextElement3, pseudoTextElement2);
      assertSame(pseudoTextElement3, pseudoTextElement0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals((-1), pseudoTextElement0.siblingIndex());
      assertEquals("ascii", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.tagName());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement1.tagName());
      assertEquals((-1), pseudoTextElement1.siblingIndex());
      assertEquals(0, pseudoTextElement1.childNodeSize());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement1.nodeName());
      assertEquals("ascii", pseudoTextElement1.baseUri());
      assertFalse(pseudoTextElement1.isBlock());
      assertFalse(pseudoTextElement1.hasParent());
      assertEquals("ascii", pseudoTextElement3.baseUri());
      assertFalse(pseudoTextElement3.isBlock());
      assertEquals(0, pseudoTextElement3.childNodeSize());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement3.nodeName());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement3.tagName());
      assertEquals((-1), pseudoTextElement3.siblingIndex());
      assertFalse(pseudoTextElement3.hasParent());
      assertNotNull(pseudoTextElement3);
      
      boolean boolean1 = pseudoTextElement1.hasClass(".");
      assertFalse(boolean1);
      assertSame(pseudoTextElement0, pseudoTextElement3);
      assertSame(pseudoTextElement0, pseudoTextElement2);
      assertSame(pseudoTextElement0, pseudoTextElement1);
      assertSame(pseudoTextElement1, pseudoTextElement3);
      assertSame(pseudoTextElement1, pseudoTextElement2);
      assertSame(pseudoTextElement1, pseudoTextElement0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals((-1), pseudoTextElement0.siblingIndex());
      assertEquals("ascii", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.tagName());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement1.tagName());
      assertEquals((-1), pseudoTextElement1.siblingIndex());
      assertEquals(0, pseudoTextElement1.childNodeSize());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement1.nodeName());
      assertEquals("ascii", pseudoTextElement1.baseUri());
      assertFalse(pseudoTextElement1.isBlock());
      assertFalse(pseudoTextElement1.hasParent());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = pseudoTextElement1.hasClass("ascii");
      assertFalse(boolean2);
      assertSame(pseudoTextElement0, pseudoTextElement3);
      assertSame(pseudoTextElement0, pseudoTextElement2);
      assertSame(pseudoTextElement0, pseudoTextElement1);
      assertSame(pseudoTextElement1, pseudoTextElement3);
      assertSame(pseudoTextElement1, pseudoTextElement2);
      assertSame(pseudoTextElement1, pseudoTextElement0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals((-1), pseudoTextElement0.siblingIndex());
      assertEquals("ascii", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.tagName());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement1.tagName());
      assertEquals((-1), pseudoTextElement1.siblingIndex());
      assertEquals(0, pseudoTextElement1.childNodeSize());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement1.nodeName());
      assertEquals("ascii", pseudoTextElement1.baseUri());
      assertFalse(pseudoTextElement1.isBlock());
      assertFalse(pseudoTextElement1.hasParent());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("vI", "vI");
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("vI", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("vI", document0.location());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("vI", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("vI", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("vI", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      String string0 = element0.cssSelector();
      assertEquals("html > body", string0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("vI", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("vI", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("vI", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertNotNull(string0);
      
      String string1 = document0.data();
      assertEquals("", string1);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("vI", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("vI", document0.location());
      assertEquals("#root", document0.tagName());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      List<DataNode> list0 = document0.dataNodes();
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("vI", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("vI", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Element element1 = element0.previousElementSibling();
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("vI", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("vI", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("vI", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("vI", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      assertEquals("head", element1.tagName());
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("<!", "java.lang.string@0000000040 0 ascii");
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      Element element0 = document1.createElement("<!");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("<!", element0.nodeName());
      assertEquals("<!", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Document document2 = (Document)document1.appendTo(element0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("<!", element0.nodeName());
      assertEquals("<!", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Elements elements0 = element0.getElementsMatchingText(":nth-child(%d)");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("<!", element0.nodeName());
      assertEquals("<!", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string0 = document1.data();
      assertEquals("", string0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("vI", "vI");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("vI", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("vI", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      document0.childNodes = null;
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("vI", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("vI", document0.baseUri());
      assertFalse(document0.isBlock());
      
      String string0 = document0.cssSelector();
      assertEquals("#root", string0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("vI", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("vI", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = ">tyb\\^u){lq_";
      Document document0 = Parser.parseBodyFragment(">tyb^u){lq_", ">tyb^u){lq_");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(">tyb^u){lq_", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(">tyb^u){lq_", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.html((CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Document.createShell("</");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertNotNull(document_OutputSettings3);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.clone();
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertFalse(document_OutputSettings4.outline());
      assertNotNull(document_OutputSettings4);
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, (-767), document_OutputSettings4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">tyb^u){lq_", ">tyb^u){lq_");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(">tyb^u){lq_", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(">tyb^u){lq_", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = Parser.parseBodyFragmentRelaxed(">tyb^u){lq_", "^hft[az-l>e]tb");
      assertNotSame(document1, document0);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^hft[az-l>e]tb", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^hft[az-l>e]tb", document1.location());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Tag tag0 = Tag.valueOf("'");
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("'", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertEquals("'", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.clone();
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertTrue(attributes1.equals((Object)attributes0));
      
      Attributes attributes2 = attributes1.put("^hft[az-l>e]tb", "|t;x");
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      
      FormElement formElement0 = new FormElement(tag0, "c]9FK}m1|>\"Eqr.O", attributes2);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("'", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertEquals("'", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals("'", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("c]9FK}m1|>\"Eqr.O", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals("'", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertNotNull(formElement0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      
      Element element0 = formElement0.val(">tyb^u){lq_");
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertSame(formElement0, element0);
      assertSame(element0, formElement0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("'", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertEquals("'", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("'", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("c]9FK}m1|>\"Eqr.O", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals("'", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("'", element0.nodeName());
      assertEquals("'", element0.tagName());
      assertEquals("c]9FK}m1|>\"Eqr.O", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '4';
      charArray0[1] = '#';
      charArray0[2] = '[';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'4', '#', '['}, charArray0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(3, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals("4#[", charBuffer0.toString());
      assertNotNull(charBuffer0);
      assertEquals(3, charArray0.length);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(true);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings2);
      
      // Undeclared exception!
      try { 
        document1.outerHtmlTail(charBuffer0, 1047, document_OutputSettings2);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)25;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)98, (byte) (-93), (byte)35, (byte)18, (byte)25}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      String string0 = Parser.unescapeEntities("S2Y", true);
      assertEquals("S2Y", string0);
      assertNotNull(string0);
      
      StringReader stringReader0 = new StringReader("S2Y");
      assertNotNull(stringReader0);
      
      Document document0 = parser0.parseInput((Reader) stringReader0, "S2Y");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("S2Y", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("S2Y", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByIndexGreaterThan(124);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("S2Y", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("S2Y", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Pattern pattern0 = Pattern.compile("S2Y");
      assertEquals(0, pattern0.flags());
      assertEquals("S2Y", pattern0.toString());
      assertEquals("S2Y", pattern0.pattern());
      assertNotNull(pattern0);
      
      Matcher matcher0 = pattern0.matcher("S2Y");
      assertEquals(0, pattern0.flags());
      assertEquals("S2Y", pattern0.toString());
      assertEquals("S2Y", pattern0.pattern());
      assertEquals("java.util.regex.Matcher[pattern=S2Y region=0,3 lastmatch=]", matcher0.toString());
      assertFalse(matcher0.hasTransparentBounds());
      assertTrue(matcher0.hasAnchoringBounds());
      assertEquals(0, matcher0.groupCount());
      assertNotNull(matcher0);
      
      Elements elements1 = document0.getElementsMatchingText(pattern0);
      assertNotSame(elements1, elements0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("S2Y", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("S2Y", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, pattern0.flags());
      assertEquals("S2Y", pattern0.toString());
      assertEquals("S2Y", pattern0.pattern());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      
      CDataNode cDataNode0 = new CDataNode("S2Y");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Node node0 = cDataNode0.parent();
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNull(node0);
      
      Document document1 = (Document)document0.doClone((Node) null);
      assertNotSame(document1, document0);
      assertNotSame(document0, document1);
      assertFalse(parser0.isTrackErrors());
      assertEquals("S2Y", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("S2Y", document1.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("S2Y", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("S2Y", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be evpty.");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tag name must not be evpty.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be evpty.", document0.location());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("Tag name must not be evpty.");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tag name must not be evpty.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be evpty.", document0.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("Tag name must not be evpty.", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Tag name must not be evpty.", document1.location());
      assertNotNull(document1);
      
      boolean boolean0 = document1.hasClass("Tag name must not be evpty.");
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tag name must not be evpty.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be evpty.", document0.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("Tag name must not be evpty.", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Tag name must not be evpty.", document1.location());
      
      Element element0 = new Element("Tag name must not be evpty.");
      assertFalse(element0.isBlock());
      assertEquals("Tag name must not be evpty.", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Tag name must not be evpty.", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = element0.nextElementSibling();
      assertFalse(element0.isBlock());
      assertEquals("Tag name must not be evpty.", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Tag name must not be evpty.", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertNull(element1);
      
      MockFile mockFile0 = new MockFile("", ".");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) element0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) ".";
      objectArray0[3] = (Object) element0;
      objectArray0[4] = (Object) ".";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) document1;
      objectArray0[7] = (Object) document0;
      objectArray0[8] = (Object) null;
      MockPrintStream mockPrintStream1 = (MockPrintStream)mockPrintStream0.format(locale0, ".", objectArray0);
      assertSame(mockPrintStream1, mockPrintStream0);
      assertSame(mockPrintStream0, mockPrintStream1);
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isHidden());
      assertEquals(".", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/.", mockFile0.toString());
      assertEquals("/", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(1L, mockFile0.length());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertNotNull(mockPrintStream1);
      assertEquals(9, objectArray0.length);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(47);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(47, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(47, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(true);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(47, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(47, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(47, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(47, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(47, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(47, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(47, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.outline());
      assertNotNull(document_OutputSettings3);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(47, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(47, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(47, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(47, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertTrue(document_OutputSettings4.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings4.escapeMode());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(47, document_OutputSettings4.indentAmount());
      assertNotNull(document_OutputSettings4);
      
      document0.outerHtmlHead(mockPrintStream1, 0, document_OutputSettings4);
      assertSame(document0, document1);
      assertSame(mockPrintStream0, mockPrintStream1);
      assertSame(mockPrintStream1, mockPrintStream0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tag name must not be evpty.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be evpty.", document0.location());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(47, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(47, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(45L, mockFile0.length());
      assertTrue(mockFile0.isHidden());
      assertEquals(".", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/.", mockFile0.toString());
      assertEquals("/", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(47, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(47, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertTrue(document_OutputSettings4.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings4.escapeMode());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(47, document_OutputSettings4.indentAmount());
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C.", "C.");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("C.", document0.location());
      assertEquals("C.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      String string0 = parseSettings0.normalizeTag(";#4]f-ti-T_158,cwH");
      assertEquals(";#4]f-ti-T_158,cwH", string0);
      assertNotNull(string0);
      
      Attribute attribute0 = new Attribute("h,o", "r&N+kA/f7PvZxh*");
      assertEquals("r&N+kA/f7PvZxh*", attribute0.getValue());
      assertEquals("h,o", attribute0.getKey());
      assertNotNull(attribute0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("pdp_", false);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      
      Document document1 = Parser.parseBodyFragment("r&N+kA/f7PvZxh*", "");
      assertNotSame(document1, document0);
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Element element0 = document1.appendElement(";#4]f-ti-T_158,cwH");
      assertNotSame(document1, document0);
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(";#4]f-ti-t_158,cwh", element0.nodeName());
      assertEquals(";#4]f-ti-t_158,cwh", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      assertFalse(document1.equals((Object)document0));
      
      String string1 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  C.\n </body>\n</html>", string1);
      assertNotSame(document0, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("C.", document0.location());
      assertEquals("C.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(string1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      
      Pattern pattern0 = Pattern.compile("h,o");
      assertEquals(0, pattern0.flags());
      assertEquals("h,o", pattern0.pattern());
      assertEquals("h,o", pattern0.toString());
      assertNotNull(pattern0);
      
      Elements elements0 = document1.getElementsMatchingText(pattern0);
      assertNotSame(document1, document0);
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, pattern0.flags());
      assertEquals("h,o", pattern0.pattern());
      assertEquals("h,o", pattern0.toString());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document1.equals((Object)document0));
      
      Element element1 = element0.attr("Z'[}", "java.lang.string@0000000031 =h05c r_&");
      assertNotSame(document1, document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(";#4]f-ti-t_158,cwh", element0.nodeName());
      assertEquals(";#4]f-ti-t_158,cwh", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(";#4]f-ti-t_158,cwh", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals(";#4]f-ti-t_158,cwh", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertNotNull(element1);
      assertFalse(document1.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parse("U<", "U<");
      assertFalse(document0.isBlock());
      assertEquals("U<", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("U<", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.appendChild(document0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("U<", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("U<", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("U<", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("U<", document1.location());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      document0.reparentChild(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("U<", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("U<", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("U<", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("U<", document1.location());
      assertFalse(document1.isBlock());
      
      Elements elements0 = document0.getElementsContainingOwnText("U<");
      assertSame(document0, document1);
      assertFalse(document0.isBlock());
      assertEquals("U<", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("U<", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      // Undeclared exception!
      try { 
        document0.appendTo(document1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "|t;x";
      Document document0 = Document.createShell("|t;x");
      assertEquals("#root", document0.tagName());
      assertEquals("|t;x", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("|t;x", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      DataNode dataNode0 = DataNode.createFromEncoded("|t;x", "");
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertNotNull(dataNode0);
      
      document0.parentNode = (Node) dataNode0;
      assertEquals("#root", document0.tagName());
      assertEquals("|t;x", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("|t;x", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertFalse(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      Document document1 = (Document)document0.toggleClass("|t;x");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("|t;x", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("|t;x", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("|t;x", document1.location());
      assertEquals("|t;x", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      dataNode0.setBaseUri("e0]'\"y95=N");
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      
      Document document2 = (Document)document0.toggleClass("|t;x");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("|t;x", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("|t;x", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("|t;x", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("|t;x", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertNotNull(document2);
      
      // Undeclared exception!
      try { 
        document0.elementSiblingIndex();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.DataNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("vI", "vI");
      assertEquals(1, document0.childNodeSize());
      assertEquals("vI", document0.location());
      assertEquals("vI", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Tag tag0 = Tag.valueOf("vI");
      assertEquals("vI", tag0.toString());
      assertEquals("vI", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode("^~&tD&");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("^~&tD&", "=xCg:U6=p-");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertNotNull(attributes1);
      
      Attribute attribute0 = new Attribute("odd", "^~&tD&", attributes1);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("odd", attribute0.getKey());
      assertEquals("^~&tD&", attribute0.getValue());
      assertNotNull(attribute0);
      
      Attributes attributes2 = attributes1.put(attribute0);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals("odd", attribute0.getKey());
      assertEquals("^~&tD&", attribute0.getValue());
      assertEquals(3, attributes2.size());
      assertNotNull(attributes2);
      
      Attributes attributes3 = attributes2.put("datalist", true);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(4, attributes0.size());
      assertEquals(4, attributes1.size());
      assertEquals("odd", attribute0.getKey());
      assertEquals("^~&tD&", attribute0.getValue());
      assertEquals(4, attributes2.size());
      assertEquals(4, attributes3.size());
      assertNotNull(attributes3);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "vI", attributes3);
      assertEquals("vI", tag0.toString());
      assertEquals("vI", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(4, attributes0.size());
      assertEquals(4, attributes1.size());
      assertEquals("odd", attribute0.getKey());
      assertEquals("^~&tD&", attribute0.getValue());
      assertEquals(4, attributes2.size());
      assertEquals(4, attributes3.size());
      assertFalse(pseudoTextElement0.isBlock());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("vI", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("vI", pseudoTextElement0.baseUri());
      assertEquals("vI", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertNotNull(pseudoTextElement0);
      
      Element element0 = pseudoTextElement0.toggleClass("=xCg:U6=p-");
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertSame(pseudoTextElement0, element0);
      assertSame(element0, pseudoTextElement0);
      assertEquals("vI", tag0.toString());
      assertEquals("vI", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(5, attributes0.size());
      assertEquals(5, attributes1.size());
      assertEquals("odd", attribute0.getKey());
      assertEquals("^~&tD&", attribute0.getValue());
      assertEquals(5, attributes2.size());
      assertEquals(5, attributes3.size());
      assertFalse(pseudoTextElement0.isBlock());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("vI", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("vI", pseudoTextElement0.baseUri());
      assertEquals("vI", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("vI", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("vI", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("vI", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.appendTo(document0);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertSame(pseudoTextElement0, element1);
      assertSame(pseudoTextElement0, element0);
      assertSame(element0, element1);
      assertSame(element0, pseudoTextElement0);
      assertSame(element1, pseudoTextElement0);
      assertSame(element1, element0);
      assertEquals("vI", document0.location());
      assertEquals("vI", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("vI", tag0.toString());
      assertEquals("vI", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(5, attributes0.size());
      assertEquals(5, attributes1.size());
      assertEquals("odd", attribute0.getKey());
      assertEquals("^~&tD&", attribute0.getValue());
      assertEquals(5, attributes2.size());
      assertEquals(5, attributes3.size());
      assertEquals(1, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertTrue(pseudoTextElement0.hasParent());
      assertEquals("vI", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("vI", pseudoTextElement0.baseUri());
      assertEquals("vI", pseudoTextElement0.tagName());
      assertEquals("vI", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("vI", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("vI", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("vI", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("vI", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("vI", element1.tagName());
      assertNotNull(element1);
      
      boolean boolean0 = pseudoTextElement0.is("odd");
      assertFalse(boolean0);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertSame(pseudoTextElement0, element1);
      assertSame(pseudoTextElement0, element0);
      assertEquals("vI", tag0.toString());
      assertEquals("vI", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(5, attributes0.size());
      assertEquals(5, attributes1.size());
      assertEquals("odd", attribute0.getKey());
      assertEquals("^~&tD&", attribute0.getValue());
      assertEquals(5, attributes2.size());
      assertEquals(5, attributes3.size());
      assertEquals(1, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertTrue(pseudoTextElement0.hasParent());
      assertEquals("vI", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("vI", pseudoTextElement0.baseUri());
      assertEquals("vI", pseudoTextElement0.tagName());
      
      Element element2 = pseudoTextElement0.toggleClass("^~&tD&");
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertSame(pseudoTextElement0, element2);
      assertSame(pseudoTextElement0, element1);
      assertSame(pseudoTextElement0, element0);
      assertSame(element2, element1);
      assertSame(element2, pseudoTextElement0);
      assertSame(element2, element0);
      assertEquals("vI", tag0.toString());
      assertEquals("vI", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(5, attributes0.size());
      assertEquals(5, attributes1.size());
      assertEquals("odd", attribute0.getKey());
      assertEquals("^~&tD&", attribute0.getValue());
      assertEquals(5, attributes2.size());
      assertEquals(5, attributes3.size());
      assertEquals(1, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertTrue(pseudoTextElement0.hasParent());
      assertEquals("vI", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("vI", pseudoTextElement0.baseUri());
      assertEquals("vI", pseudoTextElement0.tagName());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("vI", element2.tagName());
      assertEquals(1, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals("vI", element2.nodeName());
      assertEquals("vI", element2.baseUri());
      assertNotNull(element2);
      
      boolean boolean1 = element2.hasClass("=H05C H,o");
      assertFalse(boolean1);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertSame(pseudoTextElement0, element2);
      assertSame(pseudoTextElement0, element1);
      assertSame(pseudoTextElement0, element0);
      assertSame(element2, element1);
      assertSame(element2, pseudoTextElement0);
      assertSame(element2, element0);
      assertEquals("vI", tag0.toString());
      assertEquals("vI", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(5, attributes0.size());
      assertEquals(5, attributes1.size());
      assertEquals("odd", attribute0.getKey());
      assertEquals("^~&tD&", attribute0.getValue());
      assertEquals(5, attributes2.size());
      assertEquals(5, attributes3.size());
      assertEquals(1, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertTrue(pseudoTextElement0.hasParent());
      assertEquals("vI", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("vI", pseudoTextElement0.baseUri());
      assertEquals("vI", pseudoTextElement0.tagName());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("vI", element2.tagName());
      assertEquals(1, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals("vI", element2.nodeName());
      assertEquals("vI", element2.baseUri());
      assertTrue(boolean1 == boolean0);
      
      Element element3 = element1.toggleClass("vI");
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertSame(pseudoTextElement0, element3);
      assertSame(pseudoTextElement0, element2);
      assertSame(pseudoTextElement0, element1);
      assertSame(pseudoTextElement0, element0);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element0, pseudoTextElement0);
      assertSame(element1, pseudoTextElement0);
      assertSame(element1, element0);
      assertSame(element1, element3);
      assertSame(element1, element2);
      assertSame(element3, element0);
      assertSame(element3, element1);
      assertSame(element3, pseudoTextElement0);
      assertSame(element3, element2);
      assertEquals("vI", document0.location());
      assertEquals("vI", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("vI", tag0.toString());
      assertEquals("vI", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(5, attributes0.size());
      assertEquals(5, attributes1.size());
      assertEquals("odd", attribute0.getKey());
      assertEquals("^~&tD&", attribute0.getValue());
      assertEquals(5, attributes2.size());
      assertEquals(5, attributes3.size());
      assertEquals(1, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertTrue(pseudoTextElement0.hasParent());
      assertEquals("vI", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("vI", pseudoTextElement0.baseUri());
      assertEquals("vI", pseudoTextElement0.tagName());
      assertEquals("vI", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("vI", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("vI", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("vI", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("vI", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("vI", element1.tagName());
      assertEquals("vI", element3.nodeName());
      assertEquals("vI", element3.baseUri());
      assertTrue(element3.hasParent());
      assertEquals("vI", element3.tagName());
      assertEquals(0, element3.childNodeSize());
      assertEquals(1, element3.siblingIndex());
      assertFalse(element3.isBlock());
      assertNotNull(element3);
      
      boolean boolean2 = document0.hasClass("textarea");
      assertFalse(boolean2);
      assertEquals("vI", document0.location());
      assertEquals("vI", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      Tag tag1 = Tag.valueOf(">:9K^(li-) WD!im");
      assertNotSame(tag1, tag0);
      assertFalse(tag1.isData());
      assertFalse(tag1.isKnownTag());
      assertEquals(">:9K^(li-) WD!im", tag1.toString());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isSelfClosing());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isBlock());
      assertFalse(tag1.isFormListed());
      assertEquals(">:9K^(li-) WD!im", tag1.getName());
      assertFalse(tag1.preserveWhitespace());
      assertTrue(tag1.isInline());
      assertNotNull(tag1);
      assertFalse(tag1.equals((Object)tag0));
      
      Element element4 = new Element("vI");
      assertEquals(0, element4.siblingIndex());
      assertFalse(element4.isBlock());
      assertEquals("vI", element4.tagName());
      assertEquals(0, element4.childNodeSize());
      assertEquals("", element4.baseUri());
      assertEquals("vI", element4.nodeName());
      assertFalse(element4.hasParent());
      assertNotNull(element4);
      
      Document document1 = element1.ownerDocument();
      assertSame(document0, document1);
      assertNotSame(tag0, tag1);
      assertSame(document1, document0);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertSame(pseudoTextElement0, element3);
      assertSame(pseudoTextElement0, element2);
      assertSame(pseudoTextElement0, element1);
      assertSame(pseudoTextElement0, element0);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element0, pseudoTextElement0);
      assertSame(element1, pseudoTextElement0);
      assertSame(element1, element0);
      assertSame(element1, element3);
      assertSame(element1, element2);
      assertEquals("vI", document0.location());
      assertEquals("vI", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("vI", tag0.toString());
      assertEquals("vI", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("vI", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("vI", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(5, attributes0.size());
      assertEquals(5, attributes1.size());
      assertEquals("odd", attribute0.getKey());
      assertEquals("^~&tD&", attribute0.getValue());
      assertEquals(5, attributes2.size());
      assertEquals(5, attributes3.size());
      assertEquals(1, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertTrue(pseudoTextElement0.hasParent());
      assertEquals("vI", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("vI", pseudoTextElement0.baseUri());
      assertEquals("vI", pseudoTextElement0.tagName());
      assertEquals("vI", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("vI", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("vI", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("vI", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("vI", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("vI", element1.tagName());
      assertNotNull(document1);
      assertFalse(tag0.equals((Object)tag1));
      
      Element element5 = element1.nextElementSibling();
      assertSame(document0, document1);
      assertNotSame(tag0, tag1);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertSame(pseudoTextElement0, element3);
      assertSame(pseudoTextElement0, element2);
      assertSame(pseudoTextElement0, element1);
      assertSame(pseudoTextElement0, element0);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element0, pseudoTextElement0);
      assertSame(element1, pseudoTextElement0);
      assertSame(element1, element0);
      assertSame(element1, element3);
      assertSame(element1, element2);
      assertEquals("vI", document0.location());
      assertEquals("vI", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("vI", tag0.toString());
      assertEquals("vI", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(5, attributes0.size());
      assertEquals(5, attributes1.size());
      assertEquals("odd", attribute0.getKey());
      assertEquals("^~&tD&", attribute0.getValue());
      assertEquals(5, attributes2.size());
      assertEquals(5, attributes3.size());
      assertEquals(1, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertTrue(pseudoTextElement0.hasParent());
      assertEquals("vI", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("vI", pseudoTextElement0.baseUri());
      assertEquals("vI", pseudoTextElement0.tagName());
      assertEquals("vI", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("vI", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("vI", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("vI", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("vI", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("vI", element1.tagName());
      assertNull(element5);
      assertFalse(tag0.equals((Object)tag1));
      
      Elements elements0 = document1.getElementsByIndexEquals((-415));
      assertSame(document0, document1);
      assertNotSame(tag0, tag1);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertSame(pseudoTextElement0, element3);
      assertSame(pseudoTextElement0, element2);
      assertSame(pseudoTextElement0, element1);
      assertSame(pseudoTextElement0, element0);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element0, pseudoTextElement0);
      assertSame(element1, pseudoTextElement0);
      assertSame(element1, element0);
      assertSame(element1, element3);
      assertSame(element1, element2);
      assertSame(document1, document0);
      assertEquals("vI", document0.location());
      assertEquals("vI", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("vI", tag0.toString());
      assertEquals("vI", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(5, attributes0.size());
      assertEquals(5, attributes1.size());
      assertEquals("odd", attribute0.getKey());
      assertEquals("^~&tD&", attribute0.getValue());
      assertEquals(5, attributes2.size());
      assertEquals(5, attributes3.size());
      assertEquals(1, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertTrue(pseudoTextElement0.hasParent());
      assertEquals("vI", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("vI", pseudoTextElement0.baseUri());
      assertEquals("vI", pseudoTextElement0.tagName());
      assertEquals("vI", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("vI", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("vI", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("vI", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("vI", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("vI", element1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("vI", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("vI", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(tag0.equals((Object)tag1));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("vI", "vI");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("vI", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("vI", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("vI", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("vI", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("vI", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertNotNull(element0);
      
      String string0 = element0.cssSelector();
      assertEquals("html > body", string0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("vI", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("vI", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("vI", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertNotNull(string0);
      
      Elements elements0 = document0.getElementsMatchingText("4+6<@~5e8a+v");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("vI", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("vI", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      String string1 = document0.data();
      assertEquals("", string1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("vI", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("vI", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Element element1 = document0.head();
      assertNotSame(element1, element0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("vI", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("vI", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertEquals("vI", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      
      Element element2 = document0.body();
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("vI", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("vI", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("body", element2.tagName());
      assertEquals(1, element2.childNodeSize());
      assertEquals(1, element2.siblingIndex());
      assertEquals("vI", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals("body", element2.nodeName());
      assertTrue(element2.isBlock());
      assertNotNull(element2);
      assertFalse(element2.equals((Object)element1));
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Element element3 = element2.append("");
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertSame(element2, element3);
      assertNotSame(element3, element1);
      assertSame(element3, element2);
      assertSame(element3, element0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("vI", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("vI", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("body", element2.tagName());
      assertEquals(1, element2.childNodeSize());
      assertEquals(1, element2.siblingIndex());
      assertEquals("vI", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals("body", element2.nodeName());
      assertTrue(element2.isBlock());
      assertEquals("vI", element3.baseUri());
      assertEquals(1, element3.childNodeSize());
      assertTrue(element3.isBlock());
      assertEquals(1, element3.siblingIndex());
      assertEquals("body", element3.tagName());
      assertTrue(element3.hasParent());
      assertEquals("body", element3.nodeName());
      assertNotNull(element3);
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element1));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "org.jsoup.nodes.Element$1";
      Element element0 = new Element("org.jsoup.nodes.Element$1");
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("org.jsoup.nodes.Element$1", element0.nodeName());
      assertNotNull(element0);
      
      String string1 = element0.wholeText();
      assertEquals("", string1);
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("org.jsoup.nodes.Element$1", element0.nodeName());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Node node0 = element0.previousSibling();
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("org.jsoup.nodes.Element$1", element0.nodeName());
      assertNull(node0);
      
      Elements elements0 = element0.getElementsByIndexGreaterThan(1311);
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("org.jsoup.nodes.Element$1", element0.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element1 = element0.text("");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("org.jsoup.nodes.Element$1", element0.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals("org.jsoup.nodes.Element$1", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertNotNull(element1);
      
      // Undeclared exception!
      try { 
        element0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">tyb^u){lq_", ">tyb^u){lq_");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(">tyb^u){lq_", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(">tyb^u){lq_", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      String string0 = parseSettings0.normalizeTag("tetarea");
      assertEquals("tetarea", string0);
      assertNotNull(string0);
      
      Attribute attribute0 = new Attribute("ZTyLxjtzg(08%Ba5", "Nxb2g3=Gh^3h+");
      assertEquals("ZTyLxjtzg(08%Ba5", attribute0.getKey());
      assertEquals("Nxb2g3=Gh^3h+", attribute0.getValue());
      assertNotNull(attribute0);
      
      CDataNode cDataNode0 = new CDataNode("tetarea");
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      String string1 = parseSettings0.normalizeTag("font");
      assertEquals("font", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals("ZTyLxjtzg(08%Ba5", attribute0.getKey());
      assertEquals("Nxb2g3=Gh^3h+", attribute0.getValue());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertNotNull(attributes1);
      
      Attributes attributes2 = attributes1.put("tetarea", true);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertEquals("ZTyLxjtzg(08%Ba5", attribute0.getKey());
      assertEquals("Nxb2g3=Gh^3h+", attribute0.getValue());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals(3, attributes2.size());
      assertNotNull(attributes2);
      
      Document document1 = Parser.parseBodyFragment("<s", "gq4");
      assertNotSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("gq4", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("gq4", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Element element0 = document1.appendElement("gq4");
      assertNotSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("gq4", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("gq4", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("gq4", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("gq4", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("gq4", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      assertFalse(document1.equals((Object)document0));
      
      String string2 = document1.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<gq4></gq4>", string2);
      assertNotSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("gq4", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("gq4", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertNotNull(string2);
      assertFalse(document1.equals((Object)document0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      StringBuffer stringBuffer0 = new StringBuffer("FJX");
      assertEquals("FJX", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(true);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings2);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings3);
      
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(stringBuffer0, (-1798), document_OutputSettings3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("169{b_g-b\"Z\"3x1^G}", false);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      String string0 = parseSettings0.normalizeTag("]1%U");
      assertEquals("]1%U", string0);
      assertNotNull(string0);
      
      Attribute attribute0 = new Attribute("]1%U", "option");
      assertEquals("]1%U", attribute0.getKey());
      assertEquals("option", attribute0.getValue());
      assertNotNull(attribute0);
      
      Attributes attributes2 = attributes0.put("option", false);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes2.size());
      assertNotNull(attributes2);
      
      Document document0 = Parser.parseBodyFragment("169{b_g-b\"Z\"3x1^G}", "option");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("option", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("option", document0.location());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("option", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("option", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("option", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = document0.head();
      assertNotSame(element1, element0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("option", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("option", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("option", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      
      Element element2 = element1.appendTo(element0);
      assertNotSame(element0, element1);
      assertNotSame(element0, element2);
      assertSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(element2, element0);
      assertSame(element2, element1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("option", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("option", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("option", element0.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("option", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("head", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.nodeName());
      assertEquals(1, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("option", element2.baseUri());
      assertNotNull(element2);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Elements elements0 = document0.getElementsMatchingText("6");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("option", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("option", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string1 = document0.data();
      assertEquals("", string1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("option", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("option", document0.location());
      assertEquals("#root", document0.tagName());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Element element3 = element2.before("169{b_g-b\"Z\"3x1^G}");
      assertNotSame(element0, element1);
      assertNotSame(element0, element3);
      assertNotSame(element0, element2);
      assertSame(element1, element2);
      assertNotSame(element1, element0);
      assertSame(element1, element3);
      assertSame(element2, element3);
      assertNotSame(element2, element0);
      assertSame(element2, element1);
      assertNotSame(element3, element0);
      assertSame(element3, element1);
      assertSame(element3, element2);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("option", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("option", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(3, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("option", element0.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.siblingIndex());
      assertEquals("option", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("head", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.nodeName());
      assertEquals(2, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("option", element2.baseUri());
      assertEquals("option", element3.baseUri());
      assertTrue(element3.hasParent());
      assertEquals(2, element3.siblingIndex());
      assertTrue(element3.isBlock());
      assertEquals("head", element3.nodeName());
      assertEquals(0, element3.childNodeSize());
      assertEquals("head", element3.tagName());
      assertNotNull(element3);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element3.equals((Object)element0));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "U4)9T[rb0T+";
      String string1 = "AWDq%=I";
      Document document0 = Parser.parseBodyFragment("U4)9T[rb0T+", "AWDq%=I");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("AWDq%=I", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("AWDq%=I", document0.location());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("AWDq%=I", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("AWDq%=I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("AWDq%=I", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("AWDq%=I", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Element element0 = document0.head();
      assertNotSame(document0, document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("AWDq%=I", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("AWDq%=I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("AWDq%=I", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document1));
      
      Elements elements0 = element0.getElementsByAttribute("AWDq%=I");
      assertNotSame(document0, document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("AWDq%=I", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("AWDq%=I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("AWDq%=I", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      
      String string2 = element0.text();
      assertEquals("", string2);
      assertNotSame(document0, document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("AWDq%=I", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("AWDq%=I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("AWDq%=I", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertNotNull(string2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Element element1 = (Element)element0.removeAttr("U4)9T[rb0T+");
      assertNotSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("AWDq%=I", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("AWDq%=I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("AWDq%=I", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("AWDq%=I", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document1));
      
      Element element2 = element1.before((Node) document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("AWDq%=I", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("AWDq%=I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("AWDq%=I", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("AWDq%=I", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("AWDq%=I", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("AWDq%=I", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.tagName());
      assertEquals(0, element2.childNodeSize());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals("AWDq%=I", element2.baseUri());
      assertNotNull(element2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      
      // Undeclared exception!
      try { 
        element0.replaceChild(document1, element1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      
      String string0 = element0.cssSelector();
      assertEquals("html > head", string0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertNotNull(string0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains(""));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Element element1 = element0.classNames((Set<String>) linkedHashSet0);
      assertFalse(linkedHashSet0.contains(""));
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">tyb^u){lq_", ">tyb^u){lq_");
      assertEquals(0, document0.siblingIndex());
      assertEquals(">tyb^u){lq_", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(">tyb^u){lq_", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertEquals(0, document0.siblingIndex());
      assertEquals(">tyb^u){lq_", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(">tyb^u){lq_", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(">tyb^u){lq_", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertNotNull(element0);
      
      Document document1 = Document.createShell("id");
      assertNotSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("id", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("id", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document0.appendChild(document1);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals(">tyb^u){lq_", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(">tyb^u){lq_", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("id", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("id", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertEquals(">tyb^u){lq_", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(">tyb^u){lq_", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      document1.reparentChild(document2);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals(">tyb^u){lq_", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(">tyb^u){lq_", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("id", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("id", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(">tyb^u){lq_", document2.location());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(">tyb^u){lq_", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      Elements elements0 = document0.getElementsContainingOwnText("id");
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals(">tyb^u){lq_", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(">tyb^u){lq_", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      
      // Undeclared exception!
      document1.is("id");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parse(">tyb^u){lq_", ">tyb^u){lq_");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(">tyb^u){lq_", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(">tyb^u){lq_", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass(">tyb^u){lq_");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(">tyb^u){lq_", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(">tyb^u){lq_", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(">tyb^u){lq_", document1.location());
      assertEquals(">tyb^u){lq_", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      
      Document document2 = document1.normalise();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(">tyb^u){lq_", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(">tyb^u){lq_", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(">tyb^u){lq_", document1.location());
      assertEquals(">tyb^u){lq_", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(">tyb^u){lq_", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(">tyb^u){lq_", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      
      Document document3 = (Document)document2.appendTo(document1);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(">tyb^u){lq_", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(">tyb^u){lq_", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(">tyb^u){lq_", document1.location());
      assertEquals(">tyb^u){lq_", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(">tyb^u){lq_", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(">tyb^u){lq_", document2.baseUri());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(">tyb^u){lq_", document3.location());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(">tyb^u){lq_", document3.baseUri());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertNotNull(document3);
      
      Elements elements0 = document0.nextElementSiblings();
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(">tyb^u){lq_", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(">tyb^u){lq_", document0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document4 = (Document)document3.doClone(document0);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document4);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertNotSame(document3, document4);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(">tyb^u){lq_", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(">tyb^u){lq_", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(">tyb^u){lq_", document1.location());
      assertEquals(">tyb^u){lq_", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(">tyb^u){lq_", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(">tyb^u){lq_", document2.baseUri());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(">tyb^u){lq_", document3.location());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(">tyb^u){lq_", document3.baseUri());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertTrue(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(">tyb^u){lq_", document4.location());
      assertEquals(2, document4.childNodeSize());
      assertEquals(">tyb^u){lq_", document4.baseUri());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertNotNull(document4);
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      
      boolean boolean0 = Element.preserveWhitespace(document0);
      assertFalse(boolean0);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(">tyb^u){lq_", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(">tyb^u){lq_", document0.baseUri());
      assertFalse(document0.equals((Object)document4));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = new Document("org.jsoup.nodes.Element$NodeList");
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertNotNull(document0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("org.jsoup.nodes.Element$NodeList"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add((String) null);
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.contains("org.jsoup.nodes.Element$NodeList"));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Tag tag0 = Tag.valueOf("'zy`F5.");
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("'zy`F5.", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals("'zy`F5.", tag0.toString());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("'zy`F5.", false);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      String string0 = parseSettings0.normalizeTag("]1%U");
      assertEquals("]1%U", string0);
      assertNotNull(string0);
      
      Tag tag1 = Tag.valueOf("colgroup", parseSettings0);
      assertNotSame(tag1, tag0);
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isInline());
      assertFalse(tag1.isData());
      assertFalse(tag1.isFormListed());
      assertEquals("colgroup", tag1.toString());
      assertEquals("colgroup", tag1.getName());
      assertTrue(tag1.isBlock());
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isEmpty());
      assertTrue(tag1.canContainBlock());
      assertTrue(tag1.formatAsBlock());
      assertTrue(tag1.isKnownTag());
      assertNotNull(tag1);
      assertFalse(tag1.equals((Object)tag0));
      
      Attribute attribute0 = new Attribute("]1%U", "option");
      assertEquals("]1%U", attribute0.getKey());
      assertEquals("option", attribute0.getValue());
      assertNotNull(attribute0);
      
      Attributes attributes2 = attributes1.put(attribute0);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("]1%U", attribute0.getKey());
      assertEquals("option", attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      
      FormElement formElement0 = new FormElement(tag0, "'zy`F5.", attributes2);
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("'zy`F5.", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals("'zy`F5.", tag0.toString());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("]1%U", attribute0.getKey());
      assertEquals("option", attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("'zy`F5.", formElement0.tagName());
      assertEquals("'zy`F5.", formElement0.baseUri());
      assertEquals("'zy`F5.", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertNotNull(formElement0);
      assertFalse(tag0.equals((Object)tag1));
      
      Document document0 = Parser.parseBodyFragment("'zy`F5.", "option");
      assertEquals(0, document0.siblingIndex());
      assertEquals("option", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("option", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      FormElement formElement1 = new FormElement(tag1, "'zy`F5.", attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isInline());
      assertFalse(tag1.isData());
      assertFalse(tag1.isFormListed());
      assertEquals("colgroup", tag1.toString());
      assertEquals("colgroup", tag1.getName());
      assertTrue(tag1.isBlock());
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isEmpty());
      assertTrue(tag1.canContainBlock());
      assertTrue(tag1.formatAsBlock());
      assertTrue(tag1.isKnownTag());
      assertEquals("]1%U", attribute0.getKey());
      assertEquals("option", attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertEquals("colgroup", formElement1.nodeName());
      assertTrue(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("colgroup", formElement1.tagName());
      assertEquals("'zy`F5.", formElement1.baseUri());
      assertFalse(formElement1.hasParent());
      assertNotNull(formElement1);
      assertFalse(tag1.equals((Object)tag0));
      assertFalse(formElement1.equals((Object)formElement0));
      
      Element element0 = formElement1.prependText("]1%U");
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(tag1, tag0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(formElement1, element0);
      assertNotSame(formElement1, formElement0);
      assertSame(element0, formElement1);
      assertNotSame(element0, formElement0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isInline());
      assertFalse(tag1.isData());
      assertFalse(tag1.isFormListed());
      assertEquals("colgroup", tag1.toString());
      assertEquals("colgroup", tag1.getName());
      assertTrue(tag1.isBlock());
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isEmpty());
      assertTrue(tag1.canContainBlock());
      assertTrue(tag1.formatAsBlock());
      assertTrue(tag1.isKnownTag());
      assertEquals("]1%U", attribute0.getKey());
      assertEquals("option", attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertEquals("colgroup", formElement1.nodeName());
      assertTrue(formElement1.isBlock());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("colgroup", formElement1.tagName());
      assertEquals("'zy`F5.", formElement1.baseUri());
      assertFalse(formElement1.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("colgroup", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("'zy`F5.", element0.baseUri());
      assertEquals("colgroup", element0.tagName());
      assertTrue(element0.isBlock());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      assertFalse(tag1.equals((Object)tag0));
      assertFalse(formElement1.equals((Object)formElement0));
      assertFalse(element0.equals((Object)formElement0));
      
      Document document1 = Parser.parseBodyFragment("'zy`F5.", "br");
      assertNotSame(document1, document0);
      assertEquals("#root", document1.tagName());
      assertEquals("br", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("br", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      boolean boolean0 = formElement0.hasClass("]1%U");
      assertFalse(boolean0);
      assertNotSame(tag0, tag1);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(formElement0, formElement1);
      assertNotSame(formElement0, element0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("'zy`F5.", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals("'zy`F5.", tag0.toString());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("]1%U", attribute0.getKey());
      assertEquals("option", attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("'zy`F5.", formElement0.tagName());
      assertEquals("'zy`F5.", formElement0.baseUri());
      assertEquals("'zy`F5.", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(tag0.equals((Object)tag1));
      assertFalse(formElement0.equals((Object)formElement1));
      assertFalse(formElement0.equals((Object)element0));
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "</");
      assertFalse(boolean0);
      
      Document document1 = (Document)document0.appendChild(element0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      element0.reparentChild(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      
      Element element1 = element0.shallowClone();
      assertSame(document0, document1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = new Document("`A$p|JuM");
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("`A$p|JuM", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`A$p|JuM", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Tag tag0 = Tag.valueOf("`A$p|JuM");
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertEquals("`A$p|JuM", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("`A$p|JuM", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Element element0 = new Element(tag0, "`A$p|JuM", attributes0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertEquals("`A$p|JuM", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("`A$p|JuM", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("`A$p|JuM", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("`A$p|JuM", element0.tagName());
      assertEquals("`A$p|JuM", element0.baseUri());
      assertNotNull(element0);
      
      document0.setParentNode(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("`A$p|JuM", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`A$p|JuM", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertEquals("`A$p|JuM", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("`A$p|JuM", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("`A$p|JuM", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("`A$p|JuM", element0.tagName());
      assertEquals("`A$p|JuM", element0.baseUri());
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors(28);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertNotNull(parser1);
      
      Document document1 = document0.parser(parser1);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("`A$p|JuM", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`A$p|JuM", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals("`A$p|JuM", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("`A$p|JuM", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      Document document2 = (Document)document1.doClone(element0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("`A$p|JuM", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`A$p|JuM", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertEquals("`A$p|JuM", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("`A$p|JuM", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("`A$p|JuM", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("`A$p|JuM", element0.tagName());
      assertEquals("`A$p|JuM", element0.baseUri());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals("`A$p|JuM", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("`A$p|JuM", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("`A$p|JuM", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("`A$p|JuM", document2.location());
      assertEquals(0, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      boolean boolean1 = document1.hasText();
      assertFalse(boolean1);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("`A$p|JuM", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`A$p|JuM", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals("`A$p|JuM", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("`A$p|JuM", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertTrue(boolean1 == boolean0);
      
      List<Node> list0 = parser0.parseFragmentInput("br", document0, "dt5D\u0004@");
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(parser0, parser1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("`A$p|JuM", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`A$p|JuM", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(parser0.isTrackErrors());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document2));
      
      boolean boolean2 = document2.hasClass("CONTINUE");
      assertFalse(boolean2);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("`A$p|JuM", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`A$p|JuM", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertEquals("`A$p|JuM", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("`A$p|JuM", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("`A$p|JuM", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("`A$p|JuM", element0.tagName());
      assertEquals("`A$p|JuM", element0.baseUri());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals("`A$p|JuM", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("`A$p|JuM", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("`A$p|JuM", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("`A$p|JuM", document2.location());
      assertEquals(0, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Element element1 = document1.shallowClone();
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(element1, element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("`A$p|JuM", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`A$p|JuM", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals("`A$p|JuM", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("`A$p|JuM", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", element1.tagName());
      assertEquals("#root", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("`A$p|JuM", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(element1.equals((Object)element0));
      
      Element element2 = document1.wrap("`A$p|JuM");
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("`A$p|JuM", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`A$p|JuM", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals("`A$p|JuM", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("`A$p|JuM", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNull(element2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      
      List<TextNode> list1 = element0.textNodes();
      assertNotSame(element0, element1);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertEquals("`A$p|JuM", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("`A$p|JuM", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("`A$p|JuM", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("`A$p|JuM", element0.tagName());
      assertEquals("`A$p|JuM", element0.baseUri());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertFalse(element0.equals((Object)element1));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "'zy`F5.";
      Tag tag0 = Tag.valueOf("'zy`F5.");
      assertFalse(tag0.isKnownTag());
      assertEquals("'zy`F5.", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals("'zy`F5.", tag0.toString());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("'zy`F5.", false);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      String string1 = parseSettings0.normalizeTag("]1%U");
      assertEquals("]1%U", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Tag tag1 = Tag.valueOf("colgroup", parseSettings0);
      assertNotSame(tag1, tag0);
      assertFalse(tag1.preserveWhitespace());
      assertTrue(tag1.isBlock());
      assertFalse(tag1.isInline());
      assertEquals("colgroup", tag1.toString());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isFormSubmittable());
      assertEquals("colgroup", tag1.getName());
      assertTrue(tag1.canContainBlock());
      assertTrue(tag1.isKnownTag());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.isData());
      assertNotNull(tag1);
      assertFalse(tag1.equals((Object)tag0));
      
      Attribute attribute0 = new Attribute("]1%U", "option");
      assertEquals("]1%U", attribute0.getKey());
      assertEquals("option", attribute0.getValue());
      assertNotNull(attribute0);
      
      Attributes attributes2 = attributes1.put(attribute0);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("]1%U", attribute0.getKey());
      assertEquals("option", attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      
      FormElement formElement0 = new FormElement(tag0, "'zy`F5.", attributes2);
      assertFalse(tag0.isKnownTag());
      assertEquals("'zy`F5.", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals("'zy`F5.", tag0.toString());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("]1%U", attribute0.getKey());
      assertEquals("option", attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertFalse(formElement0.hasParent());
      assertEquals("'zy`F5.", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("'zy`F5.", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("'zy`F5.", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertNotNull(formElement0);
      assertFalse(tag0.equals((Object)tag1));
      
      Document document0 = Parser.parseBodyFragment("'zy`F5.", "option");
      assertEquals("option", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("option", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      FormElement formElement1 = formElement0.addElement(document0);
      assertNotSame(tag0, tag1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.isKnownTag());
      assertEquals("'zy`F5.", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals("'zy`F5.", tag0.toString());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("]1%U", attribute0.getKey());
      assertEquals("option", attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertFalse(formElement0.hasParent());
      assertEquals("'zy`F5.", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("'zy`F5.", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("'zy`F5.", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("option", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("option", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(formElement1.hasParent());
      assertEquals("'zy`F5.", formElement1.baseUri());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.isBlock());
      assertEquals("'zy`F5.", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("'zy`F5.", formElement1.tagName());
      assertNotNull(formElement1);
      assertFalse(tag0.equals((Object)tag1));
      
      Element element0 = formElement1.prependText("]1%U");
      assertNotSame(tag0, tag1);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(formElement0, formElement1);
      assertSame(formElement0, element0);
      assertSame(formElement1, formElement0);
      assertSame(formElement1, element0);
      assertSame(element0, formElement0);
      assertSame(element0, formElement1);
      assertFalse(tag0.isKnownTag());
      assertEquals("'zy`F5.", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals("'zy`F5.", tag0.toString());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("]1%U", attribute0.getKey());
      assertEquals("option", attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertFalse(formElement0.hasParent());
      assertEquals("'zy`F5.", formElement0.baseUri());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("'zy`F5.", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("'zy`F5.", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("option", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("option", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(formElement1.hasParent());
      assertEquals("'zy`F5.", formElement1.baseUri());
      assertEquals(1, formElement1.childNodeSize());
      assertFalse(formElement1.isBlock());
      assertEquals("'zy`F5.", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("'zy`F5.", formElement1.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("'zy`F5.", element0.tagName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("'zy`F5.", element0.baseUri());
      assertEquals("'zy`F5.", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertNotNull(element0);
      assertFalse(tag0.equals((Object)tag1));
      
      Element element1 = document0.appendElement("br");
      assertEquals("option", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("option", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("br", element1.tagName());
      assertEquals("option", element1.baseUri());
      assertEquals("br", element1.nodeName());
      assertNotNull(element1);
      
      String string2 = "^Hft[AZ-l>E]tb";
      String string3 = element1.toString();
      assertEquals("<br>", string3);
      assertEquals("option", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("option", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("br", element1.tagName());
      assertEquals("option", element1.baseUri());
      assertEquals("br", element1.nodeName());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        formElement1.after((Node) formElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      String string0 = element0.cssSelector();
      assertEquals("html > head", string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(string0);
      
      Elements elements0 = document0.getElementsMatchingText("");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertNotNull(elements0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = document0.data();
      assertEquals("", string1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Elements elements1 = element0.nextElementSiblings();
      assertNotSame(elements1, elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = ">tyb\\^u){lq_";
      Document document0 = new Document(">tyb^u){lq_");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals(">tyb^u){lq_", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(">tyb^u){lq_", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass(">tyb^u){lq_");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals(">tyb^u){lq_", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(">tyb^u){lq_", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(">tyb^u){lq_", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(">tyb^u){lq_", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      Document document2 = document1.normalise();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(">tyb^u){lq_", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(">tyb^u){lq_", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(">tyb^u){lq_", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(">tyb^u){lq_", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(">tyb^u){lq_", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(">tyb^u){lq_", document2.baseUri());
      assertNotNull(document2);
      
      Document document3 = (Document)document2.appendTo(document1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(">tyb^u){lq_", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(">tyb^u){lq_", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(">tyb^u){lq_", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(">tyb^u){lq_", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals(">tyb^u){lq_", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(">tyb^u){lq_", document2.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(">tyb^u){lq_", document3.baseUri());
      assertEquals(1, document3.siblingIndex());
      assertTrue(document3.hasParent());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(">tyb^u){lq_", document3.location());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      
      // Undeclared exception!
      document1.prependElement("iL__twc8`C-uu");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.Token$Comment", "org.jsoup.parser.Token$Comment");
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Comment", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Comment", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("org.jsoup.parser.Token$Comment");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Comment", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Comment", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      Elements elements0 = document0.getElementsByAttribute("^Hft[AZ-l>E]tb");
      assertSame(document0, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Comment", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Comment", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = document1.parents();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Comment", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Comment", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      
      Document document2 = (Document)document1.appendTo(document0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Comment", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Comment", document2.location());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("org.jsoup.parser.Token$Comment", document2.baseUri());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      
      Elements elements2 = document1.previousElementSiblings();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Comment", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(elements2.isEmpty());
      assertEquals(1, elements2.size());
      assertNotNull(elements2);
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      
      boolean boolean0 = document0.hasClass("^Hft[AZ-l>E]tb");
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Comment", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document3 = (Document)document2.parent();
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Comment", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Comment", document2.location());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("org.jsoup.parser.Token$Comment", document2.baseUri());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Comment", document3.location());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertNotNull(document3);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("</", "</");
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Tag tag0 = Tag.valueOf("</");
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("</", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertEquals("</", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attribute attribute0 = new Attribute("7g {d'68", "</", attributes0);
      assertEquals(0, attributes0.size());
      assertEquals("7g {d'68", attribute0.getKey());
      assertEquals("</", attribute0.getValue());
      assertNotNull(attribute0);
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals("7g {d'68", attribute0.getKey());
      assertEquals("</", attribute0.getValue());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      
      FormElement formElement0 = new FormElement(tag0, "</", attributes1);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("</", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertEquals("</", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals(1, attributes0.size());
      assertEquals("7g {d'68", attribute0.getKey());
      assertEquals("</", attribute0.getValue());
      assertEquals(1, attributes1.size());
      assertEquals("</", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("</", formElement0.nodeName());
      assertEquals("</", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertNotNull(formElement0);
      
      FormElement formElement1 = (FormElement)formElement0.val((String) null);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("</", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertEquals("</", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals(2, attributes0.size());
      assertEquals("7g {d'68", attribute0.getKey());
      assertEquals("</", attribute0.getValue());
      assertEquals(2, attributes1.size());
      assertEquals("</", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("</", formElement0.nodeName());
      assertEquals("</", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("</", formElement1.tagName());
      assertEquals("</", formElement1.baseUri());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("</", formElement1.nodeName());
      assertFalse(formElement1.isBlock());
      assertNotNull(formElement1);
      
      StringBuilder stringBuilder0 = new StringBuilder("</");
      assertEquals("</", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      // Undeclared exception!
      try { 
        formElement1.outerHtmlHead(stringBuilder0, (-3919), (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      TextNode textNode0 = new TextNode("", "");
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Document document1 = (Document)document0.appendChild(textNode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertTrue(textNode0.hasParent());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertNotNull(document1);
      
      document1.reparentChild(document0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertTrue(textNode0.hasParent());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      
      Elements elements0 = document0.getElementsContainingOwnText("");
      assertSame(document0, document1);
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertNotNull(elements0);
      
      Elements elements1 = document0.getElementsByIndexLessThan(846);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(elements1.isEmpty());
      assertEquals(3, elements1.size());
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      
      Document document2 = (Document)document0.appendText("</");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals("", document2.location());
      assertNotNull(document2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be evpty.");
      assertEquals("#document", document0.nodeName());
      assertEquals("Tag name must not be evpty.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be evpty.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("Tag name must not be evpty.");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("Tag name must not be evpty.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be evpty.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Tag name must not be evpty.", document1.location());
      assertEquals("Tag name must not be evpty.", document1.baseUri());
      assertNotNull(document1);
      
      Document document2 = (Document)document1.appendChild(document0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("Tag name must not be evpty.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be evpty.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Tag name must not be evpty.", document1.location());
      assertEquals("Tag name must not be evpty.", document1.baseUri());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("Tag name must not be evpty.", document2.baseUri());
      assertEquals("Tag name must not be evpty.", document2.location());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      // Undeclared exception!
      document0.append("Tag name must not be evpty.");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Tag tag0 = Tag.valueOf("(dt5Scs@");
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("(dt5Scs@", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("(dt5Scs@", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "(dt5Scs@", attributes0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("(dt5Scs@", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("(dt5Scs@", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertEquals("(dt5Scs@", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("(dt5Scs@", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("(dt5Scs@", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertNotNull(formElement0);
      
      String string0 = formElement0.val();
      assertEquals("", string0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("(dt5Scs@", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("(dt5Scs@", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertEquals("(dt5Scs@", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("(dt5Scs@", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("(dt5Scs@", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertNotNull(string0);
      
      Element element0 = formElement0.append("");
      assertSame(formElement0, element0);
      assertSame(element0, formElement0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("(dt5Scs@", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("(dt5Scs@", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertEquals("(dt5Scs@", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("(dt5Scs@", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("(dt5Scs@", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("(dt5Scs@", element0.baseUri());
      assertEquals("(dt5Scs@", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("(dt5Scs@", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      String string1 = element0.ownText();
      assertEquals("", string1);
      assertSame(formElement0, element0);
      assertSame(element0, formElement0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("(dt5Scs@", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("(dt5Scs@", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertEquals("(dt5Scs@", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("(dt5Scs@", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("(dt5Scs@", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("(dt5Scs@", element0.baseUri());
      assertEquals("(dt5Scs@", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("(dt5Scs@", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Tag tag0 = Tag.valueOf("(dt5Scs@");
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertEquals("(dt5Scs@", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("(dt5Scs@", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "(dt5Scs@", attributes0);
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertEquals("(dt5Scs@", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("(dt5Scs@", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals("(dt5Scs@", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("(dt5Scs@", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals("(dt5Scs@", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertNotNull(formElement0);
      
      String string0 = formElement0.val();
      assertEquals("", string0);
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertEquals("(dt5Scs@", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("(dt5Scs@", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals("(dt5Scs@", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("(dt5Scs@", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals("(dt5Scs@", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertNotNull(string0);
      
      MockPrintWriter mockPrintWriter0 = formElement0.html((MockPrintWriter) null);
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertEquals("(dt5Scs@", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("(dt5Scs@", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals("(dt5Scs@", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("(dt5Scs@", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals("(dt5Scs@", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertNull(mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";", ";");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(";", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(";", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode("Tag name must not be empty.");
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      Document document1 = (Document)document0.appendChild(cDataNode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(";", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(";", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, cDataNode0.siblingIndex());
      assertTrue(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(";", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(";", document1.location());
      assertNotNull(document1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Elements elements0 = document0.getElementsMatchingText("8");
      assertSame(document0, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(";", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(";", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string0 = document0.data();
      assertEquals("Tag name must not be empty.", string0);
      assertSame(document0, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(";", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(";", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertNotNull(string0);
      
      Attributes attributes0 = document0.attributes();
      assertSame(document0, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(";", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(";", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode("");
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      Document document1 = (Document)document0.appendChild(cDataNode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, cDataNode0.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Elements elements0 = document1.getElementsMatchingText("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, cDataNode0.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertNotNull(elements0);
      
      String string0 = document1.data();
      assertEquals("", string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, cDataNode0.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Tag tag0 = Tag.valueOf("?.");
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("?.", tag0.getName());
      assertEquals("?.", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      Tag tag1 = Tag.valueOf("p");
      assertNotSame(tag1, tag0);
      assertFalse(tag1.formatAsBlock());
      assertFalse(tag1.isSelfClosing());
      assertTrue(tag1.isKnownTag());
      assertTrue(tag1.isBlock());
      assertFalse(tag1.isInline());
      assertEquals("p", tag1.getName());
      assertFalse(tag1.preserveWhitespace());
      assertEquals("p", tag1.toString());
      assertTrue(tag1.canContainBlock());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isData());
      assertFalse(tag1.isEmpty());
      assertNotNull(tag1);
      assertFalse(tag1.equals((Object)tag0));
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)16}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Attribute attribute0 = new Attribute("org.jsoup.nodes.Element$NodeList", "?.");
      assertEquals("?.", attribute0.getValue());
      assertEquals("org.jsoup.nodes.Element$NodeList", attribute0.getKey());
      assertNotNull(attribute0);
      
      String string0 = attribute0.html();
      assertEquals("org.jsoup.nodes.Element$NodeList=\"?.\"", string0);
      assertEquals("?.", attribute0.getValue());
      assertEquals("org.jsoup.nodes.Element$NodeList", attribute0.getKey());
      assertNotNull(string0);
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals("?.", attribute0.getValue());
      assertEquals("org.jsoup.nodes.Element$NodeList", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.jsoup.nodes.Element$NodeList");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Attributes attributes2 = attributes1.put("N\"`t0]H", "l]Dmr");
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertEquals(2, attributes0.size());
      assertEquals("?.", attribute0.getValue());
      assertEquals("org.jsoup.nodes.Element$NodeList", attribute0.getKey());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertNotNull(attributes2);
      
      attributes2.putIgnoreCase("yS`d", "java.lang.s,ring@00000K0038");
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertEquals(3, attributes0.size());
      assertEquals("?.", attribute0.getValue());
      assertEquals("org.jsoup.nodes.Element$NodeList", attribute0.getKey());
      assertEquals(3, attributes1.size());
      assertEquals(3, attributes2.size());
      
      Attributes attributes3 = attributes2.put("Ad,Y:Z'1mx09SC", false);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertEquals(3, attributes0.size());
      assertEquals("?.", attribute0.getValue());
      assertEquals("org.jsoup.nodes.Element$NodeList", attribute0.getKey());
      assertEquals(3, attributes1.size());
      assertEquals(3, attributes2.size());
      assertEquals(3, attributes3.size());
      assertNotNull(attributes3);
      
      attributes3.putIgnoreCase("s+", "disabled");
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertEquals(4, attributes0.size());
      assertEquals("?.", attribute0.getValue());
      assertEquals("org.jsoup.nodes.Element$NodeList", attribute0.getKey());
      assertEquals(4, attributes1.size());
      assertEquals(4, attributes2.size());
      assertEquals(4, attributes3.size());
      
      FormElement formElement0 = new FormElement(tag0, "Ad,Y:Z'1mx09SC", attributes3);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("?.", tag0.getName());
      assertEquals("?.", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals(4, attributes0.size());
      assertEquals("?.", attribute0.getValue());
      assertEquals("org.jsoup.nodes.Element$NodeList", attribute0.getKey());
      assertEquals(4, attributes1.size());
      assertEquals(4, attributes2.size());
      assertEquals(4, attributes3.size());
      assertEquals("Ad,Y:Z'1mx09SC", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("?.", formElement0.tagName());
      assertEquals("?.", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertNotNull(formElement0);
      assertFalse(tag0.equals((Object)tag1));
      
      Elements elements0 = formElement0.getElementsByTag("org.jsoup.nodes.Element$NodeList");
      assertNotSame(tag0, tag1);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("?.", tag0.getName());
      assertEquals("?.", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals(4, attributes0.size());
      assertEquals("?.", attribute0.getValue());
      assertEquals("org.jsoup.nodes.Element$NodeList", attribute0.getKey());
      assertEquals(4, attributes1.size());
      assertEquals(4, attributes2.size());
      assertEquals(4, attributes3.size());
      assertEquals("Ad,Y:Z'1mx09SC", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("?.", formElement0.tagName());
      assertEquals("?.", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(tag0.equals((Object)tag1));
      
      Elements elements1 = formElement0.getElementsByAttributeValueMatching("data", (Pattern) null);
      assertNotSame(elements1, elements0);
      assertNotSame(tag0, tag1);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("?.", tag0.getName());
      assertEquals("?.", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals(4, attributes0.size());
      assertEquals("?.", attribute0.getValue());
      assertEquals("org.jsoup.nodes.Element$NodeList", attribute0.getKey());
      assertEquals(4, attributes1.size());
      assertEquals(4, attributes2.size());
      assertEquals(4, attributes3.size());
      assertEquals("Ad,Y:Z'1mx09SC", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("?.", formElement0.tagName());
      assertEquals("?.", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(tag0.equals((Object)tag1));
      
      Element element0 = formElement0.prependText("N\"`t0]H");
      assertNotSame(tag0, tag1);
      assertSame(element0, formElement0);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertSame(formElement0, element0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("?.", tag0.getName());
      assertEquals("?.", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals("Ad,Y:Z'1mx09SC", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("?.", element0.tagName());
      assertEquals("?.", element0.nodeName());
      assertEquals(4, attributes0.size());
      assertEquals("?.", attribute0.getValue());
      assertEquals("org.jsoup.nodes.Element$NodeList", attribute0.getKey());
      assertEquals(4, attributes1.size());
      assertEquals(4, attributes2.size());
      assertEquals(4, attributes3.size());
      assertEquals("Ad,Y:Z'1mx09SC", formElement0.baseUri());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("?.", formElement0.tagName());
      assertEquals("?.", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertNotNull(element0);
      assertFalse(tag0.equals((Object)tag1));
      
      Set<String> set0 = element0.classNames();
      assertFalse(set0.contains("l]Dmr"));
      assertNotSame(tag0, tag1);
      assertSame(element0, formElement0);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertSame(formElement0, element0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("?.", tag0.getName());
      assertEquals("?.", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals("Ad,Y:Z'1mx09SC", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("?.", element0.tagName());
      assertEquals("?.", element0.nodeName());
      assertEquals(4, attributes0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals("?.", attribute0.getValue());
      assertEquals("org.jsoup.nodes.Element$NodeList", attribute0.getKey());
      assertEquals(4, attributes1.size());
      assertEquals(4, attributes2.size());
      assertEquals(4, attributes3.size());
      assertEquals("Ad,Y:Z'1mx09SC", formElement0.baseUri());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("?.", formElement0.tagName());
      assertEquals("?.", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertNotNull(set0);
      assertFalse(tag0.equals((Object)tag1));
      
      String string1 = formElement0.className();
      assertEquals("", string1);
      assertNotSame(tag0, tag1);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertSame(formElement0, element0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("?.", tag0.getName());
      assertEquals("?.", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals(4, attributes0.size());
      assertEquals("?.", attribute0.getValue());
      assertEquals("org.jsoup.nodes.Element$NodeList", attribute0.getKey());
      assertEquals(4, attributes1.size());
      assertEquals(4, attributes2.size());
      assertEquals(4, attributes3.size());
      assertEquals("Ad,Y:Z'1mx09SC", formElement0.baseUri());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("?.", formElement0.tagName());
      assertEquals("?.", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertNotNull(string1);
      assertFalse(tag0.equals((Object)tag1));
      assertFalse(string1.equals((Object)string0));
      
      Map<String, String> map0 = formElement0.dataset();
      assertNotSame(tag0, tag1);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertSame(formElement0, element0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("?.", tag0.getName());
      assertEquals("?.", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals(4, attributes0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("?.", attribute0.getValue());
      assertEquals("org.jsoup.nodes.Element$NodeList", attribute0.getKey());
      assertEquals(4, attributes1.size());
      assertEquals(4, attributes2.size());
      assertEquals(4, attributes3.size());
      assertEquals("Ad,Y:Z'1mx09SC", formElement0.baseUri());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("?.", formElement0.tagName());
      assertEquals("?.", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertNotNull(map0);
      assertFalse(tag0.equals((Object)tag1));
      
      String string2 = formElement0.ownText();
      assertEquals("N\"`t0]H", string2);
      assertNotSame(tag0, tag1);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertSame(formElement0, element0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("?.", tag0.getName());
      assertEquals("?.", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals(4, attributes0.size());
      assertEquals("?.", attribute0.getValue());
      assertEquals("org.jsoup.nodes.Element$NodeList", attribute0.getKey());
      assertEquals(4, attributes1.size());
      assertEquals(4, attributes2.size());
      assertEquals(4, attributes3.size());
      assertEquals("Ad,Y:Z'1mx09SC", formElement0.baseUri());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("?.", formElement0.tagName());
      assertEquals("?.", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertNotNull(string2);
      assertFalse(tag0.equals((Object)tag1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Tag tag0 = Tag.valueOf("(dt5Scs@");
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("(dt5Scs@", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("(dt5Scs@", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(dt5Scs@";
      stringArray0[1] = "(dt5Scs@";
      stringArray0[2] = "(dt5Scs@";
      attributes0.keys = stringArray0;
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "(dt5Scs@", attributes0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("(dt5Scs@", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("(dt5Scs@", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals(0, attributes0.size());
      assertEquals("(dt5Scs@", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("(dt5Scs@", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("(dt5Scs@", formElement0.tagName());
      assertNotNull(formElement0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f!0j");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        formElement0.val("(dt5Scs@");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = new Document("");
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document0);
      
      TextNode textNode0 = new TextNode("", "");
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Document document1 = Parser.parseBodyFragmentRelaxed("", "");
      assertNotSame(document1, document0);
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Elements elements0 = document1.getElementsByIndexEquals(1387);
      assertNotSame(document1, document0);
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(document1.equals((Object)document0));
      
      document1.reparentChild(document0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      
      Elements elements1 = document1.getElementsMatchingText("org.jsoup.nodes.Element");
      assertNotSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertFalse(document1.equals((Object)document0));
      assertTrue(elements1.equals((Object)elements0));
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotSame(document0, document1);
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document1));
      
      Document document2 = (Document)document0.attr("org.jsoup.nodes.Element", "");
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("", document2.location());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragment("", "");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode("");
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      Document document1 = (Document)document0.appendChild(cDataNode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertTrue(cDataNode0.hasParent());
      assertEquals(1, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      cDataNode0.value = object0;
      assertTrue(cDataNode0.hasParent());
      assertEquals(1, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        document1.getElementsMatchingText("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      TextNode textNode0 = new TextNode("", "");
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Document document1 = (Document)document0.appendChild(textNode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(textNode0.hasParent());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertNotNull(document1);
      
      document1.reparentChild(document0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(textNode0.hasParent());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.Element", (-2));
      assertEquals((-2), pattern0.flags());
      assertEquals("org.jsoup.nodes.Element", pattern0.toString());
      assertEquals("org.jsoup.nodes.Element", pattern0.pattern());
      assertNotNull(pattern0);
      
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      assertSame(document0, document1);
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals((-2), pattern0.flags());
      assertEquals("org.jsoup.nodes.Element", pattern0.toString());
      assertEquals("org.jsoup.nodes.Element", pattern0.pattern());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      boolean boolean0 = document1.hasText();
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(textNode0.hasParent());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      
      Elements elements1 = document1.getElementsMatchingText("org.jsoup.nodes.Element");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(textNode0.hasParent());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      
      String string0 = document0.cssSelector();
      assertEquals("#root", string0);
      assertSame(document0, document1);
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertNotNull(string0);
      
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("org.jsoup.nodes.Element");
      assertNotNull(evaluator_ContainsOwnText0);
      
      // Undeclared exception!
      document1.is((Evaluator) evaluator_ContainsOwnText0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("</", document3.location());
      assertTrue(document3.hasParent());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      document1.siblingIndex = 32;
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.location());
      assertEquals(32, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Element element0 = new Element("</");
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.tagName());
      assertEquals("</", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.attr("5W[6n", "5W[6n");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.tagName());
      assertEquals("</", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals("</", element1.tagName());
      assertEquals("</", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
      
      Element element2 = element0.appendTo(document3);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.location());
      assertEquals(32, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.baseUri());
      assertEquals(32, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("</", document3.location());
      assertTrue(document3.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("</", element0.tagName());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element2.isBlock());
      assertEquals(1, element2.siblingIndex());
      assertEquals("</", element2.tagName());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertEquals("</", element2.nodeName());
      assertEquals("", element2.baseUri());
      assertNotNull(element2);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Elements elements0 = document2.getElementsMatchingText("</");
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(6, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      
      String string0 = document3.data();
      assertEquals("", string0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.location());
      assertEquals(32, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.baseUri());
      assertEquals(32, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("</", document3.location());
      assertTrue(document3.hasParent());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      String string1 = element0.ownText();
      assertEquals("", string1);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("</", element0.tagName());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Tag tag0 = Tag.valueOf("(dt5Scs@");
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertEquals("(dt5Scs@", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertEquals("(dt5Scs@", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertNotNull(tag0);
      
      String string0 = "org.jsoup.nodes.Element";
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", "(dt5Scs@");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("(dt5Scs@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("(dt5Scs@", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Element");
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      Node node0 = cDataNode0.shallowClone();
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#cdata", node0.nodeName());
      assertFalse(node0.hasParent());
      assertNotNull(node0);
      assertFalse(node0.equals((Object)cDataNode0));
      
      String string1 = document0.html();
      assertEquals("<html>\n <head></head>\n <body>\n  org.jsoup.nodes.Element\n </body>\n</html>", string1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("(dt5Scs@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("(dt5Scs@", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(true);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertNotNull(document_OutputSettings3);
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.indentAmount(704);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(704, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings4.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(704, document_OutputSettings4.indentAmount());
      assertNotNull(document_OutputSettings4);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      
      // Undeclared exception!
      document0.outerHtmlTail(stringWriter0, 704, document_OutputSettings4);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("Tag name must not be empty.");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      boolean boolean0 = document0.hasClass("Tag name must not be empty.");
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.head();
      assertSame(document0, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertNotNull(element0);
      
      String string0 = document1.cssSelector();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(string0);
      
      Element element1 = element0.removeClass("#root.java.lang.String@0000000059");
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("Tag name must not be empty.", element1.baseUri());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Element element0 = new Element("</");
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertNotNull(element0);
      
      Tag tag0 = Tag.valueOf("</");
      assertEquals("</", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("</", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertNotNull(tag0);
      
      Element element1 = new Element(tag0, "</");
      assertEquals("</", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("</", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertEquals(0, element1.childNodeSize());
      assertEquals("</", element1.tagName());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("</", element1.baseUri());
      assertEquals("</", element1.nodeName());
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      
      Element element2 = element1.appendTo(element0);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(element2, element0);
      assertSame(element2, element1);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertEquals("</", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("</", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("</", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("</", element1.baseUri());
      assertEquals("</", element1.nodeName());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertEquals("</", element2.nodeName());
      assertEquals("</", element2.baseUri());
      assertEquals("</", element2.tagName());
      assertTrue(element2.hasParent());
      assertNotNull(element2);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      
      Element element3 = new Element(tag0, "</");
      assertEquals("</", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("</", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertEquals("</", element3.tagName());
      assertEquals(0, element3.childNodeSize());
      assertEquals(0, element3.siblingIndex());
      assertEquals("</", element3.baseUri());
      assertEquals("</", element3.nodeName());
      assertFalse(element3.hasParent());
      assertFalse(element3.isBlock());
      assertNotNull(element3);
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element1));
      
      Elements elements0 = element0.getElementsContainingOwnText("");
      assertNotSame(element0, element3);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertEquals(2, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(element0.equals((Object)element3));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      
      boolean boolean0 = Element.preserveWhitespace(element0);
      assertFalse(boolean0);
      assertNotSame(element0, element3);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertFalse(element0.equals((Object)element3));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      
      Element element4 = element1.after((Node) element3);
      assertSame(element1, element2);
      assertNotSame(element1, element0);
      assertSame(element1, element4);
      assertNotSame(element1, element3);
      assertNotSame(element3, element0);
      assertNotSame(element3, element2);
      assertNotSame(element3, element4);
      assertNotSame(element3, element1);
      assertNotSame(element4, element0);
      assertSame(element4, element2);
      assertSame(element4, element1);
      assertNotSame(element4, element3);
      assertEquals("</", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("</", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("</", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("</", element1.baseUri());
      assertEquals("</", element1.nodeName());
      assertEquals("</", element3.tagName());
      assertEquals(1, element3.siblingIndex());
      assertEquals(0, element3.childNodeSize());
      assertTrue(element3.hasParent());
      assertEquals("</", element3.baseUri());
      assertEquals("</", element3.nodeName());
      assertFalse(element3.isBlock());
      assertEquals("</", element4.nodeName());
      assertEquals("</", element4.baseUri());
      assertEquals("</", element4.tagName());
      assertEquals(0, element4.childNodeSize());
      assertTrue(element4.hasParent());
      assertFalse(element4.isBlock());
      assertEquals(0, element4.siblingIndex());
      assertNotNull(element4);
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element3));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element4.equals((Object)element0));
      assertFalse(element4.equals((Object)element3));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Document document0 = Document.createShell("java.lang.s,ring@00000K0038");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document1 = Document.createShell("java.lang.s,ring@00000K0038");
      assertNotSame(document1, document0);
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document0.appendTo(document1);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      String string0 = "textarea";
      Elements elements0 = document2.getElementsByAttributeValueMatching("option", "textarea");
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      List<Node> list0 = Parser.parseXmlFragment("((j#-s!7{q'W]^", "java.lang.s,ring@00000K0038");
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      document1.childNodes = list0;
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(document1.childNodes.isEmpty());
      assertEquals(1, document1.childNodes.size());
      
      Element element0 = document0.head();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document1));
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains(string0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Document document3 = (Document)document1.classNames((Set<String>) linkedHashSet0);
      assertFalse(linkedHashSet0.contains(string0));
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertNotNull(document3);
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      Elements elements1 = element0.getElementsContainingOwnText("");
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(elements1.equals((Object)elements0));
      
      String string1 = document1.cssSelector();
      assertEquals("#root", string1);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertNotNull(string1);
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        document1.empty();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode("");
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      boolean boolean0 = document0.hasClass("WA$3!");
      assertFalse(boolean0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      boolean boolean1 = document0.hasClass("br");
      assertFalse(boolean1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertTrue(boolean1 == boolean0);
      
      Element element0 = document0.head();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      
      String string0 = document0.data();
      assertEquals("", string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(string0);
      
      Element element1 = element0.doClone(document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("</", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.location());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      document1.siblingIndex = 32;
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals(32, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Element element0 = new Element("</");
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("</", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = element0.doClone(document0);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("</", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element1.tagName());
      assertEquals("</", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(element1.equals((Object)element0));
      
      Element element2 = element0.appendTo(document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals(32, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(32, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals("</", document3.location());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("</", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("</", element2.nodeName());
      assertEquals(0, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertTrue(element2.hasParent());
      assertFalse(element2.isBlock());
      assertEquals(1, element2.siblingIndex());
      assertEquals("</", element2.tagName());
      assertNotNull(element2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      boolean boolean0 = document3.hasText();
      assertTrue(boolean0);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals(32, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(32, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals("</", document3.location());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Elements elements0 = document2.getElementsMatchingText("</");
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(elements0.isEmpty());
      assertEquals(6, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      
      Document document4 = new Document("</");
      assertEquals("</", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.location());
      assertEquals(0, document4.childNodeSize());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertNotNull(document4);
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      
      Document document5 = (Document)document1.text("</");
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertNotSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document5, document1);
      assertNotSame(document5, document2);
      assertNotSame(document5, document0);
      assertSame(document5, document3);
      assertNotSame(document5, document4);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals(32, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document5.nodeName());
      assertEquals(32, document5.siblingIndex());
      assertEquals("</", document5.baseUri());
      assertFalse(document5.isBlock());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.updateMetaCharsetElement());
      assertTrue(document5.hasParent());
      assertEquals("</", document5.location());
      assertEquals(2, document5.childNodeSize());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document4));
      
      Elements elements1 = element1.siblingElements();
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(elements1, elements0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("</", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("</", element1.tagName());
      assertEquals("</", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(2, elements1.size());
      assertFalse(elements1.isEmpty());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertFalse(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = document1.normalise();
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("</", document3.location());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      Element element0 = document0.head();
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.baseUri());
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      
      Element element1 = element0.appendTo(document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("</", element0.baseUri());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertEquals("</", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      
      Elements elements0 = document3.nextElementSiblings();
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("</", document3.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      Element element2 = new Element("</");
      assertFalse(element2.isBlock());
      assertEquals("</", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("", element2.baseUri());
      assertEquals("</", element2.nodeName());
      assertFalse(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertNotNull(element2);
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      
      Tag tag0 = Tag.valueOf("</");
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("</", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("</", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertNotNull(tag0);
      
      Element element3 = element1.appendTo(element2);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element0, element3);
      assertSame(element1, element0);
      assertSame(element1, element3);
      assertNotSame(element1, element2);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotSame(element2, element3);
      assertSame(element3, element0);
      assertSame(element3, element1);
      assertNotSame(element3, element2);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.baseUri());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("</", element1.baseUri());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertFalse(element2.isBlock());
      assertEquals("</", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("", element2.baseUri());
      assertEquals("</", element2.nodeName());
      assertFalse(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals("</", element3.baseUri());
      assertTrue(element3.isBlock());
      assertEquals("head", element3.tagName());
      assertEquals(0, element3.siblingIndex());
      assertEquals("head", element3.nodeName());
      assertTrue(element3.hasParent());
      assertEquals(0, element3.childNodeSize());
      assertNotNull(element3);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element2));
      
      Element element4 = element0.val("</");
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(element0, element4);
      assertNotSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element0, element3);
      assertSame(element4, element1);
      assertSame(element4, element3);
      assertNotSame(element4, element2);
      assertSame(element4, element0);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.baseUri());
      assertTrue(element4.hasParent());
      assertEquals(0, element4.siblingIndex());
      assertEquals("</", element4.baseUri());
      assertEquals(0, element4.childNodeSize());
      assertEquals("head", element4.nodeName());
      assertEquals("head", element4.tagName());
      assertTrue(element4.isBlock());
      assertNotNull(element4);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element4.equals((Object)element2));
      
      Element element5 = element3.after("");
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(element0, element5);
      assertSame(element0, element4);
      assertNotSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element0, element3);
      assertSame(element1, element5);
      assertSame(element1, element0);
      assertSame(element1, element4);
      assertSame(element1, element3);
      assertNotSame(element1, element2);
      assertNotSame(element2, element0);
      assertNotSame(element2, element5);
      assertNotSame(element2, element1);
      assertNotSame(element2, element4);
      assertNotSame(element2, element3);
      assertSame(element3, element0);
      assertSame(element3, element5);
      assertSame(element3, element1);
      assertSame(element3, element4);
      assertNotSame(element3, element2);
      assertSame(element5, element3);
      assertSame(element5, element1);
      assertNotSame(element5, element2);
      assertSame(element5, element0);
      assertSame(element5, element4);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.baseUri());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("</", element1.baseUri());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertFalse(element2.isBlock());
      assertEquals("</", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("", element2.baseUri());
      assertEquals("</", element2.nodeName());
      assertFalse(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals("</", element3.baseUri());
      assertTrue(element3.isBlock());
      assertEquals("head", element3.tagName());
      assertEquals(0, element3.siblingIndex());
      assertEquals("head", element3.nodeName());
      assertTrue(element3.hasParent());
      assertEquals(0, element3.childNodeSize());
      assertEquals(0, element5.siblingIndex());
      assertEquals("</", element5.baseUri());
      assertEquals("head", element5.tagName());
      assertTrue(element5.isBlock());
      assertEquals(0, element5.childNodeSize());
      assertEquals("head", element5.nodeName());
      assertTrue(element5.hasParent());
      assertNotNull(element5);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element4));
      assertFalse(element2.equals((Object)element3));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element5.equals((Object)element2));
      
      Elements elements1 = element2.getElementsContainingOwnText("");
      assertNotSame(element2, element0);
      assertNotSame(element2, element5);
      assertNotSame(element2, element1);
      assertNotSame(element2, element4);
      assertNotSame(element2, element3);
      assertNotSame(elements1, elements0);
      assertFalse(element2.isBlock());
      assertEquals("</", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("", element2.baseUri());
      assertEquals("</", element2.nodeName());
      assertFalse(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertFalse(elements1.isEmpty());
      assertEquals(2, elements1.size());
      assertNotNull(elements1);
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element5));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element4));
      assertFalse(element2.equals((Object)element3));
      assertFalse(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("RCDATAEndTagName", "Insert position out of bounds.");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByAttribute("RCDATAEndTagName");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = document0.getElementsMatchingText("Insert position out of bounds.");
      assertNotSame(elements1, elements0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      
      String string0 = document0.nodeName();
      assertEquals("#document", string0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertNotNull(string0);
      
      String string1 = document0.html();
      assertEquals("<html>\n <head></head>\n <body>\n  RCDATAEndTagName\n </body>\n</html>", string1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = document0.data();
      assertEquals("", string2);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Element element0 = document0.child(0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("html", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("html", element0.nodeName());
      assertEquals("Insert position out of bounds.", element0.baseUri());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Document document0 = Document.createShell("java.lang.s,ring@00000K0038");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document1 = Document.createShell("java.lang.s,ring@00000K0038");
      assertNotSame(document1, document0);
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Elements elements0 = document1.getElementsByAttributeValueMatching("option", "textarea");
      assertNotSame(document1, document0);
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(document1.equals((Object)document0));
      
      List<Node> list0 = Parser.parseXmlFragment("((j#-s!7{q'W]^", "java.lang.s,ring@00000K0038");
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      document1.childNodes = list0;
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document1.childNodes.isEmpty());
      assertEquals(1, document1.childNodes.size());
      
      Element element0 = document0.head();
      assertNotSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document1));
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("java.lang.s,ring@00000K0038"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Document document2 = (Document)document1.classNames((Set<String>) linkedHashSet0);
      assertFalse(linkedHashSet0.contains("java.lang.s,ring@00000K0038"));
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(document2);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Tag tag0 = Tag.valueOf("option", (ParseSettings) null);
      assertFalse(tag0.isFormListed());
      assertEquals("option", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("option", tag0.getName());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.clone();
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertTrue(attributes1.equals((Object)attributes0));
      
      Attributes attributes2 = attributes1.put("textarea", false);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes2.size());
      assertNotNull(attributes2);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertTrue(attributes2.equals((Object)attributes0));
      
      FormElement formElement0 = new FormElement(tag0, "java.lang.s,ring@00000K0038", attributes2);
      assertFalse(tag0.isFormListed());
      assertEquals("option", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("option", tag0.getName());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes2.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("option", formElement0.tagName());
      assertEquals("option", formElement0.nodeName());
      assertNotNull(formElement0);
      assertTrue(attributes0.equals((Object)attributes2));
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertTrue(attributes2.equals((Object)attributes0));
      
      FormElement formElement1 = formElement0.addElement(document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(tag0.isFormListed());
      assertEquals("option", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("option", tag0.getName());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes2.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("option", formElement0.tagName());
      assertEquals("option", formElement0.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("option", formElement1.nodeName());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("option", formElement1.tagName());
      assertNotNull(formElement1);
      assertFalse(document1.equals((Object)document0));
      assertTrue(attributes0.equals((Object)attributes2));
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertTrue(attributes2.equals((Object)attributes0));
      
      formElement1.reparentChild(document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertFalse(tag0.isFormListed());
      assertEquals("option", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("option", tag0.getName());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes2.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("option", formElement0.tagName());
      assertEquals("option", formElement0.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("option", formElement1.nodeName());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("option", formElement1.tagName());
      assertFalse(document1.equals((Object)document0));
      assertTrue(attributes0.equals((Object)attributes2));
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertTrue(attributes2.equals((Object)attributes0));
      
      int int0 = formElement0.elementSiblingIndex();
      assertEquals(0, int0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(formElement0, formElement1);
      assertFalse(tag0.isFormListed());
      assertEquals("option", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("option", tag0.getName());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes2.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("option", formElement0.tagName());
      assertEquals("option", formElement0.nodeName());
      assertTrue(attributes0.equals((Object)attributes2));
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertTrue(attributes2.equals((Object)attributes0));
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Element element1 = new Element(tag0, "vC!.");
      assertEquals("option", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("vC!.", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("option", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertFalse(tag0.isFormListed());
      assertEquals("option", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("option", tag0.getName());
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      
      Elements elements1 = element0.parents();
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotSame(element0, element1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements1.equals((Object)elements0));
      assertFalse(element0.equals((Object)element1));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("q+d&", "q+d&");
      assertEquals("q+d&", document0.location());
      assertEquals("q+d&", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.ownerDocument();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("q+d&", document0.location());
      assertEquals("q+d&", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("q+d&", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("q+d&", document1.location());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("q+d&", document0.location());
      assertEquals("q+d&", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("q+d&", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("q+d&", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("q+d&", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("q+d&", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(document2);
      
      Document document3 = document2.normalise();
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertEquals("q+d&", document0.location());
      assertEquals("q+d&", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("q+d&", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("q+d&", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("q+d&", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("q+d&", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("q+d&", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("q+d&", document3.location());
      assertNotNull(document3);
      
      Document document4 = (Document)document3.html("Ip~\"X{:s-gFo");
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertEquals("q+d&", document0.location());
      assertEquals("q+d&", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("q+d&", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("q+d&", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("q+d&", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("q+d&", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("q+d&", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("q+d&", document3.location());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals("q+d&", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("q+d&", document4.baseUri());
      assertNotNull(document4);
      
      Elements elements0 = document2.getElementsByIndexLessThan((-1));
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertEquals("q+d&", document0.location());
      assertEquals("q+d&", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("q+d&", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("q+d&", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("q+d&", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("q+d&", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = document1.normalise();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals("</", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Element element0 = document0.head();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      
      Element element1 = element0.appendTo(document1);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("</", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("</", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("</", element1.baseUri());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      
      Elements elements0 = document3.nextElementSiblings();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("</", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals("</", document3.location());
      assertEquals("</", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Element element2 = new Element("</");
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertFalse(element2.hasParent());
      assertEquals("</", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertEquals("</", element2.nodeName());
      assertNotNull(element2);
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      
      Tag tag0 = Tag.valueOf("</");
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("</", tag0.toString());
      assertEquals("</", tag0.getName());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      Tag tag1 = Tag.valueOf("</");
      assertNotSame(tag1, tag0);
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.isKnownTag());
      assertEquals("</", tag1.toString());
      assertEquals("</", tag1.getName());
      assertFalse(tag1.isBlock());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isData());
      assertFalse(tag1.canContainBlock());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.preserveWhitespace());
      assertTrue(tag1.isInline());
      assertNotNull(tag1);
      assertTrue(tag1.equals((Object)tag0));
      
      Element element3 = new Element(tag0, "</");
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("</", tag0.toString());
      assertEquals("</", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals(0, element3.siblingIndex());
      assertFalse(element3.isBlock());
      assertEquals("</", element3.tagName());
      assertEquals("</", element3.baseUri());
      assertEquals(0, element3.childNodeSize());
      assertEquals("</", element3.nodeName());
      assertFalse(element3.hasParent());
      assertNotNull(element3);
      assertTrue(tag0.equals((Object)tag1));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element2));
      
      Element element4 = element3.appendTo(element2);
      assertNotSame(element2, element3);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotSame(element2, element4);
      assertNotSame(tag0, tag1);
      assertNotSame(element3, element1);
      assertSame(element3, element4);
      assertNotSame(element3, element0);
      assertNotSame(element3, element2);
      assertNotSame(element4, element1);
      assertNotSame(element4, element0);
      assertNotSame(element4, element2);
      assertSame(element4, element3);
      assertEquals(0, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertFalse(element2.hasParent());
      assertEquals("</", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertEquals("</", element2.nodeName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("</", tag0.toString());
      assertEquals("</", tag0.getName());
      assertFalse(tag0.isBlock());
      assertTrue(element3.hasParent());
      assertEquals(0, element3.siblingIndex());
      assertFalse(element3.isBlock());
      assertEquals("</", element3.tagName());
      assertEquals("</", element3.baseUri());
      assertEquals(0, element3.childNodeSize());
      assertEquals("</", element3.nodeName());
      assertEquals("</", element4.tagName());
      assertEquals("</", element4.nodeName());
      assertEquals(0, element4.childNodeSize());
      assertTrue(element4.hasParent());
      assertEquals("</", element4.baseUri());
      assertEquals(0, element4.siblingIndex());
      assertFalse(element4.isBlock());
      assertNotNull(element4);
      assertFalse(element2.equals((Object)element3));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertTrue(tag0.equals((Object)tag1));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element4.equals((Object)element1));
      assertFalse(element4.equals((Object)element0));
      assertFalse(element4.equals((Object)element2));
      
      Element element5 = element0.val("</");
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(element0, element4);
      assertSame(element0, element1);
      assertSame(element0, element5);
      assertNotSame(element0, element2);
      assertNotSame(element0, element3);
      assertNotSame(element5, element4);
      assertNotSame(element5, element3);
      assertSame(element5, element1);
      assertNotSame(element5, element2);
      assertSame(element5, element0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element5.siblingIndex());
      assertTrue(element5.hasParent());
      assertEquals("</", element5.baseUri());
      assertEquals(0, element5.childNodeSize());
      assertEquals("head", element5.nodeName());
      assertTrue(element5.isBlock());
      assertEquals("head", element5.tagName());
      assertNotNull(element5);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(element0.equals((Object)element4));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element3));
      assertFalse(element5.equals((Object)element4));
      assertFalse(element5.equals((Object)element3));
      assertFalse(element5.equals((Object)element2));
      
      Element element6 = element4.after("");
      assertNotSame(element2, element6);
      assertNotSame(element2, element0);
      assertNotSame(element2, element3);
      assertNotSame(element2, element5);
      assertNotSame(element2, element1);
      assertNotSame(element2, element4);
      assertNotSame(tag0, tag1);
      assertNotSame(element3, element5);
      assertNotSame(element3, element1);
      assertSame(element3, element6);
      assertSame(element3, element4);
      assertNotSame(element3, element0);
      assertNotSame(element3, element2);
      assertNotSame(element4, element1);
      assertNotSame(element4, element5);
      assertNotSame(element4, element0);
      assertNotSame(element4, element2);
      assertSame(element4, element3);
      assertSame(element4, element6);
      assertNotSame(element6, element1);
      assertSame(element6, element3);
      assertSame(element6, element4);
      assertNotSame(element6, element5);
      assertNotSame(element6, element0);
      assertNotSame(element6, element2);
      assertEquals(0, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertFalse(element2.hasParent());
      assertEquals("</", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertEquals("</", element2.nodeName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("</", tag0.toString());
      assertEquals("</", tag0.getName());
      assertFalse(tag0.isBlock());
      assertTrue(element3.hasParent());
      assertEquals(0, element3.siblingIndex());
      assertFalse(element3.isBlock());
      assertEquals("</", element3.tagName());
      assertEquals("</", element3.baseUri());
      assertEquals(0, element3.childNodeSize());
      assertEquals("</", element3.nodeName());
      assertEquals("</", element4.tagName());
      assertEquals("</", element4.nodeName());
      assertEquals(0, element4.childNodeSize());
      assertTrue(element4.hasParent());
      assertEquals("</", element4.baseUri());
      assertEquals(0, element4.siblingIndex());
      assertFalse(element4.isBlock());
      assertEquals("</", element6.tagName());
      assertEquals("</", element6.nodeName());
      assertTrue(element6.hasParent());
      assertEquals(0, element6.childNodeSize());
      assertEquals(0, element6.siblingIndex());
      assertEquals("</", element6.baseUri());
      assertFalse(element6.isBlock());
      assertNotNull(element6);
      assertFalse(element2.equals((Object)element3));
      assertFalse(element2.equals((Object)element5));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element4));
      assertTrue(tag0.equals((Object)tag1));
      assertFalse(element3.equals((Object)element5));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element4.equals((Object)element1));
      assertFalse(element4.equals((Object)element5));
      assertFalse(element4.equals((Object)element0));
      assertFalse(element4.equals((Object)element2));
      assertFalse(element6.equals((Object)element1));
      assertFalse(element6.equals((Object)element5));
      assertFalse(element6.equals((Object)element0));
      assertFalse(element6.equals((Object)element2));
      
      Elements elements1 = element2.getElementsContainingOwnText("");
      assertNotSame(element2, element6);
      assertNotSame(element2, element0);
      assertNotSame(element2, element3);
      assertNotSame(element2, element5);
      assertNotSame(element2, element1);
      assertNotSame(element2, element4);
      assertNotSame(elements1, elements0);
      assertEquals(0, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertFalse(element2.hasParent());
      assertEquals("</", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertEquals("</", element2.nodeName());
      assertFalse(elements1.isEmpty());
      assertEquals(2, elements1.size());
      assertNotNull(elements1);
      assertFalse(element2.equals((Object)element6));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element3));
      assertFalse(element2.equals((Object)element5));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element4));
      assertFalse(elements1.equals((Object)elements0));
      
      Document document4 = (Document)document2.html("");
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertSame(document4, document2);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals(0, document4.childNodeSize());
      assertEquals("</", document4.location());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("Tag name must not be empty.");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      String string0 = document0.baseUri();
      assertEquals("Tag name must not be empty.", string0);
      assertSame(document0, document1);
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(string0);
      
      boolean boolean0 = document1.hasClass("Tag name must not be empty.");
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Document document2 = (Document)document0.doClone(document1);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals("#root", document2.tagName());
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      List<Node> list0 = document1.ensureChildNodes();
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      
      Element element0 = document0.head();
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document2));
      
      String string1 = document1.cssSelector();
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(string1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Tag tag0 = Tag.valueOf("(dt5Scs@");
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("(dt5Scs@", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals("(dt5Scs@", tag0.toString());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "(dt5Scs@", attributes0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("(dt5Scs@", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals("(dt5Scs@", tag0.toString());
      assertEquals(0, attributes0.size());
      assertEquals("(dt5Scs@", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("(dt5Scs@", formElement0.baseUri());
      assertEquals("(dt5Scs@", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertNotNull(formElement0);
      
      Element element0 = formElement0.val("(dt5Scs@");
      assertSame(formElement0, element0);
      assertSame(element0, formElement0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("(dt5Scs@", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals("(dt5Scs@", tag0.toString());
      assertEquals(1, attributes0.size());
      assertEquals("(dt5Scs@", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("(dt5Scs@", formElement0.baseUri());
      assertEquals("(dt5Scs@", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("(dt5Scs@", element0.nodeName());
      assertEquals("(dt5Scs@", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("(dt5Scs@", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "(dt5Scs@", attributes0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("(dt5Scs@", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals("(dt5Scs@", tag0.toString());
      assertEquals(1, attributes0.size());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("(dt5Scs@", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("(dt5Scs@", pseudoTextElement0.baseUri());
      assertEquals("(dt5Scs@", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertNotNull(pseudoTextElement0);
      
      String string0 = element0.val();
      assertEquals("(dt5Scs@", string0);
      assertSame(formElement0, element0);
      assertSame(element0, formElement0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("(dt5Scs@", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals("(dt5Scs@", tag0.toString());
      assertEquals(1, attributes0.size());
      assertEquals("(dt5Scs@", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("(dt5Scs@", formElement0.baseUri());
      assertEquals("(dt5Scs@", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("(dt5Scs@", element0.nodeName());
      assertEquals("(dt5Scs@", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("(dt5Scs@", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(string0);
      
      List<TextNode> list0 = element0.textNodes();
      assertSame(formElement0, element0);
      assertSame(element0, formElement0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("(dt5Scs@", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals("(dt5Scs@", tag0.toString());
      assertEquals(1, attributes0.size());
      assertEquals("(dt5Scs@", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("(dt5Scs@", formElement0.baseUri());
      assertEquals("(dt5Scs@", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("(dt5Scs@", element0.nodeName());
      assertEquals("(dt5Scs@", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("(dt5Scs@", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Document document0 = Document.createShell("java.lang.string@0000000038");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document1 = Document.createShell("java.lang.string@0000000038");
      assertNotSame(document1, document0);
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document0.appendTo(document1);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      Elements elements0 = document2.getElementsByAttributeValueMatching("option", "textarea");
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      List<Node> list0 = Parser.parseXmlFragment("((j#-s!7{q'W]^", "java.lang.string@0000000038");
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      document1.childNodes = list0;
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, document1.childNodes.size());
      assertFalse(document1.childNodes.isEmpty());
      
      Element element0 = document0.head();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document1));
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("java.lang.string@0000000038"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Elements elements1 = document2.getElementsByClass("~P4G[5X7<V%_-T");
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(elements1, elements0);
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      
      Document document3 = (Document)document1.classNames((Set<String>) linkedHashSet0);
      assertFalse(linkedHashSet0.contains("java.lang.string@0000000038"));
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertNotNull(document3);
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Elements elements2 = element0.getElementsContainingOwnText("java.lang.string@0000000038");
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertNotNull(elements2);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      
      String string0 = element0.cssSelector();
      assertEquals("html > head", string0);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      
      Element element1 = element0.empty();
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      
      boolean boolean1 = document2.hasClass("g9-L H 9v");
      assertFalse(boolean1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertTrue(boolean1 == boolean0);
      
      Document document4 = document0.normalise();
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertNotSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNotNull(document4);
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      
      Element element2 = document4.head();
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertNotSame(document4, document1);
      assertSame(document4, document0);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals(1, document4.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.nodeName());
      assertEquals(0, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNotNull(element2);
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      
      Element element3 = element2.append("html > head");
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertNotSame(document4, document1);
      assertSame(document4, document0);
      assertSame(element2, element1);
      assertSame(element2, element3);
      assertSame(element2, element0);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(element3, element2);
      assertSame(element3, element1);
      assertSame(element3, element0);
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals(1, document4.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.tagName());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, element3.siblingIndex());
      assertEquals("head", element3.nodeName());
      assertTrue(element3.hasParent());
      assertEquals(1, element3.childNodeSize());
      assertTrue(element3.isBlock());
      assertEquals("head", element3.tagName());
      assertNotNull(element3);
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      
      String string1 = document4.cssSelector();
      assertEquals("#root", string1);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertNotSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNotNull(string1);
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Document document0 = Document.createShell("java.lang.string@0000000038");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document1 = Document.createShell("java.lang.string@0000000038");
      assertNotSame(document1, document0);
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document0.appendTo(document1);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      String string0 = "textarea";
      Elements elements0 = document2.getElementsByAttributeValueMatching("option", "textarea");
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      List<Node> list0 = Parser.parseXmlFragment("((j#-s!7{q'W]^", "java.lang.string@0000000038");
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      document1.childNodes = list0;
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(document1.childNodes.isEmpty());
      assertEquals(1, document1.childNodes.size());
      
      Element element0 = document0.head();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document1));
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("textarea"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        document0.appendTo(document2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document2.baseUri());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("</", document3.location());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Element element0 = new Element("</");
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("</", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      Element element1 = element0.appendTo(document2);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document2.baseUri());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertEquals("</", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("</", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals("</", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("</", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      Document document4 = (Document)document3.removeClass("</");
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document4);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document4);
      assertNotSame(document4, document2);
      assertSame(document4, document1);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document2.baseUri());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("</", document3.location());
      assertEquals("</", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("</", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals(1, document4.siblingIndex());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      
      Elements elements0 = document0.getElementsByAttributeValueContaining("e", "%:pyU9S4:_.G93>");
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      
      boolean boolean0 = document3.hasClass("%:pyU9S4:_.G93>");
      assertFalse(boolean0);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document4);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document4);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document2.baseUri());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("</", document3.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      document0.nodelistChanged();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      
      Pattern pattern0 = Pattern.compile("</", 14);
      assertEquals("</", pattern0.toString());
      assertEquals("</", pattern0.pattern());
      assertEquals(14, pattern0.flags());
      assertNotNull(pattern0);
      
      Elements elements1 = document2.getElementsMatchingOwnText(pattern0);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document2, document4);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(elements1, elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document2.baseUri());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("</", pattern0.toString());
      assertEquals("</", pattern0.pattern());
      assertEquals(14, pattern0.flags());
      assertEquals(2, elements1.size());
      assertFalse(elements1.isEmpty());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(elements1.equals((Object)elements0));
      
      Element element2 = new Element("%:pyU9S4:_.G93>");
      assertEquals(0, element2.childNodeSize());
      assertEquals("%:pyU9S4:_.G93>", element2.nodeName());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals("%:pyU9S4:_.G93>", element2.tagName());
      assertFalse(element2.isBlock());
      assertFalse(element2.hasParent());
      assertNotNull(element2);
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      
      String string0 = document2.data();
      assertEquals("", string0);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document2, document4);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document2.baseUri());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = Document.createShell("hRt>M");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("hRt>M", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("hRt>M", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Elements elements0 = document0.select("hRt>M");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("hRt>M", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("hRt>M", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("hRt>M", false);
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertFalse(xmlDeclaration0.hasParent());
      assertNotNull(xmlDeclaration0);
      
      Document document1 = (Document)document0.prependChild(xmlDeclaration0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("hRt>M", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("hRt>M", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertTrue(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("hRt>M", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("hRt>M", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      String string0 = document1.val();
      assertEquals("", string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("hRt>M", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("hRt>M", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertTrue(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("hRt>M", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("hRt>M", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(string0);
      
      Elements elements1 = document1.getElementsByIndexGreaterThan((-490));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("hRt>M", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("hRt>M", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertTrue(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("hRt>M", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("hRt>M", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(4, elements1.size());
      assertFalse(elements1.isEmpty());
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      
      Elements elements2 = document0.getElementsMatchingText("");
      assertSame(document0, document1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("hRt>M", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("hRt>M", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(elements2.isEmpty());
      assertEquals(4, elements2.size());
      assertNotNull(elements2);
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Document document0 = Document.createShell("java.lang.string@0000000038");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document1 = Document.createShell("java.lang.string@0000000038");
      assertNotSame(document1, document0);
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document0.appendTo(document1);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      String string0 = "textarea";
      Elements elements0 = document2.getElementsByAttributeValueMatching("option", "textarea");
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      List<Node> list0 = Parser.parseXmlFragment("((j#-s!7{q'W]^", "java.lang.string@0000000038");
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      document1.childNodes = list0;
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, document1.childNodes.size());
      assertFalse(document1.childNodes.isEmpty());
      
      Element element0 = document0.head();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document1));
      
      Elements elements1 = element0.getElementsContainingOwnText("java.lang.string@0000000038");
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      
      String string1 = element0.cssSelector();
      assertEquals("html > head", string1);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertNotNull(string1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      
      Element element1 = element0.empty();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document1));
      
      String string2 = ";U:bQ0_@wZDc4**I*X^";
      Element element2 = element0.appendText(";U:bQ0_@wZDc4**I*X^");
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.tagName());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.hasParent());
      assertNotNull(element2);
      assertFalse(document0.equals((Object)document1));
      
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        document2.filter((NodeFilter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("d'AtbtKC>ug", parseSettings0);
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertNotNull(tag0);
      
      FormElement formElement0 = new FormElement(tag0, "-}hJudcG'k9", (Attributes) null);
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertNotNull(formElement0);
      
      FormElement formElement1 = formElement0.addElement((Element) null);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertNotNull(formElement1);
      
      formElement1.reparentChild(formElement0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertTrue(formElement0.hasParent());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertTrue(formElement1.hasParent());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      
      int int0 = formElement1.elementSiblingIndex();
      assertEquals(0, int0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertTrue(formElement0.hasParent());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertTrue(formElement1.hasParent());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Element element0 = new Element(tag0, "-}hJudcG'k9");
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("-}hJudcG'k9", element0.baseUri());
      assertEquals("d'AtbtKC>ug", element0.tagName());
      assertEquals("d'AtbtKC>ug", element0.nodeName());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      // Undeclared exception!
      try { 
        formElement1.outerHtmlHead(charArrayWriter0, (-1624), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "</";
      Document document0 = Parser.parse("</", "</");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.appendTo(document0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("</", false);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "`@DF^GNO^mPgibfE`G";
      objectArray0[4] = (Object) "`@DF^GNO^mPgibfE`G";
      objectArray0[5] = (Object) document0;
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)mockPrintWriter0.format("`@DF^GNO^mPgibfE`G", objectArray0);
      assertSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(mockPrintWriter1, mockPrintWriter0);
      assertNotNull(mockPrintWriter1);
      assertEquals(6, objectArray0.length);
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter1, 1607);
      assertNotNull(bufferedWriter0);
      assertEquals(6, objectArray0.length);
      
      // Undeclared exception!
      document0.html(bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("Tag name must not be empty.");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      String string0 = document0.baseUri();
      assertEquals("Tag name must not be empty.", string0);
      assertSame(document0, document1);
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertNotNull(string0);
      
      boolean boolean0 = document1.hasClass("Tag name must not be empty.");
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("Tag name must not be empty.", parseSettings0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("tag name must not be empty.", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals("tag name must not be empty.", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode("_&}jl$@ EF:OZ@D0");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "7_7", attributes0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("tag name must not be empty.", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals("tag name must not be empty.", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("7_7", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("tag name must not be empty.", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("tag name must not be empty.", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertNotNull(formElement0);
      
      FormElement formElement1 = formElement0.addElement(document0);
      assertSame(document0, document1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("tag name must not be empty.", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals("tag name must not be empty.", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("7_7", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("tag name must not be empty.", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("tag name must not be empty.", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("7_7", formElement1.baseUri());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("tag name must not be empty.", formElement1.nodeName());
      assertFalse(formElement1.isBlock());
      assertEquals("tag name must not be empty.", formElement1.tagName());
      assertNotNull(formElement1);
      
      FormElement formElement2 = formElement1.addElement(formElement0);
      assertSame(document0, document1);
      assertSame(formElement0, formElement1);
      assertSame(formElement0, formElement2);
      assertSame(formElement1, formElement2);
      assertSame(formElement1, formElement0);
      assertSame(formElement2, formElement1);
      assertSame(formElement2, formElement0);
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("tag name must not be empty.", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals("tag name must not be empty.", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("7_7", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("tag name must not be empty.", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("tag name must not be empty.", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("7_7", formElement1.baseUri());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("tag name must not be empty.", formElement1.nodeName());
      assertFalse(formElement1.isBlock());
      assertEquals("tag name must not be empty.", formElement1.tagName());
      assertEquals("7_7", formElement2.baseUri());
      assertEquals(0, formElement2.siblingIndex());
      assertEquals(0, formElement2.childNodeSize());
      assertEquals("tag name must not be empty.", formElement2.nodeName());
      assertFalse(formElement2.hasParent());
      assertEquals("tag name must not be empty.", formElement2.tagName());
      assertFalse(formElement2.isBlock());
      assertNotNull(formElement2);
      
      FormElement formElement3 = new FormElement(tag0, "f@D]faR", attributes0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("tag name must not be empty.", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals("tag name must not be empty.", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("tag name must not be empty.", formElement3.tagName());
      assertEquals("tag name must not be empty.", formElement3.nodeName());
      assertFalse(formElement3.isBlock());
      assertEquals(0, formElement3.siblingIndex());
      assertEquals("f@D]faR", formElement3.baseUri());
      assertEquals(0, formElement3.childNodeSize());
      assertFalse(formElement3.hasParent());
      assertNotNull(formElement3);
      assertFalse(formElement3.equals((Object)formElement0));
      assertFalse(formElement3.equals((Object)formElement2));
      assertFalse(formElement3.equals((Object)formElement1));
      
      formElement0.reparentChild(document0);
      assertSame(document0, document1);
      assertSame(formElement0, formElement1);
      assertNotSame(formElement0, formElement3);
      assertSame(formElement0, formElement2);
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("tag name must not be empty.", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals("tag name must not be empty.", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("7_7", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("tag name must not be empty.", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("tag name must not be empty.", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.equals((Object)formElement3));
      
      int int0 = formElement1.elementSiblingIndex();
      assertEquals(0, int0);
      assertSame(document0, document1);
      assertSame(formElement0, formElement1);
      assertNotSame(formElement0, formElement3);
      assertSame(formElement0, formElement2);
      assertSame(formElement1, formElement2);
      assertSame(formElement1, formElement0);
      assertNotSame(formElement1, formElement3);
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("tag name must not be empty.", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals("tag name must not be empty.", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("7_7", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("tag name must not be empty.", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("tag name must not be empty.", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("7_7", formElement1.baseUri());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("tag name must not be empty.", formElement1.nodeName());
      assertFalse(formElement1.isBlock());
      assertEquals("tag name must not be empty.", formElement1.tagName());
      assertFalse(formElement0.equals((Object)formElement3));
      assertFalse(formElement1.equals((Object)formElement3));
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      FormElement formElement4 = formElement2.addElement(formElement0);
      assertSame(document0, document1);
      assertSame(formElement0, formElement1);
      assertNotSame(formElement0, formElement3);
      assertSame(formElement0, formElement2);
      assertSame(formElement0, formElement4);
      assertSame(formElement1, formElement2);
      assertSame(formElement1, formElement0);
      assertSame(formElement1, formElement4);
      assertNotSame(formElement1, formElement3);
      assertSame(formElement2, formElement1);
      assertSame(formElement2, formElement0);
      assertSame(formElement2, formElement4);
      assertNotSame(formElement2, formElement3);
      assertNotSame(formElement4, formElement3);
      assertSame(formElement4, formElement2);
      assertSame(formElement4, formElement1);
      assertSame(formElement4, formElement0);
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("tag name must not be empty.", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals("tag name must not be empty.", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("7_7", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("tag name must not be empty.", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("tag name must not be empty.", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("7_7", formElement1.baseUri());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("tag name must not be empty.", formElement1.nodeName());
      assertFalse(formElement1.isBlock());
      assertEquals("tag name must not be empty.", formElement1.tagName());
      assertEquals("7_7", formElement2.baseUri());
      assertEquals(0, formElement2.siblingIndex());
      assertEquals(0, formElement2.childNodeSize());
      assertEquals("tag name must not be empty.", formElement2.nodeName());
      assertFalse(formElement2.hasParent());
      assertEquals("tag name must not be empty.", formElement2.tagName());
      assertFalse(formElement2.isBlock());
      assertEquals("tag name must not be empty.", formElement4.nodeName());
      assertFalse(formElement4.hasParent());
      assertEquals(0, formElement4.siblingIndex());
      assertFalse(formElement4.isBlock());
      assertEquals("tag name must not be empty.", formElement4.tagName());
      assertEquals(0, formElement4.childNodeSize());
      assertEquals("7_7", formElement4.baseUri());
      assertNotNull(formElement4);
      assertFalse(formElement0.equals((Object)formElement3));
      assertFalse(formElement1.equals((Object)formElement3));
      assertFalse(formElement2.equals((Object)formElement3));
      assertFalse(formElement4.equals((Object)formElement3));
      
      String string1 = formElement3.cssSelector();
      assertEquals("tag name must not be empty.", string1);
      assertNotSame(formElement3, formElement0);
      assertNotSame(formElement3, formElement4);
      assertNotSame(formElement3, formElement2);
      assertNotSame(formElement3, formElement1);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("tag name must not be empty.", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals("tag name must not be empty.", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("tag name must not be empty.", formElement3.tagName());
      assertEquals("tag name must not be empty.", formElement3.nodeName());
      assertFalse(formElement3.isBlock());
      assertEquals(0, formElement3.siblingIndex());
      assertEquals("f@D]faR", formElement3.baseUri());
      assertEquals(0, formElement3.childNodeSize());
      assertFalse(formElement3.hasParent());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(formElement3.equals((Object)formElement0));
      assertFalse(formElement3.equals((Object)formElement4));
      assertFalse(formElement3.equals((Object)formElement2));
      assertFalse(formElement3.equals((Object)formElement1));
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertNotNull(document2);
      
      Element element0 = document2.previousElementSibling();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertNull(element0);
      
      int int1 = formElement4.childNodeSize();
      assertEquals(0, int1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(formElement0, formElement1);
      assertNotSame(formElement0, formElement3);
      assertSame(formElement0, formElement2);
      assertSame(formElement0, formElement4);
      assertSame(formElement1, formElement2);
      assertSame(formElement1, formElement0);
      assertSame(formElement1, formElement4);
      assertNotSame(formElement1, formElement3);
      assertSame(formElement2, formElement1);
      assertSame(formElement2, formElement0);
      assertSame(formElement2, formElement4);
      assertNotSame(formElement2, formElement3);
      assertNotSame(formElement4, formElement3);
      assertSame(formElement4, formElement2);
      assertSame(formElement4, formElement1);
      assertSame(formElement4, formElement0);
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("tag name must not be empty.", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals("tag name must not be empty.", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("7_7", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("tag name must not be empty.", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("tag name must not be empty.", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("7_7", formElement1.baseUri());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("tag name must not be empty.", formElement1.nodeName());
      assertFalse(formElement1.isBlock());
      assertEquals("tag name must not be empty.", formElement1.tagName());
      assertEquals("7_7", formElement2.baseUri());
      assertEquals(0, formElement2.siblingIndex());
      assertEquals(0, formElement2.childNodeSize());
      assertEquals("tag name must not be empty.", formElement2.nodeName());
      assertFalse(formElement2.hasParent());
      assertEquals("tag name must not be empty.", formElement2.tagName());
      assertFalse(formElement2.isBlock());
      assertEquals("tag name must not be empty.", formElement4.nodeName());
      assertFalse(formElement4.hasParent());
      assertEquals(0, formElement4.siblingIndex());
      assertFalse(formElement4.isBlock());
      assertEquals("tag name must not be empty.", formElement4.tagName());
      assertEquals(0, formElement4.childNodeSize());
      assertEquals("7_7", formElement4.baseUri());
      assertTrue(int1 == int0);
      assertFalse(formElement0.equals((Object)formElement3));
      assertFalse(formElement1.equals((Object)formElement3));
      assertFalse(formElement2.equals((Object)formElement3));
      assertFalse(formElement4.equals((Object)formElement3));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document1.normalise();
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("</", document2.location());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("</", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("</", document2.location());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("</", document3.location());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      
      Elements elements0 = document2.nextElementSiblings();
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("</", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("</", document2.location());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Element element0 = new Element("</");
      assertFalse(element0.hasParent());
      assertEquals("</", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("</", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Document document4 = (Document)document2.appendTo(element0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertNotSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("</", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("</", document2.location());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("</", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("</", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("</", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      
      Document document5 = (Document)document4.val("jj~SqQ!BM@%x");
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document1, document5);
      assertSame(document2, document5);
      assertNotSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertSame(document4, document5);
      assertNotSame(document4, document0);
      assertSame(document5, document4);
      assertSame(document5, document2);
      assertSame(document5, document3);
      assertSame(document5, document1);
      assertNotSame(document5, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("</", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("</", document2.location());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("</", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("</", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("</", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertFalse(document5.isBlock());
      assertTrue(document5.hasParent());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertEquals("</", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertEquals("</", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document5.equals((Object)document0));
      
      Document document6 = (Document)document5.after("");
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document6);
      assertNotSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document6);
      assertSame(document1, document4);
      assertSame(document1, document5);
      assertSame(document2, document5);
      assertNotSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document6);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document4, document6);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertSame(document4, document5);
      assertNotSame(document4, document0);
      assertSame(document5, document4);
      assertSame(document5, document6);
      assertSame(document5, document2);
      assertSame(document5, document3);
      assertSame(document5, document1);
      assertNotSame(document5, document0);
      assertSame(document6, document5);
      assertSame(document6, document1);
      assertNotSame(document6, document0);
      assertSame(document6, document4);
      assertSame(document6, document2);
      assertSame(document6, document3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("</", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("</", document2.location());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("</", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("</", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("</", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertFalse(document5.isBlock());
      assertTrue(document5.hasParent());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertEquals("</", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertEquals("</", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("</", document6.baseUri());
      assertEquals(1, document6.childNodeSize());
      assertEquals("#root", document6.tagName());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.isBlock());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("</", document6.location());
      assertFalse(document6.updateMetaCharsetElement());
      assertNotNull(document6);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document6.equals((Object)document0));
      
      Elements elements1 = document1.getElementsContainingOwnText("</");
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document6);
      assertNotSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document6);
      assertSame(document1, document4);
      assertSame(document1, document5);
      assertNotSame(elements1, elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("</", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals("</", document3.baseUri());
      assertEquals("</", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      document1.siblingIndex = 32;
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(32, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      
      Element element0 = new Element("</");
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Element element1 = element0.appendTo(document3);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(32, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals(32, document3.siblingIndex());
      assertEquals("</", document3.baseUri());
      assertEquals("</", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("</", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("</", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      String string0 = document2.baseUri();
      assertEquals("</", string0);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      
      document1.reparentChild(document0);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(32, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      
      boolean boolean0 = document3.hasText();
      assertTrue(boolean0);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(32, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals(32, document3.siblingIndex());
      assertEquals("</", document3.baseUri());
      assertEquals("</", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Elements elements0 = document2.getElementsMatchingText("</");
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(6, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      
      Document document4 = (Document)document3.attr("</", true);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(32, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals(32, document3.siblingIndex());
      assertEquals("</", document3.baseUri());
      assertEquals("</", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("</", document4.location());
      assertEquals("</", document4.baseUri());
      assertEquals(2, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(32, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      
      Document document5 = new Document("</");
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("</", document5.location());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.childNodeSize());
      assertEquals("</", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.hasParent());
      assertNotNull(document5);
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      
      Element element2 = document2.head();
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document5);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertEquals("head", element2.tagName());
      assertEquals("</", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.hasParent());
      assertNotNull(element2);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      
      // Undeclared exception!
      try { 
        element1.getElementsByAttributeValueEnding("</", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Tag tag0 = Tag.valueOf("(dt5Scs@");
      assertFalse(tag0.isSelfClosing());
      assertEquals("(dt5Scs@", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("(dt5Scs@", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Document document0 = Parser.parseBodyFragment("(dt5Scs@", "OE[*_a&[hN3WP");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("OE[*_a&[hN3WP", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("OE[*_a&[hN3WP", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByTag("head");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("OE[*_a&[hN3WP", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("OE[*_a&[hN3WP", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.appendTo(document0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertNotNull(document1);
      
      Element element0 = new Element("Q,*;");
      assertEquals("Q,*;", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("Q,*;", element0.tagName());
      assertNotNull(element0);
      
      Document document2 = (Document)document0.appendTo(element0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Q,*;", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("Q,*;", element0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      
      Elements elements0 = document0.getElementsByAttributeValueContaining(":nth-child(%d)", "~");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      boolean boolean0 = document0.hasClass("</");
      assertFalse(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      document0.nodelistChanged();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      Pattern pattern0 = Pattern.compile(":nth-child(%d)", 98);
      assertEquals(":nth-child(%d)", pattern0.toString());
      assertEquals(98, pattern0.flags());
      assertEquals(":nth-child(%d)", pattern0.pattern());
      assertNotNull(pattern0);
      
      Elements elements1 = document0.getElementsMatchingOwnText(pattern0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":nth-child(%d)", pattern0.toString());
      assertEquals(98, pattern0.flags());
      assertEquals(":nth-child(%d)", pattern0.pattern());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      
      Element element1 = document0.firstElementSibling();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNull(element1);
      
      Element element2 = document0.lastElementSibling();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNull(element2);
      
      String string0 = document0.data();
      assertEquals("", string0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("Tag name must not be empty.");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Tag name must not be empty.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertNotNull(document1);
      
      String string0 = document0.baseUri();
      assertEquals("Tag name must not be empty.", string0);
      assertSame(document0, document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(string0);
      
      String string1 = document1.nodeName();
      assertEquals("#document", string1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Tag name must not be empty.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = document0.html();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string2);
      assertSame(document0, document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document2 = parser0.parseInput("^W OV.og.#,Pf;Vzc", "&#xa0;");
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("&#xa0;", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("&#xa0;", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      String string3 = document2.data();
      assertEquals("", string3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("&#xa0;", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("&#xa0;", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertNotNull(string3);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      Attributes attributes0 = document0.attributes();
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      assertFalse(document0.equals((Object)document2));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("</", document3.location());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Element element0 = new Element("</");
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      Element element1 = element0.appendTo(document3);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(2, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("</", document3.location());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals("</", element1.nodeName());
      assertEquals("</", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Element element2 = new Element("</");
      assertFalse(element2.hasParent());
      assertEquals("", element2.baseUri());
      assertEquals("</", element2.nodeName());
      assertEquals("</", element2.tagName());
      assertEquals(0, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertNotNull(element2);
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      
      Document document4 = (Document)document1.toggleClass("dfn");
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals("</", document4.location());
      assertTrue(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.siblingIndex());
      assertEquals("</", document4.baseUri());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      
      boolean boolean0 = document2.hasClass("class");
      assertFalse(boolean0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      
      document3.nodelistChanged();
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(2, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("</", document3.location());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Pattern pattern0 = Pattern.compile("yG#y", 6);
      assertEquals(6, pattern0.flags());
      assertEquals("yG#y", pattern0.pattern());
      assertEquals("yG#y", pattern0.toString());
      assertNotNull(pattern0);
      
      Elements elements0 = document1.getElementsMatchingOwnText(pattern0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(6, pattern0.flags());
      assertEquals("yG#y", pattern0.pattern());
      assertEquals("yG#y", pattern0.toString());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      
      Element element3 = document3.head();
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(element3, element2);
      assertNotSame(element3, element1);
      assertNotSame(element3, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(2, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("</", document3.location());
      assertEquals("head", element3.nodeName());
      assertEquals("</", element3.baseUri());
      assertTrue(element3.isBlock());
      assertEquals(0, element3.childNodeSize());
      assertTrue(element3.hasParent());
      assertEquals("head", element3.tagName());
      assertEquals(0, element3.siblingIndex());
      assertNotNull(element3);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element3.equals((Object)element0));
      
      Element element4 = element1.lastElementSibling();
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(element0, element2);
      assertSame(element0, element1);
      assertNotSame(element0, element3);
      assertSame(element0, element4);
      assertSame(element1, element0);
      assertNotSame(element1, element3);
      assertSame(element1, element4);
      assertNotSame(element1, element2);
      assertSame(element4, element0);
      assertNotSame(element4, element2);
      assertSame(element4, element1);
      assertNotSame(element4, element3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(2, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("</", document3.location());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals("</", element1.nodeName());
      assertEquals("</", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("", element4.baseUri());
      assertEquals("</", element4.tagName());
      assertEquals(0, element4.childNodeSize());
      assertFalse(element4.isBlock());
      assertEquals("</", element4.nodeName());
      assertEquals(1, element4.siblingIndex());
      assertTrue(element4.hasParent());
      assertNotNull(element4);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element3));
      assertFalse(element1.equals((Object)element3));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element4.equals((Object)element2));
      assertFalse(element4.equals((Object)element3));
      
      String string0 = document0.data();
      assertEquals("", string0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = Parser.parse("</", "</");
      assertNotSame(document1, document0);
      assertFalse(document1.hasParent());
      assertEquals("</", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.location());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("</", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Element element0 = new Element("</");
      assertEquals("</", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = element0.appendTo(document3);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.location());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("</", element0.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals("</", element1.tagName());
      assertEquals("", element1.baseUri());
      assertEquals("</", element1.nodeName());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Elements elements0 = document0.getElementsByAttributeValueContaining("d'atbtkc>u+", "tq");
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      
      Tag tag0 = Tag.valueOf("textarea");
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isFormSubmittable());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isFormSubmittable());
      assertEquals(0, attributes0.size());
      assertEquals("textarea", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals("textarea", formElement0.baseUri());
      assertEquals("textarea", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertNotNull(formElement0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Elements elements1 = document3.getElementsMatchingText("d'atbtkc>u+");
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(elements1, elements0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.location());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertTrue(elements1.equals((Object)elements0));
      
      Document document4 = parser0.parseInput("</", "tq");
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document4.isBlock());
      assertEquals("tq", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals("tq", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertNotNull(document4);
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      
      Element element2 = document0.head();
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.nodeName());
      assertEquals("head", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals("</", element2.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertNotNull(element2);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      
      int int0 = element1.elementSiblingIndex();
      assertEquals(1, int0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document4);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document4);
      assertSame(element0, element1);
      assertNotSame(element0, element2);
      assertSame(element1, element0);
      assertNotSame(element1, element2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.location());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("</", element0.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals("</", element1.tagName());
      assertEquals("", element1.baseUri());
      assertEquals("</", element1.nodeName());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document4));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element1.equals((Object)element2));
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        element2.outerHtmlTail((Appendable) null, 1, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Document.createShell("=J6u:n*");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("=J6u:n*", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("=J6u:n*", document0.baseUri());
      assertNotNull(document0);
      
      StringWriter stringWriter0 = new StringWriter(2573);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(false);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertNotNull(document_OutputSettings2);
      
      document0.outerHtmlTail(stringBuffer0, 2573, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("=J6u:n*", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("=J6u:n*", document0.baseUri());
      assertEquals("</#root>", stringWriter0.toString());
      assertEquals("</#root>", stringBuffer0.toString());
      assertEquals(8, stringBuffer0.length());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Document.createShell("</");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("</", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document1.appendTo(document0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("</", document1.location());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("</", document2.baseUri());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Elements elements0 = document0.nextElementSiblings();
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      
      Element element0 = new Element("</");
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Document document3 = (Document)document2.toggleClass("lj|@c");
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("</", document1.location());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("</", document2.baseUri());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("</", document3.location());
      assertEquals("</", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      
      boolean boolean0 = document2.hasClass("=H05C H,o");
      assertFalse(boolean0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("</", document1.location());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("</", document2.baseUri());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      document0.nodelistChanged();
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      
      Pattern pattern0 = Pattern.compile("lj|@c", (-1934232163));
      assertEquals("lj|@c", pattern0.pattern());
      assertEquals((-1934232099), pattern0.flags());
      assertEquals("lj|@c", pattern0.toString());
      assertNotNull(pattern0);
      
      Elements elements1 = document3.getElementsMatchingOwnText(pattern0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(elements1, elements0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("</", document1.location());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("</", document2.baseUri());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("</", document3.location());
      assertEquals("</", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("lj|@c", pattern0.pattern());
      assertEquals((-1934232099), pattern0.flags());
      assertEquals("lj|@c", pattern0.toString());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertTrue(elements1.equals((Object)elements0));
      
      Element element1 = document1.firstElementSibling();
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(element1, element0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("</", document1.location());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertEquals("html", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("html", element1.tagName());
      assertEquals("</", element1.baseUri());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      
      Document document4 = (Document)element1.lastElementSibling();
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(element1, element0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("</", document1.location());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertEquals("html", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("html", element1.tagName());
      assertEquals("</", element1.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertEquals(1, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("</", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.baseUri());
      assertFalse(document4.isBlock());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document4.equals((Object)document0));
      
      String string0 = document0.data();
      assertEquals("", string0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":not%s", ":not%s");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(":not%s", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":not%s", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      String string0 = document0.baseUri();
      assertEquals(":not%s", string0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(":not%s", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":not%s", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(string0);
      
      boolean boolean0 = document0.hasClass(":not%s");
      assertFalse(boolean0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(":not%s", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":not%s", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Element element0 = document0.createElement("java.lang.string@0000000087");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(":not%s", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":not%s", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(":not%s", element0.baseUri());
      assertNotNull(element0);
      
      Elements elements0 = document0.getElementsMatchingText(":not%s");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(":not%s", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":not%s", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
      assertNotNull(elements0);
      
      Document document1 = (Document)document0.attr(":not%s", false);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(":not%s", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":not%s", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(":not%s", document1.location());
      assertEquals(":not%s", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      Element element1 = document0.head();
      assertSame(document0, document1);
      assertNotSame(element1, element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(":not%s", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":not%s", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertEquals(":not%s", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      
      boolean boolean1 = document1.hasAttributes();
      assertTrue(boolean1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(":not%s", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":not%s", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(":not%s", document1.location());
      assertEquals(":not%s", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Document.createShell("#");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.prependElement("#");
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals("#", element1.nodeName());
      assertEquals("#", element1.tagName());
      assertEquals("#", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      
      String string0 = element0.nodeName();
      assertEquals("head", string0);
      assertNotSame(element0, element1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertNotNull(string0);
      assertFalse(element0.equals((Object)element1));
      
      Pattern pattern0 = Pattern.compile("d'atbtkc>u+");
      assertEquals("d'atbtkc>u+", pattern0.pattern());
      assertEquals("d'atbtkc>u+", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertNotNull(pattern0);
      
      Elements elements0 = element1.getElementsMatchingText(pattern0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals("#", element1.nodeName());
      assertEquals("#", element1.tagName());
      assertEquals("#", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("d'atbtkc>u+", pattern0.pattern());
      assertEquals("d'atbtkc>u+", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      
      // Undeclared exception!
      try { 
        element1.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "[%s*=%s]";
      Document document0 = Parser.parseBodyFragment("{V1Z:p.k^~+Y:W,", "[%s*=%s]");
      assertEquals("#document", document0.nodeName());
      assertEquals("[%s*=%s]", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("[%s*=%s]", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{V1Z:p.k^~+Y:W,");
      assertFalse(boolean0);
      
      Element element0 = document0.head();
      assertEquals("#document", document0.nodeName());
      assertEquals("[%s*=%s]", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("[%s*=%s]", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("[%s*=%s]", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        element0.prependElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = new Document("org.jsoup.parser.Token$Comment");
      assertEquals(0, document0.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Comment", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = Parser.parseBodyFragment("org.jsoup.parser.Token$Comment", "org.jsoup.parser.Token$Comment");
      assertNotSame(document1, document0);
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document1.appendChild(document0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Comment", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Node node0 = document2.nextSibling();
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Comment", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertNull(node0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      boolean boolean0 = document2.hasText();
      assertTrue(boolean0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Comment", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Elements elements0 = document2.getElementsMatchingText("yG#y");
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Comment", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Document document3 = (Document)document2.attr("org.jsoup.parser.Token$Comment", true);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertEquals(0, document0.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Comment", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Comment", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      
      Element element0 = document1.head();
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("org.jsoup.parser.Token$Comment", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      assertFalse(document1.equals((Object)document0));
      
      Element element1 = element0.html("Pattern syntax error: ");
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Comment", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("org.jsoup.parser.Token$Comment", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertNotNull(element1);
      assertFalse(document1.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$IndexEquals", "</");
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document2.toggleClass("org.jsoup.select.Evaluator$IndexEquals");
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("</", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("</", document3.baseUri());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      
      Document document4 = (Document)document0.appendTo(document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("</", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("</", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("</", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals("</", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.siblingIndex());
      assertTrue(document4.hasParent());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      
      Elements elements0 = document0.previousElementSiblings();
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      
      Document document5 = (Document)document0.text("</");
      assertNotSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document5, document0);
      assertNotSame(document5, document2);
      assertSame(document5, document4);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(1, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("</", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertEquals("</", document5.location());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      
      Document document6 = (Document)document5.toggleClass("U4)9T[rb0T");
      assertNotSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document6);
      assertSame(document5, document0);
      assertNotSame(document5, document2);
      assertSame(document5, document4);
      assertNotSame(document5, document1);
      assertSame(document5, document6);
      assertNotSame(document5, document3);
      assertNotSame(document6, document1);
      assertNotSame(document6, document3);
      assertSame(document6, document5);
      assertSame(document6, document0);
      assertNotSame(document6, document2);
      assertSame(document6, document4);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(1, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("</", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertEquals("</", document5.location());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertEquals("</", document6.location());
      assertEquals("#root", document6.tagName());
      assertEquals("</", document6.baseUri());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(1, document6.childNodeSize());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertEquals(1, document6.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertNotNull(document6);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document2));
      
      boolean boolean0 = document3.hasClass("org.jsoup.select.Evaluator$IndexEquals");
      assertFalse(boolean0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document2, document6);
      assertNotSame(document3, document5);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document4);
      assertNotSame(document3, document6);
      assertSame(document3, document2);
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("</", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("</", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document6));
      
      Element element0 = document1.head();
      assertNotSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document6);
      assertNotSame(document1, document6);
      assertNotSame(document1, document4);
      assertNotSame(document1, document5);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("</", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("</", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("</", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("</", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("</", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Element element0 = new Element("</");
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.appendTo(document3);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals("</", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("</", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertFalse(element0.isBlock());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("</", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals("</", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Elements elements0 = document0.getElementsByAttributeValueContaining("d'atbtkc>u+", "tq");
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      
      Tag tag0 = Tag.valueOf("textarea");
      assertEquals("textarea", tag0.toString());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.preserveWhitespace());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      assertEquals("textarea", tag0.toString());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.preserveWhitespace());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals("textarea", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals("textarea", formElement0.baseUri());
      assertEquals("textarea", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertNotNull(formElement0);
      
      FormElement formElement1 = formElement0.addElement(document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("textarea", tag0.toString());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.preserveWhitespace());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals("textarea", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals("textarea", formElement0.baseUri());
      assertEquals("textarea", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("textarea", formElement1.baseUri());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("textarea", formElement1.nodeName());
      assertEquals("textarea", formElement1.tagName());
      assertFalse(formElement1.hasParent());
      assertNotNull(formElement1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      
      FormElement formElement2 = new FormElement(tag0, "</", attributes0);
      assertEquals("textarea", tag0.toString());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.preserveWhitespace());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertFalse(formElement2.hasParent());
      assertEquals("textarea", formElement2.tagName());
      assertEquals("textarea", formElement2.nodeName());
      assertEquals(0, formElement2.childNodeSize());
      assertFalse(formElement2.isBlock());
      assertEquals("</", formElement2.baseUri());
      assertEquals(0, formElement2.siblingIndex());
      assertNotNull(formElement2);
      assertFalse(formElement2.equals((Object)formElement0));
      assertFalse(formElement2.equals((Object)formElement1));
      
      formElement2.reparentChild(formElement0);
      assertNotSame(formElement0, formElement2);
      assertSame(formElement0, formElement1);
      assertNotSame(formElement2, formElement0);
      assertNotSame(formElement2, formElement1);
      assertEquals("textarea", tag0.toString());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.preserveWhitespace());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals("textarea", formElement0.nodeName());
      assertTrue(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("textarea", formElement0.baseUri());
      assertEquals("textarea", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement2.hasParent());
      assertEquals("textarea", formElement2.tagName());
      assertEquals("textarea", formElement2.nodeName());
      assertEquals(0, formElement2.childNodeSize());
      assertFalse(formElement2.isBlock());
      assertEquals("</", formElement2.baseUri());
      assertEquals(0, formElement2.siblingIndex());
      assertFalse(formElement0.equals((Object)formElement2));
      assertFalse(formElement2.equals((Object)formElement0));
      assertFalse(formElement2.equals((Object)formElement1));
      
      int int0 = formElement0.elementSiblingIndex();
      assertEquals(0, int0);
      assertNotSame(formElement0, formElement2);
      assertSame(formElement0, formElement1);
      assertEquals("textarea", tag0.toString());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.preserveWhitespace());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals("textarea", formElement0.nodeName());
      assertTrue(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("textarea", formElement0.baseUri());
      assertEquals("textarea", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.equals((Object)formElement2));
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Element element2 = element0.insertChildren(0, (Collection<? extends Node>) elements0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertEquals(1, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("</", element2.tagName());
      assertEquals("</", element2.nodeName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertNotNull(element2);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      
      Elements elements1 = formElement2.getElementsContainingOwnText("</");
      assertNotSame(elements1, elements0);
      assertNotSame(formElement2, formElement0);
      assertNotSame(formElement2, formElement1);
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertEquals("textarea", tag0.toString());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.preserveWhitespace());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertFalse(formElement2.hasParent());
      assertEquals("textarea", formElement2.tagName());
      assertEquals("textarea", formElement2.nodeName());
      assertEquals(0, formElement2.childNodeSize());
      assertFalse(formElement2.isBlock());
      assertEquals("</", formElement2.baseUri());
      assertEquals(0, formElement2.siblingIndex());
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(formElement2.equals((Object)formElement0));
      assertFalse(formElement2.equals((Object)formElement1));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.location());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("</", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("</", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("</", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Element element0 = new Element("</");
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.tagName());
      assertEquals("</", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.appendTo(document3);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("</", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("</", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("</", document3.location());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("</", element0.tagName());
      assertEquals("</", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("</", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("</", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Elements elements0 = document0.getElementsByAttributeValueContaining("d'atbtkc>u+", "tq");
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      
      Tag tag0 = Tag.valueOf("xqhzN tM_D");
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals("xqhzN tM_D", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("xqhzN tM_D", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertNotNull(tag0);
      
      Element element2 = new Element(tag0, "PboH0^(");
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals("xqhzN tM_D", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("xqhzN tM_D", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, element2.siblingIndex());
      assertEquals("PboH0^(", element2.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertEquals("xqhzN tM_D", element2.nodeName());
      assertFalse(element2.isBlock());
      assertFalse(element2.hasParent());
      assertEquals("xqhzN tM_D", element2.tagName());
      assertNotNull(element2);
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      
      Element element3 = new Element("d'atbtkc>u+");
      assertEquals("d'atbtkc>u+", element3.tagName());
      assertEquals("d'atbtkc>u+", element3.nodeName());
      assertEquals("", element3.baseUri());
      assertEquals(0, element3.siblingIndex());
      assertFalse(element3.isBlock());
      assertEquals(0, element3.childNodeSize());
      assertFalse(element3.hasParent());
      assertNotNull(element3);
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element1));
      
      Element element4 = element3.val("tq");
      assertNotSame(element3, element0);
      assertNotSame(element3, element2);
      assertNotSame(element3, element1);
      assertSame(element3, element4);
      assertNotSame(element4, element1);
      assertNotSame(element4, element0);
      assertSame(element4, element3);
      assertNotSame(element4, element2);
      assertEquals("d'atbtkc>u+", element3.tagName());
      assertEquals("d'atbtkc>u+", element3.nodeName());
      assertEquals("", element3.baseUri());
      assertEquals(0, element3.siblingIndex());
      assertFalse(element3.isBlock());
      assertEquals(0, element3.childNodeSize());
      assertFalse(element3.hasParent());
      assertEquals(0, element4.siblingIndex());
      assertEquals("", element4.baseUri());
      assertFalse(element4.isBlock());
      assertEquals("d'atbtkc>u+", element4.nodeName());
      assertFalse(element4.hasParent());
      assertEquals(0, element4.childNodeSize());
      assertEquals("d'atbtkc>u+", element4.tagName());
      assertNotNull(element4);
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element4.equals((Object)element1));
      assertFalse(element4.equals((Object)element0));
      assertFalse(element4.equals((Object)element2));
      
      Element element5 = element0.after("@<@#rT");
      assertNotSame(element0, element3);
      assertSame(element0, element1);
      assertSame(element0, element5);
      assertNotSame(element0, element4);
      assertNotSame(element0, element2);
      assertSame(element5, element0);
      assertSame(element5, element1);
      assertNotSame(element5, element4);
      assertNotSame(element5, element2);
      assertNotSame(element5, element3);
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("</", element0.tagName());
      assertEquals("</", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(1, element5.siblingIndex());
      assertEquals("</", element5.tagName());
      assertEquals(0, element5.childNodeSize());
      assertTrue(element5.hasParent());
      assertEquals("</", element5.nodeName());
      assertEquals("", element5.baseUri());
      assertFalse(element5.isBlock());
      assertNotNull(element5);
      assertFalse(element0.equals((Object)element3));
      assertFalse(element0.equals((Object)element4));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element5.equals((Object)element4));
      assertFalse(element5.equals((Object)element2));
      assertFalse(element5.equals((Object)element3));
      
      Document document4 = Parser.parseBodyFragment("L3#", "{.%HpqQ=bY!,b?+W(]$");
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("{.%HpqQ=bY!,b?+W(]$", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals("{.%HpqQ=bY!,b?+W(]$", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertNotNull(document4);
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      
      Elements elements1 = document4.getElementsContainingOwnText("@<@#rT");
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(elements1, elements0);
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("{.%HpqQ=bY!,b?+W(]$", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals("{.%HpqQ=bY!,b?+W(]$", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertTrue(elements1.equals((Object)elements0));
      
      Document document5 = (Document)document3.html("tq");
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertSame(document1, document5);
      assertNotSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document5);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document5);
      assertNotSame(document3, document4);
      assertNotSame(document3, document2);
      assertSame(document5, document1);
      assertSame(document5, document3);
      assertNotSame(document5, document2);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("</", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("</", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("</", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("</", document5.location());
      assertEquals("</", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertEquals("#document", document5.nodeName());
      assertEquals(1, document5.siblingIndex());
      assertTrue(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "'4SY!IoD8yVp+u@";
      Document document0 = new Document("'4SY!IoD8yVp+u@");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("'4SY!IoD8yVp+u@", document0.location());
      assertEquals("'4SY!IoD8yVp+u@", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        document0.select((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.baseUri());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Element element0 = new Element("</");
      assertEquals("</", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = element0.appendTo(document3);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals("</", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.baseUri());
      assertEquals("</", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("</", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("</", element1.tagName());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Elements elements0 = document0.getElementsByAttributeValueContaining("d'atbtkc>u+", "tq");
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      
      Tag tag0 = Tag.valueOf("dl");
      assertEquals("dl", tag0.toString());
      assertEquals("dl", tag0.getName());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "dl", attributes0);
      assertEquals("dl", tag0.toString());
      assertEquals("dl", tag0.getName());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertTrue(formElement0.isBlock());
      assertEquals("dl", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("dl", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("dl", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertNotNull(formElement0);
      
      FormElement formElement1 = formElement0.addElement(document2);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("dl", tag0.toString());
      assertEquals("dl", tag0.getName());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertTrue(formElement0.isBlock());
      assertEquals("dl", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("dl", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("dl", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertTrue(formElement1.isBlock());
      assertEquals("dl", formElement1.tagName());
      assertEquals("dl", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("dl", formElement1.nodeName());
      assertEquals(0, formElement1.childNodeSize());
      assertNotNull(formElement1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FormElement formElement2 = new FormElement(tag0, "</", attributes0);
      assertEquals("dl", tag0.toString());
      assertEquals("dl", tag0.getName());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertEquals("</", formElement2.baseUri());
      assertEquals("dl", formElement2.nodeName());
      assertTrue(formElement2.isBlock());
      assertEquals(0, formElement2.childNodeSize());
      assertEquals(0, formElement2.siblingIndex());
      assertFalse(formElement2.hasParent());
      assertEquals("dl", formElement2.tagName());
      assertNotNull(formElement2);
      assertFalse(formElement2.equals((Object)formElement1));
      assertFalse(formElement2.equals((Object)formElement0));
      
      formElement2.reparentChild(formElement0);
      assertSame(formElement0, formElement1);
      assertNotSame(formElement0, formElement2);
      assertNotSame(formElement2, formElement1);
      assertNotSame(formElement2, formElement0);
      assertEquals("dl", tag0.toString());
      assertEquals("dl", tag0.getName());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertTrue(formElement0.isBlock());
      assertEquals("dl", formElement0.tagName());
      assertEquals("dl", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("dl", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("</", formElement2.baseUri());
      assertEquals("dl", formElement2.nodeName());
      assertTrue(formElement2.isBlock());
      assertEquals(0, formElement2.childNodeSize());
      assertEquals(0, formElement2.siblingIndex());
      assertFalse(formElement2.hasParent());
      assertEquals("dl", formElement2.tagName());
      assertFalse(formElement0.equals((Object)formElement2));
      assertFalse(formElement2.equals((Object)formElement1));
      assertFalse(formElement2.equals((Object)formElement0));
      
      int int0 = formElement0.elementSiblingIndex();
      assertEquals(0, int0);
      assertSame(formElement0, formElement1);
      assertNotSame(formElement0, formElement2);
      assertEquals("dl", tag0.toString());
      assertEquals("dl", tag0.getName());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertTrue(formElement0.isBlock());
      assertEquals("dl", formElement0.tagName());
      assertEquals("dl", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("dl", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.equals((Object)formElement2));
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      FormElement formElement3 = formElement2.addElement(element1);
      assertNotSame(formElement3, formElement0);
      assertNotSame(formElement3, formElement1);
      assertSame(formElement3, formElement2);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(formElement2, formElement1);
      assertSame(formElement2, formElement3);
      assertNotSame(formElement2, formElement0);
      assertEquals(0, formElement3.siblingIndex());
      assertFalse(formElement3.hasParent());
      assertEquals("dl", formElement3.tagName());
      assertEquals(0, formElement3.childNodeSize());
      assertEquals("</", formElement3.baseUri());
      assertTrue(formElement3.isBlock());
      assertEquals("dl", formElement3.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals("</", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.baseUri());
      assertEquals("</", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("</", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("</", element1.tagName());
      assertEquals("dl", tag0.toString());
      assertEquals("dl", tag0.getName());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertEquals("</", formElement2.baseUri());
      assertEquals("dl", formElement2.nodeName());
      assertTrue(formElement2.isBlock());
      assertEquals(0, formElement2.childNodeSize());
      assertEquals(0, formElement2.siblingIndex());
      assertFalse(formElement2.hasParent());
      assertEquals("dl", formElement2.tagName());
      assertNotNull(formElement3);
      assertFalse(formElement3.equals((Object)formElement0));
      assertFalse(formElement3.equals((Object)formElement1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(formElement2.equals((Object)formElement1));
      assertFalse(formElement2.equals((Object)formElement0));
      
      String string0 = formElement1.cssSelector();
      assertEquals("dl > dl", string0);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(formElement0, formElement3);
      assertSame(formElement0, formElement1);
      assertNotSame(formElement0, formElement2);
      assertNotSame(formElement1, formElement2);
      assertSame(formElement1, formElement0);
      assertNotSame(formElement1, formElement3);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("dl", tag0.toString());
      assertEquals("dl", tag0.getName());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertTrue(formElement0.isBlock());
      assertEquals("dl", formElement0.tagName());
      assertEquals("dl", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("dl", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertTrue(formElement1.isBlock());
      assertEquals("dl", formElement1.tagName());
      assertEquals("dl", formElement1.baseUri());
      assertTrue(formElement1.hasParent());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("dl", formElement1.nodeName());
      assertEquals(0, formElement1.childNodeSize());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(formElement0.equals((Object)formElement3));
      assertFalse(formElement0.equals((Object)formElement2));
      assertFalse(formElement1.equals((Object)formElement2));
      assertFalse(formElement1.equals((Object)formElement3));
      
      String string1 = formElement1.baseUri();
      assertEquals("dl", string1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(formElement0, formElement3);
      assertSame(formElement0, formElement1);
      assertNotSame(formElement0, formElement2);
      assertNotSame(formElement1, formElement2);
      assertSame(formElement1, formElement0);
      assertNotSame(formElement1, formElement3);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("dl", tag0.toString());
      assertEquals("dl", tag0.getName());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertTrue(formElement0.isBlock());
      assertEquals("dl", formElement0.tagName());
      assertEquals("dl", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("dl", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertTrue(formElement1.isBlock());
      assertEquals("dl", formElement1.tagName());
      assertEquals("dl", formElement1.baseUri());
      assertTrue(formElement1.hasParent());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("dl", formElement1.nodeName());
      assertEquals(0, formElement1.childNodeSize());
      assertNotNull(string1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(formElement0.equals((Object)formElement3));
      assertFalse(formElement0.equals((Object)formElement2));
      assertFalse(formElement1.equals((Object)formElement2));
      assertFalse(formElement1.equals((Object)formElement3));
      
      Document document4 = (Document)document3.html("org.jsoup0parder.Token$CDaIa");
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("</", document4.baseUri());
      assertEquals("</", document4.location());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.siblingIndex());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.baseUri());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("d'AtbtKC>ug", parseSettings0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertNotNull(tag0);
      
      String string0 = "-}hJudcG'k9";
      FormElement formElement0 = new FormElement(tag0, "-}hJudcG'k9", (Attributes) null);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertNotNull(formElement0);
      
      FormElement formElement1 = formElement0.addElement((Element) null);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertFalse(formElement1.hasParent());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertEquals(0, formElement1.childNodeSize());
      assertNotNull(formElement1);
      
      formElement1.reparentChild(formElement0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertTrue(formElement1.hasParent());
      assertFalse(formElement1.isBlock());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertEquals(0, formElement1.childNodeSize());
      
      String string1 = "&amp;";
      // Undeclared exception!
      try { 
        formElement1.appendChild(formElement0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":not%s", "Tag name must not be empty.");
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass(":not%s");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = document1.hasClass("");
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Elements elements0 = document1.getElementsMatchingText("Tag name must not be empty.");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Document document2 = (Document)document1.attr(":not%s", false);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertEquals("Tag name must not be empty.", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      
      Element element0 = document1.head();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.prependChild(document0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertEquals("Tag name must not be empty.", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
      assertNotNull(element1);
      
      int int0 = document0.childNodeSize();
      assertEquals(1, int0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":not%s", "Tag name must not be empty.");
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass(":not%s");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      String string0 = document0.baseUri();
      assertEquals("Tag name must not be empty.", string0);
      assertSame(document0, document1);
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(string0);
      
      Document document2 = (Document)document1.toggleClass("RCDATAEndTagName");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      
      boolean boolean0 = document1.hasClass("RCDATAEndTagName");
      assertTrue(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      
      String string1 = Node.EmptyString;
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = document2.hasClass("tuPNvq");
      assertFalse(boolean1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(boolean1 == boolean0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Element element0 = new Element("AfterHead");
      assertEquals("AfterHead", element0.nodeName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("AfterHead", element0.tagName());
      assertNotNull(element0);
      
      Document document3 = element0.ownerDocument();
      assertEquals("AfterHead", element0.nodeName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("AfterHead", element0.tagName());
      assertNull(document3);
      
      Document document4 = document1.normalise();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals("Tag name must not be empty.", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertNotNull(document4);
      
      Document document5 = Parser.parseBodyFragmentRelaxed("", "");
      assertNotSame(document5, document1);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotSame(document5, document4);
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("", document5.baseUri());
      assertFalse(document5.hasParent());
      assertEquals(1, document5.childNodeSize());
      assertEquals("", document5.location());
      assertEquals("#root", document5.tagName());
      assertNotNull(document5);
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
      
      Element element1 = document5.previousElementSibling();
      assertNotSame(document5, document1);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotSame(document5, document4);
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("", document5.baseUri());
      assertFalse(document5.hasParent());
      assertEquals(1, document5.childNodeSize());
      assertEquals("", document5.location());
      assertEquals("#root", document5.tagName());
      assertNull(element1);
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("</", document3.location());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Element element0 = new Element("</");
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Element element1 = element0.appendTo(document3);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("</", document3.location());
      assertEquals(2, document3.childNodeSize());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("</", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("</", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      String string0 = document2.baseUri();
      assertEquals("</", string0);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      
      Elements elements0 = document0.getElementsByAttributeValueContaining("d'atbtkc>u+", "tq");
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      
      Tag tag0 = Tag.valueOf("dl");
      assertFalse(tag0.isData());
      assertEquals("dl", tag0.toString());
      assertEquals("dl", tag0.getName());
      assertFalse(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isKnownTag());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "dl", attributes0);
      assertFalse(tag0.isData());
      assertEquals("dl", tag0.toString());
      assertEquals("dl", tag0.getName());
      assertFalse(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isKnownTag());
      assertEquals(0, attributes0.size());
      assertEquals("dl", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("dl", formElement0.nodeName());
      assertTrue(formElement0.isBlock());
      assertEquals("dl", formElement0.tagName());
      assertNotNull(formElement0);
      
      FormElement formElement1 = formElement0.addElement(document2);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(tag0.isData());
      assertEquals("dl", tag0.toString());
      assertEquals("dl", tag0.getName());
      assertFalse(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isKnownTag());
      assertEquals(0, attributes0.size());
      assertEquals("dl", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("dl", formElement0.nodeName());
      assertTrue(formElement0.isBlock());
      assertEquals("dl", formElement0.tagName());
      assertFalse(formElement1.hasParent());
      assertEquals("dl", formElement1.tagName());
      assertEquals("dl", formElement1.nodeName());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("dl", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertTrue(formElement1.isBlock());
      assertNotNull(formElement1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      
      FormElement formElement2 = new FormElement(tag0, "</", attributes0);
      assertFalse(tag0.isData());
      assertEquals("dl", tag0.toString());
      assertEquals("dl", tag0.getName());
      assertFalse(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isKnownTag());
      assertEquals(0, attributes0.size());
      assertEquals("dl", formElement2.nodeName());
      assertEquals(0, formElement2.childNodeSize());
      assertEquals("dl", formElement2.tagName());
      assertEquals("</", formElement2.baseUri());
      assertTrue(formElement2.isBlock());
      assertEquals(0, formElement2.siblingIndex());
      assertFalse(formElement2.hasParent());
      assertNotNull(formElement2);
      assertFalse(formElement2.equals((Object)formElement1));
      assertFalse(formElement2.equals((Object)formElement0));
      
      formElement2.reparentChild(formElement0);
      assertNotSame(formElement0, formElement2);
      assertSame(formElement0, formElement1);
      assertNotSame(formElement2, formElement1);
      assertNotSame(formElement2, formElement0);
      assertFalse(tag0.isData());
      assertEquals("dl", tag0.toString());
      assertEquals("dl", tag0.getName());
      assertFalse(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isKnownTag());
      assertEquals(0, attributes0.size());
      assertEquals("dl", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("dl", formElement0.nodeName());
      assertTrue(formElement0.isBlock());
      assertEquals("dl", formElement0.tagName());
      assertEquals("dl", formElement2.nodeName());
      assertEquals(0, formElement2.childNodeSize());
      assertEquals("dl", formElement2.tagName());
      assertEquals("</", formElement2.baseUri());
      assertTrue(formElement2.isBlock());
      assertEquals(0, formElement2.siblingIndex());
      assertFalse(formElement2.hasParent());
      assertFalse(formElement0.equals((Object)formElement2));
      assertFalse(formElement2.equals((Object)formElement1));
      assertFalse(formElement2.equals((Object)formElement0));
      
      int int0 = formElement0.elementSiblingIndex();
      assertEquals(0, int0);
      assertNotSame(formElement0, formElement2);
      assertSame(formElement0, formElement1);
      assertFalse(tag0.isData());
      assertEquals("dl", tag0.toString());
      assertEquals("dl", tag0.getName());
      assertFalse(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isKnownTag());
      assertEquals(0, attributes0.size());
      assertEquals("dl", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("dl", formElement0.nodeName());
      assertTrue(formElement0.isBlock());
      assertEquals("dl", formElement0.tagName());
      assertFalse(formElement0.equals((Object)formElement2));
      
      Document document4 = (Document)document2.insertChildren(0, (Collection<? extends Node>) elements0);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document4, document1);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals(2, document4.childNodeSize());
      assertEquals("</", document4.location());
      assertEquals("</", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      
      Elements elements1 = formElement1.getElementsContainingOwnText("tq");
      assertNotSame(elements1, elements0);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(formElement0, formElement2);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertNotSame(formElement1, formElement2);
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(tag0.isData());
      assertEquals("dl", tag0.toString());
      assertEquals("dl", tag0.getName());
      assertFalse(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isKnownTag());
      assertEquals(0, attributes0.size());
      assertEquals("dl", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("dl", formElement0.nodeName());
      assertTrue(formElement0.isBlock());
      assertEquals("dl", formElement0.tagName());
      assertEquals("dl", formElement1.tagName());
      assertEquals("dl", formElement1.nodeName());
      assertTrue(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("dl", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertTrue(formElement1.isBlock());
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(formElement0.equals((Object)formElement2));
      assertFalse(formElement1.equals((Object)formElement2));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("</", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      document1.siblingIndex = 32;
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(32, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Element element0 = new Element("</");
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.appendTo(document3);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(32, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals(32, document3.siblingIndex());
      assertEquals("</", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("</", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertEquals("</", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("</", element1.tagName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("</", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      String string0 = document2.baseUri();
      assertEquals("</", string0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      document1.reparentChild(document0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(32, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      
      boolean boolean0 = document3.hasText();
      assertTrue(boolean0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(32, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals(32, document3.siblingIndex());
      assertEquals("</", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("</", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Elements elements0 = document2.getElementsMatchingText("</");
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertFalse(elements0.isEmpty());
      assertEquals(6, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      Document document4 = (Document)document3.attr("C8S)N", true);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(32, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals(32, document3.siblingIndex());
      assertEquals("</", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("</", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals("</", document4.location());
      assertEquals(32, document4.siblingIndex());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals(2, document4.childNodeSize());
      assertEquals("</", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      
      Document document5 = (Document)document1.empty();
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document5);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document5, document1);
      assertSame(document5, document3);
      assertNotSame(document5, document0);
      assertSame(document5, document4);
      assertNotSame(document5, document2);
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(32, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(32, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("</", document5.location());
      assertEquals("</", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.childNodeSize());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      
      Element element2 = document0.head();
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("head", element2.tagName());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.isBlock());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("</", element2.baseUri());
      assertNotNull(element2);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      
      String string1 = document3.nodeName();
      assertEquals("#document", string1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document5);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertNotSame(document2, document5);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document3, document5);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(32, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals(32, document3.siblingIndex());
      assertEquals("</", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("</", document3.location());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "(dt5Scs@";
      Document document0 = Parser.parseBodyFragment("menu", "U4)9T[rb0T+");
      assertEquals("U4)9T[rb0T+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("U4)9T[rb0T+", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = document0.ownerDocument();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("U4)9T[rb0T+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("U4)9T[rb0T+", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("U4)9T[rb0T+", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("U4)9T[rb0T+", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      Element element0 = document1.body();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("U4)9T[rb0T+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("U4)9T[rb0T+", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("U4)9T[rb0T+", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("U4)9T[rb0T+", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("U4)9T[rb0T+", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = element0.toggleClass("(dt5Scs@");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("U4)9T[rb0T+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("U4)9T[rb0T+", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("U4)9T[rb0T+", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("U4)9T[rb0T+", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("U4)9T[rb0T+", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("U4)9T[rb0T+", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
      
      Element element2 = element1.appendTo(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertEquals("U4)9T[rb0T+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("U4)9T[rb0T+", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("U4)9T[rb0T+", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("U4)9T[rb0T+", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("U4)9T[rb0T+", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("U4)9T[rb0T+", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element2.tagName());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.isBlock());
      assertEquals(1, element2.siblingIndex());
      assertEquals("U4)9T[rb0T+", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals("body", element2.nodeName());
      assertNotNull(element2);
      
      Elements elements0 = document1.previousElementSiblings();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("U4)9T[rb0T+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("U4)9T[rb0T+", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("U4)9T[rb0T+", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("U4)9T[rb0T+", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element3 = element0.toggleClass("U4)9T[rb0T+");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(element0, element3);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element3, element0);
      assertSame(element3, element2);
      assertSame(element3, element1);
      assertEquals("U4)9T[rb0T+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("U4)9T[rb0T+", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("U4)9T[rb0T+", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("U4)9T[rb0T+", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("U4)9T[rb0T+", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element3.nodeName());
      assertTrue(element3.isBlock());
      assertEquals("body", element3.tagName());
      assertEquals("U4)9T[rb0T+", element3.baseUri());
      assertTrue(element3.hasParent());
      assertEquals(1, element3.siblingIndex());
      assertEquals(1, element3.childNodeSize());
      assertNotNull(element3);
      
      boolean boolean0 = document0.hasClass("java.lang.string@0000000039");
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertEquals("U4)9T[rb0T+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("U4)9T[rb0T+", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      Element element4 = element3.toggleClass("U4)9T[rb0T+");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(element0, element3);
      assertSame(element0, element4);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element3, element0);
      assertSame(element3, element2);
      assertSame(element3, element1);
      assertSame(element3, element4);
      assertSame(element4, element3);
      assertSame(element4, element0);
      assertSame(element4, element2);
      assertSame(element4, element1);
      assertEquals("U4)9T[rb0T+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("U4)9T[rb0T+", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("U4)9T[rb0T+", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("U4)9T[rb0T+", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("U4)9T[rb0T+", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element3.nodeName());
      assertTrue(element3.isBlock());
      assertEquals("body", element3.tagName());
      assertEquals("U4)9T[rb0T+", element3.baseUri());
      assertTrue(element3.hasParent());
      assertEquals(1, element3.siblingIndex());
      assertEquals(1, element3.childNodeSize());
      assertEquals("body", element4.tagName());
      assertEquals(1, element4.childNodeSize());
      assertTrue(element4.isBlock());
      assertEquals("body", element4.nodeName());
      assertEquals(1, element4.siblingIndex());
      assertTrue(element4.hasParent());
      assertEquals("U4)9T[rb0T+", element4.baseUri());
      assertNotNull(element4);
      
      boolean boolean1 = element3.hasClass(")@hlp>vq|#w'^u#J");
      assertFalse(boolean1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(element0, element3);
      assertSame(element0, element4);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element3, element0);
      assertSame(element3, element2);
      assertSame(element3, element1);
      assertSame(element3, element4);
      assertEquals("U4)9T[rb0T+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("U4)9T[rb0T+", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("U4)9T[rb0T+", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("U4)9T[rb0T+", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("U4)9T[rb0T+", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element3.nodeName());
      assertTrue(element3.isBlock());
      assertEquals("body", element3.tagName());
      assertEquals("U4)9T[rb0T+", element3.baseUri());
      assertTrue(element3.hasParent());
      assertEquals(1, element3.siblingIndex());
      assertEquals(1, element3.childNodeSize());
      assertTrue(boolean1 == boolean0);
      
      String string1 = Node.EmptyString;
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Tag.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = ":not%s";
      String string1 = "Tag name must not be empty.";
      Document document0 = Parser.parseBodyFragment(":not%s", "Tag name must not be empty.");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.parser((Parser) null);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      Document document2 = (Document)document0.appendChild(document1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      
      document0.reparentChild(document1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      boolean boolean0 = document1.hasText();
      assertTrue(boolean0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      // Undeclared exception!
      document1.prepend(":not%s");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.Token$Comment", "body");
      assertEquals("#document", document0.nodeName());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("body", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("org.jsoup.parser.Token$Comment");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("body", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("body", document1.location());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      Document document2 = (Document)document1.appendTo(document0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("body", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, document0.siblingIndex());
      assertEquals("body", document1.baseUri());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("body", document1.location());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("body", document2.location());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("body", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      
      Elements elements0 = document1.previousElementSiblings();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("body", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, document0.siblingIndex());
      assertEquals("body", document1.baseUri());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("body", document1.location());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      
      Document document3 = (Document)document0.toggleClass("U4)9T[rb0T+");
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("body", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("body", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("body", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(2, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertNotNull(document3);
      
      String string0 = "java.lang.string@0000000039";
      boolean boolean0 = document0.hasClass("java.lang.string@0000000039");
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("body", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, document0.siblingIndex());
      
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document2;
      nodeArray0[1] = (Node) document2;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document2;
      nodeArray0[4] = (Node) document1;
      nodeArray0[5] = (Node) document1;
      nodeArray0[6] = (Node) document3;
      nodeArray0[7] = (Node) document1;
      nodeArray0[8] = (Node) document0;
      // Undeclared exception!
      try { 
        document2.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "</";
      Document document0 = Parser.parse("</", "</");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("</", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("</", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.location());
      assertTrue(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      document1.siblingIndex = 32;
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("</", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(32, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      
      Element element0 = new Element("</");
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("</", element0.nodeName());
      assertEquals("</", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.appendTo(document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document1.baseUri());
      assertEquals("</", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(32, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("</", document3.location());
      assertEquals(32, document3.siblingIndex());
      assertTrue(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals("</", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("</", element0.nodeName());
      assertEquals("</", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("</", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("</", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      String string1 = document2.baseUri();
      assertEquals("</", string1);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(string1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertTrue(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        document1.after("</");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 33, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("</", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Element element0 = new Element("</");
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("</", element0.tagName());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      Element element1 = element0.appendTo(document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("</", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("</", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("</", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      String string0 = document2.baseUri();
      assertEquals("</", string0);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      
      Elements elements0 = document0.getElementsByAttributeValueContaining("d'atbtkc>u+", "tq");
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document4 = (Document)document3.appendText("d'atbtkc>u+");
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertNotSame(document3, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document2);
      assertSame(document4, document1);
      assertNotSame(document4, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(3, document3.childNodeSize());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("</", document4.location());
      assertEquals("</", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(3, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      
      boolean boolean1 = document4.hasText();
      assertTrue(boolean1);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertNotSame(document3, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document2);
      assertSame(document4, document1);
      assertNotSame(document4, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(3, document3.childNodeSize());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("</", document4.location());
      assertEquals("</", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(3, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(boolean1 == boolean0);
      
      Document document5 = document3.clone();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document2, document5);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertNotSame(document3, document5);
      assertNotSame(document3, document2);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document3);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(3, document3.childNodeSize());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(3, document5.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertEquals("</", document5.location());
      assertEquals("</", document5.baseUri());
      assertFalse(document5.hasParent());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document3));
      
      Element element2 = document5.shallowClone();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document2, document5);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertNotSame(document3, document5);
      assertNotSame(document3, document2);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document3);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(3, document3.childNodeSize());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(3, document5.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertEquals("</", document5.location());
      assertEquals("</", document5.baseUri());
      assertFalse(document5.hasParent());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertFalse(element2.isBlock());
      assertEquals("#root", element2.nodeName());
      assertFalse(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertEquals("#root", element2.tagName());
      assertEquals("</", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertNotNull(element2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document3));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      
      document0.nodelistChanged();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      
      Tag tag0 = Tag.valueOf("d'atbtkc>u+");
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertEquals("d'atbtkc>u+", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("d'atbtkc>u+", tag0.getName());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attribute attribute0 = new Attribute("=0lF", "d+C73#=+BDDpF]$8p#");
      assertEquals("=0lF", attribute0.getKey());
      assertEquals("d+C73#=+BDDpF]$8p#", attribute0.getValue());
      assertNotNull(attribute0);
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals("=0lF", attribute0.getKey());
      assertEquals("d+C73#=+BDDpF]$8p#", attribute0.getValue());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      
      Attributes attributes2 = attributes1.put(";", true);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertEquals(2, attributes0.size());
      assertEquals("=0lF", attribute0.getKey());
      assertEquals("d+C73#=+BDDpF]$8p#", attribute0.getValue());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertNotNull(attributes2);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "tq", attributes2);
      assertEquals(2, attributes0.size());
      assertEquals("=0lF", attribute0.getKey());
      assertEquals("d+C73#=+BDDpF]$8p#", attribute0.getValue());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("tq", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("d'atbtkc>u+", pseudoTextElement0.nodeName());
      assertEquals("d'atbtkc>u+", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertEquals("d'atbtkc>u+", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("d'atbtkc>u+", tag0.getName());
      assertFalse(tag0.isBlock());
      assertNotNull(pseudoTextElement0);
      
      boolean boolean2 = element2.hasClass("=0lF");
      assertFalse(boolean2);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document2, document5);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertNotSame(document3, document5);
      assertNotSame(document3, document2);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document3);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(3, document3.childNodeSize());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(3, document5.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertEquals("</", document5.location());
      assertEquals("</", document5.baseUri());
      assertFalse(document5.hasParent());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertFalse(element2.isBlock());
      assertEquals("#root", element2.nodeName());
      assertFalse(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertEquals("#root", element2.tagName());
      assertEquals("</", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document2));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document3));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      
      List<TextNode> list0 = document5.textNodes();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document2, document5);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertNotSame(document3, document5);
      assertNotSame(document3, document2);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document3);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(3, document3.childNodeSize());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(3, document5.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertEquals("</", document5.location());
      assertEquals("</", document5.baseUri());
      assertFalse(document5.hasParent());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document3));
      
      List<Node> list1 = document5.ensureChildNodes();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document2, document5);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertNotSame(document3, document5);
      assertNotSame(document3, document2);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document3);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(3, document3.childNodeSize());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertFalse(list1.isEmpty());
      assertEquals(3, list1.size());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(3, document5.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertEquals("</", document5.location());
      assertEquals("</", document5.baseUri());
      assertFalse(document5.hasParent());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertNotNull(list1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document3));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":not%s", "Tag name must not be empty.");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("Sdcpd,+007^'yMO!");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      Document document2 = (Document)document1.appendTo(document0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      Document document3 = (Document)document2.toggleClass("Tag name must not be empty.");
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(2, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("Tag name must not be empty.", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("Tag name must not be empty.", document3.baseUri());
      assertNotNull(document3);
      
      boolean boolean0 = document0.hasClass(":not%s");
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      
      Document document4 = (Document)document0.toggleClass("java.lang.string@0000000095 sdcpd,+007^'ymo! pboh0^(");
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals("Tag name must not be empty.", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.siblingIndex());
      assertEquals("Tag name must not be empty.", document4.baseUri());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertNotNull(document4);
      
      boolean boolean1 = document3.hasClass("0;/E@V!`a~xil4f>{");
      assertFalse(boolean1);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(2, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("Tag name must not be empty.", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("Tag name must not be empty.", document3.baseUri());
      assertTrue(boolean1 == boolean0);
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      Tag tag0 = Tag.valueOf("U4)9T[rb0T+");
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("U4)9T[rb0T+", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("U4)9T[rb0T+", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertNotNull(tag0);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "pu-Hiczd", (Attributes) null);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("U4)9T[rb0T+", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("U4)9T[rb0T+", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("U4)9T[rb0T+", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("pu-Hiczd", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("U4)9T[rb0T+", pseudoTextElement0.tagName());
      assertNotNull(pseudoTextElement0);
      
      Document document5 = (Document)document2.text("Pattern syntax error: ");
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document5, document3);
      assertSame(document5, document2);
      assertSame(document5, document4);
      assertSame(document5, document0);
      assertSame(document5, document1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document5.baseUri());
      assertEquals("Tag name must not be empty.", document5.location());
      assertEquals("#document", document5.nodeName());
      assertEquals(1, document5.siblingIndex());
      assertTrue(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertNotNull(document5);
      
      boolean boolean2 = document5.hasClass("pu-Hiczd");
      assertFalse(boolean2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document5, document3);
      assertSame(document5, document2);
      assertSame(document5, document4);
      assertSame(document5, document0);
      assertSame(document5, document1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document5.baseUri());
      assertEquals("Tag name must not be empty.", document5.location());
      assertEquals("#document", document5.nodeName());
      assertEquals(1, document5.siblingIndex());
      assertTrue(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      List<TextNode> list0 = document3.textNodes();
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(2, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("Tag name must not be empty.", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("Tag name must not be empty.", document3.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("</", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("</", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Element element0 = new Element("</");
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.appendTo(document3);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("</", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.baseUri());
      assertEquals("</", document3.location());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertFalse(element0.isBlock());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("</", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals("</", element1.tagName());
      assertEquals("", element1.baseUri());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Element element2 = (Element)element1.clearAttributes();
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("</", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.baseUri());
      assertEquals("</", document3.location());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertFalse(element0.isBlock());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("</", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals("</", element1.tagName());
      assertEquals("", element1.baseUri());
      assertEquals("</", element2.nodeName());
      assertEquals("", element2.baseUri());
      assertEquals("</", element2.tagName());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertNotNull(element2);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      String string0 = document2.baseUri();
      assertEquals("</", string0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("d'atbtkc>u+", "d'atbtkc>u+");
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document4 = (Document)document3.appendText("d'atbtkc>u+");
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertNotSame(document4, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("</", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.baseUri());
      assertEquals("</", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertTrue(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("</", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(3, document4.childNodeSize());
      assertEquals("</", document4.location());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      
      boolean boolean1 = document4.hasText();
      assertTrue(boolean1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertNotSame(document4, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("</", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.baseUri());
      assertEquals("</", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertTrue(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("</", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(3, document4.childNodeSize());
      assertEquals("</", document4.location());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(boolean1 == boolean0);
      
      Document document5 = document3.clone();
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document1, document5);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document5);
      assertNotSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document3, document5);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("</", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.baseUri());
      assertEquals("</", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("</", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(3, document5.childNodeSize());
      assertEquals("</", document5.location());
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals("#root", document5.tagName());
      assertEquals(0, document5.siblingIndex());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      
      Element element3 = document5.shallowClone();
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document1, document5);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document5);
      assertNotSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document3, document5);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotSame(element3, element2);
      assertNotSame(element3, element1);
      assertNotSame(element3, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("</", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.baseUri());
      assertEquals("</", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("</", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(3, document5.childNodeSize());
      assertEquals("</", document5.location());
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals("#root", document5.tagName());
      assertEquals(0, document5.siblingIndex());
      assertFalse(element3.isBlock());
      assertFalse(element3.hasParent());
      assertEquals("#root", element3.nodeName());
      assertEquals(0, element3.siblingIndex());
      assertEquals("</", element3.baseUri());
      assertEquals("#root", element3.tagName());
      assertEquals(0, element3.childNodeSize());
      assertNotNull(element3);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element3.equals((Object)element0));
      
      document0.nodelistChanged();
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      
      Pattern pattern0 = Pattern.compile("=0lF", 1350);
      assertEquals("=0lF", pattern0.toString());
      assertEquals("=0lF", pattern0.pattern());
      assertEquals(1350, pattern0.flags());
      assertNotNull(pattern0);
      
      Elements elements1 = document5.getElementsMatchingOwnText(pattern0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(elements1, elements0);
      assertNotSame(document1, document5);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document5);
      assertNotSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document3, document5);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertEquals("=0lF", pattern0.toString());
      assertEquals("=0lF", pattern0.pattern());
      assertEquals(1350, pattern0.flags());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("</", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.baseUri());
      assertEquals("</", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("</", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(3, document5.childNodeSize());
      assertEquals("</", document5.location());
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals("#root", document5.tagName());
      assertEquals(0, document5.siblingIndex());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      assertEquals(":empty", evaluator_IsEmpty0.toString());
      assertNotNull(evaluator_IsEmpty0);
      
      boolean boolean2 = element3.is((Evaluator) evaluator_IsEmpty0);
      assertTrue(boolean2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document1, document5);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document5);
      assertNotSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document3, document5);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotSame(element3, element2);
      assertNotSame(element3, element1);
      assertNotSame(element3, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("</", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(":empty", evaluator_IsEmpty0.toString());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.baseUri());
      assertEquals("</", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("</", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(3, document5.childNodeSize());
      assertEquals("</", document5.location());
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals("#root", document5.tagName());
      assertEquals(0, document5.siblingIndex());
      assertFalse(element3.isBlock());
      assertFalse(element3.hasParent());
      assertEquals("#root", element3.nodeName());
      assertEquals(0, element3.siblingIndex());
      assertEquals("</", element3.baseUri());
      assertEquals("#root", element3.tagName());
      assertEquals(0, element3.childNodeSize());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document3));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element3.equals((Object)element0));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("</", document2.baseUri());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("</", document2.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("</", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Elements elements0 = document2.nextElementSiblings();
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("</", document2.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      
      Element element0 = new Element("</");
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("</", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      
      String string0 = "lj|@c";
      Document document4 = (Document)document3.toggleClass("lj|@c");
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertNotSame(document4, document2);
      assertSame(document4, document3);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("</", document2.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("</", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("</", document4.location());
      assertEquals("</", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      
      boolean boolean0 = element0.hasClass(")+=H^5C H,o");
      assertFalse(boolean0);
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("</", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      
      String string1 = Node.EmptyString;
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = document0.hasClass(")+=H^5C H,o");
      assertFalse(boolean1);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertTrue(boolean1 == boolean0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document5 = document2.ownerDocument();
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document2, document5);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document5, document0);
      assertNotSame(document5, document3);
      assertSame(document5, document2);
      assertNotSame(document5, document4);
      assertNotSame(document5, document1);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals("</", document5.baseUri());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("</", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(2, document5.childNodeSize());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      
      Document document6 = document5.normalise();
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document2, document6);
      assertNotSame(document2, document4);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document5, document0);
      assertNotSame(document5, document3);
      assertSame(document5, document2);
      assertSame(document5, document6);
      assertNotSame(document5, document4);
      assertNotSame(document5, document1);
      assertSame(document6, document0);
      assertSame(document6, document5);
      assertNotSame(document6, document3);
      assertSame(document6, document2);
      assertNotSame(document6, document4);
      assertNotSame(document6, document1);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals("</", document5.baseUri());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("</", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(2, document5.childNodeSize());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.updateMetaCharsetElement());
      assertFalse(document6.isBlock());
      assertEquals("</", document6.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertEquals("</", document6.location());
      assertEquals("#document", document6.nodeName());
      assertEquals(2, document6.childNodeSize());
      assertNotNull(document6);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document1));
      
      // Undeclared exception!
      try { 
        document6.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("</", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Elements elements0 = document2.nextElementSiblings();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      
      Element element0 = new Element("</");
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.tagName());
      assertNotNull(element0);
      
      Document document4 = (Document)document3.toggleClass("lj|@c");
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("</", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("</", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals("</", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      
      Document document5 = (Document)document1.val("</");
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document5, document3);
      assertNotSame(document5, document0);
      assertSame(document5, document4);
      assertSame(document5, document1);
      assertNotSame(document5, document2);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.childNodeSize());
      assertEquals("</", document5.location());
      assertEquals("</", document5.baseUri());
      assertEquals(1, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      
      Document document6 = (Document)document5.after("=H05C H,o");
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document0, document6);
      assertNotSame(document0, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document6);
      assertNotSame(document1, document0);
      assertSame(document5, document3);
      assertNotSame(document5, document0);
      assertSame(document5, document4);
      assertSame(document5, document1);
      assertNotSame(document5, document2);
      assertSame(document5, document6);
      assertSame(document6, document5);
      assertSame(document6, document1);
      assertNotSame(document6, document2);
      assertNotSame(document6, document0);
      assertSame(document6, document3);
      assertSame(document6, document4);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.childNodeSize());
      assertEquals("</", document5.location());
      assertEquals("</", document5.baseUri());
      assertEquals(1, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#document", document6.nodeName());
      assertEquals(1, document6.siblingIndex());
      assertEquals("</", document6.baseUri());
      assertFalse(document6.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("#root", document6.tagName());
      assertEquals(1, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("</", document6.location());
      assertTrue(document6.hasParent());
      assertNotNull(document6);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document0));
      
      Elements elements1 = document5.getElementsContainingOwnText("lj|@c");
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document0, document6);
      assertNotSame(document0, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document6);
      assertNotSame(document1, document0);
      assertSame(document5, document3);
      assertNotSame(document5, document0);
      assertSame(document5, document4);
      assertSame(document5, document1);
      assertNotSame(document5, document2);
      assertSame(document5, document6);
      assertNotSame(elements1, elements0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.childNodeSize());
      assertEquals("</", document5.location());
      assertEquals("</", document5.baseUri());
      assertEquals(1, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertTrue(elements1.equals((Object)elements0));
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document7 = document0.quirksMode(document_QuirksMode0);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document7);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document0, document6);
      assertNotSame(document0, document3);
      assertNotSame(document7, document6);
      assertNotSame(document7, document3);
      assertSame(document7, document2);
      assertNotSame(document7, document4);
      assertNotSame(document7, document5);
      assertSame(document7, document0);
      assertNotSame(document7, document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document7.quirksMode());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(3, document7.childNodeSize());
      assertEquals("#root", document7.tagName());
      assertEquals(0, document7.siblingIndex());
      assertEquals("</", document7.baseUri());
      assertFalse(document7.isBlock());
      assertFalse(document7.hasParent());
      assertEquals("</", document7.location());
      assertEquals("#document", document7.nodeName());
      assertNotNull(document7);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document1));
      
      Document document8 = (Document)document7.html(":Lg,ZIX9Cucz@");
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document7);
      assertSame(document0, document8);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document0, document6);
      assertNotSame(document0, document3);
      assertNotSame(document7, document6);
      assertNotSame(document7, document3);
      assertSame(document7, document2);
      assertNotSame(document7, document4);
      assertNotSame(document7, document5);
      assertSame(document7, document8);
      assertSame(document7, document0);
      assertNotSame(document7, document1);
      assertSame(document8, document0);
      assertNotSame(document8, document4);
      assertNotSame(document8, document1);
      assertNotSame(document8, document6);
      assertSame(document8, document7);
      assertNotSame(document8, document5);
      assertSame(document8, document2);
      assertNotSame(document8, document3);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document7.quirksMode());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("#root", document7.tagName());
      assertEquals(0, document7.siblingIndex());
      assertEquals("</", document7.baseUri());
      assertFalse(document7.isBlock());
      assertFalse(document7.hasParent());
      assertEquals("</", document7.location());
      assertEquals("#document", document7.nodeName());
      assertEquals(1, document7.childNodeSize());
      assertFalse(document8.isBlock());
      assertEquals("#document", document8.nodeName());
      assertEquals("</", document8.baseUri());
      assertEquals(0, document8.siblingIndex());
      assertEquals("#root", document8.tagName());
      assertEquals("</", document8.location());
      assertEquals(1, document8.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document8.quirksMode());
      assertFalse(document8.updateMetaCharsetElement());
      assertFalse(document8.hasParent());
      assertNotNull(document8);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document8.equals((Object)document4));
      assertFalse(document8.equals((Object)document1));
      assertFalse(document8.equals((Object)document6));
      assertFalse(document8.equals((Object)document5));
      assertFalse(document8.equals((Object)document3));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      TextNode textNode0 = new TextNode("", "");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertNotNull(textNode0);
      
      Document document1 = (Document)document0.appendChild(textNode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertTrue(textNode0.hasParent());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      document1.reparentChild(document0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertTrue(textNode0.hasParent());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      
      boolean boolean0 = document1.hasText();
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertTrue(textNode0.hasParent());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      
      Elements elements0 = document1.getElementsMatchingText("org.jsoup.nodes.Element");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertTrue(textNode0.hasParent());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Document document2 = (Document)document1.attr("org.jsoup.nodes.Element", false);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertTrue(textNode0.hasParent());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      
      Element element0 = document0.head();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertNotNull(element0);
      
      // Undeclared exception!
      document1.attr("", "Z`VQ");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      Tag tag0 = Tag.valueOf("lqBOuOtHxFX%?k");
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertEquals("lqBOuOtHxFX%?k", tag0.toString());
      assertEquals("lqBOuOtHxFX%?k", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertNotNull(tag0);
      
      Tag tag1 = Tag.valueOf("%~[4Nj0cDi$s");
      assertNotSame(tag1, tag0);
      assertFalse(tag1.isBlock());
      assertTrue(tag1.isInline());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isKnownTag());
      assertEquals("%~[4Nj0cDi$s", tag1.getName());
      assertFalse(tag1.isData());
      assertFalse(tag1.preserveWhitespace());
      assertEquals("%~[4Nj0cDi$s", tag1.toString());
      assertNotNull(tag1);
      assertFalse(tag1.equals((Object)tag0));
      
      Element element0 = new Element(tag0, "lqBOuOtHxFX%?k", (Attributes) null);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertEquals("lqBOuOtHxFX%?k", tag0.toString());
      assertEquals("lqBOuOtHxFX%?k", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("lqBOuOtHxFX%?k", element0.tagName());
      assertEquals("lqBOuOtHxFX%?k", element0.nodeName());
      assertEquals("lqBOuOtHxFX%?k", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      assertFalse(tag0.equals((Object)tag1));
      
      List<Node> list0 = element0.ensureChildNodes();
      assertNotSame(tag0, tag1);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertEquals("lqBOuOtHxFX%?k", tag0.toString());
      assertEquals("lqBOuOtHxFX%?k", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("lqBOuOtHxFX%?k", element0.tagName());
      assertEquals("lqBOuOtHxFX%?k", element0.nodeName());
      assertEquals("lqBOuOtHxFX%?k", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(tag0.equals((Object)tag1));
      
      element0.childNodes = list0;
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertEquals("lqBOuOtHxFX%?k", tag0.toString());
      assertEquals("lqBOuOtHxFX%?k", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("lqBOuOtHxFX%?k", element0.tagName());
      assertEquals("lqBOuOtHxFX%?k", element0.nodeName());
      assertEquals("lqBOuOtHxFX%?k", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(element0.childNodes.isEmpty());
      assertEquals(0, element0.childNodes.size());
      
      boolean boolean1 = element0.hasAttributes();
      assertFalse(boolean1);
      assertNotSame(tag0, tag1);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertEquals("lqBOuOtHxFX%?k", tag0.toString());
      assertEquals("lqBOuOtHxFX%?k", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("lqBOuOtHxFX%?k", element0.tagName());
      assertEquals("lqBOuOtHxFX%?k", element0.nodeName());
      assertEquals("lqBOuOtHxFX%?k", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(tag0.equals((Object)tag1));
      assertTrue(boolean1 == boolean0);
      
      List<Node> list1 = element0.ensureChildNodes();
      assertNotSame(tag0, tag1);
      assertSame(list1, list0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertEquals("lqBOuOtHxFX%?k", tag0.toString());
      assertEquals("lqBOuOtHxFX%?k", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("lqBOuOtHxFX%?k", element0.tagName());
      assertEquals("lqBOuOtHxFX%?k", element0.nodeName());
      assertEquals("lqBOuOtHxFX%?k", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertFalse(tag0.equals((Object)tag1));
      
      Elements elements0 = element0.getElementsContainingText("u4)9t[rb0t+");
      assertNotSame(tag0, tag1);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertEquals("lqBOuOtHxFX%?k", tag0.toString());
      assertEquals("lqBOuOtHxFX%?k", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("lqBOuOtHxFX%?k", element0.tagName());
      assertEquals("lqBOuOtHxFX%?k", element0.nodeName());
      assertEquals("lqBOuOtHxFX%?k", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(tag0.equals((Object)tag1));
      
      boolean boolean2 = Element.preserveWhitespace(element0);
      assertFalse(boolean2);
      assertNotSame(tag0, tag1);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertEquals("lqBOuOtHxFX%?k", tag0.toString());
      assertEquals("lqBOuOtHxFX%?k", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("lqBOuOtHxFX%?k", element0.tagName());
      assertEquals("lqBOuOtHxFX%?k", element0.nodeName());
      assertEquals("lqBOuOtHxFX%?k", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(tag0.equals((Object)tag1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Elements elements1 = element0.getElementsByAttributeValueContaining(":*}-]", "%~[4Nj0cDi$s");
      assertNotSame(tag0, tag1);
      assertNotSame(elements1, elements0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertEquals("lqBOuOtHxFX%?k", tag0.toString());
      assertEquals("lqBOuOtHxFX%?k", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("lqBOuOtHxFX%?k", element0.tagName());
      assertEquals("lqBOuOtHxFX%?k", element0.nodeName());
      assertEquals("lqBOuOtHxFX%?k", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertFalse(tag0.equals((Object)tag1));
      assertTrue(elements1.equals((Object)elements0));
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '&';
      charArray0[1] = 'A';
      charArray0[2] = '6';
      charArray0[3] = 't';
      charArray0[4] = '*';
      charArray0[5] = 'f';
      charArrayWriter0.write(charArray0);
      assertArrayEquals(new char[] {'&', 'A', '6', 't', '*', 'f'}, charArray0);
      assertEquals(6, charArrayWriter0.size());
      assertEquals("&A6t*f", charArrayWriter0.toString());
      assertEquals(6, charArray0.length);
      
      // Undeclared exception!
      try { 
        charArrayWriter0.append((CharSequence) "%~[4Nj0cDi$s", 3, 3480);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "%rg.jsoup.parser.n%ken$CoAment";
      Document document0 = new Document("%rg.jsoup.parser.n%ken$CoAment");
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("%rg.jsoup.parser.n%ken$CoAment", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("%rg.jsoup.parser.n%ken$CoAment", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode("%rg.jsoup.parser.n%ken$CoAment");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      Document document1 = (Document)document0.appendChild(document0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("%rg.jsoup.parser.n%ken$CoAment", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("%rg.jsoup.parser.n%ken$CoAment", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("%rg.jsoup.parser.n%ken$CoAment", document1.baseUri());
      assertEquals("%rg.jsoup.parser.n%ken$CoAment", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        document1.hasText();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("U4)9T[rb0T+", "AWDq%=I");
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("AWDq%=I", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("AWDq%=I", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("AWDq%=I", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("AWDq%=I", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("AWDq%=I", document1.location());
      assertEquals("AWDq%=I", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Tag tag0 = Tag.valueOf("9Pt{e~3b.RCS 37h");
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("9Pt{e~3b.RCS 37h", tag0.getName());
      assertEquals("9Pt{e~3b.RCS 37h", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertNotNull(tag0);
      
      FormElement formElement0 = new FormElement(tag0, "d'AtbtKC>ug", attributes0);
      assertEquals(0, attributes0.size());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("9Pt{e~3b.RCS 37h", tag0.getName());
      assertEquals("9Pt{e~3b.RCS 37h", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("9Pt{e~3b.RCS 37h", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("d'AtbtKC>ug", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals("9Pt{e~3b.RCS 37h", formElement0.tagName());
      assertNotNull(formElement0);
      
      String string0 = formElement0.val();
      assertEquals("", string0);
      assertEquals(0, attributes0.size());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("9Pt{e~3b.RCS 37h", tag0.getName());
      assertEquals("9Pt{e~3b.RCS 37h", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("9Pt{e~3b.RCS 37h", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("d'AtbtKC>ug", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals("9Pt{e~3b.RCS 37h", formElement0.tagName());
      assertNotNull(string0);
      
      Spliterator<Attribute> spliterator0 = attributes0.spliterator();
      assertEquals(0, attributes0.size());
      assertNotNull(spliterator0);
      
      List<TextNode> list0 = formElement0.textNodes();
      assertEquals(0, attributes0.size());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("9Pt{e~3b.RCS 37h", tag0.getName());
      assertEquals("9Pt{e~3b.RCS 37h", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("9Pt{e~3b.RCS 37h", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("d'AtbtKC>ug", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals("9Pt{e~3b.RCS 37h", formElement0.tagName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Elements elements0 = formElement0.getElementsContainingOwnText((String) null);
      assertEquals(0, attributes0.size());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("9Pt{e~3b.RCS 37h", tag0.getName());
      assertEquals("9Pt{e~3b.RCS 37h", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("9Pt{e~3b.RCS 37h", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("d'AtbtKC>ug", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals("9Pt{e~3b.RCS 37h", formElement0.tagName());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      
      List<Node> list1 = document0.ensureChildNodes();
      assertNotSame(document0, document1);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("AWDq%=I", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("AWDq%=I", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertNotNull(list1);
      assertFalse(document0.equals((Object)document1));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("</", document1.baseUri());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.baseUri());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("</", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      Element element0 = new Element("</");
      assertEquals("</", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = element0.appendTo(document3);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.baseUri());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("</", document3.location());
      assertEquals(2, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("</", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("</", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("</", element1.tagName());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      String string0 = document2.baseUri();
      assertEquals("</", string0);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      Elements elements0 = document0.getElementsByAttributeValueContaining("d'atbtkc>u+", "tq");
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document4 = (Document)document3.appendText("d'atbtkc>u+");
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document4);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertNotSame(document4, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals("</", document1.baseUri());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertEquals("</", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertTrue(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(3, document4.childNodeSize());
      assertEquals("</", document4.location());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.baseUri());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      
      boolean boolean1 = document4.hasText();
      assertTrue(boolean1);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document4);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertNotSame(document4, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals("</", document1.baseUri());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertEquals("</", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertTrue(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(3, document4.childNodeSize());
      assertEquals("</", document4.location());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.baseUri());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(boolean1 == boolean0);
      
      Document document5 = document3.clone();
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document1, document4);
      assertNotSame(document1, document5);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document3, document5);
      assertNotSame(document3, document2);
      assertSame(document3, document4);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertNotSame(document5, document0);
      assertNotSame(document5, document4);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals("</", document1.baseUri());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertEquals("</", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("</", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertEquals(3, document5.childNodeSize());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("</", document5.location());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document4));
      
      Element element2 = document5.shallowClone();
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document1, document4);
      assertNotSame(document1, document5);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document3, document5);
      assertNotSame(document3, document2);
      assertSame(document3, document4);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertNotSame(document5, document0);
      assertNotSame(document5, document4);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals("</", document1.baseUri());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertEquals("</", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("</", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertEquals(3, document5.childNodeSize());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("</", document5.location());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(element2.isBlock());
      assertFalse(element2.hasParent());
      assertEquals("#root", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("</", element2.baseUri());
      assertEquals("#root", element2.tagName());
      assertEquals(0, element2.childNodeSize());
      assertNotNull(element2);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document4));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      
      document0.nodelistChanged();
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      
      Pattern pattern0 = Pattern.compile("=0lF", 1350);
      assertEquals(1350, pattern0.flags());
      assertEquals("=0lF", pattern0.pattern());
      assertEquals("=0lF", pattern0.toString());
      assertNotNull(pattern0);
      
      Elements elements1 = document5.getElementsMatchingOwnText(pattern0);
      assertNotSame(elements1, elements0);
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document1, document4);
      assertNotSame(document1, document5);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document3, document5);
      assertNotSame(document3, document2);
      assertSame(document3, document4);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertNotSame(document5, document0);
      assertNotSame(document5, document4);
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals("</", document1.baseUri());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertEquals("</", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("</", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertEquals(3, document5.childNodeSize());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("</", document5.location());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(1350, pattern0.flags());
      assertEquals("=0lF", pattern0.pattern());
      assertEquals("=0lF", pattern0.toString());
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document4));
      
      String string1 = element1.ownText();
      assertEquals("", string1);
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document1, document4);
      assertNotSame(document1, document5);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document3, document5);
      assertNotSame(document3, document2);
      assertSame(document3, document4);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(element0, element1);
      assertNotSame(element0, element2);
      assertSame(element1, element0);
      assertNotSame(element1, element2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals("</", document1.baseUri());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertEquals("</", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("</", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("</", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("</", element1.tagName());
      assertNotNull(string1);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element1.equals((Object)element2));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Tag tag0 = Tag.valueOf("0;/E@V!`a~xil4f>{");
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.getName());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "ascii", (Attributes) null);
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("ascii", pseudoTextElement0.baseUri());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.tagName());
      assertNotNull(pseudoTextElement0);
      
      Element element0 = pseudoTextElement0.toggleClass("button");
      assertSame(pseudoTextElement0, element0);
      assertSame(element0, pseudoTextElement0);
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("ascii", pseudoTextElement0.baseUri());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("0;/E@V!`a~xil4f>{", element0.tagName());
      assertEquals("0;/E@V!`a~xil4f>{", element0.nodeName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = pseudoTextElement0.appendTo(element0);
      assertSame(pseudoTextElement0, element1);
      assertSame(pseudoTextElement0, element0);
      assertSame(element0, element1);
      assertSame(element0, pseudoTextElement0);
      assertSame(element1, pseudoTextElement0);
      assertSame(element1, element0);
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.nodeName());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertTrue(pseudoTextElement0.hasParent());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("ascii", pseudoTextElement0.baseUri());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.tagName());
      assertEquals("0;/E@V!`a~xil4f>{", element0.tagName());
      assertEquals("0;/E@V!`a~xil4f>{", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("0;/E@V!`a~xil4f>{", element1.tagName());
      assertEquals("ascii", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("0;/E@V!`a~xil4f>{", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      
      Element element2 = pseudoTextElement0.toggleClass("</");
      assertSame(pseudoTextElement0, element1);
      assertSame(pseudoTextElement0, element0);
      assertSame(pseudoTextElement0, element2);
      assertSame(element2, element1);
      assertSame(element2, pseudoTextElement0);
      assertSame(element2, element0);
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.nodeName());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertTrue(pseudoTextElement0.hasParent());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("ascii", pseudoTextElement0.baseUri());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.tagName());
      assertFalse(element2.isBlock());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertEquals("0;/E@V!`a~xil4f>{", element2.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertEquals("0;/E@V!`a~xil4f>{", element2.tagName());
      assertEquals("ascii", element2.baseUri());
      assertNotNull(element2);
      
      boolean boolean0 = element0.hasClass("=H05C H,o");
      assertFalse(boolean0);
      assertSame(pseudoTextElement0, element1);
      assertSame(pseudoTextElement0, element0);
      assertSame(pseudoTextElement0, element2);
      assertSame(element0, element1);
      assertSame(element0, pseudoTextElement0);
      assertSame(element0, element2);
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.nodeName());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertTrue(pseudoTextElement0.hasParent());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("ascii", pseudoTextElement0.baseUri());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.tagName());
      assertEquals("0;/E@V!`a~xil4f>{", element0.tagName());
      assertEquals("0;/E@V!`a~xil4f>{", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      
      Element element3 = element1.toggleClass("#root");
      assertSame(pseudoTextElement0, element3);
      assertSame(pseudoTextElement0, element1);
      assertSame(pseudoTextElement0, element0);
      assertSame(pseudoTextElement0, element2);
      assertSame(element0, element3);
      assertSame(element0, element1);
      assertSame(element0, pseudoTextElement0);
      assertSame(element0, element2);
      assertSame(element1, pseudoTextElement0);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element1, element3);
      assertSame(element3, element1);
      assertSame(element3, pseudoTextElement0);
      assertSame(element3, element2);
      assertSame(element3, element0);
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.nodeName());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertTrue(pseudoTextElement0.hasParent());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("ascii", pseudoTextElement0.baseUri());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.tagName());
      assertEquals("0;/E@V!`a~xil4f>{", element0.tagName());
      assertEquals("0;/E@V!`a~xil4f>{", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("0;/E@V!`a~xil4f>{", element1.tagName());
      assertEquals("ascii", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("0;/E@V!`a~xil4f>{", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("0;/E@V!`a~xil4f>{", element3.tagName());
      assertFalse(element3.isBlock());
      assertEquals("ascii", element3.baseUri());
      assertEquals(0, element3.siblingIndex());
      assertEquals("0;/E@V!`a~xil4f>{", element3.nodeName());
      assertEquals(1, element3.childNodeSize());
      assertTrue(element3.hasParent());
      assertNotNull(element3);
      
      boolean boolean1 = element0.hasClass(".");
      assertFalse(boolean1);
      assertSame(pseudoTextElement0, element3);
      assertSame(pseudoTextElement0, element1);
      assertSame(pseudoTextElement0, element0);
      assertSame(pseudoTextElement0, element2);
      assertSame(element0, element3);
      assertSame(element0, element1);
      assertSame(element0, pseudoTextElement0);
      assertSame(element0, element2);
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.nodeName());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertTrue(pseudoTextElement0.hasParent());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("ascii", pseudoTextElement0.baseUri());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.tagName());
      assertEquals("0;/E@V!`a~xil4f>{", element0.tagName());
      assertEquals("0;/E@V!`a~xil4f>{", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertTrue(boolean1 == boolean0);
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      Tag tag1 = Tag.valueOf("ascii");
      assertNotSame(tag1, tag0);
      assertFalse(tag1.isData());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isFormSubmittable());
      assertEquals("ascii", tag1.getName());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.preserveWhitespace());
      assertTrue(tag1.isInline());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isSelfClosing());
      assertEquals("ascii", tag1.toString());
      assertFalse(tag1.isBlock());
      assertNotNull(tag1);
      assertFalse(tag1.equals((Object)tag0));
      
      PseudoTextElement pseudoTextElement1 = new PseudoTextElement(tag0, "=H05C H,o", (Attributes) null);
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement1.tagName());
      assertEquals(0, pseudoTextElement1.childNodeSize());
      assertFalse(pseudoTextElement1.hasParent());
      assertFalse(pseudoTextElement1.isBlock());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement1.nodeName());
      assertEquals(0, pseudoTextElement1.siblingIndex());
      assertEquals("=H05C H,o", pseudoTextElement1.baseUri());
      assertNotNull(pseudoTextElement1);
      assertFalse(tag0.equals((Object)tag1));
      assertFalse(pseudoTextElement1.equals((Object)element0));
      assertFalse(pseudoTextElement1.equals((Object)pseudoTextElement0));
      assertFalse(pseudoTextElement1.equals((Object)element2));
      assertFalse(pseudoTextElement1.equals((Object)element1));
      assertFalse(pseudoTextElement1.equals((Object)element3));
      
      boolean boolean2 = element1.hasClass("BeforeDoctypeSystemIdentifier");
      assertFalse(boolean2);
      assertNotSame(tag0, tag1);
      assertSame(pseudoTextElement0, element3);
      assertSame(pseudoTextElement0, element1);
      assertSame(pseudoTextElement0, element0);
      assertNotSame(pseudoTextElement0, pseudoTextElement1);
      assertSame(pseudoTextElement0, element2);
      assertSame(element0, element3);
      assertSame(element0, element1);
      assertNotSame(element0, pseudoTextElement1);
      assertSame(element0, pseudoTextElement0);
      assertSame(element0, element2);
      assertSame(element1, pseudoTextElement0);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertNotSame(element1, pseudoTextElement1);
      assertSame(element1, element3);
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.nodeName());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertTrue(pseudoTextElement0.hasParent());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("ascii", pseudoTextElement0.baseUri());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.tagName());
      assertEquals("0;/E@V!`a~xil4f>{", element0.tagName());
      assertEquals("0;/E@V!`a~xil4f>{", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("0;/E@V!`a~xil4f>{", element1.tagName());
      assertEquals("ascii", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("0;/E@V!`a~xil4f>{", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertFalse(tag0.equals((Object)tag1));
      assertFalse(pseudoTextElement0.equals((Object)pseudoTextElement1));
      assertFalse(element0.equals((Object)pseudoTextElement1));
      assertFalse(element1.equals((Object)pseudoTextElement1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("</", "GOiWwyd=0dBZ1ZV[\"H");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("GOiWwyd=0dBZ1ZV[\"H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("GOiWwyd=0dBZ1ZV[\"H", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Element element4 = document0.head();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("GOiWwyd=0dBZ1ZV[\"H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("GOiWwyd=0dBZ1ZV[\"H", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element4.siblingIndex());
      assertEquals("head", element4.nodeName());
      assertTrue(element4.hasParent());
      assertEquals(0, element4.childNodeSize());
      assertEquals("head", element4.tagName());
      assertTrue(element4.isBlock());
      assertEquals("GOiWwyd=0dBZ1ZV[\"H", element4.baseUri());
      assertNotNull(element4);
      
      // Undeclared exception!
      try { 
        element3.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      TextNode textNode0 = new TextNode("", "");
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Document document1 = (Document)document0.appendChild(textNode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(textNode0.hasParent());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      document1.reparentChild(document0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertTrue(textNode0.hasParent());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      
      boolean boolean0 = document1.hasText();
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertTrue(textNode0.hasParent());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      
      String string0 = "g*U|YG!6)FXl2x";
      // Undeclared exception!
      document0.html("g*U|YG!6)FXl2x");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("</", document3.location());
      assertTrue(document3.hasParent());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      Element element0 = new Element("</");
      assertEquals("</", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.appendTo(document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("</", document3.location());
      assertTrue(document3.hasParent());
      assertEquals(2, document3.childNodeSize());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals("</", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("</", element1.nodeName());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      String string0 = document2.baseUri();
      assertEquals("</", string0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      Elements elements0 = document0.getElementsByAttributeValueContaining("d'atbtkc>u+", "tq");
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      
      Tag tag0 = Tag.valueOf("dl");
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertEquals("dl", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("dl", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("=pBU'", true);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      
      FormElement formElement0 = new FormElement(tag0, "dl", attributes1);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertEquals("dl", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("dl", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("dl", formElement0.nodeName());
      assertEquals("dl", formElement0.baseUri());
      assertTrue(formElement0.isBlock());
      assertEquals("dl", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertNotNull(formElement0);
      
      FormElement formElement1 = formElement0.addElement(document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertEquals("dl", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("dl", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("dl", formElement0.nodeName());
      assertEquals("dl", formElement0.baseUri());
      assertTrue(formElement0.isBlock());
      assertEquals("dl", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("dl", formElement1.nodeName());
      assertEquals("dl", formElement1.baseUri());
      assertEquals("dl", formElement1.tagName());
      assertTrue(formElement1.isBlock());
      assertNotNull(formElement1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      FormElement formElement2 = new FormElement(tag0, "</", attributes0);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertEquals("dl", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("dl", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertEquals(1, attributes0.size());
      assertFalse(formElement2.hasParent());
      assertEquals("dl", formElement2.tagName());
      assertEquals("</", formElement2.baseUri());
      assertTrue(formElement2.isBlock());
      assertEquals(0, formElement2.siblingIndex());
      assertEquals(0, formElement2.childNodeSize());
      assertEquals("dl", formElement2.nodeName());
      assertNotNull(formElement2);
      assertFalse(formElement2.equals((Object)formElement0));
      assertFalse(formElement2.equals((Object)formElement1));
      
      formElement2.reparentChild(formElement0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(formElement0, formElement2);
      assertSame(formElement0, formElement1);
      assertNotSame(formElement2, formElement0);
      assertNotSame(formElement2, formElement1);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertEquals("dl", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("dl", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("dl", formElement0.nodeName());
      assertEquals("dl", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertTrue(formElement0.isBlock());
      assertEquals("dl", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement2.hasParent());
      assertEquals("dl", formElement2.tagName());
      assertEquals("</", formElement2.baseUri());
      assertTrue(formElement2.isBlock());
      assertEquals(0, formElement2.siblingIndex());
      assertEquals(0, formElement2.childNodeSize());
      assertEquals("dl", formElement2.nodeName());
      assertFalse(formElement0.equals((Object)formElement2));
      assertFalse(formElement2.equals((Object)formElement0));
      assertFalse(formElement2.equals((Object)formElement1));
      
      int int0 = formElement0.elementSiblingIndex();
      assertEquals(0, int0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(formElement0, formElement2);
      assertSame(formElement0, formElement1);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertEquals("dl", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("dl", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("dl", formElement0.nodeName());
      assertEquals("dl", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertTrue(formElement0.isBlock());
      assertEquals("dl", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.equals((Object)formElement2));
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Element element2 = new Element(tag0, "d'atbtkc>u+");
      assertFalse(element2.hasParent());
      assertTrue(element2.isBlock());
      assertEquals("dl", element2.tagName());
      assertEquals(0, element2.childNodeSize());
      assertEquals("d'atbtkc>u+", element2.baseUri());
      assertEquals("dl", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertEquals("dl", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("dl", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertNotNull(element2);
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      
      FormElement formElement3 = formElement1.addElement(document0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(formElement3, formElement2);
      assertSame(formElement3, formElement0);
      assertSame(formElement3, formElement1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, formElement3);
      assertNotSame(formElement0, formElement2);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertNotSame(formElement1, formElement2);
      assertSame(formElement1, formElement3);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, formElement3.siblingIndex());
      assertEquals("dl", formElement3.baseUri());
      assertTrue(formElement3.hasParent());
      assertEquals("dl", formElement3.nodeName());
      assertTrue(formElement3.isBlock());
      assertEquals("dl", formElement3.tagName());
      assertEquals(0, formElement3.childNodeSize());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertEquals("dl", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("dl", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("dl", formElement0.nodeName());
      assertEquals("dl", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertTrue(formElement0.isBlock());
      assertEquals("dl", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("dl", formElement1.nodeName());
      assertEquals("dl", formElement1.baseUri());
      assertTrue(formElement1.hasParent());
      assertEquals("dl", formElement1.tagName());
      assertTrue(formElement1.isBlock());
      assertNotNull(formElement3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(formElement3.equals((Object)formElement2));
      assertFalse(formElement0.equals((Object)formElement2));
      assertFalse(formElement1.equals((Object)formElement2));
      
      String string1 = formElement3.cssSelector();
      assertEquals("dl > dl", string1);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(formElement3, formElement2);
      assertSame(formElement3, formElement0);
      assertSame(formElement3, formElement1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, formElement3);
      assertNotSame(formElement0, formElement2);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertNotSame(formElement1, formElement2);
      assertSame(formElement1, formElement3);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, formElement3.siblingIndex());
      assertEquals("dl", formElement3.baseUri());
      assertTrue(formElement3.hasParent());
      assertEquals("dl", formElement3.nodeName());
      assertTrue(formElement3.isBlock());
      assertEquals("dl", formElement3.tagName());
      assertEquals(0, formElement3.childNodeSize());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertEquals("dl", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("dl", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("dl", formElement0.nodeName());
      assertEquals("dl", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertTrue(formElement0.isBlock());
      assertEquals("dl", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("dl", formElement1.nodeName());
      assertEquals("dl", formElement1.baseUri());
      assertTrue(formElement1.hasParent());
      assertEquals("dl", formElement1.tagName());
      assertTrue(formElement1.isBlock());
      assertNotNull(string1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(formElement3.equals((Object)formElement2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(formElement0.equals((Object)formElement2));
      assertFalse(formElement1.equals((Object)formElement2));
      
      String string2 = formElement3.baseUri();
      assertEquals("dl", string2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(formElement3, formElement2);
      assertSame(formElement3, formElement0);
      assertSame(formElement3, formElement1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, formElement3);
      assertNotSame(formElement0, formElement2);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertNotSame(formElement1, formElement2);
      assertSame(formElement1, formElement3);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, formElement3.siblingIndex());
      assertEquals("dl", formElement3.baseUri());
      assertTrue(formElement3.hasParent());
      assertEquals("dl", formElement3.nodeName());
      assertTrue(formElement3.isBlock());
      assertEquals("dl", formElement3.tagName());
      assertEquals(0, formElement3.childNodeSize());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertEquals("dl", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("dl", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("dl", formElement0.nodeName());
      assertEquals("dl", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertTrue(formElement0.isBlock());
      assertEquals("dl", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("dl", formElement1.nodeName());
      assertEquals("dl", formElement1.baseUri());
      assertTrue(formElement1.hasParent());
      assertEquals("dl", formElement1.tagName());
      assertTrue(formElement1.isBlock());
      assertNotNull(string2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(formElement3.equals((Object)formElement2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(formElement0.equals((Object)formElement2));
      assertFalse(formElement1.equals((Object)formElement2));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Tag tag0 = Tag.valueOf("0;/E@V!`a~xil4f>{");
      assertEquals("0;/E@V!`a~xil4f>{", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertNotNull(tag0);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "ascii", (Attributes) null);
      assertEquals("0;/E@V!`a~xil4f>{", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("ascii", pseudoTextElement0.baseUri());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertNotNull(pseudoTextElement0);
      
      Element element0 = pseudoTextElement0.toggleClass("button");
      assertSame(pseudoTextElement0, element0);
      assertSame(element0, pseudoTextElement0);
      assertEquals("0;/E@V!`a~xil4f>{", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("ascii", pseudoTextElement0.baseUri());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("0;/E@V!`a~xil4f>{", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("0;/E@V!`a~xil4f>{", element0.tagName());
      assertEquals("ascii", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = pseudoTextElement0.appendTo(element0);
      assertSame(pseudoTextElement0, element0);
      assertSame(pseudoTextElement0, element1);
      assertSame(element0, element1);
      assertSame(element0, pseudoTextElement0);
      assertSame(element1, pseudoTextElement0);
      assertSame(element1, element0);
      assertEquals("0;/E@V!`a~xil4f>{", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("ascii", pseudoTextElement0.baseUri());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.tagName());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.nodeName());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertTrue(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("0;/E@V!`a~xil4f>{", element0.nodeName());
      assertEquals("0;/E@V!`a~xil4f>{", element0.tagName());
      assertEquals("ascii", element0.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("ascii", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("0;/E@V!`a~xil4f>{", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("0;/E@V!`a~xil4f>{", element1.nodeName());
      assertNotNull(element1);
      
      Element element2 = pseudoTextElement0.toggleClass("</");
      assertSame(pseudoTextElement0, element0);
      assertSame(pseudoTextElement0, element2);
      assertSame(pseudoTextElement0, element1);
      assertSame(element2, element0);
      assertSame(element2, pseudoTextElement0);
      assertSame(element2, element1);
      assertEquals("0;/E@V!`a~xil4f>{", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("ascii", pseudoTextElement0.baseUri());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.tagName());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.nodeName());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertTrue(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("ascii", element2.baseUri());
      assertFalse(element2.isBlock());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertEquals("0;/E@V!`a~xil4f>{", element2.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertEquals("0;/E@V!`a~xil4f>{", element2.tagName());
      assertNotNull(element2);
      
      boolean boolean0 = element0.hasClass("=H05C H,o");
      assertFalse(boolean0);
      assertSame(pseudoTextElement0, element0);
      assertSame(pseudoTextElement0, element2);
      assertSame(pseudoTextElement0, element1);
      assertSame(element0, element1);
      assertSame(element0, pseudoTextElement0);
      assertSame(element0, element2);
      assertEquals("0;/E@V!`a~xil4f>{", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("ascii", pseudoTextElement0.baseUri());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.tagName());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.nodeName());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertTrue(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("0;/E@V!`a~xil4f>{", element0.nodeName());
      assertEquals("0;/E@V!`a~xil4f>{", element0.tagName());
      assertEquals("ascii", element0.baseUri());
      
      Element element3 = element1.toggleClass("#root");
      assertSame(pseudoTextElement0, element0);
      assertSame(pseudoTextElement0, element2);
      assertSame(pseudoTextElement0, element3);
      assertSame(pseudoTextElement0, element1);
      assertSame(element0, element1);
      assertSame(element0, pseudoTextElement0);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertSame(element1, element2);
      assertSame(element1, element3);
      assertSame(element1, pseudoTextElement0);
      assertSame(element1, element0);
      assertSame(element3, pseudoTextElement0);
      assertSame(element3, element2);
      assertSame(element3, element1);
      assertSame(element3, element0);
      assertEquals("0;/E@V!`a~xil4f>{", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("ascii", pseudoTextElement0.baseUri());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.tagName());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.nodeName());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertTrue(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("0;/E@V!`a~xil4f>{", element0.nodeName());
      assertEquals("0;/E@V!`a~xil4f>{", element0.tagName());
      assertEquals("ascii", element0.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("ascii", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("0;/E@V!`a~xil4f>{", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("0;/E@V!`a~xil4f>{", element1.nodeName());
      assertEquals(1, element3.childNodeSize());
      assertEquals("0;/E@V!`a~xil4f>{", element3.nodeName());
      assertFalse(element3.isBlock());
      assertEquals(0, element3.siblingIndex());
      assertTrue(element3.hasParent());
      assertEquals("ascii", element3.baseUri());
      assertEquals("0;/E@V!`a~xil4f>{", element3.tagName());
      assertNotNull(element3);
      
      boolean boolean1 = element0.hasClass(".");
      assertFalse(boolean1);
      assertSame(pseudoTextElement0, element0);
      assertSame(pseudoTextElement0, element2);
      assertSame(pseudoTextElement0, element3);
      assertSame(pseudoTextElement0, element1);
      assertSame(element0, element1);
      assertSame(element0, pseudoTextElement0);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertEquals("0;/E@V!`a~xil4f>{", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("ascii", pseudoTextElement0.baseUri());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.tagName());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.nodeName());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertTrue(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("0;/E@V!`a~xil4f>{", element0.nodeName());
      assertEquals("0;/E@V!`a~xil4f>{", element0.tagName());
      assertEquals("ascii", element0.baseUri());
      assertTrue(boolean1 == boolean0);
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      Tag tag1 = Tag.valueOf("ascii");
      assertNotSame(tag1, tag0);
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.isBlock());
      assertEquals("ascii", tag1.toString());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isData());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.canContainBlock());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isKnownTag());
      assertTrue(tag1.isInline());
      assertEquals("ascii", tag1.getName());
      assertNotNull(tag1);
      assertFalse(tag1.equals((Object)tag0));
      
      PseudoTextElement pseudoTextElement1 = new PseudoTextElement(tag0, "=H05C H,o", (Attributes) null);
      assertEquals("0;/E@V!`a~xil4f>{", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement1.tagName());
      assertEquals(0, pseudoTextElement1.childNodeSize());
      assertFalse(pseudoTextElement1.hasParent());
      assertFalse(pseudoTextElement1.isBlock());
      assertEquals(0, pseudoTextElement1.siblingIndex());
      assertEquals("=H05C H,o", pseudoTextElement1.baseUri());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement1.nodeName());
      assertNotNull(pseudoTextElement1);
      assertFalse(tag0.equals((Object)tag1));
      assertFalse(pseudoTextElement1.equals((Object)element0));
      assertFalse(pseudoTextElement1.equals((Object)element2));
      assertFalse(pseudoTextElement1.equals((Object)pseudoTextElement0));
      assertFalse(pseudoTextElement1.equals((Object)element3));
      assertFalse(pseudoTextElement1.equals((Object)element1));
      
      boolean boolean2 = element1.hasClass("BeforeDoctypeSystemIdentifier");
      assertFalse(boolean2);
      assertNotSame(tag0, tag1);
      assertSame(pseudoTextElement0, element0);
      assertNotSame(pseudoTextElement0, pseudoTextElement1);
      assertSame(pseudoTextElement0, element2);
      assertSame(pseudoTextElement0, element3);
      assertSame(pseudoTextElement0, element1);
      assertNotSame(element0, pseudoTextElement1);
      assertSame(element0, element1);
      assertSame(element0, pseudoTextElement0);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertNotSame(element1, pseudoTextElement1);
      assertSame(element1, element2);
      assertSame(element1, element3);
      assertSame(element1, pseudoTextElement0);
      assertSame(element1, element0);
      assertEquals("0;/E@V!`a~xil4f>{", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals("0;/E@V!`a~xil4f>{", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("ascii", pseudoTextElement0.baseUri());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.tagName());
      assertEquals("0;/E@V!`a~xil4f>{", pseudoTextElement0.nodeName());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertTrue(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("0;/E@V!`a~xil4f>{", element0.nodeName());
      assertEquals("0;/E@V!`a~xil4f>{", element0.tagName());
      assertEquals("ascii", element0.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("ascii", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("0;/E@V!`a~xil4f>{", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("0;/E@V!`a~xil4f>{", element1.nodeName());
      assertFalse(tag0.equals((Object)tag1));
      assertFalse(pseudoTextElement0.equals((Object)pseudoTextElement1));
      assertFalse(element0.equals((Object)pseudoTextElement1));
      assertFalse(element1.equals((Object)pseudoTextElement1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      PipedReader pipedReader0 = new PipedReader(34);
      assertNotNull(pipedReader0);
      
      // Undeclared exception!
      try { 
        parser0.parseInput((Reader) pipedReader0, "t_d`C|_vT'lx5/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":not%s", "Tag name must not be empty.");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("Sdcpd,+007^'yMO!");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      Document document2 = (Document)document1.appendTo(document0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      
      Document document3 = (Document)document0.toggleClass("Pv?<7$p-GK)`wI]");
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("Tag name must not be empty.", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("Tag name must not be empty.", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertTrue(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      
      boolean boolean0 = document2.hasClass("=H05C H,o");
      assertFalse(boolean0);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      
      Tag tag0 = Tag.valueOf("=H05C H,o");
      assertFalse(tag0.isBlock());
      assertEquals("=H05C H,o", tag0.toString());
      assertEquals("=H05C H,o", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertNotNull(tag0);
      
      LinkedHashSet<TextNode> linkedHashSet0 = new LinkedHashSet<TextNode>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet1.contains("Pv?<7$p-GK)`wI]"));
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertNotNull(linkedHashSet1);
      
      LinkedHashSet<String> linkedHashSet2 = new LinkedHashSet<String>(linkedHashSet1);
      assertFalse(linkedHashSet1.contains("Pv?<7$p-GK)`wI]"));
      assertFalse(linkedHashSet2.contains("Pv?<7$p-GK)`wI]"));
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertEquals(0, linkedHashSet2.size());
      assertTrue(linkedHashSet2.isEmpty());
      assertNotNull(linkedHashSet2);
      assertTrue(linkedHashSet2.equals((Object)linkedHashSet1));
      
      Document document4 = (Document)document2.classNames((Set<String>) linkedHashSet2);
      assertFalse(linkedHashSet1.contains("Pv?<7$p-GK)`wI]"));
      assertFalse(linkedHashSet2.contains("Pv?<7$p-GK)`wI]"));
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(linkedHashSet1, linkedHashSet2);
      assertNotSame(linkedHashSet2, linkedHashSet1);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertEquals(0, linkedHashSet2.size());
      assertTrue(linkedHashSet2.isEmpty());
      assertEquals("Tag name must not be empty.", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("Tag name must not be empty.", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertTrue(document4.hasParent());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertNotNull(document4);
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet2));
      assertTrue(linkedHashSet2.equals((Object)linkedHashSet1));
      
      List<TextNode> list0 = document3.textNodes();
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document3, document4);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("Tag name must not be empty.", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("Tag name must not be empty.", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertTrue(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Document document5 = (Document)document2.insertChildren(1, (Collection<? extends Node>) linkedHashSet0);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document5, document0);
      assertSame(document5, document1);
      assertSame(document5, document3);
      assertSame(document5, document4);
      assertSame(document5, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("Tag name must not be empty.", document5.location());
      assertEquals("Tag name must not be empty.", document5.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(1, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.isBlock());
      assertEquals("#root", document5.tagName());
      assertEquals(2, document5.childNodeSize());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertNotNull(document5);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      Element element0 = new Element("8fle");
      assertFalse(element0.isBlock());
      assertEquals("8fle", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("8fle", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      boolean boolean1 = element0.is("8fle");
      assertTrue(boolean1);
      assertFalse(element0.isBlock());
      assertEquals("8fle", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("8fle", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(boolean1 == boolean0);
      
      Element element1 = element0.previousElementSibling();
      assertFalse(element0.isBlock());
      assertEquals("8fle", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("8fle", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertNull(element1);
      
      String string0 = "6m5gp@+";
      Element element2 = element0.removeClass("6m5gp@+");
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertFalse(element0.isBlock());
      assertEquals("8fle", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("8fle", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertFalse(element2.hasParent());
      assertEquals("8fle", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("8fle", element2.nodeName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertNotNull(element2);
      
      String string1 = "value";
      Elements elements0 = element2.previousElementSiblings();
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertFalse(element0.isBlock());
      assertEquals("8fle", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("8fle", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertFalse(element2.hasParent());
      assertEquals("8fle", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("8fle", element2.nodeName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element3 = element2.removeClass("value");
      assertSame(element0, element2);
      assertSame(element0, element3);
      assertSame(element2, element3);
      assertSame(element2, element0);
      assertSame(element3, element2);
      assertSame(element3, element0);
      assertFalse(element0.isBlock());
      assertEquals("8fle", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("8fle", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertFalse(element2.hasParent());
      assertEquals("8fle", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("8fle", element2.nodeName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals("8fle", element3.tagName());
      assertEquals(0, element3.childNodeSize());
      assertEquals(0, element3.siblingIndex());
      assertEquals("", element3.baseUri());
      assertFalse(element3.isBlock());
      assertEquals("8fle", element3.nodeName());
      assertFalse(element3.hasParent());
      assertNotNull(element3);
      
      Elements elements1 = element3.getElementsByClass("value");
      assertSame(element0, element2);
      assertSame(element0, element3);
      assertSame(element2, element3);
      assertSame(element2, element0);
      assertSame(element3, element2);
      assertSame(element3, element0);
      assertNotSame(elements1, elements0);
      assertFalse(element0.isBlock());
      assertEquals("8fle", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("8fle", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertFalse(element2.hasParent());
      assertEquals("8fle", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("8fle", element2.nodeName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals("8fle", element3.tagName());
      assertEquals(0, element3.childNodeSize());
      assertEquals(0, element3.siblingIndex());
      assertEquals("", element3.baseUri());
      assertFalse(element3.isBlock());
      assertEquals("8fle", element3.nodeName());
      assertFalse(element3.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      
      // Undeclared exception!
      try { 
        element0.getElementsMatchingText("?y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: ?y
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":not%s", "Tag name must not be empty.");
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("Sdcpd,+007^'yMO!");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      Document document2 = (Document)document1.appendTo(document0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("Tag name must not be empty.", document2.location());
      assertNotNull(document2);
      
      Document document3 = (Document)document0.toggleClass("Pv?<7$p-GK)`wI]");
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document3.baseUri());
      assertEquals("Tag name must not be empty.", document3.location());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      
      boolean boolean0 = document2.hasClass("=H05C H,o");
      assertFalse(boolean0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("Tag name must not be empty.", document2.location());
      
      String string0 = "PboH0^(";
      Document document4 = (Document)document0.toggleClass("PboH0^(");
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Tag name must not be empty.", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertTrue(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.siblingIndex());
      assertEquals("Tag name must not be empty.", document4.baseUri());
      assertFalse(document4.isBlock());
      assertNotNull(document4);
      
      boolean boolean1 = document3.hasClass("Sdcpd,+007^'yMO!");
      assertFalse(boolean1);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document3.baseUri());
      assertEquals("Tag name must not be empty.", document3.location());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(boolean1 == boolean0);
      
      String string1 = Node.EmptyString;
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Tag.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      TextNode textNode0 = new TextNode("", "");
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Document document1 = (Document)document0.appendChild(textNode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#text", textNode0.nodeName());
      assertTrue(textNode0.hasParent());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      String string0 = "org.jsoup.nodes.Element";
      document1.reparentChild(document0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#text", textNode0.nodeName());
      assertTrue(textNode0.hasParent());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueNot("org.jsoup.nodes.Element", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("</", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      Elements elements0 = document2.nextElementSiblings();
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      Element element0 = new Element("</");
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertNotNull(element0);
      
      Document document4 = (Document)document2.appendTo(element0);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals(2, document4.childNodeSize());
      assertEquals("</", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("</", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      
      Document document5 = (Document)document4.toggleClass("lj|@c");
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document5);
      assertNotSame(document5, document1);
      assertSame(document5, document0);
      assertNotSame(document5, document3);
      assertSame(document5, document2);
      assertSame(document5, document4);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals(2, document4.childNodeSize());
      assertEquals("</", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("</", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document5.isBlock());
      assertTrue(document5.hasParent());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(2, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertEquals("</", document5.location());
      assertEquals("#root", document5.tagName());
      assertEquals("</", document5.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      
      boolean boolean0 = document3.hasClass("=H05C H,o");
      assertFalse(boolean0);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document1, document0);
      assertNotSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document3, document2);
      assertNotSame(document3, document4);
      assertNotSame(document3, document5);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document0));
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = element0.hasClass("AfterHead");
      assertFalse(boolean1);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertTrue(boolean1 == boolean0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document6 = document1.ownerDocument();
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document1, document0);
      assertNotSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotSame(document1, document2);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNull(document6);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      
      Document document7 = document1.normalise();
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document7);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document1, document0);
      assertNotSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotSame(document1, document2);
      assertSame(document1, document7);
      assertNotSame(document7, document4);
      assertSame(document7, document1);
      assertSame(document7, document3);
      assertNotSame(document7, document0);
      assertNotSame(document7, document2);
      assertNotSame(document7, document5);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertTrue(document7.hasParent());
      assertEquals("</", document7.location());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(1, document7.siblingIndex());
      assertEquals(1, document7.childNodeSize());
      assertEquals("#document", document7.nodeName());
      assertFalse(document7.isBlock());
      assertEquals("#root", document7.tagName());
      assertEquals("</", document7.baseUri());
      assertNotNull(document7);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document5));
      
      Element element1 = document7.previousElementSibling();
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document7);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document1, document0);
      assertNotSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotSame(document1, document2);
      assertSame(document1, document7);
      assertNotSame(document7, document4);
      assertSame(document7, document1);
      assertSame(document7, document3);
      assertNotSame(document7, document0);
      assertNotSame(document7, document2);
      assertNotSame(document7, document5);
      assertNotSame(element1, element0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertTrue(document7.hasParent());
      assertEquals("</", document7.location());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(1, document7.siblingIndex());
      assertEquals(1, document7.childNodeSize());
      assertEquals("#document", document7.nodeName());
      assertFalse(document7.isBlock());
      assertEquals("#root", document7.tagName());
      assertEquals("</", document7.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("html", element1.nodeName());
      assertEquals("html", element1.tagName());
      assertEquals("</", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document5));
      assertFalse(element1.equals((Object)element0));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = new Document("org.jsoup.parser.Token$Comment");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = Parser.parseBodyFragment("org.jsoup.parser.Token$Comment", "org.jsoup.parser.Token$Comment");
      assertNotSame(document1, document0);
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      CDataNode cDataNode0 = new CDataNode("org.jsoup.parser.Token$Comment");
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      Document document2 = (Document)document1.appendChild(document0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("org.jsoup.parser.Token$Comment", document2.location());
      assertEquals("org.jsoup.parser.Token$Comment", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      boolean boolean0 = document2.hasText();
      assertTrue(boolean0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("org.jsoup.parser.Token$Comment", document2.location());
      assertEquals("org.jsoup.parser.Token$Comment", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Elements elements0 = document2.getElementsMatchingText("yG#y");
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("org.jsoup.parser.Token$Comment", document2.location());
      assertEquals("org.jsoup.parser.Token$Comment", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Document document3 = (Document)document2.attr("org.jsoup.parser.Token$Comment", true);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("org.jsoup.parser.Token$Comment", document2.location());
      assertEquals("org.jsoup.parser.Token$Comment", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals("org.jsoup.parser.Token$Comment", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      
      Element element0 = document1.head();
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("org.jsoup.parser.Token$Comment", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      assertFalse(document1.equals((Object)document0));
      
      Element element1 = element0.addClass("org.jsoup.parser.Token$Comment");
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("org.jsoup.parser.Token$Comment", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("org.jsoup.parser.Token$Comment", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertNotNull(element1);
      assertFalse(document1.equals((Object)document0));
      
      Elements elements1 = element0.previousElementSiblings();
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(element0, element1);
      assertNotSame(elements1, elements0);
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("org.jsoup.parser.Token$Comment", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertFalse(document1.equals((Object)document0));
      assertTrue(elements1.equals((Object)elements0));
      
      List<Node> list0 = element0.ensureChildNodes();
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(element0, element1);
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("org.jsoup.parser.Token$Comment", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(document1.equals((Object)document0));
      
      String string0 = document1.cssSelector();
      assertEquals("#root", string0);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertNotNull(string0);
      assertFalse(document1.equals((Object)document0));
      
      Element element2 = element1.appendChild(document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document2.location());
      assertEquals("org.jsoup.parser.Token$Comment", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals("org.jsoup.parser.Token$Comment", document3.location());
      assertEquals("#root", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("org.jsoup.parser.Token$Comment", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("org.jsoup.parser.Token$Comment", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("org.jsoup.parser.Token$Comment", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.tagName());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Comment", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.nodeName());
      assertEquals("head", element2.tagName());
      assertNotNull(element2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      
      Map<String, String> map0 = element0.dataset();
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("org.jsoup.parser.Token$Comment", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      assertFalse(document1.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("</", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      List<Node> list0 = document0.ensureChildNodes();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      
      Element element0 = new Element("</");
      assertEquals("</", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Element element1 = element0.appendTo(document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals("</", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("</", element0.tagName());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("</", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("</", element1.tagName());
      assertTrue(element1.hasParent());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Element element2 = element1.prependText("</");
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals("</", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("</", element0.tagName());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element1.childNodeSize());
      assertEquals("</", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("</", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertEquals("</", element2.nodeName());
      assertEquals("</", element2.tagName());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertNotNull(element2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      
      Document document4 = document3.parser(parser1);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertSame(document4, document1);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals("</", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.location());
      assertEquals("</", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(2, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      
      Document document5 = (Document)document4.text("</");
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertNotSame(document2, document1);
      assertNotSame(document2, document5);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document5);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document5);
      assertNotSame(document5, document2);
      assertSame(document5, document4);
      assertSame(document5, document3);
      assertSame(document5, document1);
      assertNotSame(document5, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals("</", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.location());
      assertEquals("</", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(2, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.isBlock());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertEquals("</", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("</", document5.location());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      
      Document document6 = (Document)document5.toggleClass("k'*@w{Ya-");
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document6);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document1, document6);
      assertSame(document1, document4);
      assertNotSame(document2, document1);
      assertNotSame(document2, document6);
      assertNotSame(document2, document5);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document3, document6);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document5);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      assertSame(document4, document6);
      assertNotSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document5);
      assertNotSame(document5, document2);
      assertSame(document5, document4);
      assertSame(document5, document3);
      assertSame(document5, document1);
      assertSame(document5, document6);
      assertNotSame(document5, document0);
      assertSame(document6, document4);
      assertNotSame(document6, document2);
      assertSame(document6, document1);
      assertSame(document6, document3);
      assertNotSame(document6, document0);
      assertSame(document6, document5);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals("</", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.location());
      assertEquals("</", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(2, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.isBlock());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertEquals("</", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("</", document5.location());
      assertEquals("</", document6.location());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals(1, document6.siblingIndex());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertFalse(document6.updateMetaCharsetElement());
      assertTrue(document6.hasParent());
      assertEquals(2, document6.childNodeSize());
      assertEquals("</", document6.baseUri());
      assertEquals("#root", document6.tagName());
      assertNotNull(document6);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document0));
      
      String string0 = document2.baseUri();
      assertEquals("</", string0);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document6);
      assertNotSame(document2, document1);
      assertNotSame(document2, document6);
      assertNotSame(document2, document5);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      
      boolean boolean0 = document6.hasClass("br");
      assertFalse(boolean0);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document6);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document1, document6);
      assertSame(document1, document4);
      assertNotSame(document2, document1);
      assertNotSame(document2, document6);
      assertNotSame(document2, document5);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document3, document6);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document5);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      assertSame(document4, document6);
      assertNotSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document5);
      assertNotSame(document5, document2);
      assertSame(document5, document4);
      assertSame(document5, document3);
      assertSame(document5, document1);
      assertSame(document5, document6);
      assertNotSame(document5, document0);
      assertSame(document6, document4);
      assertNotSame(document6, document2);
      assertSame(document6, document1);
      assertSame(document6, document3);
      assertNotSame(document6, document0);
      assertSame(document6, document5);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals("</", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.location());
      assertEquals("</", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(2, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.isBlock());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertEquals("</", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("</", document5.location());
      assertEquals("</", document6.location());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals(1, document6.siblingIndex());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertFalse(document6.updateMetaCharsetElement());
      assertTrue(document6.hasParent());
      assertEquals(2, document6.childNodeSize());
      assertEquals("</", document6.baseUri());
      assertEquals("#root", document6.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document0));
      
      String string1 = parseSettings0.normalizeTag("d'atbtkc>ug");
      assertEquals("d'atbtkc>ug", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Elements elements0 = document0.getElementsByAttributeValueContaining("d'atbtkc>ug", "tq");
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document6);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document6));
      
      String string2 = Node.EmptyString;
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Document document7 = (Document)document3.appendText("d'atbtkc>ug");
      assertNotSame(document0, document7);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document6);
      assertSame(document1, document7);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document1, document6);
      assertSame(document1, document4);
      assertNotSame(document2, document1);
      assertNotSame(document2, document6);
      assertNotSame(document2, document5);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document7);
      assertSame(document7, document4);
      assertNotSame(document7, document2);
      assertSame(document7, document1);
      assertSame(document7, document6);
      assertSame(document7, document3);
      assertNotSame(document7, document0);
      assertSame(document7, document5);
      assertSame(document3, document6);
      assertSame(document3, document7);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document5);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(1, document7.siblingIndex());
      assertEquals("#document", document7.nodeName());
      assertFalse(document7.isBlock());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(3, document7.childNodeSize());
      assertTrue(document7.hasParent());
      assertEquals("</", document7.baseUri());
      assertEquals("#root", document7.tagName());
      assertEquals("</", document7.location());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(3, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertNotNull(document7);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      boolean boolean1 = Element.preserveWhitespace(document4);
      assertFalse(boolean1);
      assertNotSame(document0, document7);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document6);
      assertSame(document1, document7);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document1, document6);
      assertSame(document1, document4);
      assertNotSame(document2, document1);
      assertNotSame(document2, document6);
      assertNotSame(document2, document5);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document7);
      assertSame(document3, document6);
      assertSame(document3, document7);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document5);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      assertSame(document4, document6);
      assertSame(document4, document7);
      assertNotSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document5);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(3, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.location());
      assertEquals("</", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(3, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertTrue(boolean1 == boolean0);
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      
      boolean boolean2 = document7.hasText();
      assertTrue(boolean2);
      assertNotSame(document0, document7);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document6);
      assertSame(document1, document7);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document1, document6);
      assertSame(document1, document4);
      assertNotSame(document2, document1);
      assertNotSame(document2, document6);
      assertNotSame(document2, document5);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document7);
      assertSame(document7, document4);
      assertNotSame(document7, document2);
      assertSame(document7, document1);
      assertSame(document7, document6);
      assertSame(document7, document3);
      assertNotSame(document7, document0);
      assertSame(document7, document5);
      assertSame(document3, document6);
      assertSame(document3, document7);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document5);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(1, document7.siblingIndex());
      assertEquals("#document", document7.nodeName());
      assertFalse(document7.isBlock());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(3, document7.childNodeSize());
      assertTrue(document7.hasParent());
      assertEquals("</", document7.baseUri());
      assertEquals("#root", document7.tagName());
      assertEquals("</", document7.location());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(3, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Document document8 = document3.clone();
      assertNotSame(document0, document7);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document8);
      assertNotSame(document0, document5);
      assertNotSame(document0, document6);
      assertNotSame(document1, document8);
      assertSame(document1, document7);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document1, document6);
      assertSame(document1, document4);
      assertNotSame(document2, document8);
      assertNotSame(document2, document1);
      assertNotSame(document2, document6);
      assertNotSame(document2, document5);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document7);
      assertSame(document3, document6);
      assertNotSame(document3, document8);
      assertSame(document3, document7);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document5);
      assertNotSame(document8, document7);
      assertNotSame(document8, document0);
      assertNotSame(document8, document4);
      assertNotSame(document8, document2);
      assertNotSame(document8, document3);
      assertNotSame(document8, document1);
      assertNotSame(document8, document6);
      assertNotSame(document8, document5);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(3, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals(3, document8.childNodeSize());
      assertEquals(0, document8.siblingIndex());
      assertEquals("#document", document8.nodeName());
      assertEquals("#root", document8.tagName());
      assertFalse(document8.isBlock());
      assertEquals("</", document8.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertFalse(document8.hasParent());
      assertEquals("</", document8.location());
      assertNotNull(document8);
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document8.equals((Object)document7));
      assertFalse(document8.equals((Object)document0));
      assertFalse(document8.equals((Object)document4));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document1));
      assertFalse(document8.equals((Object)document6));
      assertFalse(document8.equals((Object)document5));
      
      Element element3 = document4.appendElement("k3Nw+})`!5%-");
      assertNotSame(document0, document7);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document8);
      assertNotSame(document0, document5);
      assertNotSame(document0, document6);
      assertNotSame(document1, document8);
      assertSame(document1, document7);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document1, document6);
      assertSame(document1, document4);
      assertNotSame(document2, document8);
      assertNotSame(document2, document1);
      assertNotSame(document2, document6);
      assertNotSame(document2, document5);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document7);
      assertSame(document3, document6);
      assertNotSame(document3, document8);
      assertSame(document3, document7);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document5);
      assertNotSame(element3, element0);
      assertNotSame(element3, element1);
      assertNotSame(element3, element2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document4, document3);
      assertNotSame(document4, document8);
      assertNotSame(document4, document0);
      assertSame(document4, document6);
      assertSame(document4, document7);
      assertNotSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document5);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(4, document1.childNodeSize());
      assertEquals("</", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(4, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertTrue(element3.hasParent());
      assertEquals(3, element3.siblingIndex());
      assertEquals(0, element3.childNodeSize());
      assertFalse(element3.isBlock());
      assertEquals("</", element3.baseUri());
      assertEquals("k3nw+})`!5%-", element3.nodeName());
      assertEquals("k3nw+})`!5%-", element3.tagName());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.location());
      assertEquals("</", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(4, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertNotNull(element3);
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document8));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document8));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document3.equals((Object)document8));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element3.equals((Object)element2));
      assertFalse(document4.equals((Object)document8));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      
      Element element4 = element1.prepend("C\"*zK^%PYI");
      assertNotSame(document0, document7);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document8);
      assertNotSame(document0, document5);
      assertNotSame(document0, document6);
      assertNotSame(document1, document8);
      assertSame(document1, document7);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document1, document6);
      assertSame(document1, document4);
      assertNotSame(document2, document8);
      assertNotSame(document2, document1);
      assertNotSame(document2, document6);
      assertNotSame(document2, document5);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document7);
      assertSame(document3, document6);
      assertNotSame(document3, document8);
      assertSame(document3, document7);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document5);
      assertSame(element0, element4);
      assertNotSame(element0, element3);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertNotSame(element1, element3);
      assertSame(element1, element4);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertSame(element4, element1);
      assertSame(element4, element0);
      assertSame(element4, element2);
      assertNotSame(element4, element3);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(4, document1.childNodeSize());
      assertEquals("</", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(4, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("</", element0.tagName());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.childNodeSize());
      assertEquals(2, element1.childNodeSize());
      assertEquals("</", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("</", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("", element4.baseUri());
      assertEquals("</", element4.nodeName());
      assertEquals("</", element4.tagName());
      assertTrue(element4.hasParent());
      assertEquals(2, element4.childNodeSize());
      assertEquals(1, element4.siblingIndex());
      assertFalse(element4.isBlock());
      assertNotNull(element4);
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document8));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document8));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document3.equals((Object)document8));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(element0.equals((Object)element3));
      assertFalse(element1.equals((Object)element3));
      assertFalse(element4.equals((Object)element3));
      
      document0.nodelistChanged();
      assertNotSame(document0, document7);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document8);
      assertNotSame(document0, document5);
      assertNotSame(document0, document6);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document6));
      
      Pattern pattern0 = Pattern.compile("=0lF", 1350);
      assertEquals(1350, pattern0.flags());
      assertEquals("=0lF", pattern0.toString());
      assertEquals("=0lF", pattern0.pattern());
      assertNotNull(pattern0);
      
      Elements elements1 = document8.getElementsMatchingOwnText(pattern0);
      assertNotSame(document0, document7);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document8);
      assertNotSame(document0, document5);
      assertNotSame(document0, document6);
      assertNotSame(document1, document8);
      assertSame(document1, document7);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document1, document6);
      assertSame(document1, document4);
      assertNotSame(document2, document8);
      assertNotSame(document2, document1);
      assertNotSame(document2, document6);
      assertNotSame(document2, document5);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document7);
      assertSame(document3, document6);
      assertNotSame(document3, document8);
      assertSame(document3, document7);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document5);
      assertNotSame(document8, document7);
      assertNotSame(document8, document0);
      assertNotSame(document8, document4);
      assertNotSame(document8, document2);
      assertNotSame(document8, document3);
      assertNotSame(document8, document1);
      assertNotSame(document8, document6);
      assertNotSame(document8, document5);
      assertNotSame(elements1, elements0);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(4, document1.childNodeSize());
      assertEquals("</", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(4, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals(3, document8.childNodeSize());
      assertEquals(0, document8.siblingIndex());
      assertEquals("#document", document8.nodeName());
      assertEquals("#root", document8.tagName());
      assertFalse(document8.isBlock());
      assertEquals("</", document8.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertFalse(document8.hasParent());
      assertEquals("</", document8.location());
      assertEquals(1350, pattern0.flags());
      assertEquals("=0lF", pattern0.toString());
      assertEquals("=0lF", pattern0.pattern());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document8));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document8));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document3.equals((Object)document8));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document8.equals((Object)document7));
      assertFalse(document8.equals((Object)document0));
      assertFalse(document8.equals((Object)document4));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document1));
      assertFalse(document8.equals((Object)document6));
      assertFalse(document8.equals((Object)document5));
      assertTrue(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(": ", "(dt5&4sx");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("(dt5&4sx", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("(dt5&4sx", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      Tag tag0 = Tag.valueOf("'%L,V|W*2fNf_K$3");
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("'%L,V|W*2fNf_K$3", tag0.toString());
      assertEquals("'%L,V|W*2fNf_K$3", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode("value");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.clone();
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertFalse(attributes1.equals((Object)attributes0));
      
      FormElement formElement0 = new FormElement(tag0, "q>$mzPdXW/", attributes1);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("'%L,V|W*2fNf_K$3", tag0.toString());
      assertEquals("'%L,V|W*2fNf_K$3", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("'%L,V|W*2fNf_K$3", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("q>$mzPdXW/", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("'%L,V|W*2fNf_K$3", formElement0.tagName());
      assertNotNull(formElement0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      
      FormElement formElement1 = formElement0.addElement(document0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("(dt5&4sx", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("(dt5&4sx", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("'%L,V|W*2fNf_K$3", tag0.toString());
      assertEquals("'%L,V|W*2fNf_K$3", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("'%L,V|W*2fNf_K$3", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("q>$mzPdXW/", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("'%L,V|W*2fNf_K$3", formElement0.tagName());
      assertEquals("'%L,V|W*2fNf_K$3", formElement1.nodeName());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("q>$mzPdXW/", formElement1.baseUri());
      assertEquals("'%L,V|W*2fNf_K$3", formElement1.tagName());
      assertFalse(formElement1.hasParent());
      assertNotNull(formElement1);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      
      nodeArray0[1] = (Node) formElement1;
      Document document1 = (Document)document0.insertChildren(1, nodeArray0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.siblingIndex());
      assertEquals(3, document0.childNodeSize());
      assertEquals("(dt5&4sx", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("(dt5&4sx", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("(dt5&4sx", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(3, document1.childNodeSize());
      assertEquals("(dt5&4sx", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertEquals(2, nodeArray0.length);
      
      // Undeclared exception!
      formElement0.after("#");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "U4)9T[rb0T+";
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = Document.createShell("leH:; w+fW9?y*Q@(R");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("leH:; w+fW9?y*Q@(R", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("leH:; w+fW9?y*Q@(R", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("leH:; w+fW9?y*Q@(R", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("leH:; w+fW9?y*Q@(R", document0.baseUri());
      assertEquals("leH:; w+fW9?y*Q@(R", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("leH:; w+fW9?y*Q@(R", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      CDataNode cDataNode0 = new CDataNode("U4)9T[rb0T+");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      // Undeclared exception!
      try { 
        document0.wrap("yG#y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("(dt5&4sx", parseSettings0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertEquals("(dt5&4sx", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("(dt5&4sx", tag0.getName());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("AfterAttributeValue_quoted", "AfterAttributeValue_quoted");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      
      String string0 = parseSettings0.normalizeAttribute("9U[l+");
      assertEquals("9U[l+", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      FormElement formElement0 = new FormElement(tag0, "(dt5&4sx", attributes1);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertEquals("(dt5&4sx", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("(dt5&4sx", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("(dt5&4sx", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("(dt5&4sx", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("(dt5&4sx", formElement0.tagName());
      assertNotNull(formElement0);
      
      // Undeclared exception!
      try { 
        formElement0.val();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = "U4)9T[rb0T+";
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = Document.createShell("leH:; w+fW9?y*Q@(R");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("leH:; w+fW9?y*Q@(R", document0.location());
      assertEquals("leH:; w+fW9?y*Q@(R", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("leH:; w+fW9?y*Q@(R", document0.location());
      assertEquals("leH:; w+fW9?y*Q@(R", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("leH:; w+fW9?y*Q@(R", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("leH:; w+fW9?y*Q@(R", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      CDataNode cDataNode0 = new CDataNode("U4)9T[rb0T+");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      DataNode dataNode0 = new DataNode("textarea");
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertNotNull(dataNode0);
      
      Document document2 = (Document)document1.appendChild(dataNode0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("leH:; w+fW9?y*Q@(R", document0.location());
      assertEquals("leH:; w+fW9?y*Q@(R", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("leH:; w+fW9?y*Q@(R", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("leH:; w+fW9?y*Q@(R", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, dataNode0.siblingIndex());
      assertTrue(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("leH:; w+fW9?y*Q@(R", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("leH:; w+fW9?y*Q@(R", document2.baseUri());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      int int0 = 1;
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) dataNode0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document1;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("fieldset");
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)mockPrintWriter0.append((CharSequence) "leH:; w+fW9?y*Q@(R", 1, 1);
      assertSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(mockPrintWriter1, mockPrintWriter0);
      assertNotNull(mockPrintWriter1);
      
      // Undeclared exception!
      try { 
        document1.outerHtmlTail(mockPrintWriter1, 1, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("U4)9T[rb0T+", "U4)9T[rb0T+");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("U4)9T[rb0T+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("U4)9T[rb0T+", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("U4)9T[rb0T+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("U4)9T[rb0T+", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("U4)9T[rb0T+", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("U4)9T[rb0T+", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document2 = document1.parser(parser0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("U4)9T[rb0T+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("U4)9T[rb0T+", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("U4)9T[rb0T+", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("U4)9T[rb0T+", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("U4)9T[rb0T+", document2.location());
      assertEquals("U4)9T[rb0T+", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Tag tag0 = Tag.valueOf("U4)9T[rb0T+");
      assertEquals("U4)9T[rb0T+", tag0.getName());
      assertEquals("U4)9T[rb0T+", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertNotNull(tag0);
      
      LinkedHashSet<TextNode> linkedHashSet0 = new LinkedHashSet<TextNode>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet1.contains("U4)9T[rb0T+"));
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertNotNull(linkedHashSet1);
      
      Document document3 = (Document)document0.classNames((Set<String>) linkedHashSet1);
      assertFalse(linkedHashSet1.contains("U4)9T[rb0T+"));
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("U4)9T[rb0T+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("U4)9T[rb0T+", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("U4)9T[rb0T+", document3.baseUri());
      assertEquals("U4)9T[rb0T+", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      
      List<TextNode> list0 = document0.textNodes();
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("U4)9T[rb0T+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("U4)9T[rb0T+", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      
      Document document4 = (Document)document0.insertChildren(1, (Collection<? extends Node>) list0);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("U4)9T[rb0T+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("U4)9T[rb0T+", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("U4)9T[rb0T+", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("U4)9T[rb0T+", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      
      Document document5 = (Document)document0.val("U4)9T[rb0T+");
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertSame(document5, document3);
      assertSame(document5, document4);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertSame(document5, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("U4)9T[rb0T+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("U4)9T[rb0T+", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("U4)9T[rb0T+", document5.baseUri());
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals(1, document5.childNodeSize());
      assertEquals("U4)9T[rb0T+", document5.location());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("d'AtbtKC>ug", parseSettings0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertNotNull(tag0);
      
      String string0 = "-}hJudcG'k9";
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FormElement formElement0 = new FormElement(tag0, "-}hJudcG'k9", (Attributes) null);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertNotNull(formElement0);
      
      FormElement formElement1 = formElement0.addElement((Element) null);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertNotNull(formElement1);
      
      Element element0 = formElement1.prepend("d'AtbtKC>ug");
      assertSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, element0);
      assertSame(formElement1, formElement0);
      assertSame(element0, formElement0);
      assertSame(element0, formElement1);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals("d'AtbtKC>ug", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("-}hJudcG'k9", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("d'AtbtKC>ug", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      formElement1.reparentChild(formElement0);
      assertSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, element0);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertTrue(formElement1.hasParent());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      
      Tag tag1 = Tag.valueOf("-}hJudcG'k9");
      assertNotSame(tag1, tag0);
      assertFalse(tag1.isData());
      assertFalse(tag1.isBlock());
      assertEquals("-}hJudcG'k9", tag1.toString());
      assertEquals("-}hJudcG'k9", tag1.getName());
      assertFalse(tag1.preserveWhitespace());
      assertTrue(tag1.isInline());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isFormSubmittable());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.isEmpty());
      assertNotNull(tag1);
      assertFalse(tag1.equals((Object)tag0));
      
      int int0 = formElement1.elementSiblingIndex();
      assertEquals(0, int0);
      assertNotSame(tag0, tag1);
      assertSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, element0);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertTrue(formElement1.hasParent());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertFalse(tag0.equals((Object)tag1));
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      String string1 = null;
      // Undeclared exception!
      formElement1.wrap("d'AtbtKC>ug");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":not%s", "Tag name must not be empty.");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals("Tag name must not be empty.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      document1.reparentChild(document0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals("Tag name must not be empty.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document0.tagName("b6hvH$Vs*i]cIc");
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("b6hvh$vs*i]cic", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("b6hvh$vs*i]cic", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document2.empty();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("b6hvh$vs*i]cic", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("b6hvh$vs*i]cic", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("Tag name must not be empty.", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("Tag name must not be empty.", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("b6hvh$vs*i]cic", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      
      StringBuilder stringBuilder0 = new StringBuilder("#1=");
      assertEquals("#1=", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append('R');
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("#1=R", stringBuilder0.toString());
      assertEquals("#1=R", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals("R=1#", stringBuilder0.toString());
      assertEquals("R=1#", stringBuilder1.toString());
      assertEquals("R=1#", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StringBuilder stringBuilder3 = stringBuilder2.append(stringBuffer0);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertEquals("R=1#", stringBuilder0.toString());
      assertEquals("R=1#", stringBuilder1.toString());
      assertEquals("R=1#", stringBuilder2.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("R=1#", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      charArray0[4] = 'R';
      charArray0[5] = 'R';
      charArray0[6] = 'R';
      charArray0[7] = 'R';
      // Undeclared exception!
      try { 
        stringBuilder3.insert(14, charArray0, 14, 14);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 14
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("U4)9T[rb0T+", "U4)9T[rb0T+");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("U4)9T[rb0T+", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("U4)9T[rb0T+", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("U4)9T[rb0T+", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("U4)9T[rb0T+", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("U4)9T[rb0T+", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("U4)9T[rb0T+", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      CDataNode cDataNode0 = new CDataNode("U4)9T[rb0T+");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      DataNode dataNode0 = new DataNode("textarea");
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      Document document2 = (Document)document1.appendChild(dataNode0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("U4)9T[rb0T+", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("U4)9T[rb0T+", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("U4)9T[rb0T+", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("U4)9T[rb0T+", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(1, dataNode0.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("U4)9T[rb0T+", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("U4)9T[rb0T+", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) dataNode0;
      nodeArray0[1] = (Node) document0;
      Elements elements0 = document1.getElementsMatchingOwnText("ED,\"_y%mE");
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("U4)9T[rb0T+", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("U4)9T[rb0T+", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("U4)9T[rb0T+", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("U4)9T[rb0T+", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        document1.insertChildren(67, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":not%s", "Tag name must not be empty.");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("Sdcpd,+007^'yMO!");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      Document document2 = (Document)document1.appendTo(document0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      Document document3 = (Document)document0.toggleClass("Pv?<7$p-GK)`wI]");
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("Tag name must not be empty.", document3.location());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("Tag name must not be empty.", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertNotNull(document3);
      
      boolean boolean0 = document2.hasClass("=H05C H,o");
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertFalse(document2.isBlock());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document4 = new Document(":not%s");
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals(":not%s", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.childNodeSize());
      assertFalse(document4.hasParent());
      assertEquals(":not%s", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertNotNull(document4);
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      
      Document document5 = document1.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document5, document2);
      assertSame(document5, document0);
      assertNotSame(document5, document4);
      assertSame(document5, document3);
      assertSame(document5, document1);
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals(1, document5.siblingIndex());
      assertTrue(document5.hasParent());
      assertEquals(2, document5.childNodeSize());
      assertEquals("Tag name must not be empty.", document5.location());
      assertEquals(Document.QuirksMode.quirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals("Tag name must not be empty.", document5.baseUri());
      assertFalse(document5.isBlock());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document5.equals((Object)document4));
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        document_OutputSettings0.indentAmount((-2082));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Tag tag0 = Tag.valueOf("(dt5&4sx");
      assertEquals("(dt5&4sx", tag0.toString());
      assertEquals("(dt5&4sx", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("WG9U,I]w(%GDBB8w9", false);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      
      FormElement formElement0 = new FormElement(tag0, "Rn!<3|", attributes1);
      assertEquals("(dt5&4sx", tag0.toString());
      assertEquals("(dt5&4sx", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals("(dt5&4sx", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("Rn!<3|", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("(dt5&4sx", formElement0.tagName());
      assertNotNull(formElement0);
      
      Element element0 = formElement0.prependElement("b6hvH$Vs*i]cIc");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals("(dt5&4sx", tag0.toString());
      assertEquals("(dt5&4sx", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals("(dt5&4sx", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("Rn!<3|", formElement0.baseUri());
      assertEquals("(dt5&4sx", formElement0.tagName());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Rn!<3|", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("b6hvh$vs*i]cic", element0.tagName());
      assertEquals("b6hvh$vs*i]cic", element0.nodeName());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("</", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("</", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("</", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.location());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      List<Node> list0 = document0.ensureChildNodes();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      
      Element element0 = new Element("</");
      assertEquals("</", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      Element element1 = element0.appendTo(document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals(2, document3.childNodeSize());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.location());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("</", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals("</", element1.nodeName());
      assertEquals("</", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      
      Document document4 = document3.parser(parser1);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document3, document4);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals(2, document3.childNodeSize());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.location());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("</", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(2, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals(1, document4.siblingIndex());
      assertEquals("</", document4.baseUri());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      
      Document document5 = (Document)document4.text("</");
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertNotSame(document2, document1);
      assertNotSame(document2, document5);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document3, document4);
      assertNotSame(document3, document2);
      assertSame(document3, document5);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document4, document2);
      assertSame(document4, document5);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertNotSame(document5, document2);
      assertSame(document5, document3);
      assertSame(document5, document1);
      assertNotSame(document5, document0);
      assertSame(document5, document4);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals(2, document3.childNodeSize());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.location());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("</", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(2, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals(1, document4.siblingIndex());
      assertEquals("</", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("</", document5.location());
      assertEquals("</", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(1, document5.siblingIndex());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertEquals(2, document5.childNodeSize());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains("</"));
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Document document6 = (Document)document4.classNames(set0);
      assertFalse(set0.contains("</"));
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document6);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertSame(document1, document6);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertNotSame(document2, document1);
      assertNotSame(document2, document5);
      assertNotSame(document2, document6);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document3, document4);
      assertNotSame(document3, document2);
      assertSame(document3, document5);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document6);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document4, document2);
      assertSame(document4, document5);
      assertSame(document4, document6);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document6, document3);
      assertNotSame(document6, document0);
      assertNotSame(document6, document2);
      assertSame(document6, document5);
      assertSame(document6, document1);
      assertSame(document6, document4);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals(2, document3.childNodeSize());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.location());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("</", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(2, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals(1, document4.siblingIndex());
      assertEquals("</", document4.baseUri());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(document6.isBlock());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertEquals("#root", document6.tagName());
      assertEquals(1, document6.siblingIndex());
      assertEquals("</", document6.baseUri());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("</", document6.location());
      assertEquals(2, document6.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertNotNull(document6);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document2));
      
      Document document7 = (Document)document5.toggleClass("k'*@w{Ya-");
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document6);
      assertNotSame(document0, document7);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertSame(document1, document6);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document7);
      assertSame(document1, document4);
      assertNotSame(document2, document7);
      assertNotSame(document2, document1);
      assertNotSame(document2, document5);
      assertNotSame(document2, document6);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document3, document4);
      assertNotSame(document3, document2);
      assertSame(document3, document5);
      assertSame(document3, document7);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document6);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document4, document2);
      assertSame(document4, document5);
      assertSame(document4, document6);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document7);
      assertSame(document4, document3);
      assertNotSame(document5, document2);
      assertSame(document5, document3);
      assertSame(document5, document1);
      assertNotSame(document5, document0);
      assertSame(document5, document7);
      assertSame(document5, document4);
      assertSame(document5, document6);
      assertSame(document7, document5);
      assertNotSame(document7, document0);
      assertSame(document7, document3);
      assertNotSame(document7, document2);
      assertSame(document7, document1);
      assertSame(document7, document4);
      assertSame(document7, document6);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals(2, document3.childNodeSize());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.location());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("</", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(2, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals(1, document4.siblingIndex());
      assertEquals("</", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("</", document5.location());
      assertEquals("</", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(1, document5.siblingIndex());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertEquals(2, document5.childNodeSize());
      assertEquals("</", document7.baseUri());
      assertEquals("#root", document7.tagName());
      assertEquals(2, document7.childNodeSize());
      assertEquals("</", document7.location());
      assertEquals(1, document7.siblingIndex());
      assertFalse(document7.isBlock());
      assertTrue(document7.hasParent());
      assertEquals("#document", document7.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertFalse(document7.updateMetaCharsetElement());
      assertNotNull(document7);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document2));
      
      String string0 = document2.baseUri();
      assertEquals("</", string0);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document6);
      assertNotSame(document0, document7);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document2, document7);
      assertNotSame(document2, document1);
      assertNotSame(document2, document5);
      assertNotSame(document2, document6);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertNotSame(document2, document3);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document3));
      
      Elements elements0 = document4.getElementsByAttributeValue("</", "org.jsoup.helper.ChangeNotifyingArrayList");
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document6);
      assertNotSame(document0, document7);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertSame(document1, document6);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document7);
      assertSame(document1, document4);
      assertNotSame(document2, document7);
      assertNotSame(document2, document1);
      assertNotSame(document2, document5);
      assertNotSame(document2, document6);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document3, document4);
      assertNotSame(document3, document2);
      assertSame(document3, document5);
      assertSame(document3, document7);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document6);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document4, document2);
      assertSame(document4, document5);
      assertSame(document4, document6);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document7);
      assertSame(document4, document3);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals(2, document3.childNodeSize());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.location());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("</", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(2, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals(1, document4.siblingIndex());
      assertEquals("</", document4.baseUri());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      
      Document document8 = (Document)document3.text("b<_+");
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document8);
      assertNotSame(document0, document6);
      assertNotSame(document0, document7);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertSame(document1, document6);
      assertSame(document1, document8);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document7);
      assertSame(document1, document4);
      assertSame(document8, document4);
      assertNotSame(document8, document2);
      assertSame(document8, document3);
      assertNotSame(document8, document0);
      assertSame(document8, document7);
      assertSame(document8, document5);
      assertSame(document8, document6);
      assertSame(document8, document1);
      assertNotSame(document2, document7);
      assertNotSame(document2, document1);
      assertNotSame(document2, document5);
      assertNotSame(document2, document6);
      assertSame(document2, document0);
      assertNotSame(document2, document8);
      assertNotSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document3, document4);
      assertNotSame(document3, document2);
      assertSame(document3, document5);
      assertSame(document3, document7);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document6);
      assertSame(document3, document8);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertEquals("</", document8.location());
      assertEquals("#root", document8.tagName());
      assertFalse(document8.isBlock());
      assertTrue(document8.hasParent());
      assertEquals("#document", document8.nodeName());
      assertEquals("</", document8.baseUri());
      assertEquals(1, document8.siblingIndex());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals(2, document8.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals(2, document3.childNodeSize());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.location());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document8);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document8.equals((Object)document0));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      Elements elements1 = document8.previousElementSiblings();
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document8);
      assertNotSame(document0, document6);
      assertNotSame(document0, document7);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertSame(document1, document6);
      assertSame(document1, document8);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document7);
      assertSame(document1, document4);
      assertSame(document8, document4);
      assertNotSame(document8, document2);
      assertSame(document8, document3);
      assertNotSame(document8, document0);
      assertSame(document8, document7);
      assertSame(document8, document5);
      assertSame(document8, document6);
      assertSame(document8, document1);
      assertNotSame(document2, document7);
      assertNotSame(document2, document1);
      assertNotSame(document2, document5);
      assertNotSame(document2, document6);
      assertSame(document2, document0);
      assertNotSame(document2, document8);
      assertNotSame(document2, document4);
      assertNotSame(document2, document3);
      assertNotSame(elements1, elements0);
      assertSame(document3, document4);
      assertNotSame(document3, document2);
      assertSame(document3, document5);
      assertSame(document3, document7);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document6);
      assertSame(document3, document8);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertEquals("</", document8.location());
      assertEquals("#root", document8.tagName());
      assertFalse(document8.isBlock());
      assertTrue(document8.hasParent());
      assertEquals("#document", document8.nodeName());
      assertEquals("</", document8.baseUri());
      assertEquals(1, document8.siblingIndex());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals(2, document8.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals(2, document3.childNodeSize());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.location());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document8.equals((Object)document0));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document8));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document3));
      assertFalse(elements1.equals((Object)elements0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      List<Node> list1 = document3.ensureChildNodes();
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document8);
      assertNotSame(document0, document6);
      assertNotSame(document0, document7);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertSame(document1, document6);
      assertSame(document1, document8);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document7);
      assertSame(document1, document4);
      assertNotSame(document2, document7);
      assertNotSame(document2, document1);
      assertNotSame(document2, document5);
      assertNotSame(document2, document6);
      assertSame(document2, document0);
      assertNotSame(document2, document8);
      assertNotSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document3, document4);
      assertNotSame(document3, document2);
      assertSame(document3, document5);
      assertSame(document3, document7);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document6);
      assertSame(document3, document8);
      assertNotSame(list1, list0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals(2, document3.childNodeSize());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.location());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(list1.isEmpty());
      assertEquals(2, list1.size());
      assertNotNull(list1);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document8));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(list1.equals((Object)list0));
      
      // Undeclared exception!
      try { 
        document1.getElementsMatchingOwnText("k'*@w{Ya-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: k'*@w{Ya-
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":not%s", "Tag name must not be empty.");
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("Sdcpd,+007^'yMO!");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      String string0 = document0.baseUri();
      assertEquals("Tag name must not be empty.", string0);
      assertSame(document0, document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertNotNull(string0);
      
      boolean boolean0 = document1.hasClass("Tag name must not be empty.");
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      
      Elements elements0 = document0.getElementsByAttributeValueContaining(":not%s", "J4(TV->^1+\" ");
      assertSame(document0, document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      String string1 = document1.className();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Document document2 = (Document)document0.appendText("Sdcpd,+007^'yMO!");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Tag name must not be empty.", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertNotNull(document2);
      
      boolean boolean1 = Element.preserveWhitespace(document0);
      assertFalse(boolean1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = document1.hasText();
      assertTrue(boolean2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Document document3 = document0.clone();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("Tag name must not be empty.", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("Tag name must not be empty.", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertNotNull(document3);
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      
      Element element0 = document3.appendElement("V_GD{ld8 bS");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("Tag name must not be empty.", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("Tag name must not be empty.", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertEquals("v_gd{ld8 bs", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("v_gd{ld8 bs", element0.nodeName());
      assertEquals(2, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      
      Element element1 = element0.prepend("V_GD{ld8 bS");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("Tag name must not be empty.", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("Tag name must not be empty.", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("v_gd{ld8 bs", element0.tagName());
      assertEquals("v_gd{ld8 bs", element0.nodeName());
      assertEquals(2, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("v_gd{ld8 bs", element1.tagName());
      assertEquals("v_gd{ld8 bs", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("Tag name must not be empty.", element1.baseUri());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      
      document0.nodelistChanged();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.equals((Object)document3));
      
      // Undeclared exception!
      try { 
        Pattern.compile("J4(TV->^1+\" ", 840);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 12
         // J4(TV->^1+\" 
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parse("r<", "r<");
      assertEquals("r<", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("r<", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("r<", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("r<", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("r<", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("r<", document1.baseUri());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("r<", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("r<", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("r<", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("r<", document2.location());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertEquals("r<", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("r<", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("r<", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("r<", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("r<", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("r<", document2.location());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("r<", document3.baseUri());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals("r<", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      Elements elements0 = document2.nextElementSiblings();
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertEquals("r<", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("r<", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("r<", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("r<", document2.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      
      Element element0 = new Element("r<");
      assertEquals("", element0.baseUri());
      assertEquals("r<", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("r<", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Document document4 = (Document)document2.appendTo(element0);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertNotSame(document4, document1);
      assertEquals("r<", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("r<", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("r<", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("r<", document2.location());
      assertEquals("", element0.baseUri());
      assertEquals("r<", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("r<", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("r<", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("r<", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertTrue(document4.hasParent());
      assertEquals(2, document4.childNodeSize());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      
      Document document5 = (Document)document4.toggleClass("ljc");
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertSame(document4, document5);
      assertNotSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertNotSame(document4, document1);
      assertSame(document5, document2);
      assertSame(document5, document4);
      assertNotSame(document5, document3);
      assertSame(document5, document0);
      assertNotSame(document5, document1);
      assertEquals("r<", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("r<", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("r<", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("r<", document2.location());
      assertEquals("", element0.baseUri());
      assertEquals("r<", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("r<", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("r<", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("r<", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertTrue(document4.hasParent());
      assertEquals(2, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("r<", document5.location());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertEquals("r<", document5.baseUri());
      assertEquals(2, document5.childNodeSize());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      
      DocumentType documentType0 = new DocumentType("ljc", "ljc", "ljc", "r<");
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      assertFalse(documentType0.hasParent());
      assertNotNull(documentType0);
      
      Document document6 = (Document)document1.after((Node) documentType0);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document5);
      assertNotSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document6);
      assertNotSame(document6, document0);
      assertNotSame(document6, document2);
      assertSame(document6, document3);
      assertNotSame(document6, document4);
      assertNotSame(document6, document5);
      assertSame(document6, document1);
      assertEquals("r<", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(3, document0.childNodeSize());
      assertEquals("r<", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("r<", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("r<", document1.baseUri());
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(2, documentType0.siblingIndex());
      assertTrue(documentType0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("#root", document6.tagName());
      assertEquals("r<", document6.baseUri());
      assertEquals("#document", document6.nodeName());
      assertEquals(1, document6.childNodeSize());
      assertTrue(document6.hasParent());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(1, document6.siblingIndex());
      assertEquals("r<", document6.location());
      assertFalse(document6.isBlock());
      assertNotNull(document6);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document5));
      
      boolean boolean0 = document3.hasClass("=H05C H,o");
      assertFalse(boolean0);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document5);
      assertNotSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document6);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document2, document5);
      assertNotSame(document2, document3);
      assertNotSame(document2, document6);
      assertSame(document2, document0);
      assertNotSame(document3, document4);
      assertNotSame(document3, document2);
      assertNotSame(document3, document5);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document6);
      assertEquals("r<", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(3, document0.childNodeSize());
      assertEquals("r<", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("r<", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("r<", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("r<", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("r<", document2.location());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("r<", document3.baseUri());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals("r<", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document0));
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document7 = new Document("r<");
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(0, document7.childNodeSize());
      assertEquals("#document", document7.nodeName());
      assertFalse(document7.isBlock());
      assertEquals("#root", document7.tagName());
      assertEquals(0, document7.siblingIndex());
      assertEquals("r<", document7.baseUri());
      assertEquals("r<", document7.location());
      assertFalse(document7.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertNotNull(document7);
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document0));
      
      Document document8 = document7.quirksMode(document_QuirksMode0);
      assertNotSame(document7, document2);
      assertNotSame(document7, document4);
      assertNotSame(document7, document5);
      assertNotSame(document7, document3);
      assertNotSame(document7, document6);
      assertNotSame(document7, document1);
      assertSame(document7, document8);
      assertNotSame(document7, document0);
      assertNotSame(document8, document4);
      assertNotSame(document8, document5);
      assertNotSame(document8, document2);
      assertSame(document8, document7);
      assertNotSame(document8, document1);
      assertNotSame(document8, document0);
      assertNotSame(document8, document3);
      assertNotSame(document8, document6);
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(0, document7.childNodeSize());
      assertEquals("#document", document7.nodeName());
      assertFalse(document7.isBlock());
      assertEquals("#root", document7.tagName());
      assertEquals(0, document7.siblingIndex());
      assertEquals("r<", document7.baseUri());
      assertEquals(Document.QuirksMode.quirks, document7.quirksMode());
      assertEquals("r<", document7.location());
      assertFalse(document7.hasParent());
      assertEquals("#root", document8.tagName());
      assertEquals(0, document8.childNodeSize());
      assertFalse(document8.hasParent());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals("r<", document8.baseUri());
      assertEquals(Document.QuirksMode.quirks, document8.quirksMode());
      assertEquals("r<", document8.location());
      assertEquals("#document", document8.nodeName());
      assertEquals(0, document8.siblingIndex());
      assertFalse(document8.isBlock());
      assertNotNull(document8);
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document8.equals((Object)document4));
      assertFalse(document8.equals((Object)document5));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document8.equals((Object)document1));
      assertFalse(document8.equals((Object)document0));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document6));
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(4297);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(4297, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(4297, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(4297, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(4297, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(4297, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(false);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(4297, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(4297, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(4297, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(4297, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings3);
      
      Document document9 = document5.outputSettings(document_OutputSettings3);
      assertSame(document0, document4);
      assertNotSame(document0, document7);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document8);
      assertSame(document0, document9);
      assertNotSame(document0, document1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document2, document4);
      assertSame(document2, document9);
      assertNotSame(document2, document1);
      assertNotSame(document2, document7);
      assertNotSame(document2, document8);
      assertSame(document2, document5);
      assertNotSame(document2, document3);
      assertNotSame(document2, document6);
      assertSame(document2, document0);
      assertSame(document9, document0);
      assertNotSame(document9, document3);
      assertSame(document9, document2);
      assertSame(document9, document4);
      assertNotSame(document9, document7);
      assertSame(document9, document5);
      assertNotSame(document9, document6);
      assertNotSame(document9, document8);
      assertNotSame(document9, document1);
      assertNotSame(document4, document8);
      assertSame(document4, document5);
      assertNotSame(document4, document6);
      assertNotSame(document4, document7);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertNotSame(document4, document3);
      assertSame(document4, document9);
      assertNotSame(document4, document1);
      assertNotSame(document5, document8);
      assertSame(document5, document2);
      assertSame(document5, document4);
      assertNotSame(document5, document7);
      assertNotSame(document5, document3);
      assertNotSame(document5, document6);
      assertSame(document5, document0);
      assertNotSame(document5, document1);
      assertSame(document5, document9);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertEquals("r<", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(3, document0.childNodeSize());
      assertEquals("r<", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(4297, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(4297, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("r<", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("r<", document2.location());
      assertEquals("#document", document9.nodeName());
      assertEquals(0, document9.siblingIndex());
      assertTrue(document9.hasParent());
      assertEquals("r<", document9.location());
      assertFalse(document9.isBlock());
      assertEquals("#root", document9.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document9.quirksMode());
      assertFalse(document9.updateMetaCharsetElement());
      assertEquals("r<", document9.baseUri());
      assertEquals(3, document9.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("r<", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("r<", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("r<", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("r<", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(3, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("r<", document5.location());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertEquals("r<", document5.baseUri());
      assertEquals(3, document5.childNodeSize());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(4297, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(4297, document_OutputSettings1.indentAmount());
      assertNotNull(document9);
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document8));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document9.equals((Object)document3));
      assertFalse(document9.equals((Object)document7));
      assertFalse(document9.equals((Object)document6));
      assertFalse(document9.equals((Object)document8));
      assertFalse(document9.equals((Object)document1));
      assertFalse(document4.equals((Object)document8));
      assertFalse(document4.equals((Object)document6));
      assertFalse(document4.equals((Object)document7));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document5.equals((Object)document8));
      assertFalse(document5.equals((Object)document7));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document6));
      assertFalse(document5.equals((Object)document1));
      
      Document document10 = (Document)document7.prepend("r<");
      assertNotSame(document10, document4);
      assertNotSame(document10, document9);
      assertNotSame(document10, document5);
      assertNotSame(document10, document2);
      assertSame(document10, document7);
      assertNotSame(document10, document1);
      assertSame(document10, document8);
      assertNotSame(document10, document0);
      assertNotSame(document10, document3);
      assertNotSame(document10, document6);
      assertNotSame(document7, document9);
      assertNotSame(document7, document2);
      assertSame(document7, document10);
      assertNotSame(document7, document4);
      assertNotSame(document7, document5);
      assertNotSame(document7, document3);
      assertNotSame(document7, document6);
      assertNotSame(document7, document1);
      assertSame(document7, document8);
      assertNotSame(document7, document0);
      assertEquals(1, document10.childNodeSize());
      assertEquals("#root", document10.tagName());
      assertFalse(document10.hasParent());
      assertFalse(document10.updateMetaCharsetElement());
      assertEquals("r<", document10.baseUri());
      assertEquals("r<", document10.location());
      assertEquals(Document.QuirksMode.quirks, document10.quirksMode());
      assertEquals("#document", document10.nodeName());
      assertEquals(0, document10.siblingIndex());
      assertFalse(document10.isBlock());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(1, document7.childNodeSize());
      assertEquals("#document", document7.nodeName());
      assertFalse(document7.isBlock());
      assertEquals("#root", document7.tagName());
      assertEquals(0, document7.siblingIndex());
      assertEquals("r<", document7.baseUri());
      assertEquals(Document.QuirksMode.quirks, document7.quirksMode());
      assertEquals("r<", document7.location());
      assertFalse(document7.hasParent());
      assertNotNull(document10);
      assertFalse(document10.equals((Object)document4));
      assertFalse(document10.equals((Object)document9));
      assertFalse(document10.equals((Object)document5));
      assertFalse(document10.equals((Object)document2));
      assertFalse(document10.equals((Object)document1));
      assertFalse(document10.equals((Object)document0));
      assertFalse(document10.equals((Object)document3));
      assertFalse(document10.equals((Object)document6));
      assertFalse(document7.equals((Object)document9));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document0));
      
      document5.nodelistChanged();
      assertNotSame(document0, document10);
      assertSame(document0, document4);
      assertNotSame(document0, document7);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document8);
      assertSame(document0, document9);
      assertNotSame(document0, document1);
      assertSame(document2, document4);
      assertSame(document2, document9);
      assertNotSame(document2, document10);
      assertNotSame(document2, document1);
      assertNotSame(document2, document7);
      assertNotSame(document2, document8);
      assertSame(document2, document5);
      assertNotSame(document2, document3);
      assertNotSame(document2, document6);
      assertSame(document2, document0);
      assertNotSame(document4, document8);
      assertSame(document4, document5);
      assertNotSame(document4, document6);
      assertNotSame(document4, document7);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotSame(document4, document10);
      assertSame(document4, document9);
      assertNotSame(document4, document1);
      assertNotSame(document5, document8);
      assertSame(document5, document2);
      assertNotSame(document5, document10);
      assertSame(document5, document4);
      assertNotSame(document5, document7);
      assertNotSame(document5, document3);
      assertNotSame(document5, document6);
      assertSame(document5, document0);
      assertNotSame(document5, document1);
      assertSame(document5, document9);
      assertEquals("r<", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(3, document0.childNodeSize());
      assertEquals("r<", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("r<", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("r<", document2.location());
      assertEquals("", element0.baseUri());
      assertEquals("r<", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("r<", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("r<", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("r<", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(3, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("r<", document5.location());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertEquals("r<", document5.baseUri());
      assertEquals(3, document5.childNodeSize());
      assertFalse(document0.equals((Object)document10));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document10));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document8));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document4.equals((Object)document8));
      assertFalse(document4.equals((Object)document6));
      assertFalse(document4.equals((Object)document7));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document10));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document5.equals((Object)document8));
      assertFalse(document5.equals((Object)document10));
      assertFalse(document5.equals((Object)document7));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document6));
      assertFalse(document5.equals((Object)document1));
      
      Pattern pattern0 = Pattern.compile("r<", 4297);
      assertEquals(4297, pattern0.flags());
      assertEquals("r<", pattern0.toString());
      assertEquals("r<", pattern0.pattern());
      assertNotNull(pattern0);
      
      Elements elements1 = document1.getElementsMatchingOwnText(pattern0);
      assertNotSame(document0, document10);
      assertSame(document0, document4);
      assertNotSame(document0, document7);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document8);
      assertSame(document0, document9);
      assertNotSame(document0, document1);
      assertNotSame(document1, document7);
      assertNotSame(document1, document9);
      assertNotSame(document1, document5);
      assertNotSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document10);
      assertNotSame(document1, document0);
      assertNotSame(document1, document8);
      assertSame(document1, document3);
      assertSame(document1, document6);
      assertNotSame(elements1, elements0);
      assertEquals("r<", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(3, document0.childNodeSize());
      assertEquals("r<", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("r<", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("r<", document1.baseUri());
      assertEquals(4297, pattern0.flags());
      assertEquals("r<", pattern0.toString());
      assertEquals("r<", pattern0.pattern());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document10));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document9));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document10));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document8));
      assertFalse(elements1.equals((Object)elements0));
      
      Elements elements2 = document8.getAllElements();
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotSame(document7, document9);
      assertNotSame(document7, document2);
      assertSame(document7, document10);
      assertNotSame(document7, document4);
      assertNotSame(document7, document5);
      assertNotSame(document7, document3);
      assertNotSame(document7, document6);
      assertNotSame(document7, document1);
      assertSame(document7, document8);
      assertNotSame(document7, document0);
      assertNotSame(document8, document4);
      assertNotSame(document8, document9);
      assertNotSame(document8, document5);
      assertNotSame(document8, document2);
      assertSame(document8, document10);
      assertSame(document8, document7);
      assertNotSame(document8, document1);
      assertNotSame(document8, document0);
      assertNotSame(document8, document3);
      assertNotSame(document8, document6);
      assertEquals(1, elements2.size());
      assertFalse(elements2.isEmpty());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(1, document7.childNodeSize());
      assertEquals("#document", document7.nodeName());
      assertFalse(document7.isBlock());
      assertEquals("#root", document7.tagName());
      assertEquals(0, document7.siblingIndex());
      assertEquals("r<", document7.baseUri());
      assertEquals(Document.QuirksMode.quirks, document7.quirksMode());
      assertEquals("r<", document7.location());
      assertFalse(document7.hasParent());
      assertEquals(1, document8.childNodeSize());
      assertEquals("#root", document8.tagName());
      assertFalse(document8.hasParent());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals("r<", document8.baseUri());
      assertEquals(Document.QuirksMode.quirks, document8.quirksMode());
      assertEquals("r<", document8.location());
      assertEquals("#document", document8.nodeName());
      assertEquals(0, document8.siblingIndex());
      assertFalse(document8.isBlock());
      assertNotNull(elements2);
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(document7.equals((Object)document9));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document8.equals((Object)document4));
      assertFalse(document8.equals((Object)document9));
      assertFalse(document8.equals((Object)document5));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document8.equals((Object)document1));
      assertFalse(document8.equals((Object)document0));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document6));
      
      Document document11 = (Document)document9.addClass("");
      assertNotSame(document0, document10);
      assertSame(document0, document4);
      assertNotSame(document0, document7);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document8);
      assertSame(document0, document9);
      assertSame(document0, document11);
      assertNotSame(document0, document1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document2, document4);
      assertSame(document2, document9);
      assertNotSame(document2, document10);
      assertSame(document2, document11);
      assertNotSame(document2, document1);
      assertNotSame(document2, document7);
      assertNotSame(document2, document8);
      assertSame(document2, document5);
      assertNotSame(document2, document3);
      assertNotSame(document2, document6);
      assertSame(document2, document0);
      assertSame(document9, document0);
      assertNotSame(document9, document3);
      assertSame(document9, document2);
      assertNotSame(document9, document10);
      assertSame(document9, document4);
      assertNotSame(document9, document7);
      assertSame(document9, document5);
      assertNotSame(document9, document6);
      assertNotSame(document9, document8);
      assertNotSame(document9, document1);
      assertSame(document9, document11);
      assertNotSame(document4, document8);
      assertSame(document4, document5);
      assertNotSame(document4, document6);
      assertNotSame(document4, document7);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertNotSame(document4, document3);
      assertSame(document4, document11);
      assertNotSame(document4, document10);
      assertSame(document4, document9);
      assertNotSame(document4, document1);
      assertNotSame(document5, document8);
      assertSame(document5, document2);
      assertNotSame(document5, document10);
      assertSame(document5, document4);
      assertNotSame(document5, document7);
      assertNotSame(document5, document3);
      assertNotSame(document5, document6);
      assertSame(document5, document0);
      assertSame(document5, document11);
      assertNotSame(document5, document1);
      assertSame(document5, document9);
      assertSame(document11, document4);
      assertSame(document11, document9);
      assertNotSame(document11, document10);
      assertSame(document11, document0);
      assertNotSame(document11, document8);
      assertSame(document11, document5);
      assertNotSame(document11, document3);
      assertNotSame(document11, document6);
      assertSame(document11, document2);
      assertNotSame(document11, document7);
      assertNotSame(document11, document1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertEquals("r<", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(3, document0.childNodeSize());
      assertEquals("r<", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(4297, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(4297, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("r<", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("r<", document2.location());
      assertEquals("#document", document9.nodeName());
      assertEquals(0, document9.siblingIndex());
      assertTrue(document9.hasParent());
      assertEquals("r<", document9.location());
      assertFalse(document9.isBlock());
      assertEquals("#root", document9.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document9.quirksMode());
      assertFalse(document9.updateMetaCharsetElement());
      assertEquals("r<", document9.baseUri());
      assertEquals(3, document9.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("r<", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("r<", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("r<", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("r<", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(3, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("r<", document5.location());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertEquals("r<", document5.baseUri());
      assertEquals(3, document5.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document11.quirksMode());
      assertEquals("r<", document11.location());
      assertFalse(document11.isBlock());
      assertEquals(3, document11.childNodeSize());
      assertEquals(0, document11.siblingIndex());
      assertEquals("#root", document11.tagName());
      assertTrue(document11.hasParent());
      assertEquals("#document", document11.nodeName());
      assertEquals("r<", document11.baseUri());
      assertFalse(document11.updateMetaCharsetElement());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(4297, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(4297, document_OutputSettings1.indentAmount());
      assertNotNull(document11);
      assertFalse(document0.equals((Object)document10));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document10));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document8));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document9.equals((Object)document3));
      assertFalse(document9.equals((Object)document10));
      assertFalse(document9.equals((Object)document7));
      assertFalse(document9.equals((Object)document6));
      assertFalse(document9.equals((Object)document8));
      assertFalse(document9.equals((Object)document1));
      assertFalse(document4.equals((Object)document8));
      assertFalse(document4.equals((Object)document6));
      assertFalse(document4.equals((Object)document7));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document10));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document5.equals((Object)document8));
      assertFalse(document5.equals((Object)document10));
      assertFalse(document5.equals((Object)document7));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document6));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document11.equals((Object)document10));
      assertFalse(document11.equals((Object)document8));
      assertFalse(document11.equals((Object)document3));
      assertFalse(document11.equals((Object)document6));
      assertFalse(document11.equals((Object)document7));
      assertFalse(document11.equals((Object)document1));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("d'AtbtKC>ug", parseSettings0);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DataNode dataNode0 = new DataNode("!~O%z#n+I#f7+?o@h");
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertNotNull(dataNode0);
      
      dataNode0.coreValue("9Pt{e~3b.RCS 37h");
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      
      DataNode dataNode1 = new DataNode("d'AtbtKC>ug", "canvas");
      assertEquals(0, dataNode1.siblingIndex());
      assertFalse(dataNode1.hasParent());
      assertEquals("#data", dataNode1.nodeName());
      assertNotNull(dataNode1);
      assertFalse(dataNode1.equals((Object)dataNode0));
      
      DataNode dataNode2 = dataNode1.setWholeData("canvas");
      assertNotSame(dataNode1, dataNode0);
      assertSame(dataNode1, dataNode2);
      assertSame(dataNode2, dataNode1);
      assertNotSame(dataNode2, dataNode0);
      assertEquals(0, dataNode1.siblingIndex());
      assertFalse(dataNode1.hasParent());
      assertEquals("#data", dataNode1.nodeName());
      assertEquals("#data", dataNode2.nodeName());
      assertEquals(0, dataNode2.siblingIndex());
      assertFalse(dataNode2.hasParent());
      assertNotNull(dataNode2);
      assertFalse(dataNode1.equals((Object)dataNode0));
      assertFalse(dataNode2.equals((Object)dataNode0));
      
      Document document0 = new Document("%~[4Nj0cDi$s");
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("%~[4Nj0cDi$s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("%~[4Nj0cDi$s", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.prependChild(dataNode1);
      assertNotSame(dataNode1, dataNode0);
      assertSame(dataNode1, dataNode2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, dataNode1.siblingIndex());
      assertTrue(dataNode1.hasParent());
      assertEquals("#data", dataNode1.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("%~[4Nj0cDi$s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("%~[4Nj0cDi$s", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("%~[4Nj0cDi$s", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("%~[4Nj0cDi$s", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertFalse(dataNode1.equals((Object)dataNode0));
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document2 = parser0.parseInput("-}hJudcG'k9", "%~[4Nj0cDi$s");
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("%~[4Nj0cDi$s", document2.baseUri());
      assertEquals("%~[4Nj0cDi$s", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      String string0 = document2.html();
      assertEquals("<html>\n <head></head>\n <body>\n  -}hJudcG'k9\n </body>\n</html>", string0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("%~[4Nj0cDi$s", document2.baseUri());
      assertEquals("%~[4Nj0cDi$s", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertNotNull(string0);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = parser0.parseInput("3!iT", "<html>\n <head></head>\n <body>\n  -}hJudcG'k9\n </body>\n</html>");
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("<html>\n <head></head>\n <body>\n  -}hJudcG'k9\n </body>\n</html>", document3.baseUri());
      assertEquals("<html>\n <head></head>\n <body>\n  -}hJudcG'k9\n </body>\n</html>", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertNotNull(document3);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      
      Elements elements0 = document3.children();
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("<html>\n <head></head>\n <body>\n  -}hJudcG'k9\n </body>\n</html>", document3.baseUri());
      assertEquals("<html>\n <head></head>\n <body>\n  -}hJudcG'k9\n </body>\n</html>", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      
      Tag tag1 = Tag.valueOf("|ZR|ge-m,VfOB-~");
      assertNotSame(tag1, tag0);
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.isData());
      assertFalse(tag1.isFormListed());
      assertEquals("|ZR|ge-m,VfOB-~", tag1.toString());
      assertFalse(tag1.preserveWhitespace());
      assertTrue(tag1.isInline());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isBlock());
      assertEquals("|ZR|ge-m,VfOB-~", tag1.getName());
      assertFalse(tag1.isSelfClosing());
      assertNotNull(tag1);
      assertFalse(tag1.equals((Object)tag0));
      
      Element element0 = new Element(tag1, "9Pt{e~3b.RCS 37h");
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.isData());
      assertFalse(tag1.isFormListed());
      assertEquals("|ZR|ge-m,VfOB-~", tag1.toString());
      assertFalse(tag1.preserveWhitespace());
      assertTrue(tag1.isInline());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isBlock());
      assertEquals("|ZR|ge-m,VfOB-~", tag1.getName());
      assertFalse(tag1.isSelfClosing());
      assertEquals("|ZR|ge-m,VfOB-~", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("|ZR|ge-m,VfOB-~", element0.tagName());
      assertEquals("9Pt{e~3b.RCS 37h", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      assertFalse(tag1.equals((Object)tag0));
      
      Elements elements1 = element0.getElementsByAttributeValueNot("y8DHNDL/tBAenpyKbE<", "NFlj");
      assertNotSame(elements1, elements0);
      assertNotSame(tag1, tag0);
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.isData());
      assertFalse(tag1.isFormListed());
      assertEquals("|ZR|ge-m,VfOB-~", tag1.toString());
      assertFalse(tag1.preserveWhitespace());
      assertTrue(tag1.isInline());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isBlock());
      assertEquals("|ZR|ge-m,VfOB-~", tag1.getName());
      assertFalse(tag1.isSelfClosing());
      assertEquals("|ZR|ge-m,VfOB-~", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("|ZR|ge-m,VfOB-~", element0.tagName());
      assertEquals("9Pt{e~3b.RCS 37h", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      assertFalse(tag1.equals((Object)tag0));
      
      Element element1 = new Element(tag1, "(dt5&4sx");
      assertEquals("(dt5&4sx", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("|ZR|ge-m,VfOB-~", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("|ZR|ge-m,VfOB-~", element1.tagName());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.isData());
      assertFalse(tag1.isFormListed());
      assertEquals("|ZR|ge-m,VfOB-~", tag1.toString());
      assertFalse(tag1.preserveWhitespace());
      assertTrue(tag1.isInline());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isBlock());
      assertEquals("|ZR|ge-m,VfOB-~", tag1.getName());
      assertFalse(tag1.isSelfClosing());
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertFalse(tag1.equals((Object)tag0));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = new Document("U");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("U", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("U", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode("U");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      Document document1 = (Document)document0.appendChild(cDataNode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("U", document0.baseUri());
      assertEquals("U", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("U", document1.location());
      assertEquals("U", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      boolean boolean0 = document1.hasText();
      assertTrue(boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("U", document0.baseUri());
      assertEquals("U", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("U", document1.location());
      assertEquals("U", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      
      Elements elements0 = document1.getElementsMatchingText("U");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("U", document0.baseUri());
      assertEquals("U", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("U", document1.location());
      assertEquals("U", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      
      Document document2 = (Document)document0.attr("U", true);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("U", document0.baseUri());
      assertEquals("U", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("U", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("U", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertNotNull(document2);
      
      // Undeclared exception!
      try { 
        document1.text("U");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals("</", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals("</", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("</", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.baseUri());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Elements elements0 = document2.nextElementSiblings();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals("</", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      Element element0 = new Element("</");
      assertEquals("</", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      Document document4 = (Document)document2.appendTo(element0);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals("</", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, element0.childNodeSize());
      assertEquals("</", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.location());
      assertEquals("</", document4.baseUri());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      
      Document document5 = (Document)document4.toggleClass("ljc");
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertSame(document4, document5);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertNotSame(document5, document1);
      assertSame(document5, document4);
      assertSame(document5, document0);
      assertSame(document5, document2);
      assertNotSame(document5, document3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals("</", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, element0.childNodeSize());
      assertEquals("</", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.location());
      assertEquals("</", document4.baseUri());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("</", document5.location());
      assertTrue(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(2, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals("#root", document5.tagName());
      assertEquals("</", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      
      boolean boolean0 = document3.hasClass("=H05C H,o");
      assertFalse(boolean0);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document3, document4);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document5);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals("</", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("</", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document5));
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document6 = new Document("</");
      assertEquals("</", document6.baseUri());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.hasParent());
      assertFalse(document6.isBlock());
      assertEquals("#document", document6.nodeName());
      assertEquals("</", document6.location());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertEquals(0, document6.childNodeSize());
      assertNotNull(document6);
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      
      Document document7 = document6.quirksMode(document_QuirksMode0);
      assertNotSame(document6, document0);
      assertNotSame(document6, document2);
      assertSame(document6, document7);
      assertNotSame(document6, document4);
      assertNotSame(document6, document5);
      assertNotSame(document6, document1);
      assertNotSame(document6, document3);
      assertNotSame(document7, document1);
      assertNotSame(document7, document3);
      assertNotSame(document7, document2);
      assertNotSame(document7, document4);
      assertNotSame(document7, document0);
      assertNotSame(document7, document5);
      assertSame(document7, document6);
      assertEquals("</", document6.baseUri());
      assertFalse(document6.updateMetaCharsetElement());
      assertFalse(document6.hasParent());
      assertFalse(document6.isBlock());
      assertEquals("#document", document6.nodeName());
      assertEquals("</", document6.location());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertEquals(0, document6.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertEquals(Document.QuirksMode.quirks, document7.quirksMode());
      assertFalse(document7.hasParent());
      assertEquals("</", document7.location());
      assertEquals("#root", document7.tagName());
      assertEquals(0, document7.childNodeSize());
      assertFalse(document7.isBlock());
      assertEquals("</", document7.baseUri());
      assertEquals(0, document7.siblingIndex());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("#document", document7.nodeName());
      assertNotNull(document7);
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document5));
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(4297);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(4297, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(4297, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertEquals(4297, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(4297, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(4297, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(true);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertTrue(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(4297, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(4297, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(4297, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(4297, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertNotNull(document_OutputSettings3);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings2.outline(false);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertEquals(4297, document_OutputSettings4.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(4297, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(4297, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(4297, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertNotNull(document_OutputSettings4);
      
      Document document8 = document5.outputSettings(document_OutputSettings4);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document8);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document7);
      assertNotSame(document0, document3);
      assertNotSame(document0, document6);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document8, document5);
      assertSame(document8, document2);
      assertSame(document8, document0);
      assertNotSame(document8, document7);
      assertNotSame(document8, document3);
      assertSame(document8, document4);
      assertNotSame(document8, document6);
      assertNotSame(document8, document1);
      assertSame(document2, document8);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document7);
      assertNotSame(document2, document3);
      assertNotSame(document2, document6);
      assertNotSame(document2, document1);
      assertNotSame(document4, document6);
      assertNotSame(document4, document3);
      assertNotSame(document4, document7);
      assertNotSame(document4, document1);
      assertSame(document4, document8);
      assertSame(document4, document5);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertNotSame(document5, document1);
      assertSame(document5, document4);
      assertSame(document5, document8);
      assertSame(document5, document0);
      assertSame(document5, document2);
      assertNotSame(document5, document7);
      assertNotSame(document5, document3);
      assertNotSame(document5, document6);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals(4297, document_OutputSettings4.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertFalse(document_OutputSettings4.outline());
      assertEquals("#root", document8.tagName());
      assertEquals("</", document8.baseUri());
      assertEquals(0, document8.siblingIndex());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals("</", document8.location());
      assertEquals("#document", document8.nodeName());
      assertEquals(2, document8.childNodeSize());
      assertTrue(document8.hasParent());
      assertFalse(document8.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals("</", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, element0.childNodeSize());
      assertEquals("</", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.location());
      assertEquals("</", document4.baseUri());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("</", document5.location());
      assertTrue(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(2, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals("#root", document5.tagName());
      assertEquals("</", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertEquals(4297, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(4297, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(4297, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertNotNull(document8);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document8.equals((Object)document7));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document6));
      assertFalse(document8.equals((Object)document1));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document6));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document7));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document7));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document6));
      
      String string0 = document6.className();
      assertEquals("", string0);
      assertNotSame(document6, document0);
      assertNotSame(document6, document2);
      assertSame(document6, document7);
      assertNotSame(document6, document8);
      assertNotSame(document6, document4);
      assertNotSame(document6, document5);
      assertNotSame(document6, document1);
      assertNotSame(document6, document3);
      assertEquals("</", document6.baseUri());
      assertFalse(document6.updateMetaCharsetElement());
      assertFalse(document6.hasParent());
      assertFalse(document6.isBlock());
      assertEquals("#document", document6.nodeName());
      assertEquals("</", document6.location());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertEquals(0, document6.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertNotNull(string0);
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document8));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      
      String string1 = document2.data();
      assertEquals("", string1);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document8);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document7);
      assertNotSame(document0, document3);
      assertNotSame(document0, document6);
      assertSame(document2, document8);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document7);
      assertNotSame(document2, document3);
      assertNotSame(document2, document6);
      assertNotSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals("</", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(string1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document1));
      assertTrue(string1.equals((Object)string0));
      
      Elements elements1 = document5.getAllElements();
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document8);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document7);
      assertNotSame(document0, document3);
      assertNotSame(document0, document6);
      assertSame(document2, document8);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document7);
      assertNotSame(document2, document3);
      assertNotSame(document2, document6);
      assertNotSame(document2, document1);
      assertNotSame(elements1, elements0);
      assertNotSame(document4, document6);
      assertNotSame(document4, document3);
      assertNotSame(document4, document7);
      assertNotSame(document4, document1);
      assertSame(document4, document8);
      assertSame(document4, document5);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertNotSame(document5, document1);
      assertSame(document5, document4);
      assertSame(document5, document8);
      assertSame(document5, document0);
      assertSame(document5, document2);
      assertNotSame(document5, document7);
      assertNotSame(document5, document3);
      assertNotSame(document5, document6);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals("</", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(elements1.isEmpty());
      assertEquals(8, elements1.size());
      assertEquals(1, element0.childNodeSize());
      assertEquals("</", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.location());
      assertEquals("</", document4.baseUri());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("</", document5.location());
      assertTrue(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(2, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals("#root", document5.tagName());
      assertEquals("</", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document1));
      assertFalse(elements1.equals((Object)elements0));
      assertFalse(document4.equals((Object)document6));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document7));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document7));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document6));
      
      Elements elements2 = document3.previousElementSiblings();
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document8);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document7);
      assertNotSame(document0, document3);
      assertNotSame(document0, document6);
      assertNotSame(document1, document6);
      assertNotSame(document1, document7);
      assertNotSame(document1, document0);
      assertNotSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document5);
      assertNotSame(document1, document8);
      assertSame(document2, document8);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document7);
      assertNotSame(document2, document3);
      assertNotSame(document2, document6);
      assertNotSame(document2, document1);
      assertNotSame(document3, document4);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document8);
      assertSame(document3, document1);
      assertNotSame(document3, document5);
      assertNotSame(document3, document7);
      assertNotSame(document3, document6);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals("</", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("</", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.baseUri());
      assertFalse(elements2.isEmpty());
      assertEquals(1, elements2.size());
      assertNotNull(elements2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document8));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document8));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document7));
      assertFalse(document3.equals((Object)document6));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      
      List<Node> list0 = document6.ensureChildNodes();
      assertNotSame(document6, document0);
      assertNotSame(document6, document2);
      assertSame(document6, document7);
      assertNotSame(document6, document8);
      assertNotSame(document6, document4);
      assertNotSame(document6, document5);
      assertNotSame(document6, document1);
      assertNotSame(document6, document3);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("</", document6.baseUri());
      assertFalse(document6.updateMetaCharsetElement());
      assertFalse(document6.hasParent());
      assertFalse(document6.isBlock());
      assertEquals("#document", document6.nodeName());
      assertEquals("</", document6.location());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertEquals(0, document6.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertNotNull(list0);
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document8));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      
      String string2 = document7.cssSelector();
      assertEquals("#root", string2);
      assertNotSame(document6, document0);
      assertNotSame(document6, document2);
      assertSame(document6, document7);
      assertNotSame(document6, document8);
      assertNotSame(document6, document4);
      assertNotSame(document6, document5);
      assertNotSame(document6, document1);
      assertNotSame(document6, document3);
      assertNotSame(document7, document1);
      assertNotSame(document7, document3);
      assertNotSame(document7, document2);
      assertNotSame(document7, document8);
      assertNotSame(document7, document4);
      assertNotSame(document7, document0);
      assertNotSame(document7, document5);
      assertSame(document7, document6);
      assertEquals("</", document6.baseUri());
      assertFalse(document6.updateMetaCharsetElement());
      assertFalse(document6.hasParent());
      assertFalse(document6.isBlock());
      assertEquals("#document", document6.nodeName());
      assertEquals("</", document6.location());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertEquals(0, document6.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertEquals(Document.QuirksMode.quirks, document7.quirksMode());
      assertFalse(document7.hasParent());
      assertEquals("</", document7.location());
      assertEquals("#root", document7.tagName());
      assertEquals(0, document7.childNodeSize());
      assertFalse(document7.isBlock());
      assertEquals("</", document7.baseUri());
      assertEquals(0, document7.siblingIndex());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("#document", document7.nodeName());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document8));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document8));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document5));
      
      Document document9 = (Document)document5.append("ljc");
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document8);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document7);
      assertSame(document0, document9);
      assertNotSame(document0, document3);
      assertNotSame(document0, document6);
      assertSame(document2, document8);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document9);
      assertNotSame(document2, document7);
      assertNotSame(document2, document3);
      assertNotSame(document2, document6);
      assertNotSame(document2, document1);
      assertNotSame(document4, document6);
      assertNotSame(document4, document3);
      assertSame(document4, document9);
      assertNotSame(document4, document7);
      assertNotSame(document4, document1);
      assertSame(document4, document8);
      assertSame(document4, document5);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertNotSame(document5, document1);
      assertSame(document5, document4);
      assertSame(document5, document8);
      assertSame(document5, document0);
      assertSame(document5, document2);
      assertNotSame(document5, document7);
      assertNotSame(document5, document3);
      assertSame(document5, document9);
      assertNotSame(document5, document6);
      assertSame(document9, document8);
      assertSame(document9, document2);
      assertSame(document9, document4);
      assertSame(document9, document5);
      assertNotSame(document9, document7);
      assertNotSame(document9, document3);
      assertNotSame(document9, document6);
      assertNotSame(document9, document1);
      assertSame(document9, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals("</", document2.baseUri());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, element0.childNodeSize());
      assertEquals("</", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.location());
      assertEquals("</", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(3, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("</", document5.location());
      assertTrue(document5.hasParent());
      assertEquals(3, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals("#root", document5.tagName());
      assertEquals("</", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#root", document9.tagName());
      assertEquals("</", document9.location());
      assertEquals("</", document9.baseUri());
      assertEquals(0, document9.siblingIndex());
      assertFalse(document9.isBlock());
      assertTrue(document9.hasParent());
      assertEquals("#document", document9.nodeName());
      assertFalse(document9.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document9.quirksMode());
      assertEquals(3, document9.childNodeSize());
      assertNotNull(document9);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document6));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document7));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document7));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document6));
      assertFalse(document9.equals((Object)document7));
      assertFalse(document9.equals((Object)document6));
      assertFalse(document9.equals((Object)document3));
      assertFalse(document9.equals((Object)document1));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "U4)9T[rb0T+";
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = Document.createShell("leH:; w+fW9?y*Q@(R");
      assertEquals("leH:; w+fW9?y*Q@(R", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("leH:; w+fW9?y*Q@(R", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("leH:; w+fW9?y*Q@(R", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("leH:; w+fW9?y*Q@(R", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("leH:; w+fW9?y*Q@(R", document1.location());
      assertEquals("leH:; w+fW9?y*Q@(R", document1.baseUri());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      CDataNode cDataNode0 = new CDataNode("U4)9T[rb0T+");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      document0.setParentNode(cDataNode0);
      assertNotSame(document0, document1);
      assertEquals("leH:; w+fW9?y*Q@(R", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("leH:; w+fW9?y*Q@(R", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertFalse(document0.equals((Object)document1));
      
      DataNode dataNode0 = new DataNode("textarea");
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertNotNull(dataNode0);
      
      Document document2 = (Document)document1.appendChild(dataNode0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals("leH:; w+fW9?y*Q@(R", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("leH:; w+fW9?y*Q@(R", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("leH:; w+fW9?y*Q@(R", document1.location());
      assertEquals("leH:; w+fW9?y*Q@(R", document1.baseUri());
      assertEquals("#data", dataNode0.nodeName());
      assertTrue(dataNode0.hasParent());
      assertEquals(1, dataNode0.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("leH:; w+fW9?y*Q@(R", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("leH:; w+fW9?y*Q@(R", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) dataNode0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document1;
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Element element0 = new Element("b6hvH$Vs*i]cIc");
      assertEquals(0, element0.childNodeSize());
      assertEquals("b6hvH$Vs*i]cIc", element0.tagName());
      assertEquals("b6hvH$Vs*i]cIc", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("b6hvH$Vs*i]cIc"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add("ismap");
      assertTrue(boolean0);
      assertTrue(linkedHashSet0.contains("ismap"));
      assertFalse(linkedHashSet0.contains("b6hvH$Vs*i]cIc"));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      boolean boolean1 = linkedHashSet0.add("class");
      assertTrue(boolean1);
      assertTrue(linkedHashSet0.contains("class"));
      assertFalse(linkedHashSet0.contains("b6hvH$Vs*i]cIc"));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(boolean1 == boolean0);
      
      Element element1 = element0.classNames((Set<String>) linkedHashSet0);
      assertTrue(linkedHashSet0.contains("class"));
      assertFalse(linkedHashSet0.contains("b6hvH$Vs*i]cIc"));
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(0, element0.childNodeSize());
      assertEquals("b6hvH$Vs*i]cIc", element0.tagName());
      assertEquals("b6hvH$Vs*i]cIc", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertEquals(0, element1.childNodeSize());
      assertEquals("b6hvH$Vs*i]cIc", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals("b6hvH$Vs*i]cIc", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      
      boolean boolean2 = element0.hasText();
      assertFalse(boolean2);
      assertSame(element0, element1);
      assertEquals(0, element0.childNodeSize());
      assertEquals("b6hvH$Vs*i]cIc", element0.tagName());
      assertEquals("b6hvH$Vs*i]cIc", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Document document0 = Parser.parse(":prev%s", "b6hvH$Vs*i]cIc");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("b6hvH$Vs*i]cIc", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("b6hvH$Vs*i]cIc", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element2 = document0.head();
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("b6hvH$Vs*i]cIc", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("b6hvH$Vs*i]cIc", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(element2.hasParent());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.tagName());
      assertEquals("head", element2.nodeName());
      assertEquals("b6hvH$Vs*i]cIc", element2.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertNotNull(element2);
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("U4)9T[rb0T+", "AWDq%=I");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("AWDq%=I", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("AWDq%=I", document0.location());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = Parser.parseBodyFragmentRelaxed("U4)9T[rb0T+", "q");
      assertNotSame(document1, document0);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("q", document1.baseUri());
      assertEquals("q", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      CDataNode cDataNode0 = new CDataNode("JK+]aT'PP!O+lksO");
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      Node node0 = cDataNode0.parent();
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNull(node0);
      
      String string0 = document1.cssSelector();
      assertEquals("#root", string0);
      assertNotSame(document1, document0);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("q", document1.baseUri());
      assertEquals("q", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(string0);
      assertFalse(document1.equals((Object)document0));
      
      String string1 = document0.id();
      assertEquals("", string1);
      assertNotSame(document0, document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("AWDq%=I", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("AWDq%=I", document0.location());
      assertEquals("#document", document0.nodeName());
      assertNotNull(string1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragment("", "");
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      TextNode textNode0 = new TextNode("", "");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertNotNull(textNode0);
      
      Document document1 = (Document)document0.appendChild(textNode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, textNode0.siblingIndex());
      assertTrue(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      String string1 = "org.jsoup.nodes.Element";
      DataNode dataNode0 = new DataNode("org.jsoup.nodes.Element");
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      dataNode0.coreValue("");
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      
      document1.reparentChild(document0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, textNode0.siblingIndex());
      assertTrue(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      // Undeclared exception!
      document1.appendElement("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("</", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("</", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertTrue(document3.hasParent());
      assertEquals("</", document3.baseUri());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Elements elements0 = document2.nextElementSiblings();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("</", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      
      Element element0 = new Element("</");
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("</", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      
      Document document4 = (Document)document2.appendTo(element0);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("</", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals(0, document4.siblingIndex());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("</", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("</", document4.baseUri());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      
      Document document5 = (Document)document4.toggleClass("ljc");
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertSame(document2, document5);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document4, document5);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document5, document2);
      assertSame(document5, document0);
      assertSame(document5, document4);
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("</", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals(0, document4.siblingIndex());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("</", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("</", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.isBlock());
      assertEquals("#root", document5.tagName());
      assertEquals("</", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(2, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertEquals("</", document5.location());
      assertTrue(document5.hasParent());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      
      String string0 = document0.baseUri();
      assertEquals("</", string0);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      
      boolean boolean0 = document3.hasClass("=H05C H,o");
      assertFalse(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document5);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document3, document4);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document5);
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertTrue(document3.hasParent());
      assertEquals("</", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document5));
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document6 = new Document("</");
      assertFalse(document6.isBlock());
      assertEquals("#document", document6.nodeName());
      assertEquals(0, document6.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("</", document6.location());
      assertEquals(0, document6.childNodeSize());
      assertEquals("</", document6.baseUri());
      assertFalse(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertFalse(document6.updateMetaCharsetElement());
      assertNotNull(document6);
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document4));
      
      Document document7 = document6.quirksMode(document_QuirksMode0);
      assertNotSame(document6, document3);
      assertNotSame(document6, document2);
      assertNotSame(document6, document5);
      assertNotSame(document6, document0);
      assertNotSame(document6, document1);
      assertSame(document6, document7);
      assertNotSame(document6, document4);
      assertSame(document7, document6);
      assertNotSame(document7, document3);
      assertNotSame(document7, document0);
      assertNotSame(document7, document2);
      assertNotSame(document7, document5);
      assertNotSame(document7, document1);
      assertNotSame(document7, document4);
      assertFalse(document6.isBlock());
      assertEquals("#document", document6.nodeName());
      assertEquals(0, document6.siblingIndex());
      assertEquals("</", document6.location());
      assertEquals(0, document6.childNodeSize());
      assertEquals("</", document6.baseUri());
      assertFalse(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertEquals("#document", document7.nodeName());
      assertFalse(document7.updateMetaCharsetElement());
      assertFalse(document7.isBlock());
      assertFalse(document7.hasParent());
      assertEquals("</", document7.location());
      assertEquals("</", document7.baseUri());
      assertEquals(0, document7.siblingIndex());
      assertEquals(0, document7.childNodeSize());
      assertEquals("#root", document7.tagName());
      assertEquals(Document.QuirksMode.quirks, document7.quirksMode());
      assertNotNull(document7);
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document4));
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(4297);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(4297, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(4297, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(4297, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(4297, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(4297, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(false);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(4297, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(4297, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(4297, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(4297, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertNotNull(document_OutputSettings3);
      
      Document document8 = document5.outputSettings(document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document7);
      assertSame(document0, document8);
      assertNotSame(document0, document6);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document8, document5);
      assertNotSame(document8, document3);
      assertNotSame(document8, document7);
      assertSame(document8, document4);
      assertNotSame(document8, document6);
      assertSame(document8, document0);
      assertNotSame(document8, document1);
      assertSame(document8, document2);
      assertSame(document2, document5);
      assertNotSame(document2, document7);
      assertSame(document2, document8);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document6);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document4, document5);
      assertNotSame(document4, document3);
      assertNotSame(document4, document7);
      assertNotSame(document4, document1);
      assertSame(document4, document2);
      assertNotSame(document4, document6);
      assertSame(document4, document0);
      assertSame(document4, document8);
      assertNotSame(document5, document6);
      assertSame(document5, document2);
      assertNotSame(document5, document7);
      assertSame(document5, document0);
      assertSame(document5, document8);
      assertSame(document5, document4);
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(4297, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(4297, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals("</", document8.baseUri());
      assertEquals(0, document8.siblingIndex());
      assertFalse(document8.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertEquals("#root", document8.tagName());
      assertEquals("#document", document8.nodeName());
      assertEquals(2, document8.childNodeSize());
      assertEquals("</", document8.location());
      assertTrue(document8.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("</", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals(0, document4.siblingIndex());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("</", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("</", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.isBlock());
      assertEquals("#root", document5.tagName());
      assertEquals("</", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(2, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertEquals("</", document5.location());
      assertTrue(document5.hasParent());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(4297, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(4297, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertNotNull(document8);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document7));
      assertFalse(document8.equals((Object)document6));
      assertFalse(document8.equals((Object)document1));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document7));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document6));
      assertFalse(document5.equals((Object)document6));
      assertFalse(document5.equals((Object)document7));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      
      String string1 = document6.className();
      assertEquals("", string1);
      assertNotSame(document6, document3);
      assertNotSame(document6, document2);
      assertNotSame(document6, document5);
      assertNotSame(document6, document8);
      assertNotSame(document6, document0);
      assertNotSame(document6, document1);
      assertSame(document6, document7);
      assertNotSame(document6, document4);
      assertFalse(document6.isBlock());
      assertEquals("#document", document6.nodeName());
      assertEquals(0, document6.siblingIndex());
      assertEquals("</", document6.location());
      assertEquals(0, document6.childNodeSize());
      assertEquals("</", document6.baseUri());
      assertFalse(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document8));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document4));
      
      String string2 = document2.data();
      assertEquals("", string2);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document7);
      assertSame(document0, document8);
      assertNotSame(document0, document6);
      assertSame(document2, document5);
      assertNotSame(document2, document7);
      assertSame(document2, document8);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document6);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(string2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Elements elements1 = document5.getAllElements();
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document7);
      assertSame(document0, document8);
      assertNotSame(document0, document6);
      assertSame(document2, document5);
      assertNotSame(document2, document7);
      assertSame(document2, document8);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document6);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(elements1, elements0);
      assertSame(document4, document5);
      assertNotSame(document4, document3);
      assertNotSame(document4, document7);
      assertNotSame(document4, document1);
      assertSame(document4, document2);
      assertNotSame(document4, document6);
      assertSame(document4, document0);
      assertSame(document4, document8);
      assertNotSame(document5, document6);
      assertSame(document5, document2);
      assertNotSame(document5, document7);
      assertSame(document5, document0);
      assertSame(document5, document8);
      assertSame(document5, document4);
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(elements1.isEmpty());
      assertEquals(8, elements1.size());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("</", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals(0, document4.siblingIndex());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("</", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("</", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.isBlock());
      assertEquals("#root", document5.tagName());
      assertEquals("</", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(2, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertEquals("</", document5.location());
      assertTrue(document5.hasParent());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(elements1.equals((Object)elements0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document7));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document6));
      assertFalse(document5.equals((Object)document6));
      assertFalse(document5.equals((Object)document7));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      
      Elements elements2 = document3.previousElementSiblings();
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document7);
      assertSame(document0, document8);
      assertNotSame(document0, document6);
      assertNotSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotSame(document1, document2);
      assertNotSame(document1, document7);
      assertNotSame(document1, document0);
      assertNotSame(document1, document6);
      assertNotSame(document1, document8);
      assertSame(document2, document5);
      assertNotSame(document2, document7);
      assertSame(document2, document8);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document6);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document3, document8);
      assertNotSame(document3, document6);
      assertNotSame(document3, document4);
      assertNotSame(document3, document0);
      assertNotSame(document3, document7);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document5);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertTrue(document3.hasParent());
      assertEquals("</", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(elements2.isEmpty());
      assertEquals(1, elements2.size());
      assertNotNull(elements2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document8));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document8));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document7));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document5));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      
      List<Node> list0 = document1.ensureChildNodes();
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document7);
      assertSame(document0, document8);
      assertNotSame(document0, document6);
      assertNotSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotSame(document1, document2);
      assertNotSame(document1, document7);
      assertNotSame(document1, document0);
      assertNotSame(document1, document6);
      assertNotSame(document1, document8);
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document8));
      
      // Undeclared exception!
      try { 
        document5.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '#root.java.lang.String@0000000410': unexpected token at '@0000000410'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("</", document1.location());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document1.normalise();
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("</", document1.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertTrue(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("</", document3.location());
      assertTrue(document3.hasParent());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.baseUri());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      
      Elements elements0 = document2.nextElementSiblings();
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertTrue(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Element element0 = new Element("</");
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.nodeName());
      assertNotNull(element0);
      
      Document document4 = (Document)document2.appendTo(element0);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("</", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals("</", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      
      List<DataNode> list0 = document3.dataNodes();
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("</", document3.location());
      assertTrue(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("</", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      
      document4.nodelistChanged();
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("</", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals("</", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      
      Pattern pattern0 = Pattern.compile("</", (-1934232163));
      assertEquals("</", pattern0.pattern());
      assertEquals("</", pattern0.toString());
      assertEquals((-1934232099), pattern0.flags());
      assertNotNull(pattern0);
      
      Elements elements1 = document4.getElementsMatchingOwnText(pattern0);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
      assertNotSame(elements1, elements0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("</", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals("</", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("</", pattern0.pattern());
      assertEquals("</", pattern0.toString());
      assertEquals((-1934232099), pattern0.flags());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(elements1.equals((Object)elements0));
      
      Element element1 = document2.firstElementSibling();
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertNull(element1);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "e+&R~_A>l-";
      Document document0 = Parser.parse("e+&R~_A>l-", "e+&R~_A>l-");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = Document.createShell("e+&R~_A>l-");
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("e+&R~_A>l-", document2.location());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("e+&R~_A>l-", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      
      CDataNode cDataNode0 = new CDataNode(" > ");
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      DataNode dataNode0 = new DataNode(" > ");
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      Document document4 = (Document)document3.appendChild(document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document4);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertEquals("e+&R~_A>l-", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("e+&R~_A>l-", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("e+&R~_A>l-", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(2, document4.childNodeSize());
      assertEquals("e+&R~_A>l-", document4.baseUri());
      assertEquals("e+&R~_A>l-", document4.location());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document2;
      nodeArray0[1] = (Node) dataNode0;
      nodeArray0[2] = (Node) document2;
      nodeArray0[3] = (Node) document2;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document3;
      nodeArray0[7] = (Node) document4;
      nodeArray0[8] = (Node) document0;
      // Undeclared exception!
      try { 
        document3.insertChildren(1, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(": ", "(dt5&4sx");
      assertEquals("(dt5&4sx", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("(dt5&4sx", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode("(dt5&4sx");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Node node0 = cDataNode0.parent();
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNull(node0);
      
      boolean boolean0 = document0.hasAttributes();
      assertFalse(boolean0);
      assertEquals("(dt5&4sx", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("(dt5&4sx", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.getElementById("(dt5&4sx");
      assertEquals("(dt5&4sx", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("(dt5&4sx", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragment("", "");
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      TextNode textNode0 = new TextNode("", "");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertNotNull(textNode0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "4|?XUW|Ysd7fv]";
      Document document0 = Parser.parseBodyFragment("kY9", "4|?XUW|Ysd7fv]");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("4|?XUW|Ysd7fv]", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("4|?XUW|Ysd7fv]", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("9Pt{e~3b.RCS 37h", "9Pt{e~3b.RCS 37h");
      assertEquals("9Pt{e~3b.RCS 37h", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("9Pt{e~3b.RCS 37h", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = Document.createShell("9Pt{e~3b.RCS 37h");
      assertNotSame(document1, document0);
      assertEquals("9Pt{e~3b.RCS 37h", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("9Pt{e~3b.RCS 37h", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document1.clone();
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals("9Pt{e~3b.RCS 37h", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("9Pt{e~3b.RCS 37h", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("9Pt{e~3b.RCS 37h", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("9Pt{e~3b.RCS 37h", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      CDataNode cDataNode0 = new CDataNode("*.:;\"TqJs#f^+LX");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      DataNode dataNode0 = new DataNode("9Pt{e~3b.RCS 37h");
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertNotNull(dataNode0);
      
      Document document3 = (Document)document2.appendChild(document0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertEquals("9Pt{e~3b.RCS 37h", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("9Pt{e~3b.RCS 37h", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("9Pt{e~3b.RCS 37h", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("9Pt{e~3b.RCS 37h", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("9Pt{e~3b.RCS 37h", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("9Pt{e~3b.RCS 37h", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertEquals("9Pt{e~3b.RCS 37h", document3.baseUri());
      assertEquals("9Pt{e~3b.RCS 37h", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) cDataNode0;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) dataNode0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document1;
      Element element0 = document3.createElement("9Pt{e~3b.RCS 37h");
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertEquals("9Pt{e~3b.RCS 37h", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("9Pt{e~3b.RCS 37h", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("9Pt{e~3b.RCS 37h", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("9Pt{e~3b.RCS 37h", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("9Pt{e~3b.RCS 37h", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("9Pt{e~3b.RCS 37h", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertEquals("9Pt{e~3b.RCS 37h", document3.baseUri());
      assertEquals("9Pt{e~3b.RCS 37h", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("9Pt{e~3b.RCS 37h", element0.baseUri());
      assertEquals("9Pt{e~3b.RCS 37h", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("9Pt{e~3b.RCS 37h", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document4 = (Document)document0.addClass("9Pt{e~3b.RCS 37h");
      assertNotSame(document4, document2);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertEquals("9Pt{e~3b.RCS 37h", document4.location());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("9Pt{e~3b.RCS 37h", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("9Pt{e~3b.RCS 37h", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("9Pt{e~3b.RCS 37h", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document4);
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      
      // Undeclared exception!
      try { 
        document3.getElementsByAttributeValueMatching("I99~", "9Pt{e~3b.RCS 37h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 9Pt{e~3b.RCS 37h
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parse("e+&R~_A>l-", "e+&R~_A>l-");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Elements elements0 = document0.nextElementSiblings();
      assertNotSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      
      List<Node> list0 = document1.ensureChildNodes();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      
      Element element0 = new Element("e+&R~_A>l-");
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("e+&R~_A>l-", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("e+&R~_A>l-", element0.tagName());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      
      Document document2 = (Document)document0.appendTo(document1);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document0.toggleClass("e+&R~_A>l-");
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("e+&R~_A>l-", document3.location());
      assertEquals("e+&R~_A>l-", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.siblingIndex());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      
      String string0 = document0.baseUri();
      assertEquals("e+&R~_A>l-", string0);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document1));
      
      boolean boolean0 = document0.hasClass("e+&R~_A>l-");
      assertFalse(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      
      Elements elements1 = document0.getElementsByAttributeValueContaining("%", "br");
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      
      String string1 = document0.className();
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(string1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      
      Document document4 = (Document)document1.appendText("e+&R~_A>l-");
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertNotSame(document4, document3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertEquals(3, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals("e+&R~_A>l-", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document4.baseUri());
      assertEquals(3, document4.childNodeSize());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      
      boolean boolean1 = Element.preserveWhitespace(document1);
      assertFalse(boolean1);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertEquals(3, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = document3.hasText();
      assertTrue(boolean2);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertNotSame(document3, document4);
      assertNotSame(document3, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("e+&R~_A>l-", document3.location());
      assertEquals("e+&R~_A>l-", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.siblingIndex());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Document document5 = document0.clone();
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertNotSame(document5, document3);
      assertNotSame(document5, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("e+&R~_A>l-", document5.location());
      assertFalse(document5.hasParent());
      assertEquals("e+&R~_A>l-", document5.baseUri());
      assertFalse(document5.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document0));
      
      Element element1 = document5.appendElement(".");
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertNotSame(document5, document3);
      assertNotSame(document5, document0);
      assertNotSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertEquals(2, document5.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("e+&R~_A>l-", document5.location());
      assertFalse(document5.hasParent());
      assertEquals("e+&R~_A>l-", document5.baseUri());
      assertFalse(document5.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals(".", element1.tagName());
      assertEquals(".", element1.nodeName());
      assertEquals("e+&R~_A>l-", element1.baseUri());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      
      Document document6 = (Document)document4.prepend("V_GD{ld8 bS");
      assertSame(document6, document1);
      assertNotSame(document6, document0);
      assertNotSame(document6, document5);
      assertNotSame(document6, document3);
      assertSame(document6, document4);
      assertNotSame(document6, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document6);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document3);
      assertSame(document1, document6);
      assertNotSame(document1, document5);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertNotSame(document4, document5);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document6);
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.hasParent());
      assertEquals("e+&R~_A>l-", document6.location());
      assertEquals(4, document6.childNodeSize());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document6.baseUri());
      assertFalse(document6.isBlock());
      assertEquals("#root", document6.tagName());
      assertEquals("#document", document6.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(2, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertEquals(4, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals("e+&R~_A>l-", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(4, document4.childNodeSize());
      assertEquals("e+&R~_A>l-", document4.baseUri());
      assertNotNull(document6);
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document5));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      
      document5.nodelistChanged();
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document6);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertNotSame(document5, document3);
      assertNotSame(document5, document0);
      assertNotSame(document5, document6);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(2, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertEquals(2, document5.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("e+&R~_A>l-", document5.location());
      assertFalse(document5.hasParent());
      assertEquals("e+&R~_A>l-", document5.baseUri());
      assertFalse(document5.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document6));
      
      Pattern pattern0 = Pattern.compile("e+&R~_A>l-", 840);
      assertEquals("e+&R~_A>l-", pattern0.toString());
      assertEquals("e+&R~_A>l-", pattern0.pattern());
      assertEquals(840, pattern0.flags());
      assertNotNull(pattern0);
      
      Elements elements2 = document5.getElementsMatchingOwnText(pattern0);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document6);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertNotSame(document5, document3);
      assertNotSame(document5, document0);
      assertNotSame(document5, document6);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(2, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("e+&R~_A>l-", pattern0.toString());
      assertEquals("e+&R~_A>l-", pattern0.pattern());
      assertEquals(840, pattern0.flags());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertEquals("#root", document5.tagName());
      assertEquals(2, document5.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("e+&R~_A>l-", document5.location());
      assertFalse(document5.hasParent());
      assertEquals("e+&R~_A>l-", document5.baseUri());
      assertFalse(document5.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertNotNull(elements2);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document6));
      
      String string2 = document6.tagName();
      assertEquals("#root", string2);
      assertSame(document6, document1);
      assertNotSame(document6, document0);
      assertNotSame(document6, document5);
      assertNotSame(document6, document3);
      assertSame(document6, document4);
      assertNotSame(document6, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document6);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document3);
      assertSame(document1, document6);
      assertNotSame(document1, document5);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertNotSame(document4, document5);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document6);
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.hasParent());
      assertEquals("e+&R~_A>l-", document6.location());
      assertEquals(4, document6.childNodeSize());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document6.baseUri());
      assertFalse(document6.isBlock());
      assertEquals("#root", document6.tagName());
      assertEquals("#document", document6.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(2, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertEquals(4, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals("e+&R~_A>l-", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(4, document4.childNodeSize());
      assertEquals("e+&R~_A>l-", document4.baseUri());
      assertNotNull(string2);
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(document4.equals((Object)document5));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("</", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("</", document3.location());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Elements elements0 = document2.nextElementSiblings();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      
      Element element0 = new Element("</");
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("</", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.tagName());
      assertNotNull(element0);
      
      Document document4 = (Document)document2.appendTo(element0);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document4, document2);
      assertNotSame(document4, document3);
      assertSame(document4, document0);
      assertNotSame(document4, document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals(2, document4.childNodeSize());
      assertEquals("</", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals("</", document4.location());
      assertTrue(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      
      document3.setBaseUri("</");
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertNotSame(document3, document4);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("</", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("</", document3.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Document document5 = (Document)document4.toggleClass("ljc");
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document4, document2);
      assertNotSame(document4, document3);
      assertSame(document4, document0);
      assertNotSame(document4, document1);
      assertSame(document4, document5);
      assertSame(document5, document2);
      assertNotSame(document5, document3);
      assertSame(document5, document4);
      assertSame(document5, document0);
      assertNotSame(document5, document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals(2, document4.childNodeSize());
      assertEquals("</", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals("</", document4.location());
      assertTrue(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("</", document5.location());
      assertTrue(document5.hasParent());
      assertEquals(2, document5.childNodeSize());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals("</", document5.baseUri());
      assertFalse(document5.isBlock());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      
      String string0 = document2.baseUri();
      assertEquals("</", string0);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document5);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      
      Pattern pattern0 = Pattern.compile("</", 42);
      assertEquals("</", pattern0.toString());
      assertEquals("</", pattern0.pattern());
      assertEquals(42, pattern0.flags());
      assertNotNull(pattern0);
      
      Elements elements1 = document0.getElementsMatchingText(pattern0);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(elements1, elements0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", pattern0.toString());
      assertEquals("</", pattern0.pattern());
      assertEquals(42, pattern0.flags());
      assertFalse(elements1.isEmpty());
      assertEquals(6, elements1.size());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(elements1.equals((Object)elements0));
      
      Element element1 = element0.tagName("CommentStart");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(element0.isBlock());
      assertEquals("commentstart", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("commentstart", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("commentstart", element1.nodeName());
      assertEquals("commentstart", element1.tagName());
      assertNotNull(element1);
      
      Element element2 = document3.firstElementSibling();
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document5);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document5);
      assertNotSame(document3, document5);
      assertNotSame(document3, document4);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("</", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("</", document3.location());
      assertEquals(2, element2.childNodeSize());
      assertEquals("html", element2.tagName());
      assertEquals("</", element2.baseUri());
      assertEquals("html", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertTrue(element2.hasParent());
      assertNotNull(element2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      
      Elements elements2 = document0.getElementsMatchingText("CommentStart");
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertNotNull(elements2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertTrue(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      
      DataNode dataNode0 = new DataNode("</");
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(dataNode0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("9Pt{e~3b.RCS 37h", ": ");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(": ", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(": ", document0.baseUri());
      assertNotNull(document0);
      
      String string0 = document0.className();
      assertEquals("", string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(": ", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(": ", document0.baseUri());
      assertNotNull(string0);
      
      List<TextNode> list0 = document0.textNodes();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(": ", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(": ", document0.baseUri());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Elements elements0 = document0.getAllElements();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(": ", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(": ", document0.baseUri());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = document0.getElementsByAttributeValue(" ", "GZ(A55");
      assertNotSame(elements1, elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(": ", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(": ", document0.baseUri());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      
      Elements elements2 = document0.previousElementSiblings();
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(": ", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(": ", document0.baseUri());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertNotNull(elements2);
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      
      Elements elements3 = document0.getElementsMatchingText(":not%s");
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(": ", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(": ", document0.baseUri());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertNotNull(elements3);
      assertTrue(elements3.equals((Object)elements2));
      assertFalse(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements1));
      
      CDataNode cDataNode0 = new CDataNode(":prev%s");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      DataNode dataNode0 = new DataNode("`8e");
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertNotNull(dataNode0);
      
      Element element0 = document0.head();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(": ", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(": ", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(": ", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        element0.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode("");
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      Document document1 = (Document)document0.appendChild(cDataNode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, cDataNode0.siblingIndex());
      assertTrue(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertNotNull(document1);
      
      boolean boolean0 = document1.hasText();
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, cDataNode0.siblingIndex());
      assertTrue(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      
      Elements elements0 = document1.getElementsMatchingText("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, cDataNode0.siblingIndex());
      assertTrue(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document2 = (Document)document0.attr("", false);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      
      Element element0 = document1.head();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, cDataNode0.siblingIndex());
      assertTrue(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      String string0 = element0.wholeText();
      assertEquals("", string0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, cDataNode0.siblingIndex());
      assertTrue(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(string0);
      
      String string1 = document2.nodeName();
      assertEquals("#document", string1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = "d'AtbtKC>ug";
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("d'AtbtKC>ug", parseSettings0);
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertNotNull(tag0);
      
      String string1 = "-}hJudcG'k9";
      FormElement formElement0 = new FormElement(tag0, "-}hJudcG'k9", (Attributes) null);
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertNotNull(formElement0);
      
      FormElement formElement1 = formElement0.addElement((Element) null);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      assertNotNull(formElement1);
      
      Element element0 = formElement1.prepend("d'AtbtKC>ug");
      assertSame(formElement0, formElement1);
      assertSame(formElement0, element0);
      assertSame(formElement1, element0);
      assertSame(formElement1, formElement0);
      assertSame(element0, formElement0);
      assertSame(element0, formElement1);
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(1, formElement1.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("d'AtbtKC>ug", element0.tagName());
      assertEquals("-}hJudcG'k9", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("d'AtbtKC>ug", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      formElement1.reparentChild(formElement0);
      assertSame(formElement0, formElement1);
      assertSame(formElement0, element0);
      assertSame(formElement1, element0);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertTrue(formElement1.hasParent());
      assertEquals(1, formElement1.childNodeSize());
      
      int int0 = formElement1.elementSiblingIndex();
      assertEquals(0, int0);
      assertSame(formElement0, formElement1);
      assertSame(formElement0, element0);
      assertSame(formElement1, element0);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertTrue(formElement1.hasParent());
      assertEquals(1, formElement1.childNodeSize());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Document document0 = new Document("-}hJudcG'k9");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("-}hJudcG'k9", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("-}hJudcG'k9", document0.baseUri());
      assertNotNull(document0);
      
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) formElement1;
      nodeArray0[1] = (Node) formElement1;
      nodeArray0[2] = (Node) null;
      nodeArray0[3] = (Node) formElement0;
      nodeArray0[4] = (Node) null;
      nodeArray0[5] = (Node) formElement0;
      nodeArray0[6] = (Node) null;
      nodeArray0[7] = (Node) formElement0;
      Element element1 = formElement0.removeClass("-}hJudcG'k9");
      assertSame(element1, element0);
      assertSame(element1, formElement1);
      assertSame(element1, formElement0);
      assertSame(formElement0, formElement1);
      assertSame(formElement0, element0);
      assertSame(formElement0, element1);
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("d'AtbtKC>ug", element1.nodeName());
      assertEquals("d'AtbtKC>ug", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("-}hJudcG'k9", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertNotNull(element1);
      
      // Undeclared exception!
      try { 
        document0.insertChildren(78, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parse("<!doctype", "<!doctype");
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("<!doctype", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("<!doctype", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("<!doctype", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("<!doctype", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("<!doctype", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("<!doctype", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document0.appendTo(document0);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals(2, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("<!doctype", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(3, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("<!doctype", document0.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals("<!doctype", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("<!doctype", document2.location());
      assertEquals("#root", document2.tagName());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Elements elements0 = document1.nextElementSiblings();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertEquals(2, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("<!doctype", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(3, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("<!doctype", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("<!doctype", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("<!doctype", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      
      Element element0 = new Element("<!doctype");
      assertEquals("<!doctype", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("<!doctype", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Document document3 = (Document)document0.appendTo(document1);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertEquals(2, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("<!doctype", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("<!doctype", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("<!doctype", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("<!doctype", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("<!doctype", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("<!doctype", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(2, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      
      Document document4 = (Document)document2.toggleClass("<!doctype");
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertEquals(2, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("<!doctype", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("<!doctype", document0.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("<!doctype", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("<!doctype", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals("<!doctype", document4.location());
      assertEquals("<!doctype", document4.baseUri());
      assertEquals(2, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      
      String string0 = document0.baseUri();
      assertEquals("<!doctype", string0);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertEquals(2, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("<!doctype", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("<!doctype", document0.baseUri());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document1));
      
      boolean boolean0 = document0.hasClass("<!doctype");
      assertFalse(boolean0);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertEquals(2, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("<!doctype", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("<!doctype", document0.baseUri());
      assertFalse(document0.equals((Object)document1));
      
      Document document5 = (Document)document0.appendText("<!doctype");
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document5, document2);
      assertSame(document5, document3);
      assertSame(document5, document4);
      assertSame(document5, document0);
      assertNotSame(document5, document1);
      assertEquals(2, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("<!doctype", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(3, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("<!doctype", document0.baseUri());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(3, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertEquals("<!doctype", document5.location());
      assertEquals(2, document5.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document5.quirksMode());
      assertTrue(document5.hasParent());
      assertEquals("<!doctype", document5.baseUri());
      assertFalse(document5.isBlock());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document5.equals((Object)document1));
      
      Comment comment0 = new Comment("'oy$t:|RM,mWY", "s{DC AJ");
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(comment0);
      
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("'oy$t:|RM,mWY", false);
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertFalse(xmlDeclaration0.hasParent());
      assertNotNull(xmlDeclaration0);
      
      boolean boolean1 = Element.preserveWhitespace(xmlDeclaration0);
      assertFalse(boolean1);
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertFalse(xmlDeclaration0.hasParent());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = document1.hasText();
      assertTrue(boolean2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertNotSame(document1, document5);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document4);
      assertEquals(2, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("<!doctype", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(3, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("<!doctype", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("<!doctype", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("<!doctype", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document4));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Document document6 = document0.ownerDocument();
      assertSame(document0, document4);
      assertNotSame(document0, document6);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document6, document5);
      assertSame(document6, document1);
      assertNotSame(document6, document2);
      assertNotSame(document6, document3);
      assertNotSame(document6, document0);
      assertNotSame(document6, document4);
      assertEquals(2, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("<!doctype", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(3, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("<!doctype", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertEquals("<!doctype", document6.location());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertFalse(document6.isBlock());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("<!doctype", document6.baseUri());
      assertEquals(3, document6.childNodeSize());
      assertFalse(document6.hasParent());
      assertNotNull(document6);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document0));
      
      Document document7 = document6.clone();
      assertSame(document0, document4);
      assertNotSame(document0, document6);
      assertNotSame(document0, document1);
      assertNotSame(document0, document7);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document6, document5);
      assertSame(document6, document1);
      assertNotSame(document6, document2);
      assertNotSame(document6, document3);
      assertNotSame(document6, document0);
      assertNotSame(document6, document4);
      assertNotSame(document6, document7);
      assertNotSame(document7, document0);
      assertNotSame(document7, document5);
      assertNotSame(document7, document2);
      assertNotSame(document7, document3);
      assertNotSame(document7, document4);
      assertNotSame(document7, document6);
      assertNotSame(document7, document1);
      assertEquals(2, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("<!doctype", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(3, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("<!doctype", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertEquals("<!doctype", document6.location());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertFalse(document6.isBlock());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("<!doctype", document6.baseUri());
      assertEquals(3, document6.childNodeSize());
      assertFalse(document6.hasParent());
      assertEquals("#root", document7.tagName());
      assertFalse(document7.hasParent());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document7.quirksMode());
      assertEquals(3, document7.childNodeSize());
      assertEquals("<!doctype", document7.location());
      assertEquals("#document", document7.nodeName());
      assertFalse(document7.isBlock());
      assertEquals("<!doctype", document7.baseUri());
      assertEquals(0, document7.siblingIndex());
      assertNotNull(document7);
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document1));
      
      String string1 = "</";
      Element element1 = document7.appendElement("</");
      assertSame(document0, document4);
      assertNotSame(document0, document6);
      assertNotSame(document0, document1);
      assertNotSame(document0, document7);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(element1, element0);
      assertNotSame(document6, document5);
      assertSame(document6, document1);
      assertNotSame(document6, document2);
      assertNotSame(document6, document3);
      assertNotSame(document6, document0);
      assertNotSame(document6, document4);
      assertNotSame(document6, document7);
      assertNotSame(document7, document0);
      assertNotSame(document7, document5);
      assertNotSame(document7, document2);
      assertNotSame(document7, document3);
      assertNotSame(document7, document4);
      assertNotSame(document7, document6);
      assertNotSame(document7, document1);
      assertEquals(2, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("<!doctype", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(3, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("<!doctype", document0.baseUri());
      assertEquals("</", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("</", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(3, element1.siblingIndex());
      assertEquals("<!doctype", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertEquals("<!doctype", document6.location());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertFalse(document6.isBlock());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("<!doctype", document6.baseUri());
      assertEquals(3, document6.childNodeSize());
      assertFalse(document6.hasParent());
      assertEquals("#root", document7.tagName());
      assertFalse(document7.hasParent());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document7.quirksMode());
      assertEquals("<!doctype", document7.location());
      assertEquals("#document", document7.nodeName());
      assertFalse(document7.isBlock());
      assertEquals("<!doctype", document7.baseUri());
      assertEquals(0, document7.siblingIndex());
      assertEquals(4, document7.childNodeSize());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document7));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document7));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document1));
      
      String string2 = "dir";
      // Undeclared exception!
      try { 
        Tag.valueOf("s{DC AJ", (ParseSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = new Document("org.jsoup.parser.Token$Comment");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document0.baseUri());
      assertEquals("org.jsoup.parser.Token$Comment", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = Parser.parseBodyFragment("org.jsoup.parser.Token$Comment", "org.jsoup.parser.Token$Comment");
      assertNotSame(document1, document0);
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      CDataNode cDataNode0 = new CDataNode("org.jsoup.parser.Token$Comment");
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      Document document2 = (Document)document1.appendChild(document0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document0.baseUri());
      assertEquals("org.jsoup.parser.Token$Comment", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Comment", document2.baseUri());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      boolean boolean0 = document2.hasText();
      assertTrue(boolean0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document0.baseUri());
      assertEquals("org.jsoup.parser.Token$Comment", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Comment", document2.baseUri());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Elements elements0 = document2.getElementsMatchingText("yG#y");
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document0.baseUri());
      assertEquals("org.jsoup.parser.Token$Comment", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Comment", document2.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Document document3 = (Document)document2.attr("org.jsoup.parser.Token$Comment", true);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document0.baseUri());
      assertEquals("org.jsoup.parser.Token$Comment", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Comment", document2.baseUri());
      assertEquals("org.jsoup.parser.Token$Comment", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Comment", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      
      Element element0 = document1.head();
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Comment", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertNotNull(element0);
      assertFalse(document1.equals((Object)document0));
      
      Element element1 = element0.addClass("org.jsoup.parser.Token$Comment");
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Comment", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals("org.jsoup.parser.Token$Comment", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertNotNull(element1);
      assertFalse(document1.equals((Object)document0));
      
      Elements elements1 = document2.getElementsByIndexEquals(71);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(elements1, elements0);
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document0.baseUri());
      assertEquals("org.jsoup.parser.Token$Comment", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.parser.Token$Comment", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.parser.Token$Comment", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("org.jsoup.parser.Token$Comment", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Comment", document2.baseUri());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertTrue(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.location());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Elements elements0 = document2.nextElementSiblings();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Element element0 = new Element("</");
      assertFalse(element0.isBlock());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      Document document3 = (Document)document2.appendTo(element0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(element0.isBlock());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("</", document3.location());
      assertTrue(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("</", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      
      Document document4 = (Document)document3.toggleClass("ljc");
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertNotSame(document4, document1);
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(element0.isBlock());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("</", document3.location());
      assertTrue(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("</", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("</", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertTrue(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      
      String string0 = document2.baseUri();
      assertEquals("</", string0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      boolean boolean0 = document2.hasClass("b6hvH$Vs*i]cIc");
      assertFalse(boolean0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Node[] nodeArray0 = element0.childNodesAsArray();
      assertFalse(element0.isBlock());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertNotNull(nodeArray0);
      assertEquals(1, nodeArray0.length);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document5 = document2.quirksMode(document_QuirksMode0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document5, document0);
      assertSame(document5, document3);
      assertSame(document5, document2);
      assertNotSame(document5, document1);
      assertSame(document5, document4);
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#root", document5.tagName());
      assertEquals("</", document5.location());
      assertEquals(1, document5.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document5.quirksMode());
      assertEquals(0, document5.siblingIndex());
      assertEquals("</", document5.baseUri());
      assertFalse(document5.isBlock());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document5.equals((Object)document1));
      
      Elements elements1 = document5.getElementsByAttributeValueContaining("yG#y", "%");
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document5, document0);
      assertSame(document5, document3);
      assertSame(document5, document2);
      assertNotSame(document5, document1);
      assertSame(document5, document4);
      assertNotSame(elements1, elements0);
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#root", document5.tagName());
      assertEquals("</", document5.location());
      assertEquals(1, document5.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document5.quirksMode());
      assertEquals(0, document5.siblingIndex());
      assertEquals("</", document5.baseUri());
      assertFalse(document5.isBlock());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document5.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      
      String string1 = document0.className();
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = document0.data();
      assertEquals("", string2);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Elements elements2 = document0.getAllElements();
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(elements2.isEmpty());
      assertEquals(4, elements2.size());
      assertNotNull(elements2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      
      Elements elements3 = document0.getElementsByAttributeValue("ljc", "b6hvH$Vs*i]cIc");
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(elements3);
      assertTrue(elements3.equals((Object)elements0));
      assertFalse(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements1));
      assertFalse(document0.equals((Object)document1));
      
      Elements elements4 = document0.previousElementSiblings();
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(elements4, elements0);
      assertNotSame(elements4, elements2);
      assertNotSame(elements4, elements1);
      assertNotSame(elements4, elements3);
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements4.size());
      assertTrue(elements4.isEmpty());
      assertNotNull(elements4);
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements4.equals((Object)elements3));
      assertFalse(elements4.equals((Object)elements2));
      assertTrue(elements4.equals((Object)elements0));
      assertTrue(elements4.equals((Object)elements1));
      
      Pattern pattern0 = Pattern.compile("M", (-8));
      assertEquals("M", pattern0.toString());
      assertEquals("M", pattern0.pattern());
      assertEquals((-8), pattern0.flags());
      assertNotNull(pattern0);
      
      Elements elements5 = document4.getElementsMatchingOwnText(pattern0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(elements5, elements1);
      assertNotSame(elements5, elements2);
      assertNotSame(elements5, elements0);
      assertNotSame(elements5, elements4);
      assertNotSame(elements5, elements3);
      assertSame(document3, document2);
      assertSame(document3, document5);
      assertSame(document3, document4);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document5);
      assertSame(document4, document0);
      assertNotSame(document4, document1);
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("M", pattern0.toString());
      assertEquals("M", pattern0.pattern());
      assertEquals((-8), pattern0.flags());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertTrue(elements5.isEmpty());
      assertEquals(0, elements5.size());
      assertFalse(element0.isBlock());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("</", document3.location());
      assertTrue(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("</", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("</", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertTrue(document4.hasParent());
      assertNotNull(elements5);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertTrue(elements5.equals((Object)elements0));
      assertTrue(elements5.equals((Object)elements4));
      assertTrue(elements5.equals((Object)elements3));
      assertFalse(elements5.equals((Object)elements2));
      assertTrue(elements5.equals((Object)elements1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      
      Elements elements6 = document1.getElementsByAttributeValueMatching("M", "%");
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document1, document4);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document5);
      assertNotSame(document1, document2);
      assertNotSame(elements6, elements2);
      assertNotSame(elements6, elements1);
      assertNotSame(elements6, elements3);
      assertNotSame(elements6, elements0);
      assertNotSame(elements6, elements4);
      assertNotSame(elements6, elements5);
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.location());
      assertTrue(elements6.isEmpty());
      assertEquals(0, elements6.size());
      assertNotNull(elements6);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(elements6.equals((Object)elements2));
      assertTrue(elements6.equals((Object)elements0));
      assertTrue(elements6.equals((Object)elements4));
      assertTrue(elements6.equals((Object)elements3));
      assertTrue(elements6.equals((Object)elements5));
      assertTrue(elements6.equals((Object)elements1));
      
      Document document6 = (Document)document2.appendText("r^34I_0");
      assertSame(document0, document3);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document6);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document6, document1);
      assertSame(document6, document5);
      assertSame(document6, document2);
      assertSame(document6, document0);
      assertSame(document6, document3);
      assertSame(document6, document4);
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document6.nodeName());
      assertEquals(0, document6.siblingIndex());
      assertTrue(document6.hasParent());
      assertEquals("</", document6.baseUri());
      assertFalse(document6.isBlock());
      assertEquals("</", document6.location());
      assertEquals("#root", document6.tagName());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertEquals(2, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertNotNull(document6);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document6.equals((Object)document1));
      
      Document document7 = (Document)document5.before("|nY})PK");
      assertSame(document0, document3);
      assertSame(document0, document6);
      assertSame(document0, document7);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document6);
      assertSame(document2, document7);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document7, document2);
      assertNotSame(document7, document1);
      assertSame(document7, document3);
      assertSame(document7, document0);
      assertSame(document7, document6);
      assertSame(document7, document4);
      assertSame(document7, document5);
      assertSame(document5, document7);
      assertSame(document5, document0);
      assertSame(document5, document6);
      assertSame(document5, document3);
      assertSame(document5, document2);
      assertNotSame(document5, document1);
      assertSame(document5, document4);
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertTrue(document7.hasParent());
      assertFalse(document7.isBlock());
      assertEquals("#root", document7.tagName());
      assertEquals("</", document7.location());
      assertEquals("</", document7.baseUri());
      assertEquals(2, document7.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("#document", document7.nodeName());
      assertEquals(1, document7.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document7.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals("</", document5.location());
      assertEquals(Document.QuirksMode.quirks, document5.quirksMode());
      assertEquals("</", document5.baseUri());
      assertFalse(document5.isBlock());
      assertTrue(document5.hasParent());
      assertEquals(1, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(2, document5.childNodeSize());
      assertNotNull(document7);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document5.equals((Object)document1));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("</", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("</", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("</", document3.location());
      assertTrue(document3.hasParent());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      Elements elements0 = document2.nextElementSiblings();
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      
      Element element0 = new Element("</");
      assertFalse(element0.hasParent());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertNotNull(element0);
      
      Document document4 = (Document)document2.appendTo(element0);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document4, document1);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals(2, document4.childNodeSize());
      assertEquals("</", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      
      Elements elements1 = document4.getElementsByTag("org.jsoup.select.Evaluator$Attribute");
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document4, document1);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertNotSame(elements1, elements0);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals(2, document4.childNodeSize());
      assertEquals("</", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertTrue(elements1.equals((Object)elements0));
      
      Document document5 = (Document)document4.toggleClass("ljc");
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertNotSame(document4, document1);
      assertSame(document4, document5);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertNotSame(document5, document1);
      assertSame(document5, document0);
      assertNotSame(document5, document3);
      assertSame(document5, document2);
      assertSame(document5, document4);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals(2, document4.childNodeSize());
      assertEquals("</", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(2, document5.childNodeSize());
      assertEquals("</", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("</", document5.location());
      assertEquals("#document", document5.nodeName());
      assertTrue(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      
      String string0 = document2.baseUri();
      assertEquals("</", string0);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      
      Set<String> set0 = document0.classNames();
      assertFalse(set0.contains(string0));
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      
      boolean boolean0 = document2.hasClass("b6hvH$Vs*i]cIc");
      assertFalse(boolean0);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document6 = document2.quirksMode(document_QuirksMode0);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document2, document6);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document6, document2);
      assertSame(document6, document4);
      assertNotSame(document6, document3);
      assertNotSame(document6, document1);
      assertSame(document6, document5);
      assertSame(document6, document0);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertFalse(document6.isBlock());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("</", document6.baseUri());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertEquals("</", document6.location());
      assertEquals(2, document6.childNodeSize());
      assertNotNull(document6);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document1));
      
      Elements elements2 = document6.getElementsByAttributeValueContaining("yG#y", "%");
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document2, document6);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document6, document2);
      assertSame(document6, document4);
      assertNotSame(document6, document3);
      assertNotSame(document6, document1);
      assertSame(document6, document5);
      assertSame(document6, document0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertFalse(document6.isBlock());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("</", document6.baseUri());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertEquals("</", document6.location());
      assertEquals(2, document6.childNodeSize());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertNotNull(elements2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document1));
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      
      String string1 = document0.className();
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = document0.data();
      assertEquals("", string2);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      
      Elements elements3 = document0.getAllElements();
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(8, elements3.size());
      assertFalse(elements3.isEmpty());
      assertNotNull(elements3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(elements3.equals((Object)elements0));
      assertFalse(elements3.equals((Object)elements1));
      assertFalse(elements3.equals((Object)elements2));
      
      Elements elements4 = document0.getElementsByAttributeValue("ljc", "s+");
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(elements4, elements1);
      assertNotSame(elements4, elements2);
      assertNotSame(elements4, elements0);
      assertNotSame(elements4, elements3);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements4.isEmpty());
      assertEquals(0, elements4.size());
      assertNotNull(elements4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertTrue(elements4.equals((Object)elements0));
      assertTrue(elements4.equals((Object)elements2));
      assertFalse(elements4.equals((Object)elements3));
      assertTrue(elements4.equals((Object)elements1));
      
      Elements elements5 = document0.previousElementSiblings();
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(elements5, elements2);
      assertNotSame(elements5, elements4);
      assertNotSame(elements5, elements1);
      assertNotSame(elements5, elements3);
      assertNotSame(elements5, elements0);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements5.isEmpty());
      assertEquals(0, elements5.size());
      assertNotNull(elements5);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertTrue(elements5.equals((Object)elements0));
      assertTrue(elements5.equals((Object)elements4));
      assertTrue(elements5.equals((Object)elements2));
      assertFalse(elements5.equals((Object)elements3));
      assertTrue(elements5.equals((Object)elements1));
      
      List<Node> list0 = document4.ensureChildNodes();
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document2, document6);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertNotSame(document4, document1);
      assertSame(document4, document6);
      assertSame(document4, document5);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals(2, document4.childNodeSize());
      assertEquals("</", document4.baseUri());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.location());
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      
      Elements elements6 = document1.getElementsMatchingOwnText("s+");
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document6);
      assertNotSame(document1, document0);
      assertNotSame(document1, document5);
      assertNotSame(document1, document2);
      assertNotSame(document1, document4);
      assertNotSame(elements6, elements2);
      assertNotSame(elements6, elements4);
      assertNotSame(elements6, elements3);
      assertNotSame(elements6, elements5);
      assertNotSame(elements6, elements0);
      assertNotSame(elements6, elements1);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(elements6.isEmpty());
      assertEquals(0, elements6.size());
      assertNotNull(elements6);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertTrue(elements6.equals((Object)elements0));
      assertFalse(elements6.equals((Object)elements3));
      assertTrue(elements6.equals((Object)elements1));
      assertTrue(elements6.equals((Object)elements4));
      assertTrue(elements6.equals((Object)elements2));
      assertTrue(elements6.equals((Object)elements5));
      
      // Undeclared exception!
      try { 
        document2.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '#root.java.lang.String@0000000954': unexpected token at '@0000000954'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("9Pt{e~3b.RCS 37h", ": ");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(": ", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(": ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      String string0 = document0.className();
      assertEquals("", string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(": ", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(": ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(string0);
      
      List<TextNode> list0 = document0.textNodes();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(": ", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(": ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Elements elements0 = document0.getAllElements();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(": ", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(": ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = document0.getElementsByAttributeValue(" ", "GZ(A55");
      assertNotSame(elements1, elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(": ", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(": ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      
      Elements elements2 = document0.previousElementSiblings();
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(": ", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(": ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertNotNull(elements2);
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      
      Elements elements3 = document0.getElementsMatchingText(":not%s");
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(": ", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(": ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertNotNull(elements3);
      assertTrue(elements3.equals((Object)elements1));
      assertFalse(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements2));
      
      CDataNode cDataNode0 = new CDataNode(":prev%s");
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      DataNode dataNode0 = new DataNode("`8e");
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(dataNode0.hasParent());
      assertNotNull(dataNode0);
      
      Element element0 = document0.head();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(": ", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(": ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(": ", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      Element element1 = element0.val("Bi$d^ 08.");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(": ", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(": ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(": ", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(": ", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parse("e+@RZ_A>l-", "e+@RZ_A>l-");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("e+@RZ_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+@RZ_A>l-", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("e+@RZ_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+@RZ_A>l-", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("e+@RZ_A>l-", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("e+@RZ_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Elements elements0 = document0.nextElementSiblings();
      assertNotSame(document0, document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("e+@RZ_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+@RZ_A>l-", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      
      Document document2 = Document.createShell("e+@RZ_A>l-");
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals("e+@RZ_A>l-", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("e+@RZ_A>l-", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      Document document3 = document0.clone();
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("e+@RZ_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+@RZ_A>l-", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document3.hasParent());
      assertEquals("e+@RZ_A>l-", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("e+@RZ_A>l-", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      
      String string0 = "*.:;\"TqJs#f^+LX";
      CDataNode cDataNode0 = new CDataNode("br");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      DataNode dataNode0 = new DataNode("*.:;\"TqJs#f^+LX");
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      Document document4 = (Document)document0.appendChild(dataNode0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertSame(document4, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("e+@RZ_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("e+@RZ_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(1, dataNode0.siblingIndex());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("e+@RZ_A>l-", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("e+@RZ_A>l-", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document4;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) cDataNode0;
      nodeArray0[3] = (Node) document4;
      nodeArray0[4] = (Node) document1;
      nodeArray0[6] = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document2.insertChildren(1, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("9Pt{e~3b.RCS 37h", "9Pt{e~3b.RCS 37h");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("9Pt{e~3b.RCS 37h", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("9Pt{e~3b.RCS 37h", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      List<Node> list0 = document0.ensureChildNodes();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("9Pt{e~3b.RCS 37h", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("9Pt{e~3b.RCS 37h", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      Element element0 = new Element("9Pt{e~3b.RCS 37h");
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("9Pt{e~3b.RCS 37h", element0.tagName());
      assertEquals("9Pt{e~3b.RCS 37h", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.appendTo(document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("9Pt{e~3b.RCS 37h", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("9Pt{e~3b.RCS 37h", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("9Pt{e~3b.RCS 37h", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("9Pt{e~3b.RCS 37h", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("9Pt{e~3b.RCS 37h", element1.nodeName());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("9Pt{e~3b.RCS 37h", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertNotNull(element1);
      
      Element element2 = document0.head();
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("9Pt{e~3b.RCS 37h", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("9Pt{e~3b.RCS 37h", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("9Pt{e~3b.RCS 37h", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertEquals("head", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.hasParent());
      assertNotNull(element2);
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      
      String string0 = "8Ub3},tDiFRM/W.";
      Element element3 = element2.toggleClass("8Ub3},tDiFRM/W.");
      assertSame(element2, element3);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotSame(element3, element0);
      assertSame(element3, element2);
      assertNotSame(element3, element1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("9Pt{e~3b.RCS 37h", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("9Pt{e~3b.RCS 37h", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("9Pt{e~3b.RCS 37h", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertEquals("head", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.hasParent());
      assertTrue(element3.isBlock());
      assertEquals("head", element3.tagName());
      assertEquals(0, element3.siblingIndex());
      assertEquals("head", element3.nodeName());
      assertTrue(element3.hasParent());
      assertEquals(0, element3.childNodeSize());
      assertEquals("9Pt{e~3b.RCS 37h", element3.baseUri());
      assertNotNull(element3);
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element1));
      
      String string1 = document0.baseUri();
      assertEquals("9Pt{e~3b.RCS 37h", string1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("9Pt{e~3b.RCS 37h", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("9Pt{e~3b.RCS 37h", document0.location());
      assertEquals("#document", document0.nodeName());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = element1.hasClass("textarea");
      assertFalse(boolean1);
      assertNotSame(element0, element3);
      assertNotSame(element0, element2);
      assertSame(element0, element1);
      assertNotSame(element1, element2);
      assertNotSame(element1, element3);
      assertSame(element1, element0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("9Pt{e~3b.RCS 37h", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("9Pt{e~3b.RCS 37h", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("9Pt{e~3b.RCS 37h", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("9Pt{e~3b.RCS 37h", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("9Pt{e~3b.RCS 37h", element1.nodeName());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("9Pt{e~3b.RCS 37h", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element0.equals((Object)element3));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element3));
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining(" ", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("h3", parseSettings0);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertEquals("h3", tag0.getName());
      assertTrue(tag0.canContainBlock());
      assertEquals("h3", tag0.toString());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode("`%z`0Dxp");
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "s+", attributes0);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertEquals("h3", tag0.getName());
      assertTrue(tag0.canContainBlock());
      assertEquals("h3", tag0.toString());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertTrue(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("s+", formElement0.baseUri());
      assertEquals("h3", formElement0.nodeName());
      assertEquals("h3", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertNotNull(formElement0);
      
      Elements elements0 = formElement0.getElementsContainingText("");
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertEquals("h3", tag0.getName());
      assertTrue(tag0.canContainBlock());
      assertEquals("h3", tag0.toString());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertTrue(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("s+", formElement0.baseUri());
      assertEquals("h3", formElement0.nodeName());
      assertEquals("h3", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "d%h3AXUW0Z_a_T";
      String string1 = "@lV sF?oQe\"m\"";
      Document document0 = Parser.parse("d%h3AXUW0Z_a_T", "@lV sF?oQe\"m\"");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("@lV sF?oQe\"m\"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("@lV sF?oQe\"m\"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("@lV sF?oQe\"m\"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("@lV sF?oQe\"m\"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals("@lV sF?oQe\"m\"", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("@lV sF?oQe\"m\"", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      List<Node> list0 = document1.siblingNodes();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("@lV sF?oQe\"m\"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("@lV sF?oQe\"m\"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals("@lV sF?oQe\"m\"", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("@lV sF?oQe\"m\"", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Elements elements0 = document0.getElementsContainingText("d%h3AXUW0Z_a_T");
      assertSame(document0, document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("@lV sF?oQe\"m\"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("@lV sF?oQe\"m\"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
      assertNotNull(elements0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1274);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1274, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1274, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      
      Parser parser1 = parser0.setTrackErrors((-2988));
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      
      Document document2 = document1.parser(parser1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("@lV sF?oQe\"m\"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("@lV sF?oQe\"m\"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1274, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals("@lV sF?oQe\"m\"", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("@lV sF?oQe\"m\"", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("@lV sF?oQe\"m\"", document2.location());
      assertEquals("@lV sF?oQe\"m\"", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertNotNull(document2);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.encoder();
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1274, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(charsetEncoder0);
      
      Document document3 = document2.quirksMode(document_QuirksMode0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("@lV sF?oQe\"m\"", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("@lV sF?oQe\"m\"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1274, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals("@lV sF?oQe\"m\"", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("@lV sF?oQe\"m\"", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("@lV sF?oQe\"m\"", document2.location());
      assertEquals("@lV sF?oQe\"m\"", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("@lV sF?oQe\"m\"", document3.baseUri());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("@lV sF?oQe\"m\"", document3.location());
      assertNotNull(document3);
      
      String string2 = "gDW";
      URI uRI0 = MockURI.create("gDW");
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("gDW", uRI0.toString());
      assertFalse(uRI0.isOpaque());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertEquals("gDW", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertNotNull(uRI0);
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Tag tag0 = Tag.valueOf("x@)*<Eg)p>2#", parseSettings0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("x@)*<eg)p>2#", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertEquals("x@)*<eg)p>2#", tag0.getName());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode("x@)*<Eg)p>2#");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "x@)*<Eg)p>2#", attributes0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("x@)*<eg)p>2#", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertEquals("x@)*<eg)p>2#", tag0.getName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals("x@)*<eg)p>2#", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("x@)*<Eg)p>2#", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("x@)*<eg)p>2#", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertNotNull(pseudoTextElement0);
      
      Element element0 = pseudoTextElement0.empty();
      assertSame(pseudoTextElement0, element0);
      assertSame(element0, pseudoTextElement0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("x@)*<eg)p>2#", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertEquals("x@)*<eg)p>2#", tag0.getName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals("x@)*<eg)p>2#", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("x@)*<Eg)p>2#", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("x@)*<eg)p>2#", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("x@)*<eg)p>2#", element0.nodeName());
      assertEquals("x@)*<eg)p>2#", element0.tagName());
      assertEquals("x@)*<Eg)p>2#", element0.baseUri());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      Element element1 = element0.html("U");
      assertSame(pseudoTextElement0, element0);
      assertSame(pseudoTextElement0, element1);
      assertSame(element0, pseudoTextElement0);
      assertSame(element0, element1);
      assertSame(element1, pseudoTextElement0);
      assertSame(element1, element0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("x@)*<eg)p>2#", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertEquals("x@)*<eg)p>2#", tag0.getName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals("x@)*<eg)p>2#", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("x@)*<Eg)p>2#", pseudoTextElement0.baseUri());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("x@)*<eg)p>2#", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("x@)*<eg)p>2#", element0.nodeName());
      assertEquals("x@)*<eg)p>2#", element0.tagName());
      assertEquals("x@)*<Eg)p>2#", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("x@)*<eg)p>2#", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals("x@)*<Eg)p>2#", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("x@)*<eg)p>2#", element1.tagName());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Element element0 = new Element("b6hvH$Vs*i]cIc");
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("b6hvH$Vs*i]cIc", element0.tagName());
      assertEquals("b6hvH$Vs*i]cIc", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("b6hvH$Vs*i]cIc"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Element element1 = element0.classNames((Set<String>) linkedHashSet0);
      assertFalse(linkedHashSet0.contains("b6hvH$Vs*i]cIc"));
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("b6hvH$Vs*i]cIc", element0.tagName());
      assertEquals("b6hvH$Vs*i]cIc", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("b6hvH$Vs*i]cIc", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals("b6hvH$Vs*i]cIc", element1.tagName());
      assertNotNull(element1);
      
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
      assertSame(element0, element1);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("b6hvH$Vs*i]cIc", element0.tagName());
      assertEquals("b6hvH$Vs*i]cIc", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      
      Elements elements0 = element0.getElementsMatchingText(":prev%s");
      assertSame(element0, element1);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("b6hvH$Vs*i]cIc", element0.tagName());
      assertEquals("b6hvH$Vs*i]cIc", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      CDataNode cDataNode0 = new CDataNode((String) null);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Node node0 = cDataNode0.parent();
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNull(node0);
      
      Document document0 = new Document(":prev%s");
      assertEquals(":prev%s", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(":prev%s", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(":prev%s", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(":prev%s", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(":prev%s", document1.location());
      assertEquals(":prev%s", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      Document document2 = document1.ownerDocument();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(":prev%s", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(":prev%s", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(":prev%s", document1.location());
      assertEquals(":prev%s", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertEquals(":prev%s", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(":prev%s", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      
      Document document3 = document2.normalise();
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertEquals(":prev%s", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(":prev%s", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(":prev%s", document1.location());
      assertEquals(":prev%s", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(":prev%s", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals(":prev%s", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals(":prev%s", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(":prev%s", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertNotNull(document3);
      
      Document document4 = document3.parser((Parser) null);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertEquals(":prev%s", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(":prev%s", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(":prev%s", document1.location());
      assertEquals(":prev%s", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(":prev%s", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals(":prev%s", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals(":prev%s", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(":prev%s", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(":prev%s", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals(":prev%s", document4.baseUri());
      assertFalse(document4.isBlock());
      assertNotNull(document4);
      
      // Undeclared exception!
      try { 
        document4.getElementsByAttributeValue("+?5:7c t4d~{NGp3G-", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Element element0 = new Element("(dt5&4sx");
      assertFalse(element0.isBlock());
      assertEquals("(dt5&4sx", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("(dt5&4sx", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.removeClass("(dt5&4sx");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(element0.isBlock());
      assertEquals("(dt5&4sx", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("(dt5&4sx", element0.tagName());
      assertFalse(element1.hasParent());
      assertEquals("(dt5&4sx", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("(dt5&4sx", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      
      List<Node> list0 = element1.childNodesCopy();
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(element0.isBlock());
      assertEquals("(dt5&4sx", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("(dt5&4sx", element0.tagName());
      assertFalse(element1.hasParent());
      assertEquals("(dt5&4sx", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("(dt5&4sx", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Element element2 = element1.appendElement("d'AtbtKC>ug");
      assertNotSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(element1, element2);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertFalse(element0.isBlock());
      assertEquals("(dt5&4sx", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("(dt5&4sx", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("(dt5&4sx", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("(dt5&4sx", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("d'atbtkc>ug", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("d'atbtkc>ug", element2.nodeName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertNotNull(element2);
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      
      // Undeclared exception!
      try { 
        element1.after((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      document0.title("");
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      TextNode textNode0 = new TextNode("", "");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertNotNull(textNode0);
      
      Document document1 = (Document)document0.appendChild(textNode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      String string0 = "org.jsoup.nodes.Element";
      DataNode dataNode0 = new DataNode("org.jsoup.nodes.Element");
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      dataNode0.coreValue("");
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      
      document1.reparentChild(document0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Pattern pattern0 = Pattern.compile("HX]");
      assertEquals("HX]", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("HX]", pattern0.toString());
      assertNotNull(pattern0);
      
      Matcher matcher0 = pattern0.matcher("HX]");
      assertEquals("HX]", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("HX]", pattern0.toString());
      assertTrue(matcher0.hasAnchoringBounds());
      assertFalse(matcher0.hasTransparentBounds());
      assertEquals(0, matcher0.groupCount());
      assertEquals("java.util.regex.Matcher[pattern=HX] region=0,3 lastmatch=]", matcher0.toString());
      assertNotNull(matcher0);
      
      Elements elements0 = document1.getElementsMatchingText(pattern0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("HX]", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("HX]", pattern0.toString());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      // Undeclared exception!
      document1.tagName("CommentStart");
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parse("e+&R~_A>l-", "e+&R~_A>l-");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document0.appendTo(document2);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("e+&R~_A>l-", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("e+&R~_A>l-", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      
      Elements elements0 = document2.nextElementSiblings();
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Element element0 = new Element("e+&R~_A>l-");
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("e+&R~_A>l-", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("e+&R~_A>l-", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Document document4 = (Document)document0.appendTo(document1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("e+&R~_A>l-", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      
      Document document5 = (Document)document3.toggleClass("e+&R~_A>l-");
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document3, document4);
      assertNotSame(document3, document1);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document5, document4);
      assertNotSame(document5, document1);
      assertSame(document5, document0);
      assertSame(document5, document3);
      assertSame(document5, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("e+&R~_A>l-", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("e+&R~_A>l-", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document5.baseUri());
      assertFalse(document5.isBlock());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.childNodeSize());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertEquals(1, document5.siblingIndex());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document5.equals((Object)document1));
      
      String string0 = document0.baseUri();
      assertEquals("e+&R~_A>l-", string0);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document1));
      
      boolean boolean0 = document0.hasClass("e+&R~_A>l-");
      assertFalse(boolean0);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.equals((Object)document1));
      
      Document document6 = (Document)document0.appendText("e+&R~_A>l-");
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertSame(document6, document0);
      assertSame(document6, document5);
      assertSame(document6, document4);
      assertNotSame(document6, document1);
      assertSame(document6, document3);
      assertSame(document6, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document6.location());
      assertEquals(2, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document6.baseUri());
      assertFalse(document6.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertEquals("#root", document6.tagName());
      assertEquals(1, document6.siblingIndex());
      assertNotNull(document6);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document6.equals((Object)document1));
      
      Comment comment0 = new Comment("'oy$t:|RM,mWY", "s{DC AJ");
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertNotNull(comment0);
      
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertFalse(xmlDeclaration0.hasParent());
      assertNotNull(xmlDeclaration0);
      
      boolean boolean1 = Element.preserveWhitespace(xmlDeclaration0);
      assertFalse(boolean1);
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertFalse(xmlDeclaration0.hasParent());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = document1.hasText();
      assertTrue(boolean2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertNotSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document6);
      assertNotSame(document1, document5);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document5));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Document document7 = document0.ownerDocument();
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document7);
      assertSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertSame(document7, document1);
      assertNotSame(document7, document4);
      assertNotSame(document7, document3);
      assertNotSame(document7, document0);
      assertNotSame(document7, document2);
      assertNotSame(document7, document6);
      assertNotSame(document7, document5);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document7.location());
      assertEquals(0, document7.siblingIndex());
      assertEquals("#root", document7.tagName());
      assertFalse(document7.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertFalse(document7.hasParent());
      assertEquals("e+&R~_A>l-", document7.baseUri());
      assertEquals("#document", document7.nodeName());
      assertEquals(2, document7.childNodeSize());
      assertNotNull(document7);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document5));
      
      Document document8 = document7.clone();
      assertNotSame(document8, document6);
      assertNotSame(document8, document4);
      assertNotSame(document8, document7);
      assertNotSame(document8, document1);
      assertNotSame(document8, document5);
      assertNotSame(document8, document3);
      assertNotSame(document8, document0);
      assertNotSame(document8, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(document0, document8);
      assertSame(document0, document2);
      assertNotSame(document0, document7);
      assertSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertSame(document7, document1);
      assertNotSame(document7, document4);
      assertNotSame(document7, document3);
      assertNotSame(document7, document0);
      assertNotSame(document7, document2);
      assertNotSame(document7, document6);
      assertNotSame(document7, document8);
      assertNotSame(document7, document5);
      assertEquals(2, document8.childNodeSize());
      assertEquals("#root", document8.tagName());
      assertEquals(0, document8.siblingIndex());
      assertEquals("e+&R~_A>l-", document8.baseUri());
      assertFalse(document8.isBlock());
      assertEquals("#document", document8.nodeName());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertEquals("e+&R~_A>l-", document8.location());
      assertFalse(document8.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document7.location());
      assertEquals(0, document7.siblingIndex());
      assertEquals("#root", document7.tagName());
      assertFalse(document7.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertFalse(document7.hasParent());
      assertEquals("e+&R~_A>l-", document7.baseUri());
      assertEquals("#document", document7.nodeName());
      assertEquals(2, document7.childNodeSize());
      assertNotNull(document8);
      assertFalse(document8.equals((Object)document6));
      assertFalse(document8.equals((Object)document4));
      assertFalse(document8.equals((Object)document7));
      assertFalse(document8.equals((Object)document1));
      assertFalse(document8.equals((Object)document5));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document0));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document5));
      
      Element element1 = document8.appendElement("</");
      assertNotSame(document8, document6);
      assertNotSame(document8, document4);
      assertNotSame(document8, document7);
      assertNotSame(document8, document1);
      assertNotSame(document8, document5);
      assertNotSame(document8, document3);
      assertNotSame(document8, document0);
      assertNotSame(document8, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(document0, document8);
      assertSame(document0, document2);
      assertNotSame(document0, document7);
      assertSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertNotSame(element1, element0);
      assertSame(document7, document1);
      assertNotSame(document7, document4);
      assertNotSame(document7, document3);
      assertNotSame(document7, document0);
      assertNotSame(document7, document2);
      assertNotSame(document7, document6);
      assertNotSame(document7, document8);
      assertNotSame(document7, document5);
      assertEquals("#root", document8.tagName());
      assertEquals(0, document8.siblingIndex());
      assertEquals("e+&R~_A>l-", document8.baseUri());
      assertFalse(document8.isBlock());
      assertEquals("#document", document8.nodeName());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertEquals(3, document8.childNodeSize());
      assertEquals("e+&R~_A>l-", document8.location());
      assertFalse(document8.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.siblingIndex());
      assertEquals("e+&R~_A>l-", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("</", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("</", element1.nodeName());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document7.location());
      assertEquals(0, document7.siblingIndex());
      assertEquals("#root", document7.tagName());
      assertFalse(document7.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertFalse(document7.hasParent());
      assertEquals("e+&R~_A>l-", document7.baseUri());
      assertEquals("#document", document7.nodeName());
      assertEquals(2, document7.childNodeSize());
      assertNotNull(element1);
      assertFalse(document8.equals((Object)document6));
      assertFalse(document8.equals((Object)document4));
      assertFalse(document8.equals((Object)document7));
      assertFalse(document8.equals((Object)document1));
      assertFalse(document8.equals((Object)document5));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document0));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document8));
      assertFalse(document7.equals((Object)document5));
      
      List<DataNode> list0 = document4.dataNodes();
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(document0, document8);
      assertSame(document0, document2);
      assertNotSame(document0, document7);
      assertSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertNotSame(document1, document3);
      assertSame(document1, document7);
      assertNotSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document6);
      assertNotSame(document1, document8);
      assertNotSame(document1, document5);
      assertSame(document4, document6);
      assertNotSame(document4, document1);
      assertNotSame(document4, document7);
      assertSame(document4, document5);
      assertNotSame(document4, document8);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("e+&R~_A>l-", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("e+&R~_A>l-", document4.location());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document8));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document7));
      assertFalse(document4.equals((Object)document8));
      
      Element element2 = element1.prepend("applet");
      assertNotSame(document8, document6);
      assertNotSame(document8, document4);
      assertNotSame(document8, document7);
      assertNotSame(document8, document1);
      assertNotSame(document8, document5);
      assertNotSame(document8, document3);
      assertNotSame(document8, document0);
      assertNotSame(document8, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(document0, document8);
      assertSame(document0, document2);
      assertNotSame(document0, document7);
      assertSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element1);
      assertNotSame(element2, element0);
      assertSame(document7, document1);
      assertNotSame(document7, document4);
      assertNotSame(document7, document3);
      assertNotSame(document7, document0);
      assertNotSame(document7, document2);
      assertNotSame(document7, document6);
      assertNotSame(document7, document8);
      assertNotSame(document7, document5);
      assertEquals("#root", document8.tagName());
      assertEquals(0, document8.siblingIndex());
      assertEquals("e+&R~_A>l-", document8.baseUri());
      assertFalse(document8.isBlock());
      assertEquals("#document", document8.nodeName());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertEquals(3, document8.childNodeSize());
      assertEquals("e+&R~_A>l-", document8.location());
      assertFalse(document8.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.siblingIndex());
      assertEquals("e+&R~_A>l-", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("</", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("</", element1.nodeName());
      assertEquals("e+&R~_A>l-", element2.baseUri());
      assertFalse(element2.isBlock());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals(2, element2.siblingIndex());
      assertEquals("</", element2.tagName());
      assertEquals("</", element2.nodeName());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document7.location());
      assertEquals(0, document7.siblingIndex());
      assertEquals("#root", document7.tagName());
      assertFalse(document7.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertFalse(document7.hasParent());
      assertEquals("e+&R~_A>l-", document7.baseUri());
      assertEquals("#document", document7.nodeName());
      assertEquals(2, document7.childNodeSize());
      assertNotNull(element2);
      assertFalse(document8.equals((Object)document6));
      assertFalse(document8.equals((Object)document4));
      assertFalse(document8.equals((Object)document7));
      assertFalse(document8.equals((Object)document1));
      assertFalse(document8.equals((Object)document5));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document0));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document8));
      assertFalse(document7.equals((Object)document5));
      
      document7.nodelistChanged();
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(document0, document8);
      assertSame(document0, document2);
      assertNotSame(document0, document7);
      assertSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertSame(document7, document1);
      assertNotSame(document7, document4);
      assertNotSame(document7, document3);
      assertNotSame(document7, document0);
      assertNotSame(document7, document2);
      assertNotSame(document7, document6);
      assertNotSame(document7, document8);
      assertNotSame(document7, document5);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document7.location());
      assertEquals(0, document7.siblingIndex());
      assertEquals("#root", document7.tagName());
      assertFalse(document7.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertFalse(document7.hasParent());
      assertEquals("e+&R~_A>l-", document7.baseUri());
      assertEquals("#document", document7.nodeName());
      assertEquals(2, document7.childNodeSize());
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document8));
      assertFalse(document7.equals((Object)document5));
      
      Pattern pattern0 = Pattern.compile("br", 62);
      assertEquals("br", pattern0.pattern());
      assertEquals(62, pattern0.flags());
      assertEquals("br", pattern0.toString());
      assertNotNull(pattern0);
      
      Elements elements1 = document0.getElementsMatchingOwnText(pattern0);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(document0, document8);
      assertSame(document0, document2);
      assertNotSame(document0, document7);
      assertSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertNotSame(elements1, elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("br", pattern0.pattern());
      assertEquals(62, pattern0.flags());
      assertEquals("br", pattern0.toString());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      
      Element element3 = document3.firstElementSibling();
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(document0, document8);
      assertSame(document0, document2);
      assertNotSame(document0, document7);
      assertSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertNotSame(document2, document8);
      assertSame(document2, document6);
      assertNotSame(document2, document7);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document3, document4);
      assertSame(document3, document6);
      assertNotSame(document3, document1);
      assertNotSame(document3, document8);
      assertNotSame(document3, document7);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertNotSame(element3, element0);
      assertNotSame(element3, element2);
      assertNotSame(element3, element1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("e+&R~_A>l-", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("e+&R~_A>l-", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(2, element3.childNodeSize());
      assertEquals("html", element3.nodeName());
      assertEquals(0, element3.siblingIndex());
      assertTrue(element3.isBlock());
      assertEquals("html", element3.tagName());
      assertEquals("e+&R~_A>l-", element3.baseUri());
      assertTrue(element3.hasParent());
      assertNotNull(element3);
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document8));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document8));
      assertFalse(document3.equals((Object)document7));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element1));
      
      boolean boolean3 = document4.hasClass("%");
      assertFalse(boolean3);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(document0, document8);
      assertSame(document0, document2);
      assertNotSame(document0, document7);
      assertSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertNotSame(document1, document3);
      assertSame(document1, document7);
      assertNotSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document6);
      assertNotSame(document1, document8);
      assertNotSame(document1, document5);
      assertSame(document4, document6);
      assertNotSame(document4, document1);
      assertNotSame(document4, document7);
      assertSame(document4, document5);
      assertNotSame(document4, document8);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("e+&R~_A>l-", document4.location());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document8));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document7));
      assertFalse(document4.equals((Object)document8));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("</", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("</", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      Elements elements0 = document2.nextElementSiblings();
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      Document document4 = new Document("b6hvH$Vs*i]cIc");
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("b6hvH$Vs*i]cIc", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("b6hvH$Vs*i]cIc", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.childNodeSize());
      assertNotNull(document4);
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      
      Document document5 = (Document)document2.appendTo(document4);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document5);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document5);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotSame(document5, document1);
      assertSame(document5, document0);
      assertNotSame(document5, document4);
      assertSame(document5, document2);
      assertNotSame(document5, document3);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("b6hvH$Vs*i]cIc", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("b6hvH$Vs*i]cIc", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals("</", document5.baseUri());
      assertEquals("</", document5.location());
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertTrue(document5.hasParent());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      
      Document document6 = (Document)document5.toggleClass("ljc");
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document2, document6);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document5);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document6);
      assertNotSame(document5, document1);
      assertSame(document5, document0);
      assertNotSame(document5, document4);
      assertSame(document5, document6);
      assertSame(document5, document2);
      assertNotSame(document5, document3);
      assertSame(document6, document2);
      assertSame(document6, document5);
      assertNotSame(document6, document3);
      assertNotSame(document6, document1);
      assertNotSame(document6, document4);
      assertSame(document6, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("b6hvH$Vs*i]cIc", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("b6hvH$Vs*i]cIc", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals("</", document5.baseUri());
      assertEquals("</", document5.location());
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertTrue(document5.hasParent());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.isBlock());
      assertEquals(2, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(0, document6.siblingIndex());
      assertEquals("</", document6.baseUri());
      assertEquals("</", document6.location());
      assertEquals("#document", document6.nodeName());
      assertEquals("#root", document6.tagName());
      assertTrue(document6.hasParent());
      assertNotNull(document6);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document5));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document4));
      
      String string0 = document2.baseUri();
      assertEquals("</", string0);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document2, document6);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      
      boolean boolean0 = document2.hasClass("b6hvH$Vs*i]cIc");
      assertFalse(boolean0);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document2, document6);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document7 = document2.quirksMode(document_QuirksMode0);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document7);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document2, document6);
      assertSame(document2, document7);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document7, document2);
      assertNotSame(document7, document4);
      assertNotSame(document7, document1);
      assertNotSame(document7, document3);
      assertSame(document7, document0);
      assertSame(document7, document6);
      assertSame(document7, document5);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document7.isBlock());
      assertEquals("#document", document7.nodeName());
      assertTrue(document7.hasParent());
      assertEquals(Document.QuirksMode.quirks, document7.quirksMode());
      assertEquals("</", document7.baseUri());
      assertEquals(0, document7.siblingIndex());
      assertEquals("#root", document7.tagName());
      assertEquals("</", document7.location());
      assertEquals(2, document7.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertNotNull(document7);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document3));
      
      Elements elements1 = document7.getElementsByAttributeValueContaining("yG#y", "%");
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document7);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document2, document6);
      assertSame(document2, document7);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document7, document2);
      assertNotSame(document7, document4);
      assertNotSame(document7, document1);
      assertNotSame(document7, document3);
      assertSame(document7, document0);
      assertSame(document7, document6);
      assertSame(document7, document5);
      assertNotSame(elements1, elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document7.isBlock());
      assertEquals("#document", document7.nodeName());
      assertTrue(document7.hasParent());
      assertEquals(Document.QuirksMode.quirks, document7.quirksMode());
      assertEquals("</", document7.baseUri());
      assertEquals(0, document7.siblingIndex());
      assertEquals("#root", document7.tagName());
      assertEquals("</", document7.location());
      assertEquals(2, document7.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document3));
      assertTrue(elements1.equals((Object)elements0));
      
      String string1 = document0.className();
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document7);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(string1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = document0.data();
      assertEquals("", string2);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document7);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(string2);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Elements elements2 = document0.getAllElements();
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document7);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(8, elements2.size());
      assertFalse(elements2.isEmpty());
      assertNotNull(elements2);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      
      Elements elements3 = document0.getElementsByAttributeValue("ljc", "s+");
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document7);
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(elements3);
      assertFalse(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements0));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      
      Elements elements4 = document0.previousElementSiblings();
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document7);
      assertNotSame(elements4, elements3);
      assertNotSame(elements4, elements1);
      assertNotSame(elements4, elements0);
      assertNotSame(elements4, elements2);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, elements4.size());
      assertTrue(elements4.isEmpty());
      assertNotNull(elements4);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements4.equals((Object)elements0));
      assertTrue(elements4.equals((Object)elements3));
      assertFalse(elements4.equals((Object)elements2));
      assertTrue(elements4.equals((Object)elements1));
      
      List<Node> list0 = document5.ensureChildNodes();
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document7);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document2, document6);
      assertSame(document2, document7);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document5);
      assertNotSame(document4, document7);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document6);
      assertNotSame(document5, document1);
      assertSame(document5, document7);
      assertSame(document5, document0);
      assertNotSame(document5, document4);
      assertSame(document5, document6);
      assertSame(document5, document2);
      assertNotSame(document5, document3);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("b6hvH$Vs*i]cIc", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("b6hvH$Vs*i]cIc", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals("</", document5.baseUri());
      assertEquals("</", document5.location());
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.quirks, document5.quirksMode());
      assertTrue(document5.hasParent());
      assertFalse(document5.isBlock());
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document5));
      assertFalse(document4.equals((Object)document7));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document6));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      
      Elements elements5 = document1.getElementsMatchingOwnText("s+");
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document7);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document7);
      assertNotSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document1, document5);
      assertNotSame(document1, document6);
      assertNotSame(elements5, elements1);
      assertNotSame(elements5, elements2);
      assertNotSame(elements5, elements4);
      assertNotSame(elements5, elements0);
      assertNotSame(elements5, elements3);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, elements5.size());
      assertTrue(elements5.isEmpty());
      assertNotNull(elements5);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document6));
      assertFalse(elements5.equals((Object)elements2));
      assertTrue(elements5.equals((Object)elements4));
      assertTrue(elements5.equals((Object)elements3));
      assertTrue(elements5.equals((Object)elements0));
      assertTrue(elements5.equals((Object)elements1));
      
      String string3 = document2.cssSelector();
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document7);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document2, document6);
      assertSame(document2, document7);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(string3);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      // Undeclared exception!
      try { 
        parser0.parseInput((Reader) pipedReader0, "s+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("pVSe-y^>`\"q7", parseSettings0);
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals("pVSe-y^>`\"q7", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("pVSe-y^>`\"q7", tag0.toString());
      assertNotNull(tag0);
      
      FormElement formElement0 = new FormElement(tag0, "yc:{9Q.|D83d+@6fZJ", (Attributes) null);
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals("pVSe-y^>`\"q7", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("pVSe-y^>`\"q7", tag0.toString());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("pVSe-y^>`\"q7", formElement0.nodeName());
      assertEquals("pVSe-y^>`\"q7", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertNotNull(formElement0);
      
      Document document0 = Parser.parse("-}hJudcG'k9", "yc:{9Q.|D83d+@6fZJ");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      FormElement formElement1 = formElement0.addElement(document0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals("pVSe-y^>`\"q7", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("pVSe-y^>`\"q7", tag0.toString());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("pVSe-y^>`\"q7", formElement0.nodeName());
      assertEquals("pVSe-y^>`\"q7", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("pVSe-y^>`\"q7", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("pVSe-y^>`\"q7", formElement1.tagName());
      assertFalse(formElement1.hasParent());
      assertNotNull(formElement1);
      
      Element element0 = formElement1.prepend("");
      assertSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, element0);
      assertSame(formElement1, formElement0);
      assertSame(element0, formElement0);
      assertSame(element0, formElement1);
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals("pVSe-y^>`\"q7", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("pVSe-y^>`\"q7", tag0.toString());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("pVSe-y^>`\"q7", formElement0.nodeName());
      assertEquals("pVSe-y^>`\"q7", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("pVSe-y^>`\"q7", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("pVSe-y^>`\"q7", formElement1.tagName());
      assertFalse(formElement1.hasParent());
      assertFalse(element0.hasParent());
      assertEquals("pVSe-y^>`\"q7", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("pVSe-y^>`\"q7", element0.tagName());
      assertNotNull(element0);
      
      formElement1.reparentChild(document0);
      assertSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, element0);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals("pVSe-y^>`\"q7", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("pVSe-y^>`\"q7", tag0.toString());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("pVSe-y^>`\"q7", formElement0.nodeName());
      assertEquals("pVSe-y^>`\"q7", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("pVSe-y^>`\"q7", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("pVSe-y^>`\"q7", formElement1.tagName());
      assertFalse(formElement1.hasParent());
      
      int int0 = formElement0.elementSiblingIndex();
      assertEquals(0, int0);
      assertSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals("pVSe-y^>`\"q7", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("pVSe-y^>`\"q7", tag0.toString());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("pVSe-y^>`\"q7", formElement0.nodeName());
      assertEquals("pVSe-y^>`\"q7", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(0);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertNotNull(document_OutputSettings2);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      
      Document.OutputSettings document_OutputSettings3 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertNotNull(document_OutputSettings3);
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      
      String string0 = formElement1.html();
      assertEquals("", string0);
      assertSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, element0);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals("pVSe-y^>`\"q7", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("pVSe-y^>`\"q7", tag0.toString());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("pVSe-y^>`\"q7", formElement0.nodeName());
      assertEquals("pVSe-y^>`\"q7", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("pVSe-y^>`\"q7", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("pVSe-y^>`\"q7", formElement1.tagName());
      assertFalse(formElement1.hasParent());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":not%s", ":not%s");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":not%s", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":not%s", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("Sdcpd,+007^'yMO!");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":not%s", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":not%s", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(":not%s", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(":not%s", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      String string0 = document0.baseUri();
      assertEquals(":not%s", string0);
      assertSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":not%s", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":not%s", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(string0);
      
      boolean boolean0 = document1.hasClass(":not%s");
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":not%s", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":not%s", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(":not%s", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(":not%s", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Elements elements0 = document0.getElementsByAttributeValueContaining(":not%s", ":not%s");
      assertSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":not%s", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":not%s", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string1 = document1.className();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":not%s", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":not%s", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(":not%s", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(":not%s", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Document document2 = (Document)document0.appendText("Sdcpd,+007^'yMO!");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":not%s", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":not%s", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(":not%s", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(":not%s", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      
      boolean boolean1 = Element.preserveWhitespace(document0);
      assertFalse(boolean1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":not%s", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":not%s", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = document1.hasText();
      assertTrue(boolean2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":not%s", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":not%s", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(":not%s", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(":not%s", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Document document3 = document0.clone();
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":not%s", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":not%s", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(":not%s", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals(2, document3.childNodeSize());
      assertEquals(":not%s", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Element element0 = document3.appendElement("V_GD{ld8 bS");
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":not%s", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":not%s", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertEquals(":not%s", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals(":not%s", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("v_gd{ld8 bs", element0.tagName());
      assertEquals(":not%s", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("v_gd{ld8 bs", element0.nodeName());
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Attributes attributes0 = element0.attributes();
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":not%s", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":not%s", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertEquals(":not%s", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals(":not%s", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("v_gd{ld8 bs", element0.tagName());
      assertEquals(":not%s", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("v_gd{ld8 bs", element0.nodeName());
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Element element1 = element0.prepend("V_GD{ld8 bS");
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":not%s", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":not%s", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertEquals(":not%s", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals(":not%s", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("v_gd{ld8 bs", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(":not%s", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("v_gd{ld8 bs", element0.nodeName());
      assertEquals("v_gd{ld8 bs", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("v_gd{ld8 bs", element1.nodeName());
      assertEquals(2, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(":not%s", element1.baseUri());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      document0.nodelistChanged();
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":not%s", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":not%s", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.equals((Object)document3));
      
      Pattern pattern0 = Pattern.compile("Sdcpd,+007^'yMO!", 840);
      assertEquals("Sdcpd,+007^'yMO!", pattern0.toString());
      assertEquals("Sdcpd,+007^'yMO!", pattern0.pattern());
      assertEquals(840, pattern0.flags());
      assertNotNull(pattern0);
      
      Elements elements1 = element1.siblingElements();
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(elements1, elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":not%s", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":not%s", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertEquals(":not%s", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals(":not%s", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("v_gd{ld8 bs", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(":not%s", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("v_gd{ld8 bs", element0.nodeName());
      assertEquals("v_gd{ld8 bs", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("v_gd{ld8 bs", element1.nodeName());
      assertEquals(2, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(":not%s", element1.baseUri());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(elements1.equals((Object)elements0));
      
      Elements elements2 = document3.getElementsByAttributeValueMatching(".x2j>[4#jG'YExGt0&i", ":not%s");
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":not%s", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":not%s", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertEquals(":not%s", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals(":not%s", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertNotNull(elements2);
      assertTrue(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("d'AtbtKC>ug", parseSettings0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertNotNull(tag0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FormElement formElement0 = new FormElement(tag0, "-}hJudcG'k9", (Attributes) null);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertNotNull(formElement0);
      
      FormElement formElement1 = formElement0.addElement((Element) null);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertNotNull(formElement1);
      
      Element element0 = formElement1.prepend("d'AtbtKC>ug");
      assertSame(formElement0, formElement1);
      assertSame(formElement0, element0);
      assertSame(formElement1, formElement0);
      assertSame(formElement1, element0);
      assertSame(element0, formElement0);
      assertSame(element0, formElement1);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(1, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("-}hJudcG'k9", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("d'AtbtKC>ug", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("d'AtbtKC>ug", element0.nodeName());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      formElement1.reparentChild(formElement0);
      assertSame(formElement0, formElement1);
      assertSame(formElement0, element0);
      assertSame(formElement1, formElement0);
      assertSame(formElement1, element0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertTrue(formElement0.hasParent());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertEquals(1, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertTrue(formElement1.hasParent());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      
      int int0 = formElement1.elementSiblingIndex();
      assertEquals(0, int0);
      assertSame(formElement0, formElement1);
      assertSame(formElement0, element0);
      assertSame(formElement1, formElement0);
      assertSame(formElement1, element0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertTrue(formElement0.hasParent());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertEquals(1, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertTrue(formElement1.hasParent());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(665);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(665, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(665, document_OutputSettings2.indentAmount());
      assertNotNull(document_OutputSettings2);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      
      // Undeclared exception!
      try { 
        element0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Elements elements0 = document2.nextElementSiblings();
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      Element element0 = new Element("</");
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Document document4 = (Document)document2.appendTo(element0);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("</", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(2, document4.childNodeSize());
      assertEquals("</", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      
      Document document5 = (Document)document4.toggleClass("ljc");
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document4, document0);
      assertSame(document4, document5);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertNotSame(document5, document1);
      assertSame(document5, document4);
      assertSame(document5, document2);
      assertSame(document5, document0);
      assertNotSame(document5, document3);
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("</", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(2, document4.childNodeSize());
      assertEquals("</", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertEquals("</", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("</", document5.location());
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      
      String string0 = document0.baseUri();
      assertEquals("</", string0);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      
      boolean boolean0 = document3.hasClass("=H05C H,o");
      assertFalse(boolean0);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document5);
      assertNotSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document5);
      assertSame(document3, document1);
      assertNotSame(document3, document4);
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document4));
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document6 = new Document("</");
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.hasParent());
      assertEquals("</", document6.location());
      assertEquals("#root", document6.tagName());
      assertEquals(0, document6.childNodeSize());
      assertFalse(document6.isBlock());
      assertEquals("</", document6.baseUri());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("#document", document6.nodeName());
      assertNotNull(document6);
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document5));
      
      Document document7 = document6.quirksMode(document_QuirksMode0);
      assertNotSame(document6, document3);
      assertSame(document6, document7);
      assertNotSame(document6, document2);
      assertNotSame(document6, document0);
      assertNotSame(document6, document1);
      assertNotSame(document6, document4);
      assertNotSame(document6, document5);
      assertNotSame(document7, document4);
      assertSame(document7, document6);
      assertNotSame(document7, document1);
      assertNotSame(document7, document2);
      assertNotSame(document7, document3);
      assertNotSame(document7, document0);
      assertNotSame(document7, document5);
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertFalse(document6.hasParent());
      assertEquals("</", document6.location());
      assertEquals("#root", document6.tagName());
      assertEquals(0, document6.childNodeSize());
      assertFalse(document6.isBlock());
      assertEquals("</", document6.baseUri());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("#document", document6.nodeName());
      assertFalse(document7.isBlock());
      assertEquals(0, document7.siblingIndex());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document7.quirksMode());
      assertEquals("#document", document7.nodeName());
      assertEquals(0, document7.childNodeSize());
      assertEquals("</", document7.location());
      assertEquals("#root", document7.tagName());
      assertEquals("</", document7.baseUri());
      assertFalse(document7.hasParent());
      assertNotNull(document7);
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document5));
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(4297);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(4297, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(4297, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(4297, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(4297, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(4297, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(false);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(4297, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(4297, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(4297, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(4297, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertNotNull(document_OutputSettings3);
      
      Document document8 = document5.outputSettings(document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document8);
      assertNotSame(document0, document7);
      assertSame(document0, document5);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document8, document5);
      assertSame(document8, document0);
      assertNotSame(document8, document3);
      assertNotSame(document8, document1);
      assertNotSame(document8, document7);
      assertNotSame(document8, document6);
      assertSame(document8, document2);
      assertSame(document8, document4);
      assertNotSame(document2, document6);
      assertNotSame(document2, document3);
      assertSame(document2, document8);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertNotSame(document2, document7);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document4, document0);
      assertSame(document4, document5);
      assertSame(document4, document8);
      assertNotSame(document4, document1);
      assertNotSame(document4, document7);
      assertNotSame(document4, document3);
      assertNotSame(document4, document6);
      assertSame(document4, document2);
      assertNotSame(document5, document1);
      assertSame(document5, document4);
      assertSame(document5, document2);
      assertSame(document5, document0);
      assertSame(document5, document8);
      assertNotSame(document5, document6);
      assertNotSame(document5, document7);
      assertNotSame(document5, document3);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(4297, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(4297, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertEquals("#root", document8.tagName());
      assertEquals("</", document8.location());
      assertEquals("</", document8.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertEquals(2, document8.childNodeSize());
      assertFalse(document8.updateMetaCharsetElement());
      assertTrue(document8.hasParent());
      assertEquals("#document", document8.nodeName());
      assertEquals(0, document8.siblingIndex());
      assertFalse(document8.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("</", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(2, document4.childNodeSize());
      assertEquals("</", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertEquals("</", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("</", document5.location());
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(4297, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(4297, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertNotNull(document8);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document1));
      assertFalse(document8.equals((Object)document7));
      assertFalse(document8.equals((Object)document6));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document7));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document6));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document6));
      assertFalse(document5.equals((Object)document7));
      assertFalse(document5.equals((Object)document3));
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.indentAmount(4297);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(4297, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(4297, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings4.syntax());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(4297, document_OutputSettings4.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(4297, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(4297, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertNotNull(document_OutputSettings4);
      
      Tag tag0 = Tag.valueOf("ljc");
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertEquals("ljc", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("ljc", tag0.getName());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("g{<,[,jA]", false);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      
      Attributes attributes2 = attributes1.put("</", "g{<,[,jA]");
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      
      Attributes attributes3 = attributes2.clone();
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertNotNull(attributes3);
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes2));
      
      FormElement formElement0 = new FormElement(tag0, "=H05C H,o", attributes3);
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertEquals("ljc", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("ljc", tag0.getName());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("=H05C H,o", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals("ljc", formElement0.nodeName());
      assertEquals("ljc", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertNotNull(formElement0);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes2));
      
      Elements elements1 = formElement0.siblingElements();
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes2);
      assertNotSame(elements1, elements0);
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertEquals("ljc", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("ljc", tag0.getName());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("=H05C H,o", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals("ljc", formElement0.nodeName());
      assertEquals("ljc", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes2));
      assertTrue(elements1.equals((Object)elements0));
      
      Document.OutputSettings document_OutputSettings5 = new Document.OutputSettings();
      assertTrue(document_OutputSettings5.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings5.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings5.escapeMode());
      assertFalse(document_OutputSettings5.outline());
      assertEquals(1, document_OutputSettings5.indentAmount());
      assertNotNull(document_OutputSettings5);
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings3));
      
      String string1 = document2.html();
      assertEquals("<html>\n <head></head>\n <body>\n  &lt;/\n </body>\n</html>\n<#root>\n <html>\n  <head></head>\n  <body>\n   &lt;/\n  </body>\n </html>\n</#root>", string1);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document8);
      assertNotSame(document0, document7);
      assertSame(document0, document5);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document2, document6);
      assertNotSame(document2, document3);
      assertSame(document2, document8);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertNotSame(document2, document7);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertNotNull(string1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("(dt5&4sx", parseSettings0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("(dt5&4sx", tag0.toString());
      assertEquals("(dt5&4sx", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("AfterAttributeValue_quoted", "AfterAttributeValue_quoted");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      
      Attributes attributes2 = attributes1.put("3Fg%->\"~k4`-Y2} ", false);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      attributes2.forEach(consumer0);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      Attributes attributes3 = attributes2.clone();
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertNotNull(attributes3);
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
      
      FormElement formElement0 = new FormElement(tag0, "3Fg%->\"~k4`-Y2} ", attributes3);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("(dt5&4sx", tag0.toString());
      assertEquals("(dt5&4sx", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertEquals("3Fg%->\"~k4`-Y2} ", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("(dt5&4sx", formElement0.tagName());
      assertEquals("(dt5&4sx", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertNotNull(formElement0);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
      
      String string0 = formElement0.val();
      assertEquals("", string0);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("(dt5&4sx", tag0.toString());
      assertEquals("(dt5&4sx", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertEquals("3Fg%->\"~k4`-Y2} ", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("(dt5&4sx", formElement0.tagName());
      assertEquals("(dt5&4sx", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertNotNull(string0);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
      
      int int0 = formElement0.childNodeSize();
      assertEquals(0, int0);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("(dt5&4sx", tag0.toString());
      assertEquals("(dt5&4sx", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertEquals("3Fg%->\"~k4`-Y2} ", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("(dt5&4sx", formElement0.tagName());
      assertEquals("(dt5&4sx", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
      
      Set<String> set0 = formElement0.classNames();
      assertFalse(set0.contains("AfterAttributeValue_quoted"));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("(dt5&4sx", tag0.toString());
      assertEquals("(dt5&4sx", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertEquals("3Fg%->\"~k4`-Y2} ", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("(dt5&4sx", formElement0.tagName());
      assertEquals("(dt5&4sx", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
      
      Element element0 = formElement0.tagName("3Fg%->\"~k4`-Y2} ");
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertSame(formElement0, element0);
      assertSame(element0, formElement0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("(dt5&4sx", tag0.toString());
      assertEquals("(dt5&4sx", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertEquals("3Fg%->\"~k4`-Y2} ", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("3fg%->\"~k4`-y2}", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("3fg%->\"~k4`-y2}", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("3Fg%->\"~k4`-Y2} ", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("3fg%->\"~k4`-y2}", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("3fg%->\"~k4`-y2}", element0.nodeName());
      assertNotNull(element0);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
      
      Elements elements0 = formElement0.siblingElements();
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes2);
      assertSame(formElement0, element0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("(dt5&4sx", tag0.toString());
      assertEquals("(dt5&4sx", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertEquals("3Fg%->\"~k4`-Y2} ", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("3fg%->\"~k4`-y2}", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("3fg%->\"~k4`-y2}", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes2));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "9Pt{e~3b.RCS 37h";
      Document document0 = Parser.parseBodyFragmentRelaxed("9Pt{e~3b.RCS 37h", "9Pt{e~3b.RCS 37h");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("9Pt{e~3b.RCS 37h", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("9Pt{e~3b.RCS 37h", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document1 = Document.createShell("9Pt{e~3b.RCS 37h");
      assertNotSame(document1, document0);
      assertEquals("9Pt{e~3b.RCS 37h", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("9Pt{e~3b.RCS 37h", document1.baseUri());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document1.clone();
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals("9Pt{e~3b.RCS 37h", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("9Pt{e~3b.RCS 37h", document1.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("9Pt{e~3b.RCS 37h", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("9Pt{e~3b.RCS 37h", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(document2);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      CDataNode cDataNode0 = new CDataNode("*.:;\"TqJs#f^+LX");
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      DataNode dataNode0 = new DataNode("9Pt{e~3b.RCS 37h");
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      Document document3 = (Document)document2.appendChild(document0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("9Pt{e~3b.RCS 37h", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("9Pt{e~3b.RCS 37h", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("9Pt{e~3b.RCS 37h", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("9Pt{e~3b.RCS 37h", document1.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("9Pt{e~3b.RCS 37h", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("9Pt{e~3b.RCS 37h", document2.location());
      assertEquals("9Pt{e~3b.RCS 37h", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("9Pt{e~3b.RCS 37h", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) cDataNode0;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) dataNode0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document1;
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Element element0 = new Element(".");
      assertEquals(".", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(".", element0.nodeName());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      Element element1 = element0.appendText(".");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(".", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(".", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals(".", element1.tagName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals(".", element1.nodeName());
      assertNotNull(element1);
      
      String string0 = element1.data();
      assertEquals("", string0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(".", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(".", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals(".", element1.tagName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals(".", element1.nodeName());
      assertNotNull(string0);
      
      Elements elements0 = element0.nextElementSiblings();
      assertSame(element0, element1);
      assertEquals(".", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(".", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element2 = element1.attr(".", false);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertEquals(".", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(".", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals(".", element1.tagName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals(".", element1.nodeName());
      assertEquals(".", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals(".", element2.tagName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals(1, element2.childNodeSize());
      assertFalse(element2.hasParent());
      assertNotNull(element2);
      
      Elements elements1 = element1.getElementsMatchingOwnText(".");
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertNotSame(elements1, elements0);
      assertEquals(".", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(".", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals(".", element1.tagName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals(".", element1.nodeName());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = "org.jsoup.nodes.Element";
      // Undeclared exception!
      try { 
        element0.attr((String) null, "org.jsoup.nodes.Element");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("textarea");
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.isFormListed());
      assertTrue(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.formatAsBlock());
      assertEquals("textarea", tag0.toString());
      assertTrue(tag0.isInline());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "d'atbtkc>u+", attributes0);
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.isFormListed());
      assertTrue(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.formatAsBlock());
      assertEquals("textarea", tag0.toString());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertEquals("textarea", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("textarea", formElement0.tagName());
      assertEquals("d'atbtkc>u+", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertNotNull(formElement0);
      
      String string0 = formElement0.val();
      assertEquals("", string0);
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.isFormListed());
      assertTrue(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.formatAsBlock());
      assertEquals("textarea", tag0.toString());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertEquals("textarea", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("textarea", formElement0.tagName());
      assertEquals("d'atbtkc>u+", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertNotNull(string0);
      
      List<TextNode> list0 = formElement0.textNodes();
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.isFormListed());
      assertTrue(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.formatAsBlock());
      assertEquals("textarea", tag0.toString());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertEquals("textarea", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("textarea", formElement0.tagName());
      assertEquals("d'atbtkc>u+", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Elements elements0 = formElement0.getElementsContainingOwnText("Q<Gf2<L`");
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.isFormListed());
      assertTrue(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.formatAsBlock());
      assertEquals("textarea", tag0.toString());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertEquals("textarea", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("textarea", formElement0.tagName());
      assertEquals("d'atbtkc>u+", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "DoctypeSystemIdentifier_doubleQuoted";
      Document document0 = Parser.parseBodyFragment("DoctypeSystemIdentifier_doubleQuoted", "DoctypeSystemIdentifier_doubleQuoted");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("DoctypeSystemIdentifier_doubleQuoted", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("DoctypeSystemIdentifier_doubleQuoted", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("DoctypeSystemIdentifier_doubleQuoted", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("DoctypeSystemIdentifier_doubleQuoted", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("DoctypeSystemIdentifier_doubleQuoted", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("DoctypeSystemIdentifier_doubleQuoted", document1.baseUri());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Element element0 = document0.appendElement("DoctypeSystemIdentifier_doubleQuoted");
      assertNotSame(document0, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("DoctypeSystemIdentifier_doubleQuoted", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("DoctypeSystemIdentifier_doubleQuoted", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("doctypesystemidentifier_doublequoted", element0.tagName());
      assertEquals("doctypesystemidentifier_doublequoted", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("DoctypeSystemIdentifier_doubleQuoted", element0.baseUri());
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document1));
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotSame(document0, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("DoctypeSystemIdentifier_doubleQuoted", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("DoctypeSystemIdentifier_doubleQuoted", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document1));
      
      CDataNode cDataNode0 = new CDataNode("i;'M];/?5`.*pKe^<Lb");
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("i;'M];/?5`.*pKe^<Lb", true);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertNotNull(attributes1);
      
      Attributes attributes2 = attributes1.clone();
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertNotNull(attributes2);
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("%~[4Nj0cDi$s", parseSettings0);
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("%~[4Nj0cDi$s", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertEquals("%~[4Nj0cDi$s", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertNotNull(tag0);
      
      FormElement formElement0 = new FormElement(tag0, "%~[4Nj0cDi$s", attributes2);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("%~[4Nj0cDi$s", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertEquals("%~[4Nj0cDi$s", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("%~[4Nj0cDi$s", formElement0.tagName());
      assertEquals("%~[4Nj0cDi$s", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("%~[4Nj0cDi$s", formElement0.nodeName());
      assertNotNull(formElement0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      
      String string1 = formElement0.val();
      assertEquals("", string1);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("%~[4Nj0cDi$s", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertEquals("%~[4Nj0cDi$s", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("%~[4Nj0cDi$s", formElement0.tagName());
      assertEquals("%~[4Nj0cDi$s", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("%~[4Nj0cDi$s", formElement0.nodeName());
      assertNotNull(string1);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(string1.equals((Object)string0));
      
      Element element1 = null;
      try {
        element1 = new Element(tag0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = "U4)9T[rb0T+";
      String string1 = "AWDq%=I";
      Document document0 = Parser.parseBodyFragment("U4)9T[rb0T+", "AWDq%=I");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("AWDq%=I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("AWDq%=I", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("AWDq%=I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("AWDq%=I", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("AWDq%=I", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("AWDq%=I", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Element element0 = document0.head();
      assertNotSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("AWDq%=I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("AWDq%=I", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("AWDq%=I", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document1));
      
      Elements elements0 = element0.getElementsByAttribute("AWDq%=I");
      assertNotSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("AWDq%=I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("AWDq%=I", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("AWDq%=I", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      
      String string2 = element0.text();
      assertEquals("", string2);
      assertNotSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("AWDq%=I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("AWDq%=I", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("AWDq%=I", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertNotNull(string2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Element element1 = (Element)element0.removeAttr("U4)9T[rb0T+");
      assertNotSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("AWDq%=I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("AWDq%=I", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("AWDq%=I", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("AWDq%=I", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document1));
      
      // Undeclared exception!
      try { 
        element0.replaceChild(document1, element1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("d'AtbtKC>ug", parseSettings0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertNotNull(tag0);
      
      FormElement formElement0 = new FormElement(tag0, "-}hJudcG'k9", (Attributes) null);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertNotNull(formElement0);
      
      FormElement formElement1 = formElement0.addElement((Element) null);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertNotNull(formElement1);
      
      Element element0 = formElement1.prepend("d'AtbtKC>ug");
      assertSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, element0);
      assertSame(formElement1, formElement0);
      assertSame(element0, formElement1);
      assertSame(element0, formElement0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("-}hJudcG'k9", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("d'AtbtKC>ug", element0.tagName());
      assertEquals("d'AtbtKC>ug", element0.nodeName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      formElement1.reparentChild(formElement0);
      assertSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, element0);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertTrue(formElement0.hasParent());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertEquals(1, formElement1.childNodeSize());
      assertTrue(formElement1.hasParent());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      
      int int0 = formElement1.elementSiblingIndex();
      assertEquals(0, int0);
      assertSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, element0);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertTrue(formElement0.hasParent());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertEquals(1, formElement1.childNodeSize());
      assertTrue(formElement1.hasParent());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      
      Element element1 = new Element(tag0, "-}hJudcG'k9", (Attributes) null);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("-}hJudcG'k9", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("d'AtbtKC>ug", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("d'AtbtKC>ug", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("d'AtbtKC>ug", "l<UqU-e1|L");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("l<UqU-e1|L", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("l<UqU-e1|L", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("l<UqU-e1|L", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("l<UqU-e1|L", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("l<UqU-e1|L", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("l<UqU-e1|L", document1.location());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      Document document2 = document1.outputSettings(document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("l<UqU-e1|L", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("l<UqU-e1|L", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("l<UqU-e1|L", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("l<UqU-e1|L", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("l<UqU-e1|L", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("l<UqU-e1|L", document2.location());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document3 = document2.parser(parser0);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("l<UqU-e1|L", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("l<UqU-e1|L", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("l<UqU-e1|L", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("l<UqU-e1|L", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("l<UqU-e1|L", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("l<UqU-e1|L", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("l<UqU-e1|L", document3.location());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("l<UqU-e1|L", document3.baseUri());
      assertNotNull(document3);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      
      Document document4 = (Document)document3.prepend("l<UqU-e1|L");
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("l<UqU-e1|L", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("l<UqU-e1|L", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("l<UqU-e1|L", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals("l<UqU-e1|L", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("l<UqU-e1|L", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("l<UqU-e1|L", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("l<UqU-e1|L", document3.location());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("l<UqU-e1|L", document3.baseUri());
      assertEquals(2, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals("l<UqU-e1|L", document4.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("l<UqU-e1|L", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertNotNull(document4);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      
      Document document5 = Document.createShell("br");
      assertNotSame(document5, document4);
      assertNotSame(document5, document2);
      assertNotSame(document5, document0);
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("br", document5.location());
      assertEquals("#root", document5.tagName());
      assertEquals("br", document5.baseUri());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertNotNull(document5);
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      
      document5.nodelistChanged();
      assertNotSame(document5, document4);
      assertNotSame(document5, document2);
      assertNotSame(document5, document0);
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("br", document5.location());
      assertEquals("#root", document5.tagName());
      assertEquals("br", document5.baseUri());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      
      Pattern pattern0 = Pattern.compile("l<UqU-e1|L", 0);
      assertEquals("l<UqU-e1|L", pattern0.toString());
      assertEquals("l<UqU-e1|L", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertNotNull(pattern0);
      
      // Undeclared exception!
      try { 
        document5.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.siblingIndex());
      assertEquals("</", document3.location());
      assertEquals("#root", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("</", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      Elements elements0 = document2.nextElementSiblings();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      
      Element element0 = new Element("</");
      assertFalse(element0.hasParent());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Document document4 = (Document)document2.appendTo(element0);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertSame(document4, document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertTrue(document4.hasParent());
      assertEquals("</", document4.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals(2, document4.childNodeSize());
      assertEquals("</", document4.baseUri());
      assertFalse(document4.isBlock());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      
      Document document5 = (Document)document4.toggleClass("ljc");
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
      assertSame(document4, document5);
      assertNotSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document5, document4);
      assertNotSame(document5, document1);
      assertSame(document5, document2);
      assertSame(document5, document0);
      assertNotSame(document5, document3);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertTrue(document4.hasParent());
      assertEquals("</", document4.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals(2, document4.childNodeSize());
      assertEquals("</", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("</", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertEquals(2, document5.childNodeSize());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("</", document5.location());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      
      String string0 = document2.baseUri();
      assertEquals("</", string0);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      
      boolean boolean0 = document2.hasClass("b6hvH$Vs*i]cIc");
      assertFalse(boolean0);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document6 = document2.quirksMode(document_QuirksMode0);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document2, document6);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document6, document4);
      assertSame(document6, document5);
      assertNotSame(document6, document1);
      assertNotSame(document6, document3);
      assertSame(document6, document2);
      assertSame(document6, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document6.nodeName());
      assertEquals(0, document6.siblingIndex());
      assertTrue(document6.hasParent());
      assertEquals(2, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("</", document6.location());
      assertEquals("#root", document6.tagName());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertEquals("</", document6.baseUri());
      assertFalse(document6.isBlock());
      assertNotNull(document6);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      
      Element element1 = document0.nextElementSibling();
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertNull(element1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      
      Element element2 = (Element)document6.unwrap();
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document2, document6);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document6, document4);
      assertSame(document6, document5);
      assertNotSame(document6, document1);
      assertNotSame(document6, document3);
      assertSame(document6, document2);
      assertSame(document6, document0);
      assertNotSame(element2, element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document6.nodeName());
      assertEquals(2, document6.siblingIndex());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("</", document6.location());
      assertEquals("#root", document6.tagName());
      assertEquals(0, document6.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertFalse(document6.hasParent());
      assertEquals("</", document6.baseUri());
      assertFalse(document6.isBlock());
      assertEquals("html", element2.tagName());
      assertEquals("</", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals(2, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals("html", element2.nodeName());
      assertNotNull(element2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      assertFalse(element2.equals((Object)element0));
      
      Elements elements1 = document6.getElementsByAttributeValueContaining("yG#y", "%");
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document2, document6);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document6, document4);
      assertSame(document6, document5);
      assertNotSame(document6, document1);
      assertNotSame(document6, document3);
      assertSame(document6, document2);
      assertSame(document6, document0);
      assertNotSame(elements1, elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document6.nodeName());
      assertEquals(2, document6.siblingIndex());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("</", document6.location());
      assertEquals("#root", document6.tagName());
      assertEquals(0, document6.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertFalse(document6.hasParent());
      assertEquals("</", document6.baseUri());
      assertFalse(document6.isBlock());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      assertTrue(elements1.equals((Object)elements0));
      
      String string1 = document0.className();
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(string1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(string1.equals((Object)string0));
      
      List<TextNode> list0 = element0.textNodes();
      assertNotSame(element0, element2);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertNotNull(list0);
      assertFalse(element0.equals((Object)element2));
      
      String string2 = document0.data();
      assertEquals("", string2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(string2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Elements elements2 = document0.getAllElements();
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(1, elements2.size());
      assertFalse(elements2.isEmpty());
      assertNotNull(elements2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      
      Elements elements3 = document0.getElementsByAttributeValue("ljc", "s+");
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertNotNull(elements3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements0));
      assertFalse(elements3.equals((Object)elements2));
      
      Elements elements4 = document0.previousElementSiblings();
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertNotSame(elements4, elements2);
      assertNotSame(elements4, elements0);
      assertNotSame(elements4, elements3);
      assertNotSame(elements4, elements1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, elements4.size());
      assertTrue(elements4.isEmpty());
      assertNotNull(elements4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertTrue(elements4.equals((Object)elements3));
      assertFalse(elements4.equals((Object)elements2));
      assertTrue(elements4.equals((Object)elements0));
      assertTrue(elements4.equals((Object)elements1));
      
      List<Node> list1 = document4.ensureChildNodes();
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document2, document6);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(element0, element2);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
      assertSame(document4, document5);
      assertNotSame(document4, document1);
      assertSame(document4, document6);
      assertSame(document4, document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.location());
      assertEquals("#document", document4.nodeName());
      assertEquals(2, document4.siblingIndex());
      assertEquals(0, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("</", document4.baseUri());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertNotNull(list1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(element0.equals((Object)element2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      
      Elements elements5 = document1.getElementsMatchingOwnText("s+");
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertNotSame(document1, document6);
      assertNotSame(document1, document5);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document4);
      assertNotSame(elements5, elements4);
      assertNotSame(elements5, elements0);
      assertNotSame(elements5, elements1);
      assertNotSame(elements5, elements3);
      assertNotSame(elements5, elements2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertTrue(elements5.isEmpty());
      assertEquals(0, elements5.size());
      assertNotNull(elements5);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertTrue(elements5.equals((Object)elements0));
      assertTrue(elements5.equals((Object)elements3));
      assertTrue(elements5.equals((Object)elements4));
      assertTrue(elements5.equals((Object)elements1));
      assertFalse(elements5.equals((Object)elements2));
      
      String string3 = document2.cssSelector();
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document2, document6);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertNotNull(string3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      // Undeclared exception!
      try { 
        parser0.parseInput((Reader) pipedReader0, "s+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("d'AtbtKC>ug", parseSettings0);
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertNotNull(tag0);
      
      FormElement formElement0 = new FormElement(tag0, "-}hJudcG'k9", (Attributes) null);
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertNotNull(formElement0);
      
      FormElement formElement1 = formElement0.addElement((Element) null);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertNotNull(formElement1);
      
      Element element0 = formElement1.prepend("d'AtbtKC>ug");
      assertSame(formElement0, formElement1);
      assertSame(formElement0, element0);
      assertSame(formElement1, element0);
      assertSame(formElement1, formElement0);
      assertSame(element0, formElement1);
      assertSame(element0, formElement0);
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals("d'AtbtKC>ug", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("-}hJudcG'k9", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("d'AtbtKC>ug", element0.tagName());
      assertNotNull(element0);
      
      formElement1.reparentChild(formElement0);
      assertSame(formElement0, formElement1);
      assertSame(formElement0, element0);
      assertSame(formElement1, element0);
      assertSame(formElement1, formElement0);
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertTrue(formElement1.hasParent());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      
      int int0 = formElement1.elementSiblingIndex();
      assertEquals(0, int0);
      assertSame(formElement0, formElement1);
      assertSame(formElement0, element0);
      assertSame(formElement1, element0);
      assertSame(formElement1, formElement0);
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertTrue(formElement1.hasParent());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertNotNull(document_OutputSettings1);
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(665);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(665, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(665, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertNotNull(document_OutputSettings2);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      
      Document.OutputSettings document_OutputSettings3 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertNotNull(document_OutputSettings3);
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      
      // Undeclared exception!
      element0.html();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode("");
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      Document document1 = (Document)document0.appendChild(cDataNode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(cDataNode0.hasParent());
      assertEquals(1, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      boolean boolean0 = document1.hasText();
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(cDataNode0.hasParent());
      assertEquals(1, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      
      Elements elements0 = document1.getElementsMatchingText("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(cDataNode0.hasParent());
      assertEquals(1, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document2 = (Document)document0.attr("", false);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      
      Document document3 = (Document)document0.val("org.jsoup.nodes.Element");
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals("", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("", document3.location());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertNotNull(document3);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("9Pt{e~3b.RCS 3G7h", ": ");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(": ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode("S`4");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      Node node0 = cDataNode0.parent();
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNull(node0);
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(": ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(": ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(": ", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(": ", document1.baseUri());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Element element0 = document1.appendElement("head");
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(": ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(": ", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(": ", document1.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(": ", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      
      Element element1 = element0.prepend("yG#y");
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(": ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(": ", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(": ", document1.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(": ", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.tagName());
      assertEquals("head", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals(": ", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      
      document0.nodelistChanged();
      assertNotSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(": ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      
      Pattern pattern0 = Pattern.compile(".", 62);
      assertEquals(".", pattern0.pattern());
      assertEquals(62, pattern0.flags());
      assertEquals(".", pattern0.toString());
      assertNotNull(pattern0);
      
      Elements elements0 = document1.getElementsMatchingOwnText(pattern0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(": ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(": ", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(": ", document1.baseUri());
      assertEquals(".", pattern0.pattern());
      assertEquals(62, pattern0.flags());
      assertEquals(".", pattern0.toString());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      
      boolean boolean1 = element1.isBlock();
      assertTrue(boolean1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(": ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(": ", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(": ", document1.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(": ", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.tagName());
      assertEquals("head", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals(": ", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Tag tag0 = Tag.valueOf("<9zy BuR::G");
      assertEquals("<9zy BuR::G", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertEquals("<9zy BuR::G", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode("y:y5qmaIrV*}>r*Q");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      Element element0 = new Element(tag0, "<9zy BuR::G", attributes0);
      assertEquals("<9zy BuR::G", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertEquals("<9zy BuR::G", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("<9zy BuR::G", element0.tagName());
      assertEquals("<9zy BuR::G", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("<9zy BuR::G", element0.nodeName());
      assertNotNull(element0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      // Undeclared exception!
      try { 
        parser1.parseInput((Reader) pipedReader0, "df(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Document document0 = Document.createShell(" ~D*$b}&AJ;ys*%i");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(" ~D*$b}&AJ;ys*%i", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" ~D*$b}&AJ;ys*%i", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsContainingOwnText(" ~D*$b}&AJ;ys*%i");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(" ~D*$b}&AJ;ys*%i", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" ~D*$b}&AJ;ys*%i", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = "U4)9T[rb0T+";
      Document document0 = Parser.parseBodyFragment("U4)9T[rb0T+", "U4)9T[rb0T+");
      assertEquals("U4)9T[rb0T+", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("U4)9T[rb0T+", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("U4)9T[rb0T+", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("U4)9T[rb0T+", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("U4)9T[rb0T+", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("U4)9T[rb0T+", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Elements elements0 = document0.getElementsByAttribute("U4)9T[rb0T+");
      assertNotSame(document0, document1);
      assertEquals("U4)9T[rb0T+", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("U4)9T[rb0T+", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      
      String string1 = document1.text();
      assertEquals("U4)9T[rb0T+", string1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("U4)9T[rb0T+", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("U4)9T[rb0T+", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("U4)9T[rb0T+", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("U4)9T[rb0T+", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertNotNull(string1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertTrue(string1.equals((Object)string0));
      
      Document document2 = (Document)document0.removeAttr("U4)9T[rb0T+");
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals("U4)9T[rb0T+", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("U4)9T[rb0T+", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("U4)9T[rb0T+", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("U4)9T[rb0T+", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      // Undeclared exception!
      try { 
        document1.replaceChild(document1, document2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parse("e+&R~_A>l-", "e+&R~_A>l-");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("e+&R~_A>l-", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document0.appendTo(document2);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document3.baseUri());
      assertEquals("e+&R~_A>l-", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      
      Elements elements0 = document2.nextElementSiblings();
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Element element0 = new Element("e+&R~_A>l-");
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("e+&R~_A>l-", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("e+&R~_A>l-", element0.nodeName());
      assertNotNull(element0);
      
      Document document4 = (Document)document0.appendTo(document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document1, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("e+&R~_A>l-", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertTrue(document4.hasParent());
      assertEquals("e+&R~_A>l-", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document4.baseUri());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      
      Document document5 = (Document)document3.toggleClass("e+&R~_A>l-");
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document5);
      assertSame(document3, document4);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document5, document4);
      assertSame(document5, document3);
      assertNotSame(document5, document1);
      assertSame(document5, document2);
      assertSame(document5, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document3.baseUri());
      assertEquals("e+&R~_A>l-", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("e+&R~_A>l-", document5.baseUri());
      assertFalse(document5.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(1, document5.siblingIndex());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertEquals("e+&R~_A>l-", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document5.equals((Object)document1));
      
      String string0 = document0.baseUri();
      assertEquals("e+&R~_A>l-", string0);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document1));
      
      boolean boolean0 = document0.hasClass("e+&R~_A>l-");
      assertFalse(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.equals((Object)document1));
      
      Elements elements1 = document0.getElementsByAttributeValueContaining("%", "br");
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      
      String string1 = document3.className();
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document5);
      assertSame(document3, document4);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document3.baseUri());
      assertEquals("e+&R~_A>l-", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(string1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      
      Document document6 = (Document)document1.appendText("e+&R~_A>l-");
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertNotSame(document1, document2);
      assertSame(document1, document6);
      assertNotSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotSame(document6, document2);
      assertNotSame(document6, document5);
      assertNotSame(document6, document3);
      assertNotSame(document6, document4);
      assertSame(document6, document1);
      assertNotSame(document6, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(3, document1.childNodeSize());
      assertEquals("e+&R~_A>l-", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("e+&R~_A>l-", document6.baseUri());
      assertFalse(document6.isBlock());
      assertEquals(0, document6.siblingIndex());
      assertEquals("e+&R~_A>l-", document6.location());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(3, document6.childNodeSize());
      assertEquals("#document", document6.nodeName());
      assertNotNull(document6);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document0));
      
      boolean boolean1 = Element.preserveWhitespace(document2);
      assertFalse(boolean1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertNotSame(document2, document6);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document1));
      assertTrue(boolean1 == boolean0);
      
      CDataNode cDataNode0 = new CDataNode("e+&R~_A>l-");
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      String string2 = cDataNode0.getWholeText();
      assertEquals("e+&R~_A>l-", string2);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = "\\uHwN";
      // Undeclared exception!
      try { 
        document1.select(string3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '\\uHwN': unexpected token at '\\uHwN'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = "e+&R~_A>l-";
      Document document0 = Parser.parse("e+&R~_A>l-", "e+&R~_A>l-");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains(string0));
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Document document2 = (Document)document1.classNames(set0);
      assertFalse(set0.contains(string0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      DataNode dataNode0 = new DataNode("e+&R~_A>l-");
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      String string1 = "@k$.6xI6Neve]H{+n";
      // Undeclared exception!
      try { 
        document0.selectFirst("jzL'|4c\"7k|gD|");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'jzL'|4c\"7k|gD|': unexpected token at ''|4c\"7k|gD|'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertTrue(document3.hasParent());
      assertEquals("</", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Elements elements0 = document2.nextElementSiblings();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      Element element0 = new Element("</");
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.nodeName());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Document document4 = (Document)document2.appendTo(element0);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertSame(document4, document2);
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.nodeName());
      assertEquals("</", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("</", document4.location());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertEquals("</", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      
      Document document5 = (Document)document4.toggleClass("ljc");
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document5);
      assertNotSame(document5, document1);
      assertSame(document5, document0);
      assertSame(document5, document2);
      assertSame(document5, document4);
      assertNotSame(document5, document3);
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.nodeName());
      assertEquals("</", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("</", document4.location());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertEquals("</", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertFalse(document5.isBlock());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("</", document5.location());
      assertEquals(2, document5.childNodeSize());
      assertEquals("</", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#root", document5.tagName());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      
      String string0 = document2.baseUri();
      assertEquals("</", string0);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      boolean boolean0 = document2.hasClass("b6hvH$Vs*i]cIc");
      assertFalse(boolean0);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      String string1 = "%";
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document6 = document2.quirksMode(document_QuirksMode0);
      assertSame(document0, document6);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document2, document6);
      assertSame(document2, document5);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document6, document2);
      assertSame(document6, document5);
      assertNotSame(document6, document3);
      assertSame(document6, document0);
      assertNotSame(document6, document1);
      assertSame(document6, document4);
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(2, document6.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertEquals("</", document6.location());
      assertEquals("#root", document6.tagName());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertEquals("</", document6.baseUri());
      assertEquals(0, document6.siblingIndex());
      assertNotNull(document6);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document1));
      
      Document document7 = (Document)document3.tagName("ljc");
      assertSame(document0, document6);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document7);
      assertNotSame(document1, document6);
      assertNotSame(document1, document5);
      assertSame(document1, document7);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document4);
      assertSame(document2, document4);
      assertNotSame(document2, document7);
      assertSame(document2, document0);
      assertSame(document2, document6);
      assertSame(document2, document5);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document3, document4);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document7);
      assertNotSame(document3, document2);
      assertNotSame(document3, document5);
      assertNotSame(document3, document6);
      assertSame(document7, document3);
      assertNotSame(document7, document5);
      assertNotSame(document7, document2);
      assertSame(document7, document1);
      assertNotSame(document7, document0);
      assertNotSame(document7, document4);
      assertNotSame(document7, document6);
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ljc", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("ljc", document3.tagName());
      assertEquals("</", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertTrue(document3.hasParent());
      assertEquals("</", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(1, document7.siblingIndex());
      assertEquals("#document", document7.nodeName());
      assertEquals(1, document7.childNodeSize());
      assertTrue(document7.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertEquals("</", document7.location());
      assertEquals("ljc", document7.tagName());
      assertFalse(document7.isBlock());
      assertEquals("</", document7.baseUri());
      assertNotNull(document7);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document6));
      
      // Undeclared exception!
      try { 
        element0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("d'AtbtKC>ug", parseSettings0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertNotNull(tag0);
      
      FormElement formElement0 = new FormElement(tag0, "-}hJudcG'k9", (Attributes) null);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertNotNull(formElement0);
      
      FormElement formElement1 = formElement0.addElement((Element) null);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertNotNull(formElement1);
      
      Element element0 = formElement1.prepend("d'AtbtKC>ug");
      assertSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, element0);
      assertSame(formElement1, formElement0);
      assertSame(element0, formElement1);
      assertSame(element0, formElement0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("-}hJudcG'k9", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("d'AtbtKC>ug", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("d'AtbtKC>ug", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertNotNull(element0);
      
      formElement1.reparentChild(formElement0);
      assertSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, element0);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertTrue(formElement1.hasParent());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      
      int int0 = formElement1.elementSiblingIndex();
      assertEquals(0, int0);
      assertSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, element0);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertTrue(formElement1.hasParent());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      TextNode textNode0 = new TextNode("f'eT8Bm", "f'eT8Bm");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertNotNull(textNode0);
      
      String string0 = textNode0.getWholeText();
      assertEquals("f'eT8Bm", string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertNotNull(string0);
      
      String string1 = "textarea";
      Elements elements0 = element0.select("textarea");
      assertSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, element0);
      assertSame(formElement1, formElement0);
      assertSame(element0, formElement1);
      assertSame(element0, formElement0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertTrue(formElement1.hasParent());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("-}hJudcG'k9", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("d'AtbtKC>ug", element0.nodeName());
      assertEquals("d'AtbtKC>ug", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Tag tag1 = formElement1.tag();
      assertSame(tag0, tag1);
      assertSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, element0);
      assertSame(formElement1, formElement0);
      assertSame(tag1, tag0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertTrue(formElement1.hasParent());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertFalse(tag1.isData());
      assertEquals("d'AtbtKC>ug", tag1.toString());
      assertFalse(tag1.isBlock());
      assertTrue(tag1.isInline());
      assertFalse(tag1.preserveWhitespace());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.canContainBlock());
      assertEquals("d'AtbtKC>ug", tag1.getName());
      assertFalse(tag1.isFormSubmittable());
      assertNotNull(tag1);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors(58);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertNotNull(parser1);
      
      Parser parser2 = parser1.settings(parseSettings0);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertNotNull(parser2);
      
      Document document0 = parser2.parseInput("f'eT8Bm", "f'eT8Bm");
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("f'eT8Bm", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("f'eT8Bm", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("f'eT8Bm", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("f'eT8Bm", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("f'eT8Bm", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("f'eT8Bm", document1.baseUri());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertNotNull(document1);
      
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      assertEquals(0, charArray0.length);
      
      // Undeclared exception!
      try { 
        document0.outerHtml((Appendable) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragment("hJg1D<;&h '})5@?|", "");
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      Element element0 = document1.previousElementSibling();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertNull(element0);
      
      String string1 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document2 = Document.createShell("hJg1D<;&h '})5@?|");
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("hJg1D<;&h '})5@?|", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("hJg1D<;&h '})5@?|", document2.location());
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      // Undeclared exception!
      try { 
        document2.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("</", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      Elements elements0 = document2.nextElementSiblings();
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      Element element0 = new Element("</");
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("</", element0.nodeName());
      assertNotNull(element0);
      
      Document document4 = (Document)document2.appendTo(element0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("</", element0.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals(2, document4.childNodeSize());
      assertEquals("</", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.location());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      
      Document document5 = (Document)document4.toggleClass("ljc");
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document5);
      assertSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertSame(document5, document0);
      assertSame(document5, document4);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("</", element0.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals(2, document4.childNodeSize());
      assertEquals("</", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.location());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("</", document5.location());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertTrue(document5.hasParent());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#root", document5.tagName());
      assertEquals(2, document5.childNodeSize());
      assertEquals("</", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      
      String string0 = document2.baseUri();
      assertEquals("</", string0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      boolean boolean0 = document2.hasClass("b6hvH$Vs*i]cIc");
      assertFalse(boolean0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document6 = document2.quirksMode(document_QuirksMode0);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document6);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document6, document0);
      assertSame(document6, document5);
      assertNotSame(document6, document3);
      assertNotSame(document6, document1);
      assertSame(document6, document2);
      assertSame(document6, document4);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document6.tagName());
      assertEquals("</", document6.location());
      assertEquals("</", document6.baseUri());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertEquals(0, document6.siblingIndex());
      assertEquals(2, document6.childNodeSize());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertTrue(document6.hasParent());
      assertNotNull(document6);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document1));
      
      Elements elements1 = document6.getElementsByAttributeValueContaining("yG#y", "%");
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document6);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document6, document0);
      assertSame(document6, document5);
      assertNotSame(document6, document3);
      assertNotSame(document6, document1);
      assertSame(document6, document2);
      assertSame(document6, document4);
      assertNotSame(elements1, elements0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document6.tagName());
      assertEquals("</", document6.location());
      assertEquals("</", document6.baseUri());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertEquals(0, document6.siblingIndex());
      assertEquals(2, document6.childNodeSize());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertTrue(document6.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      
      String string1 = document0.className();
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertNotNull(string1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = document0.data();
      assertEquals("", string2);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertNotNull(string2);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Elements elements2 = document0.getAllElements();
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(elements2.isEmpty());
      assertEquals(8, elements2.size());
      assertNotNull(elements2);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      
      Elements elements3 = document0.getElementsByAttributeValue("ljc", "s+");
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertNotNull(elements3);
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements1));
      assertFalse(elements3.equals((Object)elements2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      
      Elements elements4 = document0.previousElementSiblings();
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(elements4, elements3);
      assertNotSame(elements4, elements0);
      assertNotSame(elements4, elements2);
      assertNotSame(elements4, elements1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertTrue(elements4.isEmpty());
      assertEquals(0, elements4.size());
      assertNotNull(elements4);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements4.equals((Object)elements2));
      assertTrue(elements4.equals((Object)elements0));
      assertTrue(elements4.equals((Object)elements1));
      assertTrue(elements4.equals((Object)elements3));
      
      List<Node> list0 = document4.ensureChildNodes();
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document6);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document4, document6);
      assertSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document5);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("</", element0.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals(2, document4.childNodeSize());
      assertEquals("</", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.location());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      
      String string3 = "\\s+";
      Elements elements5 = document1.getElementsMatchingOwnText("s+");
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document1, document0);
      assertNotSame(document1, document5);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document4);
      assertNotSame(document1, document6);
      assertNotSame(elements5, elements4);
      assertNotSame(elements5, elements0);
      assertNotSame(elements5, elements1);
      assertNotSame(elements5, elements3);
      assertNotSame(elements5, elements2);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals(0, elements5.size());
      assertTrue(elements5.isEmpty());
      assertNotNull(elements5);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document6));
      assertTrue(elements5.equals((Object)elements1));
      assertTrue(elements5.equals((Object)elements3));
      assertTrue(elements5.equals((Object)elements4));
      assertFalse(elements5.equals((Object)elements2));
      assertTrue(elements5.equals((Object)elements0));
      
      // Undeclared exception!
      try { 
        document2.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '#root.java.lang.String@0000000805': unexpected token at '@0000000805'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("9Pt{e~3b.RCS 3G7h", ": ");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(": ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "head");
      assertFalse(boolean0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(": ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(": ", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(": ", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      Document document2 = document1.clone();
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(": ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(": ", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(": ", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(": ", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(": ", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      String string0 = document2.wholeText();
      assertEquals("9Pt{e~3b.RCS 3G7h", string0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(": ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(": ", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(": ", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(": ", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(": ", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      Node[] nodeArray0 = new Node[6];
      nodeArray0[1] = (Node) document1;
      CDataNode cDataNode0 = new CDataNode("S`4");
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      Node node0 = cDataNode0.parent();
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNull(node0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Document document3 = (Document)document2.appendText("v_gd{ld8 bs");
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(": ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(": ", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(": ", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(": ", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(": ", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(": ", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals(": ", document3.location());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      
      Comment comment0 = new Comment("2H{,KF6;,]O%", "9Pt{e~3b.RCS 3G7h");
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertNotNull(comment0);
      
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertNotNull(xmlDeclaration0);
      
      boolean boolean2 = Element.preserveWhitespace(document3);
      assertFalse(boolean2);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(": ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(": ", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(": ", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(": ", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(": ", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(": ", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals(": ", document3.location());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = document2.hasText();
      assertTrue(boolean3);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(": ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(": ", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(": ", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(": ", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(": ", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      Document document4 = document0.clone();
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(": ", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertEquals(": ", document4.location());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(": ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document4);
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      
      Element element0 = document2.appendElement("2H{,KF6;,]O%");
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document4);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document4);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(": ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals("2h{,kf6;,]o%", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(": ", element0.baseUri());
      assertEquals(2, element0.siblingIndex());
      assertEquals("2h{,kf6;,]o%", element0.tagName());
      assertEquals(": ", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(": ", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(": ", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(": ", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document4));
      
      List<DataNode> list0 = document2.dataNodes();
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document4);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document4);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(": ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(": ", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(": ", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(": ", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(": ", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document4));
      
      Document document5 = (Document)document4.prepend("9Pt{e~3b.RCS 3G7h");
      assertNotSame(document4, document1);
      assertSame(document4, document5);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document3);
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(": ", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertEquals(": ", document4.location());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(": ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document5.childNodeSize());
      assertEquals(": ", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals(": ", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertNotNull(document5);
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document3));
      
      document0.nodelistChanged();
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document3);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(": ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document3));
      
      Pattern pattern0 = Pattern.compile(": ", 184);
      assertEquals(184, pattern0.flags());
      assertEquals(": ", pattern0.pattern());
      assertEquals(": ", pattern0.toString());
      assertNotNull(pattern0);
      
      Elements elements0 = document4.getElementsMatchingOwnText(pattern0);
      assertNotSame(document4, document1);
      assertSame(document4, document5);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document3);
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(": ", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertEquals(": ", document4.location());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(": ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(184, pattern0.flags());
      assertEquals(": ", pattern0.pattern());
      assertEquals(": ", pattern0.toString());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document3));
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("</", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document3.location());
      assertEquals("</", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Elements elements0 = document2.nextElementSiblings();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      Element element0 = new Element("</");
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertNotNull(element0);
      
      Document document4 = (Document)document2.appendTo(element0);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertNotSame(document4, document1);
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertTrue(document4.hasParent());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.baseUri());
      assertEquals("</", document4.location());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      
      Document document5 = (Document)document4.toggleClass("ljc");
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document5);
      assertSame(document4, document0);
      assertSame(document4, document5);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotSame(document5, document3);
      assertSame(document5, document2);
      assertNotSame(document5, document1);
      assertSame(document5, document4);
      assertSame(document5, document0);
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertTrue(document4.hasParent());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.baseUri());
      assertEquals("</", document4.location());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document5.isBlock());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(2, document5.childNodeSize());
      assertEquals("</", document5.location());
      assertEquals("</", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      
      String string0 = document2.baseUri();
      assertEquals("</", string0);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document5);
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      boolean boolean0 = document2.hasClass("b6hvH$Vs*i]cIc");
      assertFalse(boolean0);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document5);
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      Elements elements1 = document5.getElementsByAttributeValueContaining("yG#y", "%");
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document5);
      assertSame(document4, document0);
      assertSame(document4, document5);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotSame(document5, document3);
      assertSame(document5, document2);
      assertNotSame(document5, document1);
      assertSame(document5, document4);
      assertSame(document5, document0);
      assertNotSame(elements1, elements0);
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertTrue(document4.hasParent());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.baseUri());
      assertEquals("</", document4.location());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document5.isBlock());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(2, document5.childNodeSize());
      assertEquals("</", document5.location());
      assertEquals("</", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      
      String string1 = document0.className();
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertNotNull(string1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Document document6 = (Document)document0.appendText("value");
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document6);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document6, document2);
      assertSame(document6, document5);
      assertNotSame(document6, document1);
      assertSame(document6, document0);
      assertSame(document6, document4);
      assertNotSame(document6, document3);
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document6.baseUri());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(3, document6.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.isBlock());
      assertEquals("</", document6.location());
      assertEquals("#document", document6.nodeName());
      assertTrue(document6.hasParent());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertNotNull(document6);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      
      Comment comment0 = new Comment("'<GslA^}_H[Vi =N", "#");
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(comment0);
      
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertNotNull(xmlDeclaration0);
      
      boolean boolean2 = Element.preserveWhitespace(xmlDeclaration0);
      assertFalse(boolean2);
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = element0.hasText();
      assertTrue(boolean3);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.nodeName());
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      Document document7 = document0.clone();
      assertSame(document0, document5);
      assertNotSame(document0, document7);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document6);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document7, document0);
      assertNotSame(document7, document1);
      assertNotSame(document7, document4);
      assertNotSame(document7, document5);
      assertNotSame(document7, document2);
      assertNotSame(document7, document6);
      assertNotSame(document7, document3);
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document7.tagName());
      assertEquals("</", document7.baseUri());
      assertEquals("</", document7.location());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(3, document7.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertFalse(document7.hasParent());
      assertFalse(document7.isBlock());
      assertEquals(0, document7.siblingIndex());
      assertEquals("#document", document7.nodeName());
      assertNotNull(document7);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document3));
      
      Element element1 = document6.appendElement("%");
      assertSame(document0, document5);
      assertNotSame(document0, document7);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document6);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(element1, element0);
      assertNotSame(document6, document7);
      assertSame(document6, document2);
      assertSame(document6, document5);
      assertNotSame(document6, document1);
      assertSame(document6, document0);
      assertSame(document6, document4);
      assertNotSame(document6, document3);
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(4, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("%", element1.nodeName());
      assertEquals("</", element1.baseUri());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("%", element1.tagName());
      assertEquals(3, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("</", document6.baseUri());
      assertEquals(4, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.isBlock());
      assertEquals("</", document6.location());
      assertEquals("#document", document6.nodeName());
      assertTrue(document6.hasParent());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document6.equals((Object)document7));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      
      List<DataNode> list0 = element1.dataNodes();
      assertSame(document0, document5);
      assertNotSame(document0, document7);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document6);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(element1, element0);
      assertNotSame(document6, document7);
      assertSame(document6, document2);
      assertSame(document6, document5);
      assertNotSame(document6, document1);
      assertSame(document6, document0);
      assertSame(document6, document4);
      assertNotSame(document6, document3);
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(4, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("%", element1.nodeName());
      assertEquals("</", element1.baseUri());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("%", element1.tagName());
      assertEquals(3, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("</", document6.baseUri());
      assertEquals(4, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.isBlock());
      assertEquals("</", document6.location());
      assertEquals("#document", document6.nodeName());
      assertTrue(document6.hasParent());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document6.equals((Object)document7));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      
      Document document8 = (Document)document1.prepend("yG#y");
      assertSame(document0, document5);
      assertNotSame(document0, document7);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document6);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document8);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertSame(document1, document8);
      assertNotSame(document1, document2);
      assertNotSame(document1, document6);
      assertNotSame(document1, document4);
      assertNotSame(document1, document7);
      assertNotSame(document8, document6);
      assertNotSame(document8, document4);
      assertNotSame(document8, document7);
      assertNotSame(document8, document2);
      assertSame(document8, document3);
      assertNotSame(document8, document5);
      assertSame(document8, document1);
      assertNotSame(document8, document0);
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(4, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals(1, document8.siblingIndex());
      assertFalse(document8.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertEquals("</", document8.baseUri());
      assertEquals("#root", document8.tagName());
      assertEquals(2, document8.childNodeSize());
      assertEquals("</", document8.location());
      assertTrue(document8.hasParent());
      assertEquals("#document", document8.nodeName());
      assertNotNull(document8);
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document8.equals((Object)document6));
      assertFalse(document8.equals((Object)document4));
      assertFalse(document8.equals((Object)document7));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document8.equals((Object)document5));
      assertFalse(document8.equals((Object)document0));
      
      document0.nodelistChanged();
      assertSame(document0, document5);
      assertNotSame(document0, document7);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document6);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document8);
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(4, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document8));
      
      Pattern pattern0 = Pattern.compile(")M$YVea/(Oa", 62);
      assertEquals(")M$YVea/(Oa", pattern0.pattern());
      assertEquals(62, pattern0.flags());
      assertEquals(")M$YVea/(Oa", pattern0.toString());
      assertNotNull(pattern0);
      
      Elements elements2 = document1.getElementsMatchingOwnText(pattern0);
      assertSame(document0, document5);
      assertNotSame(document0, document7);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document6);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document8);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertSame(document1, document8);
      assertNotSame(document1, document2);
      assertNotSame(document1, document6);
      assertNotSame(document1, document4);
      assertNotSame(document1, document7);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(4, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals(")M$YVea/(Oa", pattern0.pattern());
      assertEquals(62, pattern0.flags());
      assertEquals(")M$YVea/(Oa", pattern0.toString());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertNotNull(elements2);
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document7));
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      
      Element element2 = document1.firstElementSibling();
      assertSame(document0, document5);
      assertNotSame(document0, document7);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document6);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document8);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertSame(document1, document8);
      assertNotSame(document1, document2);
      assertNotSame(document1, document6);
      assertNotSame(document1, document4);
      assertNotSame(document1, document7);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(4, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("html", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("html", element2.tagName());
      assertEquals("</", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals(2, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertNotNull(element2);
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document7));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = Parser.parseBodyFragment("8L", "8L");
      assertNotSame(document1, document0);
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("8L", document1.baseUri());
      assertEquals("8L", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("9Pt{e~3b.RCS 3G7h", ": ");
      assertEquals(": ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.baseUri());
      assertNotNull(document0);
      
      DataNode dataNode0 = new DataNode(": ");
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertNotNull(dataNode0);
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertEquals(": ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parse("e+&R~_A>l-", "e+&R~_A>l-");
      assertEquals(0, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document0.appendTo(document2);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, document2.siblingIndex());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("e+&R~_A>l-", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("e+&R~_A>l-", document3.baseUri());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      
      Elements elements0 = document2.nextElementSiblings();
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, document2.siblingIndex());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Element element0 = new Element("e+&R~_A>l-");
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("e+&R~_A>l-", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("e+&R~_A>l-", element0.nodeName());
      assertNotNull(element0);
      
      Document document4 = (Document)document0.appendTo(document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("e+&R~_A>l-", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("e+&R~_A>l-", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("e+&R~_A>l-", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      
      Document document5 = (Document)document3.toggleClass("e+&R~_A>l-");
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document3, document1);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document0);
      assertNotSame(document5, document1);
      assertSame(document5, document3);
      assertSame(document5, document2);
      assertSame(document5, document4);
      assertSame(document5, document0);
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("e+&R~_A>l-", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("e+&R~_A>l-", document3.baseUri());
      assertTrue(document5.hasParent());
      assertEquals("e+&R~_A>l-", document5.baseUri());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.siblingIndex());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document5.equals((Object)document1));
      
      String string0 = document0.baseUri();
      assertEquals("e+&R~_A>l-", string0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertTrue(document0.hasParent());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document1));
      
      boolean boolean0 = document0.hasClass("e+&R~_A>l-");
      assertFalse(boolean0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.equals((Object)document1));
      
      Elements elements1 = document0.getElementsByAttributeValueContaining("%", "br");
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertNotSame(elements1, elements0);
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertTrue(document0.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      
      Element element1 = document5.selectFirst("br");
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document3, document1);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document0);
      assertNotSame(document5, document1);
      assertSame(document5, document3);
      assertSame(document5, document2);
      assertSame(document5, document4);
      assertSame(document5, document0);
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("e+&R~_A>l-", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("e+&R~_A>l-", document3.baseUri());
      assertTrue(document5.hasParent());
      assertEquals("e+&R~_A>l-", document5.baseUri());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.siblingIndex());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertNull(element1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document5.equals((Object)document1));
      
      String string1 = document3.className();
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document3, document1);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document0);
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("e+&R~_A>l-", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("e+&R~_A>l-", document3.baseUri());
      assertNotNull(string1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      
      Document document6 = (Document)document1.appendText("e+&R~_A>l-");
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertSame(document1, document6);
      assertNotSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotSame(document6, document2);
      assertNotSame(document6, document3);
      assertSame(document6, document1);
      assertNotSame(document6, document0);
      assertNotSame(document6, document5);
      assertNotSame(document6, document4);
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertEquals("e+&R~_A>l-", document6.baseUri());
      assertEquals("#document", document6.nodeName());
      assertEquals("e+&R~_A>l-", document6.location());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(3, document6.childNodeSize());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.isBlock());
      assertNotNull(document6);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document4));
      
      boolean boolean1 = Element.preserveWhitespace(document2);
      assertFalse(boolean1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertSame(document2, document3);
      assertSame(document2, document5);
      assertNotSame(document2, document6);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document1));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = document5.hasText();
      assertTrue(boolean2);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertSame(document2, document3);
      assertSame(document2, document5);
      assertNotSame(document2, document6);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document3, document1);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertNotSame(document3, document6);
      assertSame(document3, document4);
      assertSame(document3, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document6);
      assertSame(document5, document3);
      assertSame(document5, document2);
      assertSame(document5, document4);
      assertSame(document5, document0);
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("e+&R~_A>l-", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("e+&R~_A>l-", document3.baseUri());
      assertTrue(document5.hasParent());
      assertEquals("e+&R~_A>l-", document5.baseUri());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.siblingIndex());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document6));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Document document7 = document2.clone();
      assertNotSame(document7, document6);
      assertNotSame(document7, document3);
      assertNotSame(document7, document2);
      assertNotSame(document7, document5);
      assertNotSame(document7, document0);
      assertNotSame(document7, document1);
      assertNotSame(document7, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertSame(document0, document4);
      assertNotSame(document0, document7);
      assertSame(document0, document5);
      assertSame(document2, document3);
      assertSame(document2, document5);
      assertNotSame(document2, document6);
      assertNotSame(document2, document7);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertEquals(0, document7.siblingIndex());
      assertEquals("e+&R~_A>l-", document7.location());
      assertEquals("#document", document7.nodeName());
      assertEquals(1, document7.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document7.baseUri());
      assertFalse(document7.hasParent());
      assertEquals("#root", document7.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertFalse(document7.isBlock());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertNotNull(document7);
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document1));
      
      Element element2 = document7.appendElement(".");
      assertNotSame(document7, document6);
      assertNotSame(document7, document3);
      assertNotSame(document7, document2);
      assertNotSame(document7, document5);
      assertNotSame(document7, document0);
      assertNotSame(document7, document1);
      assertNotSame(document7, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertSame(document0, document4);
      assertNotSame(document0, document7);
      assertSame(document0, document5);
      assertNotSame(element2, element0);
      assertSame(document2, document3);
      assertSame(document2, document5);
      assertNotSame(document2, document6);
      assertNotSame(document2, document7);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertEquals(0, document7.siblingIndex());
      assertEquals("e+&R~_A>l-", document7.location());
      assertEquals("#document", document7.nodeName());
      assertEquals(2, document7.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document7.baseUri());
      assertFalse(document7.hasParent());
      assertEquals("#root", document7.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertFalse(document7.isBlock());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("e+&R~_A>l-", element2.baseUri());
      assertEquals(1, element2.siblingIndex());
      assertEquals(".", element2.tagName());
      assertEquals(".", element2.nodeName());
      assertFalse(element2.isBlock());
      assertEquals(1, document2.siblingIndex());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertNotNull(element2);
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document7));
      assertFalse(element2.equals((Object)element0));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document1));
      
      Document document8 = (Document)document6.prepend("V_GD{ld8 bS");
      assertNotSame(document0, document8);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertSame(document0, document4);
      assertNotSame(document0, document7);
      assertSame(document0, document5);
      assertSame(document1, document6);
      assertNotSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document1, document7);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document5);
      assertSame(document1, document8);
      assertNotSame(document8, document4);
      assertNotSame(document8, document7);
      assertNotSame(document8, document0);
      assertNotSame(document8, document2);
      assertSame(document8, document6);
      assertSame(document8, document1);
      assertNotSame(document8, document3);
      assertNotSame(document8, document5);
      assertNotSame(document6, document2);
      assertNotSame(document6, document3);
      assertNotSame(document6, document7);
      assertSame(document6, document8);
      assertSame(document6, document1);
      assertNotSame(document6, document0);
      assertNotSame(document6, document5);
      assertNotSame(document6, document4);
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(4, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("e+&R~_A>l-", document8.location());
      assertEquals(0, document8.siblingIndex());
      assertEquals(4, document8.childNodeSize());
      assertEquals("e+&R~_A>l-", document8.baseUri());
      assertFalse(document8.isBlock());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals("#document", document8.nodeName());
      assertEquals("#root", document8.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertFalse(document8.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertEquals("e+&R~_A>l-", document6.baseUri());
      assertEquals("#document", document6.nodeName());
      assertEquals("e+&R~_A>l-", document6.location());
      assertEquals(4, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.isBlock());
      assertNotNull(document8);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document8.equals((Object)document4));
      assertFalse(document8.equals((Object)document7));
      assertFalse(document8.equals((Object)document0));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document5));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document7));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document4));
      
      document7.nodelistChanged();
      assertNotSame(document7, document8);
      assertNotSame(document7, document6);
      assertNotSame(document7, document3);
      assertNotSame(document7, document2);
      assertNotSame(document7, document5);
      assertNotSame(document7, document0);
      assertNotSame(document7, document1);
      assertNotSame(document7, document4);
      assertNotSame(document0, document8);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertSame(document0, document4);
      assertNotSame(document0, document7);
      assertSame(document0, document5);
      assertSame(document2, document3);
      assertSame(document2, document5);
      assertNotSame(document2, document6);
      assertNotSame(document2, document7);
      assertSame(document2, document0);
      assertNotSame(document2, document8);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertEquals(0, document7.siblingIndex());
      assertEquals("e+&R~_A>l-", document7.location());
      assertEquals("#document", document7.nodeName());
      assertEquals(2, document7.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document7.baseUri());
      assertFalse(document7.hasParent());
      assertEquals("#root", document7.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertFalse(document7.isBlock());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document7.equals((Object)document8));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document8));
      assertFalse(document2.equals((Object)document1));
      
      Pattern pattern0 = Pattern.compile("e+&R~_A>l-", 840);
      assertEquals("e+&R~_A>l-", pattern0.toString());
      assertEquals("e+&R~_A>l-", pattern0.pattern());
      assertEquals(840, pattern0.flags());
      assertNotNull(pattern0);
      
      Elements elements2 = document7.getElementsMatchingOwnText(pattern0);
      assertNotSame(document7, document8);
      assertNotSame(document7, document6);
      assertNotSame(document7, document3);
      assertNotSame(document7, document2);
      assertNotSame(document7, document5);
      assertNotSame(document7, document0);
      assertNotSame(document7, document1);
      assertNotSame(document7, document4);
      assertNotSame(document0, document8);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertSame(document0, document4);
      assertNotSame(document0, document7);
      assertSame(document0, document5);
      assertSame(document2, document3);
      assertSame(document2, document5);
      assertNotSame(document2, document6);
      assertNotSame(document2, document7);
      assertSame(document2, document0);
      assertNotSame(document2, document8);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertEquals(0, document7.siblingIndex());
      assertEquals("e+&R~_A>l-", document7.location());
      assertEquals("#document", document7.nodeName());
      assertEquals(2, document7.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document7.baseUri());
      assertFalse(document7.hasParent());
      assertEquals("#root", document7.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertFalse(document7.isBlock());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("e+&R~_A>l-", pattern0.toString());
      assertEquals("e+&R~_A>l-", pattern0.pattern());
      assertEquals(840, pattern0.flags());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertNotNull(elements2);
      assertFalse(document7.equals((Object)document8));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document8));
      assertFalse(document2.equals((Object)document1));
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("9Pt{e~3b.RCS 3G7h", ": ");
      assertEquals(": ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(": ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(": ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(": ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(": ", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(": ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      Document document2 = document1.clone();
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals(": ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(": ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(": ", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(": ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(": ", document2.baseUri());
      assertEquals(": ", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document1;
      CDataNode cDataNode0 = new CDataNode("S`4");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      DataNode dataNode0 = new DataNode(": ");
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertNotNull(dataNode0);
      
      nodeArray0[1] = (Node) dataNode0;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document2;
      Document document3 = (Document)document1.val("S`4");
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertEquals(": ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(": ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(": ", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(": ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(": ", document3.location());
      assertEquals(": ", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      
      String string0 = document0.html();
      assertEquals("<html>\n <head></head>\n <body>\n  9Pt{e~3b.RCS 3G7h\n </body>\n</html>", string0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertEquals(": ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(": ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document2));
      
      Element element0 = document2.parent();
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertEquals(": ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(": ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(": ", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(": ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(": ", document2.baseUri());
      assertEquals(": ", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertNull(element0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      
      Pattern pattern0 = Pattern.compile("");
      assertEquals("", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertNotNull(pattern0);
      
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertEquals("", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals(": ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(": ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document2));
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = "9Pt{e~3b.RCS 3G7h";
      Document document0 = Parser.parseBodyFragmentRelaxed("9Pt{e~3b.RCS 3G7h", ": ");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(": ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(": ", document0.baseUri());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(": ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(": ", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(": ", document1.location());
      assertEquals(": ", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      
      Document document2 = document1.clone();
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(": ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(": ", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(": ", document1.location());
      assertEquals(": ", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(": ", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(": ", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document1;
      String string1 = "S`4";
      CDataNode cDataNode0 = new CDataNode("S`4");
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      DataNode dataNode0 = new DataNode(": ");
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertNotNull(dataNode0);
      
      List<Node> list0 = dataNode0.siblingNodes();
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      nodeArray0[1] = (Node) dataNode0;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document0;
      String string2 = null;
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parse("e+&R~_A>l-", "e+&R~_A>l-");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Set<String> set0 = document0.classNames();
      assertFalse(set0.contains("e+&R~_A>l-"));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(document0.equals((Object)document1));
      
      Document document3 = (Document)document1.classNames(set0);
      assertFalse(set0.contains("e+&R~_A>l-"));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals("e+&R~_A>l-", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("e+&R~_A>l-", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      DataNode dataNode0 = new DataNode("e+&R~_A>l-");
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertNotNull(dataNode0);
      
      dataNode0.coreValue("e+&R~_A>l-");
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      
      document1.reparentChild(document2);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      Pattern pattern0 = Pattern.compile(".-");
      assertEquals(".-", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals(".-", pattern0.pattern());
      assertNotNull(pattern0);
      
      Matcher matcher0 = pattern0.matcher(".-");
      assertEquals(".-", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals(".-", pattern0.pattern());
      assertTrue(matcher0.hasAnchoringBounds());
      assertEquals("java.util.regex.Matcher[pattern=.- region=0,2 lastmatch=]", matcher0.toString());
      assertEquals(0, matcher0.groupCount());
      assertFalse(matcher0.hasTransparentBounds());
      assertNotNull(matcher0);
      
      Elements elements0 = document1.getElementsMatchingText(pattern0);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(".-", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals(".-", pattern0.pattern());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      
      Document document4 = (Document)document1.tagName(".-");
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertNotSame(document4, document2);
      assertSame(document4, document3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(".-", document1.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("e+&R~_A>l-", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals(".-", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document4.baseUri());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      
      // Undeclared exception!
      try { 
        document4.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Document.createShell(" 8p[)wshA|U`1H6");
      assertEquals(" 8p[)wshA|U`1H6", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" 8p[)wshA|U`1H6", document0.location());
      assertNotNull(document0);
      
      Document document1 = document0.parser((Parser) null);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(" 8p[)wshA|U`1H6", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" 8p[)wshA|U`1H6", document0.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(" 8p[)wshA|U`1H6", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(" 8p[)wshA|U`1H6", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      String string0 = "br";
      Document document2 = (Document)document1.addClass("br");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(" 8p[)wshA|U`1H6", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" 8p[)wshA|U`1H6", document0.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(" 8p[)wshA|U`1H6", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(" 8p[)wshA|U`1H6", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(" 8p[)wshA|U`1H6", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(" 8p[)wshA|U`1H6", document2.location());
      assertNotNull(document2);
      
      boolean boolean0 = document2.hasAttr(" 8p[)wshA|U`1H6");
      assertFalse(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(" 8p[)wshA|U`1H6", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" 8p[)wshA|U`1H6", document0.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(" 8p[)wshA|U`1H6", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(" 8p[)wshA|U`1H6", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(" 8p[)wshA|U`1H6", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(" 8p[)wshA|U`1H6", document2.location());
      
      String string1 = "java.lang.string@0000000108";
      Document document3 = (Document)document0.removeAttr("jn2:~4|`V(o");
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertEquals(" 8p[)wshA|U`1H6", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" 8p[)wshA|U`1H6", document0.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(" 8p[)wshA|U`1H6", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(" 8p[)wshA|U`1H6", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      
      Document document4 = (Document)document2.prependText("java.lang.string@0000000108");
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertEquals(" 8p[)wshA|U`1H6", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" 8p[)wshA|U`1H6", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(" 8p[)wshA|U`1H6", document1.location());
      assertEquals(" 8p[)wshA|U`1H6", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(" 8p[)wshA|U`1H6", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(" 8p[)wshA|U`1H6", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document4.hasParent());
      assertEquals(" 8p[)wshA|U`1H6", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertEquals(" 8p[)wshA|U`1H6", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertNotNull(document4);
      
      Document document5 = (Document)document0.toggleClass("java.lang.string@0000000108");
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertSame(document5, document0);
      assertSame(document5, document3);
      assertSame(document5, document1);
      assertSame(document5, document4);
      assertSame(document5, document2);
      assertEquals(" 8p[)wshA|U`1H6", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" 8p[)wshA|U`1H6", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(2, document5.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals(" 8p[)wshA|U`1H6", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(" 8p[)wshA|U`1H6", document5.location());
      assertFalse(document5.hasParent());
      assertNotNull(document5);
      
      Elements elements0 = document0.children();
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertEquals(" 8p[)wshA|U`1H6", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" 8p[)wshA|U`1H6", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document6 = (Document)document5.appendTo(document2);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document6);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document6);
      assertSame(document2, document1);
      assertSame(document2, document6);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document2, document4);
      assertSame(document5, document0);
      assertSame(document5, document1);
      assertSame(document5, document3);
      assertSame(document5, document6);
      assertSame(document5, document4);
      assertSame(document5, document2);
      assertSame(document6, document1);
      assertSame(document6, document2);
      assertSame(document6, document4);
      assertSame(document6, document0);
      assertSame(document6, document5);
      assertSame(document6, document3);
      assertEquals(" 8p[)wshA|U`1H6", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" 8p[)wshA|U`1H6", document0.location());
      assertEquals(3, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(2, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(3, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(" 8p[)wshA|U`1H6", document1.location());
      assertEquals(" 8p[)wshA|U`1H6", document1.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(" 8p[)wshA|U`1H6", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals(" 8p[)wshA|U`1H6", document2.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(3, document5.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertEquals(2, document5.siblingIndex());
      assertEquals(" 8p[)wshA|U`1H6", document5.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(" 8p[)wshA|U`1H6", document5.location());
      assertEquals(2, document6.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("#document", document6.nodeName());
      assertEquals(" 8p[)wshA|U`1H6", document6.location());
      assertEquals(3, document6.childNodeSize());
      assertTrue(document6.hasParent());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(" 8p[)wshA|U`1H6", document6.baseUri());
      assertEquals("#root", document6.tagName());
      assertFalse(document6.isBlock());
      assertNotNull(document6);
      
      // Undeclared exception!
      document6.before("~~;(xMR3");
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("</", document3.location());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      Elements elements0 = document2.nextElementSiblings();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      Element element0 = new Element("</");
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Document document4 = (Document)document2.appendTo(element0);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals(2, document4.childNodeSize());
      assertEquals("</", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("</", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      
      Document document5 = (Document)document4.toggleClass("ljc");
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertSame(document4, document5);
      assertSame(document5, document2);
      assertSame(document5, document0);
      assertNotSame(document5, document3);
      assertSame(document5, document4);
      assertNotSame(document5, document1);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals(2, document4.childNodeSize());
      assertEquals("</", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("</", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertEquals("</", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertEquals(2, document5.childNodeSize());
      assertEquals("</", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      
      String string0 = document2.baseUri();
      assertEquals("</", string0);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      boolean boolean0 = document2.hasClass("b6hvH$Vs*i]cIc");
      assertFalse(boolean0);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document6 = document2.quirksMode(document_QuirksMode0);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertSame(document2, document6);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document6, document1);
      assertSame(document6, document4);
      assertSame(document6, document2);
      assertSame(document6, document0);
      assertNotSame(document6, document3);
      assertSame(document6, document5);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document6.location());
      assertEquals("#root", document6.tagName());
      assertEquals("</", document6.baseUri());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertEquals(2, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertEquals(0, document6.siblingIndex());
      assertNotNull(document6);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      
      Elements elements1 = document6.getElementsByAttributeValueContaining("yG#y", "%");
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertSame(document2, document6);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document6, document1);
      assertSame(document6, document4);
      assertSame(document6, document2);
      assertSame(document6, document0);
      assertNotSame(document6, document3);
      assertSame(document6, document5);
      assertNotSame(elements1, elements0);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document6.location());
      assertEquals("#root", document6.tagName());
      assertEquals("</", document6.baseUri());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertEquals(2, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertEquals(0, document6.siblingIndex());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      assertTrue(elements1.equals((Object)elements0));
      
      Document document7 = (Document)document6.before((Node) document0);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document7);
      assertSame(document0, document2);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertSame(document2, document6);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document7);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document6, document1);
      assertSame(document6, document4);
      assertSame(document6, document2);
      assertSame(document6, document0);
      assertNotSame(document6, document3);
      assertSame(document6, document5);
      assertSame(document6, document7);
      assertSame(document7, document6);
      assertSame(document7, document2);
      assertNotSame(document7, document3);
      assertNotSame(document7, document1);
      assertSame(document7, document5);
      assertSame(document7, document0);
      assertSame(document7, document4);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document6.location());
      assertEquals("#root", document6.tagName());
      assertEquals("</", document6.baseUri());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertEquals(2, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertEquals(0, document6.siblingIndex());
      assertEquals(0, document7.siblingIndex());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("</", document7.baseUri());
      assertFalse(document7.isBlock());
      assertEquals(Document.QuirksMode.quirks, document7.quirksMode());
      assertEquals("#root", document7.tagName());
      assertEquals("</", document7.location());
      assertEquals("#document", document7.nodeName());
      assertEquals(2, document7.childNodeSize());
      assertTrue(document7.hasParent());
      assertNotNull(document7);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document1));
      
      String string1 = document0.className();
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document7);
      assertSame(document0, document2);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(string1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(string1.equals((Object)string0));
      
      Document document8 = (Document)document6.appendText("value");
      assertSame(document0, document5);
      assertSame(document0, document8);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document7);
      assertSame(document0, document2);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertSame(document2, document6);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document7);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document2, document8);
      assertNotSame(document6, document1);
      assertSame(document6, document8);
      assertSame(document6, document4);
      assertSame(document6, document2);
      assertSame(document6, document0);
      assertNotSame(document6, document3);
      assertSame(document6, document5);
      assertSame(document6, document7);
      assertSame(document8, document6);
      assertSame(document8, document0);
      assertSame(document8, document2);
      assertNotSame(document8, document3);
      assertNotSame(document8, document1);
      assertSame(document8, document4);
      assertSame(document8, document7);
      assertSame(document8, document5);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(3, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertEquals("</", document6.location());
      assertEquals("#root", document6.tagName());
      assertEquals("</", document6.baseUri());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(3, document6.childNodeSize());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertEquals(0, document6.siblingIndex());
      assertEquals(0, document8.siblingIndex());
      assertEquals("#document", document8.nodeName());
      assertFalse(document8.isBlock());
      assertEquals(3, document8.childNodeSize());
      assertTrue(document8.hasParent());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals("</", document8.baseUri());
      assertEquals(Document.QuirksMode.quirks, document8.quirksMode());
      assertEquals("#root", document8.tagName());
      assertEquals("</", document8.location());
      assertNotNull(document8);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document1));
      
      Comment comment0 = new Comment("'<GslA^}_H[Vi =N", "#");
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(comment0);
      
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertNotNull(xmlDeclaration0);
      
      boolean boolean1 = Element.preserveWhitespace(xmlDeclaration0);
      assertFalse(boolean1);
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = element0.hasText();
      assertTrue(boolean2);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("</", element0.tagName());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Document document9 = document6.clone();
      assertSame(document0, document5);
      assertNotSame(document0, document9);
      assertSame(document0, document8);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document7);
      assertSame(document0, document2);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertSame(document2, document6);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertNotSame(document2, document9);
      assertSame(document2, document7);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document2, document8);
      assertNotSame(document9, document5);
      assertNotSame(document9, document6);
      assertNotSame(document9, document0);
      assertNotSame(document9, document4);
      assertNotSame(document9, document1);
      assertNotSame(document9, document3);
      assertNotSame(document9, document8);
      assertNotSame(document9, document7);
      assertNotSame(document9, document2);
      assertNotSame(document6, document1);
      assertSame(document6, document8);
      assertNotSame(document6, document9);
      assertSame(document6, document4);
      assertSame(document6, document2);
      assertSame(document6, document0);
      assertNotSame(document6, document3);
      assertSame(document6, document5);
      assertSame(document6, document7);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(3, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertEquals("</", document9.location());
      assertFalse(document9.hasParent());
      assertEquals("#document", document9.nodeName());
      assertEquals(0, document9.siblingIndex());
      assertFalse(document9.updateMetaCharsetElement());
      assertFalse(document9.isBlock());
      assertEquals(3, document9.childNodeSize());
      assertEquals("</", document9.baseUri());
      assertEquals("#root", document9.tagName());
      assertEquals(Document.QuirksMode.quirks, document9.quirksMode());
      assertEquals("</", document6.location());
      assertEquals("#root", document6.tagName());
      assertEquals("</", document6.baseUri());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(3, document6.childNodeSize());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertEquals(0, document6.siblingIndex());
      assertNotNull(document9);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document9.equals((Object)document5));
      assertFalse(document9.equals((Object)document6));
      assertFalse(document9.equals((Object)document0));
      assertFalse(document9.equals((Object)document4));
      assertFalse(document9.equals((Object)document1));
      assertFalse(document9.equals((Object)document3));
      assertFalse(document9.equals((Object)document8));
      assertFalse(document9.equals((Object)document7));
      assertFalse(document9.equals((Object)document2));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      
      Element element1 = document8.appendElement("%");
      assertSame(document0, document5);
      assertNotSame(document0, document9);
      assertSame(document0, document8);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document7);
      assertSame(document0, document2);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertSame(document2, document6);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertNotSame(document2, document9);
      assertSame(document2, document7);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document2, document8);
      assertNotSame(element1, element0);
      assertNotSame(document6, document1);
      assertSame(document6, document8);
      assertNotSame(document6, document9);
      assertSame(document6, document4);
      assertSame(document6, document2);
      assertSame(document6, document0);
      assertNotSame(document6, document3);
      assertSame(document6, document5);
      assertSame(document6, document7);
      assertSame(document8, document6);
      assertSame(document8, document0);
      assertSame(document8, document2);
      assertNotSame(document8, document3);
      assertNotSame(document8, document9);
      assertNotSame(document8, document1);
      assertSame(document8, document4);
      assertSame(document8, document7);
      assertSame(document8, document5);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(4, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(4, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertFalse(element1.isBlock());
      assertEquals("</", element1.baseUri());
      assertEquals("%", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(3, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("%", element1.tagName());
      assertEquals("</", document6.location());
      assertEquals("#root", document6.tagName());
      assertEquals("</", document6.baseUri());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertFalse(document6.updateMetaCharsetElement());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertEquals(0, document6.siblingIndex());
      assertEquals(4, document6.childNodeSize());
      assertEquals(0, document8.siblingIndex());
      assertEquals("#document", document8.nodeName());
      assertEquals(4, document8.childNodeSize());
      assertFalse(document8.isBlock());
      assertTrue(document8.hasParent());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals("</", document8.baseUri());
      assertEquals(Document.QuirksMode.quirks, document8.quirksMode());
      assertEquals("#root", document8.tagName());
      assertEquals("</", document8.location());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document9));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document9));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document9));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document9));
      assertFalse(document8.equals((Object)document1));
      
      Document document10 = (Document)document1.prepend("yG#y");
      assertSame(document0, document5);
      assertNotSame(document0, document9);
      assertSame(document0, document8);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document7);
      assertSame(document0, document2);
      assertSame(document0, document6);
      assertNotSame(document0, document10);
      assertNotSame(document0, document3);
      assertNotSame(document1, document7);
      assertSame(document1, document10);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document1, document5);
      assertNotSame(document1, document9);
      assertNotSame(document1, document8);
      assertNotSame(document1, document2);
      assertNotSame(document1, document6);
      assertNotSame(document10, document9);
      assertNotSame(document10, document0);
      assertNotSame(document10, document2);
      assertNotSame(document10, document8);
      assertNotSame(document10, document7);
      assertNotSame(document10, document6);
      assertSame(document10, document1);
      assertSame(document10, document3);
      assertNotSame(document10, document4);
      assertNotSame(document10, document5);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(4, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document10.quirksMode());
      assertEquals("</", document10.location());
      assertEquals("#document", document10.nodeName());
      assertEquals("#root", document10.tagName());
      assertEquals(1, document10.siblingIndex());
      assertTrue(document10.hasParent());
      assertEquals(2, document10.childNodeSize());
      assertFalse(document10.updateMetaCharsetElement());
      assertEquals("</", document10.baseUri());
      assertFalse(document10.isBlock());
      assertNotNull(document10);
      assertFalse(document0.equals((Object)document9));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document9));
      assertFalse(document1.equals((Object)document8));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document10.equals((Object)document9));
      assertFalse(document10.equals((Object)document0));
      assertFalse(document10.equals((Object)document2));
      assertFalse(document10.equals((Object)document8));
      assertFalse(document10.equals((Object)document7));
      assertFalse(document10.equals((Object)document6));
      assertFalse(document10.equals((Object)document4));
      assertFalse(document10.equals((Object)document5));
      
      document6.nodelistChanged();
      assertSame(document0, document5);
      assertNotSame(document0, document9);
      assertSame(document0, document8);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document7);
      assertSame(document0, document2);
      assertSame(document0, document6);
      assertNotSame(document0, document10);
      assertNotSame(document0, document3);
      assertSame(document2, document6);
      assertNotSame(document2, document10);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertNotSame(document2, document9);
      assertSame(document2, document7);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document2, document8);
      assertNotSame(document6, document1);
      assertSame(document6, document8);
      assertNotSame(document6, document9);
      assertSame(document6, document4);
      assertSame(document6, document2);
      assertNotSame(document6, document10);
      assertSame(document6, document0);
      assertNotSame(document6, document3);
      assertSame(document6, document5);
      assertSame(document6, document7);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(4, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(4, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertEquals("</", document6.location());
      assertEquals("#root", document6.tagName());
      assertEquals("</", document6.baseUri());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertFalse(document6.updateMetaCharsetElement());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertEquals(0, document6.siblingIndex());
      assertEquals(4, document6.childNodeSize());
      assertFalse(document0.equals((Object)document9));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document10));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document10));
      assertFalse(document2.equals((Object)document9));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document9));
      assertFalse(document6.equals((Object)document10));
      assertFalse(document6.equals((Object)document3));
      
      Pattern pattern0 = Pattern.compile(")M$YVea/(Oa", 62);
      assertEquals(")M$YVea/(Oa", pattern0.toString());
      assertEquals(62, pattern0.flags());
      assertEquals(")M$YVea/(Oa", pattern0.pattern());
      assertNotNull(pattern0);
      
      Elements elements2 = document1.getElementsMatchingOwnText(pattern0);
      assertSame(document0, document5);
      assertNotSame(document0, document9);
      assertSame(document0, document8);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document7);
      assertSame(document0, document2);
      assertSame(document0, document6);
      assertNotSame(document0, document10);
      assertNotSame(document0, document3);
      assertNotSame(document1, document7);
      assertSame(document1, document10);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document1, document5);
      assertNotSame(document1, document9);
      assertNotSame(document1, document8);
      assertNotSame(document1, document2);
      assertNotSame(document1, document6);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(4, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals(")M$YVea/(Oa", pattern0.toString());
      assertEquals(62, pattern0.flags());
      assertEquals(")M$YVea/(Oa", pattern0.pattern());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertNotNull(elements2);
      assertFalse(document0.equals((Object)document9));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document10));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document9));
      assertFalse(document1.equals((Object)document8));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document6));
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Element element0 = new Element("C.");
      assertEquals("C.", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("C.", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.appendText("iiIO5");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("C.", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("C.", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("C.", element1.nodeName());
      assertEquals("C.", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      
      boolean boolean0 = element1.hasText();
      assertTrue(boolean0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("C.", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("C.", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("C.", element1.nodeName());
      assertEquals("C.", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      
      Element element2 = element1.prepend("7=}!=G_2!Mo0u@)b[Mz");
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertEquals(2, element0.childNodeSize());
      assertEquals("C.", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("C.", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("C.", element1.nodeName());
      assertEquals("C.", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("C.", element2.tagName());
      assertEquals(2, element2.childNodeSize());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.hasParent());
      assertEquals("", element2.baseUri());
      assertEquals("C.", element2.nodeName());
      assertNotNull(element2);
      
      Pattern pattern0 = Pattern.compile("~IiqGu!EmF", 745);
      assertEquals(745, pattern0.flags());
      assertEquals("~IiqGu!EmF", pattern0.toString());
      assertEquals("~IiqGu!EmF", pattern0.pattern());
      assertNotNull(pattern0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("d'AtbtKC>ug", parseSettings0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertNotNull(tag0);
      
      FormElement formElement0 = new FormElement(tag0, "-}hJudcG'k9", (Attributes) null);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertNotNull(formElement0);
      
      boolean boolean0 = formElement0.hasText();
      assertFalse(boolean0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      
      FormElement formElement1 = formElement0.addElement((Element) null);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertNotNull(formElement1);
      
      int int0 = formElement1.elementSiblingIndex();
      assertEquals(0, int0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      
      Map<String, String> map0 = formElement1.dataset();
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      Element element0 = new Element(tag0, "-}hJudcG'k9");
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("d'AtbtKC>ug", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("d'AtbtKC>ug", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("-}hJudcG'k9", element0.baseUri());
      assertNotNull(element0);
      
      Elements elements0 = element0.getElementsByIndexEquals(0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("d'AtbtKC>ug", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("d'AtbtKC>ug", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("-}hJudcG'k9", element0.baseUri());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = "H\"9gh\"hmH)B><q#l%f,";
      Document document0 = Parser.parse("", "H\"9gh\"hmH)B><q#l%f,");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      String string1 = "i\\FTj5}5!pE=v-pf";
      Elements elements0 = document0.nextElementSiblings();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element0 = new Element("i|8*1#FYj");
      assertEquals(0, element0.siblingIndex());
      assertEquals("i|8*1#FYj", element0.nodeName());
      assertEquals("i|8*1#FYj", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.appendTo(document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("i|8*1#FYj", element0.nodeName());
      assertEquals("i|8*1#FYj", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("i|8*1#FYj", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("i|8*1#FYj", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertNotNull(element1);
      
      String string2 = null;
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("</", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("</", document3.location());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      Elements elements0 = document0.getElementsByIndexEquals(298);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      
      Document document4 = (Document)document0.text("bdo");
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document4.location());
      assertFalse(document4.hasParent());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      
      Document document5 = (Document)document1.text("class");
      assertSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertSame(document1, document5);
      assertNotSame(document1, document2);
      assertNotSame(document5, document2);
      assertSame(document5, document3);
      assertSame(document5, document1);
      assertNotSame(document5, document0);
      assertNotSame(document5, document4);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.baseUri());
      assertFalse(document5.isBlock());
      assertEquals(1, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals("</", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals("</", document5.location());
      assertEquals(1, document5.childNodeSize());
      assertTrue(document5.hasParent());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document4));
      
      Document document6 = new Document("</");
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.isBlock());
      assertFalse(document6.hasParent());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(0, document6.siblingIndex());
      assertEquals("</", document6.baseUri());
      assertEquals("#root", document6.tagName());
      assertEquals("</", document6.location());
      assertEquals("#document", document6.nodeName());
      assertEquals(0, document6.childNodeSize());
      assertNotNull(document6);
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document0));
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "</");
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.capacity());
      assertEquals("</", charBuffer0.toString());
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2, charBuffer0.length());
      assertEquals(2, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = document3.hasSameValue(charBuffer0);
      assertFalse(boolean0);
      assertSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertSame(document1, document5);
      assertNotSame(document1, document2);
      assertNotSame(document1, document6);
      assertNotSame(document2, document6);
      assertNotSame(document2, document3);
      assertNotSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document3, document2);
      assertNotSame(document3, document4);
      assertNotSame(document3, document0);
      assertSame(document3, document5);
      assertNotSame(document3, document6);
      assertSame(document3, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("</", document3.location());
      assertEquals("</", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.capacity());
      assertEquals("</", charBuffer0.toString());
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2, charBuffer0.length());
      assertEquals(2, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document6));
      
      Elements elements1 = document2.getElementsByAttributeStarting("org.jsoup.select.Evaluator$AttributeKeyPair");
      assertSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document2, document6);
      assertNotSame(document2, document3);
      assertNotSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(elements1, elements0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      assertEquals(":matchText", evaluator_MatchText0.toString());
      assertNotNull(evaluator_MatchText0);
      
      boolean boolean1 = document1.is((Evaluator) evaluator_MatchText0);
      assertFalse(boolean1);
      assertSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertSame(document1, document5);
      assertNotSame(document1, document2);
      assertNotSame(document1, document6);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.baseUri());
      assertEquals(":matchText", evaluator_MatchText0.toString());
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document6));
      assertTrue(boolean1 == boolean0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      
      String string0 = "M1)enkVKm";
      List<Node> list0 = parser0.parseFragmentInput(":not%s", document2, "O`U@]Jj3GX");
      assertSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document2, document6);
      assertNotSame(document2, document3);
      assertNotSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(parser0, parser1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document1));
      
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document5;
      // Undeclared exception!
      try { 
        document6.insertChildren((-834), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      TextNode textNode0 = new TextNode("", "");
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Document document1 = (Document)document0.appendChild(textNode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertTrue(textNode0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      boolean boolean0 = document1.hasText();
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertTrue(textNode0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      
      Elements elements0 = document1.getElementsMatchingText("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertTrue(textNode0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = document0.getElementsByAttributeStarting("MOZ\")");
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      assertEquals(":matchText", evaluator_MatchText0.toString());
      assertNotNull(evaluator_MatchText0);
      
      boolean boolean1 = document1.is((Evaluator) evaluator_MatchText0);
      assertFalse(boolean1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertTrue(textNode0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(":matchText", evaluator_MatchText0.toString());
      assertTrue(boolean1 == boolean0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      
      List<Node> list0 = parser1.parseFragmentInput("html", document1, ":not%s");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertTrue(textNode0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      nodeArray0[5] = (Node) document0;
      Element element0 = document0.head();
      assertSame(document0, document1);
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      nodeArray0[6] = (Node) element0;
      // Undeclared exception!
      try { 
        document1.insertChildren(1587, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.siblingIndex());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("</", document3.baseUri());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Elements elements0 = document2.nextElementSiblings();
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      
      Element element0 = new Element("</");
      assertEquals("</", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      
      Document document4 = (Document)document2.appendTo(element0);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertNotSame(document4, document1);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("</", document4.location());
      assertEquals(2, document4.childNodeSize());
      assertEquals("</", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      
      Document document5 = (Document)document4.toggleClass("ljc");
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document5);
      assertNotSame(document4, document1);
      assertSame(document5, document4);
      assertSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertSame(document5, document0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("</", document4.location());
      assertEquals(2, document4.childNodeSize());
      assertEquals("</", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(2, document5.childNodeSize());
      assertEquals("</", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("</", document5.location());
      assertEquals("#document", document5.nodeName());
      assertTrue(document5.hasParent());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      
      String string0 = document2.baseUri();
      assertEquals("</", string0);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      
      boolean boolean0 = document2.hasClass("b6hvH$Vs*i]cIc");
      assertFalse(boolean0);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document6 = document2.quirksMode(document_QuirksMode0);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document6);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document6, document5);
      assertSame(document6, document0);
      assertNotSame(document6, document1);
      assertNotSame(document6, document3);
      assertSame(document6, document2);
      assertSame(document6, document4);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document6.tagName());
      assertEquals("</", document6.baseUri());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.isBlock());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertEquals("</", document6.location());
      assertEquals(2, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertNotNull(document6);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      
      Elements elements1 = document6.getElementsByAttributeValueContaining("yG#y", "%");
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document6);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document6, document5);
      assertSame(document6, document0);
      assertNotSame(document6, document1);
      assertNotSame(document6, document3);
      assertSame(document6, document2);
      assertSame(document6, document4);
      assertNotSame(elements1, elements0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document6.tagName());
      assertEquals("</", document6.baseUri());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.isBlock());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertEquals("</", document6.location());
      assertEquals(2, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      assertTrue(elements1.equals((Object)elements0));
      
      String string1 = document0.className();
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(string1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Document document7 = (Document)document6.appendText("value");
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document7);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document2, document7);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document6);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document6, document7);
      assertSame(document6, document5);
      assertSame(document6, document0);
      assertNotSame(document6, document1);
      assertNotSame(document6, document3);
      assertSame(document6, document2);
      assertSame(document6, document4);
      assertSame(document7, document0);
      assertNotSame(document7, document3);
      assertNotSame(document7, document1);
      assertSame(document7, document4);
      assertSame(document7, document6);
      assertSame(document7, document2);
      assertSame(document7, document5);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals("#root", document6.tagName());
      assertEquals("</", document6.baseUri());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.isBlock());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertEquals("</", document6.location());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(3, document6.childNodeSize());
      assertTrue(document7.hasParent());
      assertEquals("#document", document7.nodeName());
      assertEquals(Document.QuirksMode.quirks, document7.quirksMode());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(3, document7.childNodeSize());
      assertEquals("#root", document7.tagName());
      assertEquals("</", document7.location());
      assertEquals("</", document7.baseUri());
      assertEquals(0, document7.siblingIndex());
      assertFalse(document7.isBlock());
      assertNotNull(document7);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document1));
      
      Comment comment0 = new Comment("'<GslA^}_H[Vi =N", "#");
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertNotNull(comment0);
      
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertNotNull(xmlDeclaration0);
      
      boolean boolean2 = Element.preserveWhitespace(xmlDeclaration0);
      assertFalse(boolean2);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = element0.hasText();
      assertTrue(boolean3);
      assertEquals("</", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      Document document8 = document6.clone();
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document8);
      assertSame(document0, document7);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document2, document7);
      assertNotSame(document2, document8);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document6);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document8, document6);
      assertNotSame(document8, document1);
      assertNotSame(document8, document2);
      assertNotSame(document8, document3);
      assertNotSame(document8, document5);
      assertNotSame(document8, document0);
      assertNotSame(document8, document4);
      assertNotSame(document8, document7);
      assertSame(document6, document7);
      assertSame(document6, document5);
      assertSame(document6, document0);
      assertNotSame(document6, document1);
      assertNotSame(document6, document3);
      assertSame(document6, document2);
      assertNotSame(document6, document8);
      assertSame(document6, document4);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals("#document", document8.nodeName());
      assertFalse(document8.updateMetaCharsetElement());
      assertFalse(document8.isBlock());
      assertEquals(3, document8.childNodeSize());
      assertFalse(document8.hasParent());
      assertEquals("</", document8.location());
      assertEquals("</", document8.baseUri());
      assertEquals("#root", document8.tagName());
      assertEquals(Document.QuirksMode.quirks, document8.quirksMode());
      assertEquals(0, document8.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertEquals("</", document6.baseUri());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.isBlock());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertEquals("</", document6.location());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(3, document6.childNodeSize());
      assertNotNull(document8);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document8.equals((Object)document6));
      assertFalse(document8.equals((Object)document1));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document5));
      assertFalse(document8.equals((Object)document0));
      assertFalse(document8.equals((Object)document4));
      assertFalse(document8.equals((Object)document7));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      
      Element element1 = document7.appendElement("%");
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document8);
      assertSame(document0, document7);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document2, document7);
      assertNotSame(document2, document8);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document6);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(element1, element0);
      assertSame(document6, document7);
      assertSame(document6, document5);
      assertSame(document6, document0);
      assertNotSame(document6, document1);
      assertNotSame(document6, document3);
      assertSame(document6, document2);
      assertNotSame(document6, document8);
      assertSame(document6, document4);
      assertSame(document7, document0);
      assertNotSame(document7, document3);
      assertNotSame(document7, document1);
      assertSame(document7, document4);
      assertNotSame(document7, document8);
      assertSame(document7, document6);
      assertSame(document7, document2);
      assertSame(document7, document5);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(4, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(4, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(3, element1.siblingIndex());
      assertEquals("%", element1.tagName());
      assertEquals("%", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("</", element1.baseUri());
      assertEquals("#root", document6.tagName());
      assertEquals("</", document6.baseUri());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.isBlock());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertEquals(4, document6.childNodeSize());
      assertEquals("</", document6.location());
      assertFalse(document6.updateMetaCharsetElement());
      assertTrue(document7.hasParent());
      assertEquals("#document", document7.nodeName());
      assertEquals(Document.QuirksMode.quirks, document7.quirksMode());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(4, document7.childNodeSize());
      assertEquals("#root", document7.tagName());
      assertEquals("</", document7.location());
      assertEquals("</", document7.baseUri());
      assertEquals(0, document7.siblingIndex());
      assertFalse(document7.isBlock());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document2.equals((Object)document8));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document8));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document8));
      
      List<DataNode> list0 = element1.dataNodes();
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document8);
      assertSame(document0, document7);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document2, document7);
      assertNotSame(document2, document8);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document6);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(element1, element0);
      assertSame(document6, document7);
      assertSame(document6, document5);
      assertSame(document6, document0);
      assertNotSame(document6, document1);
      assertNotSame(document6, document3);
      assertSame(document6, document2);
      assertNotSame(document6, document8);
      assertSame(document6, document4);
      assertSame(document7, document0);
      assertNotSame(document7, document3);
      assertNotSame(document7, document1);
      assertSame(document7, document4);
      assertNotSame(document7, document8);
      assertSame(document7, document6);
      assertSame(document7, document2);
      assertSame(document7, document5);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(4, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(4, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(3, element1.siblingIndex());
      assertEquals("%", element1.tagName());
      assertEquals("%", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("</", element1.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("#root", document6.tagName());
      assertEquals("</", document6.baseUri());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.isBlock());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertEquals(4, document6.childNodeSize());
      assertEquals("</", document6.location());
      assertFalse(document6.updateMetaCharsetElement());
      assertTrue(document7.hasParent());
      assertEquals("#document", document7.nodeName());
      assertEquals(Document.QuirksMode.quirks, document7.quirksMode());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(4, document7.childNodeSize());
      assertEquals("#root", document7.tagName());
      assertEquals("</", document7.location());
      assertEquals("</", document7.baseUri());
      assertEquals(0, document7.siblingIndex());
      assertFalse(document7.isBlock());
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document2.equals((Object)document8));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document8));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document8));
      
      Document document9 = (Document)document1.prepend("yG#y");
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document9);
      assertNotSame(document0, document3);
      assertNotSame(document0, document8);
      assertSame(document0, document7);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document1, document8);
      assertNotSame(document1, document0);
      assertNotSame(document1, document5);
      assertSame(document1, document3);
      assertNotSame(document1, document7);
      assertNotSame(document1, document2);
      assertNotSame(document1, document6);
      assertSame(document1, document9);
      assertNotSame(document1, document4);
      assertNotSame(document9, document5);
      assertNotSame(document9, document7);
      assertSame(document9, document1);
      assertSame(document9, document3);
      assertNotSame(document9, document0);
      assertNotSame(document9, document4);
      assertNotSame(document9, document8);
      assertNotSame(document9, document2);
      assertNotSame(document9, document6);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(4, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document9.nodeName());
      assertEquals(1, document9.siblingIndex());
      assertFalse(document9.isBlock());
      assertEquals(2, document9.childNodeSize());
      assertFalse(document9.updateMetaCharsetElement());
      assertEquals("</", document9.location());
      assertTrue(document9.hasParent());
      assertEquals("#root", document9.tagName());
      assertEquals("</", document9.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document9.quirksMode());
      assertNotNull(document9);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document1.equals((Object)document8));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document9.equals((Object)document5));
      assertFalse(document9.equals((Object)document7));
      assertFalse(document9.equals((Object)document0));
      assertFalse(document9.equals((Object)document4));
      assertFalse(document9.equals((Object)document8));
      assertFalse(document9.equals((Object)document2));
      assertFalse(document9.equals((Object)document6));
      
      document6.nodelistChanged();
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document9);
      assertNotSame(document0, document3);
      assertNotSame(document0, document8);
      assertSame(document0, document7);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document2, document7);
      assertNotSame(document2, document8);
      assertNotSame(document2, document9);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document6);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document6, document7);
      assertSame(document6, document5);
      assertSame(document6, document0);
      assertNotSame(document6, document9);
      assertNotSame(document6, document1);
      assertNotSame(document6, document3);
      assertSame(document6, document2);
      assertNotSame(document6, document8);
      assertSame(document6, document4);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(4, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(4, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("</", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document6.tagName());
      assertEquals("</", document6.baseUri());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.isBlock());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertEquals(4, document6.childNodeSize());
      assertEquals("</", document6.location());
      assertFalse(document6.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document9));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document2.equals((Object)document8));
      assertFalse(document2.equals((Object)document9));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document6.equals((Object)document9));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document8));
      
      Pattern pattern0 = Pattern.compile(")M$YVea/(Oa", 62);
      assertEquals(")M$YVea/(Oa", pattern0.pattern());
      assertEquals(62, pattern0.flags());
      assertEquals(")M$YVea/(Oa", pattern0.toString());
      assertNotNull(pattern0);
      
      Elements elements2 = document1.getElementsMatchingOwnText(pattern0);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document9);
      assertNotSame(document0, document3);
      assertNotSame(document0, document8);
      assertSame(document0, document7);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document1, document8);
      assertNotSame(document1, document0);
      assertNotSame(document1, document5);
      assertSame(document1, document3);
      assertNotSame(document1, document7);
      assertNotSame(document1, document2);
      assertNotSame(document1, document6);
      assertSame(document1, document9);
      assertNotSame(document1, document4);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(4, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(")M$YVea/(Oa", pattern0.pattern());
      assertEquals(62, pattern0.flags());
      assertEquals(")M$YVea/(Oa", pattern0.toString());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertNotNull(elements2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document9));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document1.equals((Object)document8));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document4));
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertFalse(document0.isBlock());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("</", document1.location());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertFalse(document0.isBlock());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("</", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Elements elements0 = document2.nextElementSiblings();
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      Element element0 = new Element("</");
      assertEquals("</", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Document document4 = (Document)document2.appendTo(element0);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertFalse(document0.isBlock());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("</", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("</", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("</", document4.location());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      
      Document document5 = (Document)document4.toggleClass("ljc");
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertSame(document4, document5);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertSame(document5, document0);
      assertSame(document5, document4);
      assertSame(document5, document2);
      assertFalse(document0.isBlock());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("</", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("</", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("</", document4.location());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals(2, document5.childNodeSize());
      assertTrue(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals("</", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("</", document5.location());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      
      String string0 = document2.baseUri();
      assertEquals("</", string0);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      boolean boolean0 = document2.hasClass("b6hvH$Vs*i]cIc");
      assertFalse(boolean0);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document6 = document2.quirksMode(document_QuirksMode0);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document6);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertSame(document2, document6);
      assertNotSame(document6, document3);
      assertSame(document6, document2);
      assertSame(document6, document4);
      assertSame(document6, document0);
      assertNotSame(document6, document1);
      assertSame(document6, document5);
      assertFalse(document0.isBlock());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertEquals(0, document6.siblingIndex());
      assertEquals(2, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertTrue(document6.hasParent());
      assertEquals("</", document6.location());
      assertEquals("#root", document6.tagName());
      assertEquals("</", document6.baseUri());
      assertNotNull(document6);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document1));
      
      Elements elements1 = document6.getElementsByAttributeValueContaining("yG#y", "%");
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document6);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertSame(document2, document6);
      assertNotSame(document6, document3);
      assertSame(document6, document2);
      assertSame(document6, document4);
      assertSame(document6, document0);
      assertNotSame(document6, document1);
      assertSame(document6, document5);
      assertNotSame(elements1, elements0);
      assertFalse(document0.isBlock());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertEquals(0, document6.siblingIndex());
      assertEquals(2, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertTrue(document6.hasParent());
      assertEquals("</", document6.location());
      assertEquals("#root", document6.tagName());
      assertEquals("</", document6.baseUri());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      
      String string1 = document0.className();
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document6);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertFalse(document0.isBlock());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      
      Document document7 = (Document)document6.appendText("value");
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document7);
      assertSame(document0, document6);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document2, document3);
      assertSame(document2, document7);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertSame(document2, document6);
      assertNotSame(document6, document3);
      assertSame(document6, document2);
      assertSame(document6, document4);
      assertSame(document6, document0);
      assertNotSame(document6, document1);
      assertSame(document6, document5);
      assertSame(document6, document7);
      assertSame(document7, document4);
      assertSame(document7, document2);
      assertSame(document7, document6);
      assertSame(document7, document5);
      assertSame(document7, document0);
      assertNotSame(document7, document1);
      assertNotSame(document7, document3);
      assertFalse(document0.isBlock());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertEquals(3, document6.childNodeSize());
      assertTrue(document6.hasParent());
      assertEquals("</", document6.location());
      assertEquals("#root", document6.tagName());
      assertEquals("</", document6.baseUri());
      assertEquals(Document.QuirksMode.quirks, document7.quirksMode());
      assertFalse(document7.isBlock());
      assertEquals(3, document7.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("</", document7.baseUri());
      assertEquals(0, document7.siblingIndex());
      assertEquals("</", document7.location());
      assertTrue(document7.hasParent());
      assertEquals("#root", document7.tagName());
      assertEquals("#document", document7.nodeName());
      assertNotNull(document7);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document3));
      
      Comment comment0 = new Comment("'<GslA^}_H[Vi =N", "#");
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(comment0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.indentAmount(67);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(67, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(67, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings3 = new Document.OutputSettings();
      assertTrue(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertNotNull(document_OutputSettings3);
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      
      Document document8 = (Document)document1.val("<");
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document7);
      assertSame(document0, document6);
      assertNotSame(document0, document1);
      assertNotSame(document0, document8);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document1, document3);
      assertNotSame(document1, document6);
      assertNotSame(document1, document5);
      assertSame(document1, document8);
      assertNotSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document7);
      assertNotSame(document8, document6);
      assertNotSame(document8, document2);
      assertSame(document8, document3);
      assertSame(document8, document1);
      assertNotSame(document8, document4);
      assertNotSame(document8, document7);
      assertNotSame(document8, document0);
      assertNotSame(document8, document5);
      assertFalse(document0.isBlock());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertTrue(document1.hasParent());
      assertEquals(1, document8.siblingIndex());
      assertEquals("#document", document8.nodeName());
      assertFalse(document8.isBlock());
      assertFalse(document8.updateMetaCharsetElement());
      assertTrue(document8.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertEquals("</", document8.location());
      assertEquals("</", document8.baseUri());
      assertEquals(1, document8.childNodeSize());
      assertEquals("#root", document8.tagName());
      assertNotNull(document8);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document8.equals((Object)document6));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document8.equals((Object)document4));
      assertFalse(document8.equals((Object)document7));
      assertFalse(document8.equals((Object)document0));
      assertFalse(document8.equals((Object)document5));
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("9Pt{e~3b.RCS 3G7h", ": ");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(": ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(": ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals(": ", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(": ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      
      Document document2 = document1.clone();
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(": ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals(": ", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(": ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(": ", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(": ", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document1;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "S`4");
      assertFalse(boolean0);
      
      CDataNode cDataNode0 = new CDataNode("S`4");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Node node0 = cDataNode0.parent();
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNull(node0);
      
      nodeArray0[1] = null;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document2;
      String string0 = document1.data();
      assertEquals("", string0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(": ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals(": ", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(": ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      
      Elements elements0 = document2.getAllElements();
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(": ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals(": ", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(": ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(": ", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(": ", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      Elements elements1 = document0.getElementsByAttributeValue("X", ": ");
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(": ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(elements1.equals((Object)elements0));
      
      Elements elements2 = document1.previousElementSiblings();
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(": ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals(": ", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(": ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertNotNull(elements2);
      assertFalse(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      
      List<Node> list0 = document2.ensureChildNodes();
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(": ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals(": ", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(": ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(": ", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(": ", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      Elements elements3 = document0.getElementsMatchingOwnText("");
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(": ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(4, elements3.size());
      assertFalse(elements3.isEmpty());
      assertNotNull(elements3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(elements3.equals((Object)elements1));
      assertFalse(elements3.equals((Object)elements2));
      assertFalse(elements3.equals((Object)elements0));
      
      // Undeclared exception!
      try { 
        document2.insertChildren(560, (Collection<? extends Node>) elements3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Element element0 = new Element(".%s");
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(".%s", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(".%s", element0.tagName());
      assertNotNull(element0);
      
      boolean boolean0 = element0.hasClass(".%s");
      assertFalse(boolean0);
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(".%s", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(".%s", element0.tagName());
      
      DataNode dataNode0 = new DataNode("<");
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      dataNode0.coreValue("<");
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      
      DataNode dataNode1 = dataNode0.setWholeData("xGTuM^k %6*i");
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode1, dataNode0);
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode1.nodeName());
      assertEquals(0, dataNode1.siblingIndex());
      assertFalse(dataNode1.hasParent());
      assertNotNull(dataNode1);
      
      Element element1 = element0.prependChild(dataNode1);
      assertSame(element0, element1);
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode1, dataNode0);
      assertSame(element1, element0);
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(".%s", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(".%s", element0.tagName());
      assertEquals("#data", dataNode0.nodeName());
      assertTrue(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertTrue(dataNode1.hasParent());
      assertEquals("#data", dataNode1.nodeName());
      assertEquals(0, dataNode1.siblingIndex());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals(".%s", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals(".%s", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertNotNull(element1);
      
      String string0 = element0.html();
      assertEquals("xGTuM^k %6*i", string0);
      assertSame(element0, element1);
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(".%s", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(".%s", element0.tagName());
      assertNotNull(string0);
      
      Elements elements0 = element0.children();
      assertSame(element0, element1);
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(".%s", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(".%s", element0.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = element0.getElementsByClass("xGTuM^k %6*i");
      assertSame(element0, element1);
      assertNotSame(elements1, elements0);
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(".%s", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(".%s", element0.tagName());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      
      Element element2 = element0.attr("xGTuM^k %6*i", false);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(".%s", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(".%s", element0.tagName());
      assertFalse(element2.isBlock());
      assertEquals(".%s", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertEquals(".%s", element2.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertFalse(element2.hasParent());
      assertEquals("", element2.baseUri());
      assertNotNull(element2);
      
      CDataNode cDataNode0 = new CDataNode("Bg8YY&");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Pattern pattern0 = Pattern.compile(".%s", 62);
      assertEquals(".%s", pattern0.toString());
      assertEquals(".%s", pattern0.pattern());
      assertEquals(62, pattern0.flags());
      assertNotNull(pattern0);
      
      Pattern pattern1 = Pattern.compile("\"(N5@G{Ipda", (-3307));
      assertNotSame(pattern1, pattern0);
      assertEquals((-3243), pattern1.flags());
      assertEquals("\"(N5@G{Ipda", pattern1.pattern());
      assertEquals("\"(N5@G{Ipda", pattern1.toString());
      assertNotNull(pattern1);
      assertFalse(pattern1.equals((Object)pattern0));
      
      Document document0 = new Document("Bg8YY&");
      assertEquals("Bg8YY&", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Bg8YY&", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("Bg8YY&", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Bg8YY&", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("Bg8YY&", document1.baseUri());
      assertEquals("Bg8YY&", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      Elements elements2 = document1.getElementsMatchingOwnText(pattern0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotSame(pattern0, pattern1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertEquals(".%s", pattern0.toString());
      assertEquals(".%s", pattern0.pattern());
      assertEquals(62, pattern0.flags());
      assertEquals("Bg8YY&", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Bg8YY&", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("Bg8YY&", document1.baseUri());
      assertEquals("Bg8YY&", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(elements2);
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertFalse(pattern0.equals((Object)pattern1));
      
      // Undeclared exception!
      try { 
        element2.insertChildren((-887), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("9Pt{e~3b.RCS 3G7h", ": ");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.baseUri());
      assertEquals(": ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "head");
      assertFalse(boolean0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.baseUri());
      assertEquals(": ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(": ", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(": ", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      Document document2 = document1.clone();
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.baseUri());
      assertEquals(": ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(": ", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(": ", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(": ", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(": ", document2.baseUri());
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      String string0 = document2.wholeText();
      assertEquals("9Pt{e~3b.RCS 3G7h", string0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.baseUri());
      assertEquals(": ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(": ", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(": ", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(": ", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(": ", document2.baseUri());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      Node[] nodeArray0 = new Node[6];
      nodeArray0[1] = (Node) document1;
      CDataNode cDataNode0 = new CDataNode("S`4");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      Node node0 = cDataNode0.parent();
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNull(node0);
      
      nodeArray0[1] = null;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document2;
      String string1 = document1.data();
      assertEquals("", string1);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.baseUri());
      assertEquals(": ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(": ", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(": ", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotNull(string1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(string1.equals((Object)string0));
      
      Elements elements0 = document2.getAllElements();
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.baseUri());
      assertEquals(": ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(": ", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(": ", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(": ", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(": ", document2.baseUri());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      Elements elements1 = document0.getElementsByAttributeValue("X", ": ");
      assertNotSame(elements1, elements0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.baseUri());
      assertEquals(": ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      assertFalse(document0.equals((Object)document2));
      
      Elements elements2 = document1.previousElementSiblings();
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.baseUri());
      assertEquals(": ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(": ", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(": ", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotNull(elements2);
      assertFalse(document0.equals((Object)document2));
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(document1.equals((Object)document2));
      
      List<Node> list0 = document2.ensureChildNodes();
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.baseUri());
      assertEquals(": ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(": ", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(": ", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(": ", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(": ", document2.baseUri());
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      Elements elements3 = document0.getElementsMatchingOwnText("");
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.baseUri());
      assertEquals(": ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(elements3.isEmpty());
      assertEquals(4, elements3.size());
      assertNotNull(elements3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(elements3.equals((Object)elements2));
      assertFalse(elements3.equals((Object)elements1));
      assertFalse(elements3.equals((Object)elements0));
      
      String string2 = document0.cssSelector();
      assertEquals("#root", string2);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.baseUri());
      assertEquals(": ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(string2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Elements elements4 = document1.getElementsByAttributeValueMatching((String) null, ";");
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(elements4, elements1);
      assertNotSame(elements4, elements2);
      assertNotSame(elements4, elements3);
      assertNotSame(elements4, elements0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.baseUri());
      assertEquals(": ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(": ", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(": ", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(elements4.isEmpty());
      assertEquals(0, elements4.size());
      assertNotNull(elements4);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertTrue(elements4.equals((Object)elements2));
      assertTrue(elements4.equals((Object)elements1));
      assertFalse(elements4.equals((Object)elements3));
      assertFalse(elements4.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("d'AtbtKC>ug", parseSettings0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertNotNull(tag0);
      
      FormElement formElement0 = new FormElement(tag0, "-}hJudcG'k9", (Attributes) null);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertNotNull(formElement0);
      
      FormElement formElement1 = formElement0.addElement((Element) null);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement1.hasParent());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertNotNull(formElement1);
      
      Element element0 = formElement1.prepend("d'AtbtKC>ug");
      assertSame(formElement0, formElement1);
      assertSame(formElement0, element0);
      assertSame(formElement1, formElement0);
      assertSame(formElement1, element0);
      assertSame(element0, formElement1);
      assertSame(element0, formElement0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement1.hasParent());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("-}hJudcG'k9", element0.baseUri());
      assertEquals("d'AtbtKC>ug", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("d'AtbtKC>ug", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      formElement1.reparentChild(formElement0);
      assertSame(formElement0, formElement1);
      assertSame(formElement0, element0);
      assertSame(formElement1, formElement0);
      assertSame(formElement1, element0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertTrue(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertTrue(formElement1.hasParent());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      
      int int0 = formElement1.elementSiblingIndex();
      assertEquals(0, int0);
      assertSame(formElement0, formElement1);
      assertSame(formElement0, element0);
      assertSame(formElement1, formElement0);
      assertSame(formElement1, element0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertTrue(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertTrue(formElement1.hasParent());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(665);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(665, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(665, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertNotNull(document_OutputSettings2);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      
      Document.OutputSettings document_OutputSettings3 = new Document.OutputSettings();
      assertFalse(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertNotNull(document_OutputSettings3);
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      
      // Undeclared exception!
      formElement0.val(" />");
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hJg1D<;&h '})5@?|", "");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      Element element0 = document1.previousElementSibling();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNull(element0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        parser0.parseInput((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Element element0 = new Element(".%s");
      assertFalse(element0.isBlock());
      assertEquals(".%s", element0.tagName());
      assertEquals(".%s", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      boolean boolean0 = element0.hasClass(".%s");
      assertFalse(boolean0);
      assertFalse(element0.isBlock());
      assertEquals(".%s", element0.tagName());
      assertEquals(".%s", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      
      DataNode dataNode0 = new DataNode("<");
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      dataNode0.coreValue("<");
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      
      DataNode dataNode1 = dataNode0.setWholeData("xGTuM^k %6*i");
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode1, dataNode0);
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode1.nodeName());
      assertFalse(dataNode1.hasParent());
      assertEquals(0, dataNode1.siblingIndex());
      assertNotNull(dataNode1);
      
      Element element1 = element0.prependChild(dataNode1);
      assertSame(element0, element1);
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode1, dataNode0);
      assertSame(element1, element0);
      assertFalse(element0.isBlock());
      assertEquals(".%s", element0.tagName());
      assertEquals(".%s", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertTrue(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode1.nodeName());
      assertEquals(0, dataNode1.siblingIndex());
      assertTrue(dataNode1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(".%s", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(".%s", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertNotNull(element1);
      
      String string0 = element0.html();
      assertEquals("xGTuM^k %6*i", string0);
      assertSame(element0, element1);
      assertFalse(element0.isBlock());
      assertEquals(".%s", element0.tagName());
      assertEquals(".%s", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertNotNull(string0);
      
      Elements elements0 = element0.children();
      assertSame(element0, element1);
      assertFalse(element0.isBlock());
      assertEquals(".%s", element0.tagName());
      assertEquals(".%s", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Attributes attributes0 = element1.attributes();
      assertSame(element0, element1);
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode1, dataNode0);
      assertSame(element1, element0);
      assertFalse(element0.isBlock());
      assertEquals(".%s", element0.tagName());
      assertEquals(".%s", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertTrue(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode1.nodeName());
      assertEquals(0, dataNode1.siblingIndex());
      assertTrue(dataNode1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(".%s", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(".%s", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Elements elements1 = element0.getElementsByClass("xGTuM^k %6*i");
      assertSame(element0, element1);
      assertNotSame(elements1, elements0);
      assertFalse(element0.isBlock());
      assertEquals(".%s", element0.tagName());
      assertEquals(".%s", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      
      String string1 = "YMdLWE?.nXbYHo";
      MockFile mockFile0 = new MockFile("YMdLWE?.nXbYHo");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      assertNotNull(mockFileWriter0);
      
      MockFileWriter mockFileWriter1 = element0.html(mockFileWriter0);
      assertSame(element0, element1);
      assertSame(mockFileWriter0, mockFileWriter1);
      assertSame(mockFileWriter1, mockFileWriter0);
      assertFalse(element0.isBlock());
      assertEquals(".%s", element0.tagName());
      assertEquals(".%s", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("YMdLWE?.nXbYHo", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("YMdLWE?.nXbYHo", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNotNull(mockFileWriter1);
      
      String string2 = dataNode0.toString();
      assertEquals("xGTuM^k %6*i", string2);
      assertSame(dataNode0, dataNode1);
      assertTrue(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Element element2 = element1.prependChild(dataNode1);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode1, dataNode0);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertFalse(element0.isBlock());
      assertEquals(".%s", element0.tagName());
      assertEquals(".%s", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertTrue(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode1.nodeName());
      assertEquals(0, dataNode1.siblingIndex());
      assertTrue(dataNode1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(".%s", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(".%s", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertEquals(".%s", element2.nodeName());
      assertFalse(element2.hasParent());
      assertEquals(".%s", element2.tagName());
      assertEquals(1, element2.childNodeSize());
      assertNotNull(element2);
      
      DataNode dataNode2 = new DataNode("InCell");
      assertEquals(0, dataNode2.siblingIndex());
      assertFalse(dataNode2.hasParent());
      assertEquals("#data", dataNode2.nodeName());
      assertNotNull(dataNode2);
      assertFalse(dataNode2.equals((Object)dataNode1));
      assertFalse(dataNode2.equals((Object)dataNode0));
      
      // Undeclared exception!
      try { 
        Parser.parseBodyFragment("xGTuM^k %6*i", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Elements elements0 = document0.previousElementSiblings();
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      CDataNode cDataNode0 = new CDataNode("br");
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      Elements elements1 = document0.parents();
      assertNotSame(elements1, elements0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = new Document("yc1@;g");
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("yc1@;g", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("yc1@;g", document0.location());
      assertNotNull(document0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "rgod!A^x");
      assertFalse(boolean0);
      
      Element element0 = document0.shallowClone();
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("yc1@;g", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("yc1@;g", document0.location());
      assertFalse(element0.isBlock());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("yc1@;g", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#root", element0.nodeName());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      Elements elements0 = element0.getElementsByAttributeValueEnding("rgod!A^x", "rgod!A^x");
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("yc1@;g", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("yc1@;g", document0.location());
      assertFalse(element0.isBlock());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("yc1@;g", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#root", element0.nodeName());
      assertFalse(element0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      String string0 = " > ";
      Pattern pattern0 = Pattern.compile(" > ", (-1438));
      assertEquals(" > ", pattern0.pattern());
      assertEquals((-1438), pattern0.flags());
      assertEquals(" > ", pattern0.toString());
      assertNotNull(pattern0);
      
      Elements elements1 = element0.getElementsMatchingOwnText(pattern0);
      assertNotSame(elements1, elements0);
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("yc1@;g", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("yc1@;g", document0.location());
      assertFalse(element0.isBlock());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("yc1@;g", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#root", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(" > ", pattern0.pattern());
      assertEquals((-1438), pattern0.flags());
      assertEquals(" > ", pattern0.toString());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      
      String string1 = "i@o?TY8zl";
      // Undeclared exception!
      try { 
        document0.text("i@o?TY8zl");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertNotNull(document0);
      
      TextNode textNode0 = new TextNode("", "");
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Document document1 = (Document)document0.appendChild(textNode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1, textNode0.siblingIndex());
      assertTrue(textNode0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      DataNode dataNode0 = new DataNode("org.jsoup.nodes.Element");
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(dataNode0.hasParent());
      assertNotNull(dataNode0);
      
      dataNode0.coreValue("");
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(dataNode0.hasParent());
      
      document1.reparentChild(document0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1, textNode0.siblingIndex());
      assertTrue(textNode0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      
      Pattern pattern0 = Pattern.compile("HX]");
      assertEquals("HX]", pattern0.pattern());
      assertEquals("HX]", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertNotNull(pattern0);
      
      Matcher matcher0 = pattern0.matcher("HX]");
      assertEquals("HX]", pattern0.pattern());
      assertEquals("HX]", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertTrue(matcher0.hasAnchoringBounds());
      assertEquals("java.util.regex.Matcher[pattern=HX] region=0,3 lastmatch=]", matcher0.toString());
      assertFalse(matcher0.hasTransparentBounds());
      assertEquals(0, matcher0.groupCount());
      assertNotNull(matcher0);
      
      Elements elements0 = document1.getElementsMatchingText(pattern0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1, textNode0.siblingIndex());
      assertTrue(textNode0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("HX]", pattern0.pattern());
      assertEquals("HX]", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      String string0 = "CommentStart";
      // Undeclared exception!
      document1.tagName("CommentStart");
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Element element0 = new Element("b6hvH$Vs*i]cIc");
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("b6hvH$Vs*i]cIc", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("b6hvH$Vs*i]cIc", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("b6hvH$Vs*i]cIc"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Element element1 = element0.classNames((Set<String>) linkedHashSet0);
      assertFalse(linkedHashSet0.contains("b6hvH$Vs*i]cIc"));
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("b6hvH$Vs*i]cIc", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("b6hvH$Vs*i]cIc", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("b6hvH$Vs*i]cIc", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("b6hvH$Vs*i]cIc", element1.tagName());
      assertNotNull(element1);
      
      DataNode dataNode0 = new DataNode("b6hvH$Vs*i]cIc");
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertNotNull(dataNode0);
      
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
      assertSame(element0, element1);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("b6hvH$Vs*i]cIc", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("b6hvH$Vs*i]cIc", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      
      Elements elements0 = element0.getElementsMatchingText(":prev%s");
      assertSame(element0, element1);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("b6hvH$Vs*i]cIc", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("b6hvH$Vs*i]cIc", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      // Undeclared exception!
      try { 
        element0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      String string0 = "i\\FTj5}5!pE=v-pf";
      Elements elements0 = document0.getElementsByIndexEquals(298);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document1 = (Document)document0.text("iFTj5}5!pE=v-pf");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      String string1 = "i@o?TY8zl";
      Document document2 = (Document)document0.text("i@o?TY8zl");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      
      String string2 = "";
      Document document3 = new Document("");
      assertEquals("", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertFalse(document3.hasParent());
      assertNotNull(document3);
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      
      Document document4 = (Document)document2.text("i@o?TY8zl");
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals("", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      
      Document document5 = (Document)document2.prependChild(document4);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document5);
      assertSame(document4, document5);
      assertNotSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertNotSame(document5, document3);
      assertSame(document5, document2);
      assertSame(document5, document4);
      assertSame(document5, document0);
      assertSame(document5, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertTrue(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals("", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("", document5.baseUri());
      assertFalse(document5.isBlock());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("", document5.location());
      assertEquals(2, document5.childNodeSize());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document5.equals((Object)document3));
      
      // Undeclared exception!
      document2.hasSameValue(document3);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertNotNull(document0);
      
      TextNode textNode0 = new TextNode("", "");
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Document document1 = (Document)document0.appendChild(textNode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertTrue(textNode0.hasParent());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      boolean boolean0 = document1.hasText();
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertTrue(textNode0.hasParent());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      
      Elements elements0 = document1.getElementsMatchingText("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertTrue(textNode0.hasParent());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertNotNull(elements0);
      
      MockFile mockFile0 = new MockFile("#2)HED");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      assertNotNull(mockFileWriter0);
      
      MockFileWriter mockFileWriter1 = document0.html(mockFileWriter0);
      assertSame(document0, document1);
      assertSame(mockFileWriter0, mockFileWriter1);
      assertSame(mockFileWriter1, mockFileWriter0);
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("#2)HED", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("#2)HED", mockFile0.getName());
      assertNotNull(mockFileWriter1);
      
      DataNode dataNode0 = DataNode.createFromEncoded("l;o>`XF63hArIikI4I", "");
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertNotNull(dataNode0);
      
      String string0 = dataNode0.toString();
      assertEquals("l;o>`XF63hArIikI4I", string0);
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertNotNull(string0);
      
      Document document2 = (Document)document0.prependChild(dataNode0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertTrue(dataNode0.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(3, document2.childNodeSize());
      assertNotNull(document2);
      
      Document document3 = (Document)document1.text("Uu'Qtf64}Xg");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertTrue(textNode0.hasParent());
      assertEquals(2, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertNotNull(document3);
      
      Elements elements1 = document1.getElementsByAttributeValue("1v", "org.jsoup.select.Evaluator$AllElements");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertTrue(textNode0.hasParent());
      assertEquals(2, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      
      Document document4 = (Document)document1.attr("Cpwd", "Cpwd");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertTrue(textNode0.hasParent());
      assertEquals(2, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(3, document4.childNodeSize());
      assertEquals("", document4.location());
      assertNotNull(document4);
      
      Elements elements2 = document4.getElementsByAttributeValueMatching(".", "Uu'Qtf64}Xg");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertTrue(textNode0.hasParent());
      assertEquals(2, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(3, document4.childNodeSize());
      assertEquals("", document4.location());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertNotNull(elements2);
      assertFalse(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      
      Pattern pattern0 = Pattern.compile("body");
      assertEquals("body", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("body", pattern0.toString());
      assertNotNull(pattern0);
      
      Document document5 = Parser.parseBodyFragment("#2)HED", "l;o>`XF63hArIikI4I");
      assertNotSame(document5, document0);
      assertNotSame(document5, document4);
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("l;o>`XF63hArIikI4I", document5.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertEquals("l;o>`XF63hArIikI4I", document5.location());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertNotNull(document5);
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      
      Elements elements3 = document5.getElementsMatchingText(pattern0);
      assertNotSame(document5, document0);
      assertNotSame(document5, document4);
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("l;o>`XF63hArIikI4I", document5.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertEquals("l;o>`XF63hArIikI4I", document5.location());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertEquals("body", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("body", pattern0.toString());
      assertNotNull(elements3);
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertTrue(elements3.equals((Object)elements2));
      assertFalse(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements1));
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Element element0 = new Element(".%s");
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(".%s", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(".%s", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      boolean boolean0 = element0.hasClass(".%s");
      assertFalse(boolean0);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(".%s", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(".%s", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      
      DataNode dataNode0 = new DataNode("<");
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertNotNull(dataNode0);
      
      dataNode0.coreValue("<");
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      
      DataNode dataNode1 = dataNode0.setWholeData("29");
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode1, dataNode0);
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode1.siblingIndex());
      assertEquals("#data", dataNode1.nodeName());
      assertFalse(dataNode1.hasParent());
      assertNotNull(dataNode1);
      
      DataNode dataNode2 = dataNode0.setWholeData("xGTuM^k %6*i");
      assertSame(dataNode0, dataNode2);
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode2, dataNode1);
      assertSame(dataNode2, dataNode0);
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode2.siblingIndex());
      assertEquals("#data", dataNode2.nodeName());
      assertFalse(dataNode2.hasParent());
      assertNotNull(dataNode2);
      
      Element element1 = element0.prependChild(dataNode2);
      assertSame(element0, element1);
      assertSame(dataNode0, dataNode2);
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode2, dataNode1);
      assertSame(dataNode2, dataNode0);
      assertSame(element1, element0);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(".%s", element0.tagName());
      assertEquals(".%s", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertTrue(dataNode0.hasParent());
      assertEquals(0, dataNode2.siblingIndex());
      assertTrue(dataNode2.hasParent());
      assertEquals("#data", dataNode2.nodeName());
      assertEquals(".%s", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals(".%s", element1.tagName());
      assertNotNull(element1);
      
      String string0 = element0.html();
      assertEquals("xGTuM^k %6*i", string0);
      assertSame(element0, element1);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(".%s", element0.tagName());
      assertEquals(".%s", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertNotNull(string0);
      
      Elements elements0 = element0.children();
      assertSame(element0, element1);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(".%s", element0.tagName());
      assertEquals(".%s", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = element0.getElementsByClass("xGTuM^k %6*i");
      assertSame(element0, element1);
      assertNotSame(elements1, elements0);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(".%s", element0.tagName());
      assertEquals(".%s", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      
      MockFile mockFile0 = new MockFile("YMdLWE?.nXbYHo");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      assertNotNull(mockFileWriter0);
      
      MockFileWriter mockFileWriter1 = element0.html(mockFileWriter0);
      assertSame(element0, element1);
      assertSame(mockFileWriter0, mockFileWriter1);
      assertSame(mockFileWriter1, mockFileWriter0);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(".%s", element0.tagName());
      assertEquals(".%s", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals("YMdLWE?.nXbYHo", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("YMdLWE?.nXbYHo", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotNull(mockFileWriter1);
      
      String string1 = dataNode0.toString();
      assertEquals("xGTuM^k %6*i", string1);
      assertSame(dataNode0, dataNode2);
      assertSame(dataNode0, dataNode1);
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertTrue(dataNode0.hasParent());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      Element element2 = element1.prependChild(dataNode2);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(dataNode0, dataNode2);
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode2, dataNode1);
      assertSame(dataNode2, dataNode0);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(".%s", element0.tagName());
      assertEquals(".%s", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertTrue(dataNode0.hasParent());
      assertEquals(0, dataNode2.siblingIndex());
      assertTrue(dataNode2.hasParent());
      assertEquals("#data", dataNode2.nodeName());
      assertEquals(".%s", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals(".%s", element1.tagName());
      assertEquals(1, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals(".%s", element2.nodeName());
      assertFalse(element2.hasParent());
      assertEquals(".%s", element2.tagName());
      assertNotNull(element2);
      
      Element element3 = element2.text(".%s");
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element0, element3);
      assertSame(dataNode0, dataNode2);
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode2, dataNode1);
      assertSame(dataNode2, dataNode0);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element1, element3);
      assertSame(element2, element0);
      assertSame(element2, element3);
      assertSame(element2, element1);
      assertSame(element3, element2);
      assertSame(element3, element0);
      assertSame(element3, element1);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(".%s", element0.tagName());
      assertEquals(".%s", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertTrue(dataNode0.hasParent());
      assertEquals(0, dataNode2.siblingIndex());
      assertTrue(dataNode2.hasParent());
      assertEquals("#data", dataNode2.nodeName());
      assertEquals(".%s", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals(".%s", element1.tagName());
      assertEquals(1, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals(".%s", element2.nodeName());
      assertFalse(element2.hasParent());
      assertEquals(".%s", element2.tagName());
      assertEquals(0, element3.siblingIndex());
      assertFalse(element3.isBlock());
      assertFalse(element3.hasParent());
      assertEquals("", element3.baseUri());
      assertEquals(".%s", element3.nodeName());
      assertEquals(1, element3.childNodeSize());
      assertEquals(".%s", element3.tagName());
      assertNotNull(element3);
      
      Elements elements2 = element1.getElementsByAttributeValue(".", "<");
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element0, element3);
      assertSame(dataNode0, dataNode2);
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode2, dataNode1);
      assertSame(dataNode2, dataNode0);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element1, element3);
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(".%s", element0.tagName());
      assertEquals(".%s", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertTrue(dataNode0.hasParent());
      assertEquals(0, dataNode2.siblingIndex());
      assertTrue(dataNode2.hasParent());
      assertEquals("#data", dataNode2.nodeName());
      assertEquals(".%s", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals(".%s", element1.tagName());
      assertNotNull(elements2);
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      
      Element element4 = element1.attr("Cpwd", "<");
      assertSame(element0, element4);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element0, element3);
      assertSame(element4, element1);
      assertSame(element4, element3);
      assertSame(element4, element0);
      assertSame(element4, element2);
      assertSame(dataNode0, dataNode2);
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode2, dataNode1);
      assertSame(dataNode2, dataNode0);
      assertSame(element1, element4);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element1, element3);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(".%s", element0.tagName());
      assertEquals(".%s", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element4.hasParent());
      assertEquals("", element4.baseUri());
      assertEquals(".%s", element4.nodeName());
      assertEquals(1, element4.childNodeSize());
      assertEquals(0, element4.siblingIndex());
      assertFalse(element4.isBlock());
      assertEquals(".%s", element4.tagName());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertTrue(dataNode0.hasParent());
      assertEquals(0, dataNode2.siblingIndex());
      assertTrue(dataNode2.hasParent());
      assertEquals("#data", dataNode2.nodeName());
      assertEquals(".%s", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals(".%s", element1.tagName());
      assertNotNull(element4);
      
      Elements elements3 = element3.getElementsByAttributeValueMatching("B6)C@|M#pB*jx;U", "k&3elA");
      assertSame(element0, element4);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element0, element3);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      assertSame(dataNode0, dataNode2);
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode2, dataNode1);
      assertSame(dataNode2, dataNode0);
      assertSame(element1, element4);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element1, element3);
      assertSame(element2, element0);
      assertSame(element2, element3);
      assertSame(element2, element4);
      assertSame(element2, element1);
      assertSame(element3, element4);
      assertSame(element3, element2);
      assertSame(element3, element0);
      assertSame(element3, element1);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(".%s", element0.tagName());
      assertEquals(".%s", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertTrue(dataNode0.hasParent());
      assertEquals(0, dataNode2.siblingIndex());
      assertTrue(dataNode2.hasParent());
      assertEquals("#data", dataNode2.nodeName());
      assertEquals(".%s", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals(".%s", element1.tagName());
      assertEquals(1, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals(".%s", element2.nodeName());
      assertFalse(element2.hasParent());
      assertEquals(".%s", element2.tagName());
      assertEquals(0, element3.siblingIndex());
      assertFalse(element3.isBlock());
      assertFalse(element3.hasParent());
      assertEquals("", element3.baseUri());
      assertEquals(".%s", element3.nodeName());
      assertEquals(1, element3.childNodeSize());
      assertEquals(".%s", element3.tagName());
      assertNotNull(elements3);
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements0));
      
      Pattern pattern0 = Pattern.compile("textarea");
      assertEquals(0, pattern0.flags());
      assertEquals("textarea", pattern0.pattern());
      assertEquals("textarea", pattern0.toString());
      assertNotNull(pattern0);
      
      Elements elements4 = element0.getElementsMatchingText(pattern0);
      assertSame(element0, element4);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element0, element3);
      assertNotSame(elements4, elements0);
      assertNotSame(elements4, elements1);
      assertNotSame(elements4, elements2);
      assertNotSame(elements4, elements3);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(".%s", element0.tagName());
      assertEquals(".%s", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, pattern0.flags());
      assertEquals("textarea", pattern0.pattern());
      assertEquals("textarea", pattern0.toString());
      assertEquals(0, elements4.size());
      assertTrue(elements4.isEmpty());
      assertNotNull(elements4);
      assertTrue(elements4.equals((Object)elements1));
      assertTrue(elements4.equals((Object)elements2));
      assertTrue(elements4.equals((Object)elements3));
      assertTrue(elements4.equals((Object)elements0));
      
      Elements elements5 = element1.children();
      assertSame(element0, element4);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element0, element3);
      assertSame(dataNode0, dataNode2);
      assertSame(dataNode0, dataNode1);
      assertNotSame(elements5, elements1);
      assertNotSame(elements5, elements4);
      assertNotSame(elements5, elements0);
      assertNotSame(elements5, elements2);
      assertNotSame(elements5, elements3);
      assertSame(dataNode2, dataNode1);
      assertSame(dataNode2, dataNode0);
      assertSame(element1, element4);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element1, element3);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(".%s", element0.tagName());
      assertEquals(".%s", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertTrue(dataNode0.hasParent());
      assertEquals(0, elements5.size());
      assertTrue(elements5.isEmpty());
      assertEquals(0, dataNode2.siblingIndex());
      assertTrue(dataNode2.hasParent());
      assertEquals("#data", dataNode2.nodeName());
      assertEquals(".%s", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals(".%s", element1.tagName());
      assertNotNull(elements5);
      assertTrue(elements5.equals((Object)elements3));
      assertTrue(elements5.equals((Object)elements2));
      assertTrue(elements5.equals((Object)elements4));
      assertTrue(elements5.equals((Object)elements1));
      assertTrue(elements5.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":not%s", "Tag name must not be empty.");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals("Tag name must not be empty.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document2 = document1.parser(parser0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals("Tag name must not be empty.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Tag tag0 = Tag.valueOf(":not%s");
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertEquals(":not%s", tag0.toString());
      assertEquals(":not%s", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "dir");
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertEquals(":not%s", tag0.toString());
      assertEquals(":not%s", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(element0.hasParent());
      assertEquals("dir", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(":not%s", element0.nodeName());
      assertEquals(":not%s", element0.tagName());
      assertNotNull(element0);
      
      Document document3 = (Document)document1.appendChild(document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(parser0.isTrackErrors());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("Tag name must not be empty.", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertTrue(document3.hasParent());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document3;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) document3;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document3;
      // Undeclared exception!
      try { 
        document2.insertChildren((-1377), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = new Document("yc1@;g");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("yc1@;g", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("yc1@;g", document0.location());
      assertNotNull(document0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "rgod!A^x");
      assertFalse(boolean0);
      
      Element element0 = document0.shallowClone();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("yc1@;g", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("yc1@;g", document0.location());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("yc1@;g", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#root", element0.tagName());
      assertEquals("#root", element0.nodeName());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      Elements elements0 = document0.getElementsByAttribute("yc1@;g");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("yc1@;g", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("yc1@;g", document0.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = element0.getElementsByAttributeValueEnding("rgod!A^x", "rgod!A^x");
      assertNotSame(elements1, elements0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("yc1@;g", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("yc1@;g", document0.location());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("yc1@;g", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#root", element0.tagName());
      assertEquals("#root", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      
      String string0 = " > ";
      int int0 = (-1438);
      Pattern pattern0 = Pattern.compile(" > ", (-1438));
      assertEquals((-1438), pattern0.flags());
      assertEquals(" > ", pattern0.pattern());
      assertEquals(" > ", pattern0.toString());
      assertNotNull(pattern0);
      
      Elements elements2 = element0.getElementsByAttributeValueMatching(" > ", pattern0);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("yc1@;g", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("yc1@;g", document0.location());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("yc1@;g", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#root", element0.tagName());
      assertEquals("#root", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals((-1438), pattern0.flags());
      assertEquals(" > ", pattern0.pattern());
      assertEquals(" > ", pattern0.toString());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertNotNull(elements2);
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      
      Element element1 = element0.prepend("yc1@;g");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("yc1@;g", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("yc1@;g", document0.location());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("yc1@;g", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("#root", element0.tagName());
      assertEquals("#root", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("#root", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("#root", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("yc1@;g", element1.baseUri());
      assertNotNull(element1);
      
      // Undeclared exception!
      try { 
        element0.is((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = new Document("yc1@;g");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("yc1@;g", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("yc1@;g", document0.location());
      assertNotNull(document0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "rgod!A^x");
      assertFalse(boolean0);
      
      Element element0 = document0.shallowClone();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("yc1@;g", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("yc1@;g", document0.location());
      assertFalse(element0.hasParent());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("yc1@;g", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", element0.nodeName());
      assertNotNull(element0);
      
      Elements elements0 = element0.getElementsByAttributeValueEnding("rgod!A^x", "rgod!A^x");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("yc1@;g", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("yc1@;g", document0.location());
      assertFalse(element0.hasParent());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("yc1@;g", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", element0.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string0 = " > ";
      int int0 = (-1438);
      Pattern pattern0 = Pattern.compile(" > ", (-1438));
      assertEquals(" > ", pattern0.toString());
      assertEquals(" > ", pattern0.pattern());
      assertEquals((-1438), pattern0.flags());
      assertNotNull(pattern0);
      
      Elements elements1 = element0.getElementsByAttributeValueMatching(" > ", pattern0);
      assertNotSame(elements1, elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("yc1@;g", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("yc1@;g", document0.location());
      assertFalse(element0.hasParent());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("yc1@;g", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", element0.nodeName());
      assertEquals(" > ", pattern0.toString());
      assertEquals(" > ", pattern0.pattern());
      assertEquals((-1438), pattern0.flags());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      
      Element element1 = element0.prepend("yc1@;g");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("yc1@;g", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("yc1@;g", document0.location());
      assertFalse(element0.hasParent());
      assertEquals("#root", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("yc1@;g", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", element0.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("#root", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("yc1@;g", element1.baseUri());
      assertEquals("#root", element1.nodeName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertNotNull(element1);
      
      // Undeclared exception!
      try { 
        element0.is((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("9Pt{e~3b.RCS 3G7h", ": ");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(": ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(": ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(": ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(": ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(": ", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(": ", document1.location());
      assertNotNull(document1);
      
      Document document2 = document1.clone();
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(": ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(": ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(": ", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(": ", document1.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(": ", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(": ", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document1;
      CDataNode cDataNode0 = new CDataNode("S`4");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Node node0 = cDataNode0.parent();
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertNull(node0);
      
      nodeArray0[1] = null;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document2;
      String string0 = document1.data();
      assertEquals("", string0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(": ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(": ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(": ", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(": ", document1.location());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      
      Elements elements0 = document2.getAllElements();
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(": ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(": ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(": ", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(": ", document1.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(": ", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(": ", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      Elements elements1 = document0.getElementsByAttributeValue("X", ": ");
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(elements1, elements0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(": ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(": ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(elements1.equals((Object)elements0));
      
      Elements elements2 = document1.previousElementSiblings();
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(": ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(": ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(": ", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(": ", document1.location());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertNotNull(elements2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      
      List<Node> list0 = document2.ensureChildNodes();
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(": ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(": ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(": ", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(": ", document1.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(": ", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(": ", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      Elements elements3 = document0.getElementsMatchingOwnText("");
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(": ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(": ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(4, elements3.size());
      assertFalse(elements3.isEmpty());
      assertNotNull(elements3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(elements3.equals((Object)elements2));
      assertFalse(elements3.equals((Object)elements1));
      assertFalse(elements3.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parse("", "H\"9gh\"hmH)B><q#l%f,");
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByIndexEquals(298);
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Document document1 = (Document)document0.text("iFTj5}5!pE=v-pf");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document1.location());
      assertNotNull(document1);
      
      Document document2 = (Document)document0.text("i@o?TY8zl");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document2.location());
      assertNotNull(document2);
      
      Document document3 = new Document("");
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      boolean boolean0 = document2.hasSameValue(document3);
      assertFalse(boolean0);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document2.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Elements elements1 = document2.getElementsByAttributeStarting("MOZ\")");
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(elements1, elements0);
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document2.location());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertTrue(elements1.equals((Object)elements0));
      
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      assertEquals(":matchText", evaluator_MatchText0.toString());
      assertNotNull(evaluator_MatchText0);
      
      boolean boolean1 = document0.is((Evaluator) evaluator_MatchText0);
      assertFalse(boolean1);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(":matchText", evaluator_MatchText0.toString());
      assertFalse(document0.equals((Object)document3));
      assertTrue(boolean1 == boolean0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      String string0 = ".I9Vr!H<M(i";
      Elements elements2 = document0.getElementsByAttributeValueMatching("", "i@o?TY8zl");
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertNotNull(elements2);
      assertFalse(document0.equals((Object)document3));
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document4 = document1.quirksMode(document_QuirksMode0);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertNotSame(document4, document3);
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document1.location());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document4.location());
      assertFalse(document4.hasParent());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      
      // Undeclared exception!
      try { 
        document4.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document1.appendTo(document2);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("</", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Elements elements0 = document2.nextElementSiblings();
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      Element element0 = new Element("</");
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.nodeName());
      assertNotNull(element0);
      
      Document document4 = (Document)document2.appendTo(element0);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals(2, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals("</", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertTrue(document4.hasParent());
      assertEquals("</", document4.location());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      
      Document document5 = (Document)document4.toggleClass("ljc");
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertNotSame(document4, document1);
      assertSame(document4, document5);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document5, document2);
      assertNotSame(document5, document3);
      assertSame(document5, document4);
      assertSame(document5, document0);
      assertNotSame(document5, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals(2, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals("</", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertTrue(document4.hasParent());
      assertEquals("</", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertTrue(document5.hasParent());
      assertEquals("</", document5.location());
      assertEquals("#root", document5.tagName());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(2, document5.childNodeSize());
      assertEquals("</", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      
      String string0 = document2.baseUri();
      assertEquals("</", string0);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      boolean boolean0 = document2.hasClass("b6hvH$Vs*i]cIc");
      assertFalse(boolean0);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document6 = document2.quirksMode(document_QuirksMode0);
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document6);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document6, document0);
      assertSame(document6, document4);
      assertSame(document6, document2);
      assertNotSame(document6, document3);
      assertNotSame(document6, document1);
      assertSame(document6, document5);
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("</", document6.baseUri());
      assertEquals("#root", document6.tagName());
      assertEquals(2, document6.childNodeSize());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("</", document6.location());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertNotNull(document6);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document1));
      
      Elements elements1 = document6.getElementsByAttributeValueContaining("yG#y", "%");
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document6);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document6, document0);
      assertSame(document6, document4);
      assertSame(document6, document2);
      assertNotSame(document6, document3);
      assertNotSame(document6, document1);
      assertSame(document6, document5);
      assertNotSame(elements1, elements0);
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("</", document6.baseUri());
      assertEquals("#root", document6.tagName());
      assertEquals(2, document6.childNodeSize());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("</", document6.location());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      
      String string1 = document0.className();
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(string1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      
      Document document7 = (Document)document6.appendText("value");
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertSame(document0, document7);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document6);
      assertSame(document2, document5);
      assertSame(document2, document7);
      assertNotSame(document2, document1);
      assertSame(document6, document0);
      assertSame(document6, document4);
      assertSame(document6, document2);
      assertSame(document6, document7);
      assertNotSame(document6, document3);
      assertNotSame(document6, document1);
      assertSame(document6, document5);
      assertSame(document7, document5);
      assertSame(document7, document0);
      assertSame(document7, document6);
      assertSame(document7, document4);
      assertNotSame(document7, document1);
      assertNotSame(document7, document3);
      assertSame(document7, document2);
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("</", document6.baseUri());
      assertEquals("#root", document6.tagName());
      assertEquals(3, document6.childNodeSize());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("</", document6.location());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertEquals("</", document7.location());
      assertEquals(0, document7.siblingIndex());
      assertFalse(document7.updateMetaCharsetElement());
      assertFalse(document7.isBlock());
      assertEquals(3, document7.childNodeSize());
      assertEquals("</", document7.baseUri());
      assertEquals("#root", document7.tagName());
      assertEquals(Document.QuirksMode.quirks, document7.quirksMode());
      assertTrue(document7.hasParent());
      assertEquals("#document", document7.nodeName());
      assertNotNull(document7);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document3));
      
      Comment comment0 = new Comment("'<GslA^}_H[Vi =N", "#");
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(comment0);
      
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(xmlDeclaration0);
      
      boolean boolean1 = Element.preserveWhitespace(xmlDeclaration0);
      assertFalse(boolean1);
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = element0.hasText();
      assertTrue(boolean2);
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("</", element0.nodeName());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Document document8 = document6.clone();
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertSame(document0, document7);
      assertNotSame(document0, document8);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document8);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document6);
      assertSame(document2, document5);
      assertSame(document2, document7);
      assertNotSame(document2, document1);
      assertNotSame(document8, document3);
      assertNotSame(document8, document4);
      assertNotSame(document8, document0);
      assertNotSame(document8, document6);
      assertNotSame(document8, document5);
      assertNotSame(document8, document7);
      assertNotSame(document8, document1);
      assertNotSame(document8, document2);
      assertSame(document6, document0);
      assertSame(document6, document4);
      assertNotSame(document6, document8);
      assertSame(document6, document2);
      assertSame(document6, document7);
      assertNotSame(document6, document3);
      assertNotSame(document6, document1);
      assertSame(document6, document5);
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document8.quirksMode());
      assertEquals("#document", document8.nodeName());
      assertEquals("#root", document8.tagName());
      assertFalse(document8.isBlock());
      assertEquals(0, document8.siblingIndex());
      assertEquals("</", document8.baseUri());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals(3, document8.childNodeSize());
      assertEquals("</", document8.location());
      assertFalse(document8.hasParent());
      assertEquals("</", document6.baseUri());
      assertEquals("#root", document6.tagName());
      assertEquals(3, document6.childNodeSize());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("</", document6.location());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertNotNull(document8);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document4));
      assertFalse(document8.equals((Object)document0));
      assertFalse(document8.equals((Object)document6));
      assertFalse(document8.equals((Object)document5));
      assertFalse(document8.equals((Object)document7));
      assertFalse(document8.equals((Object)document1));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document1));
      
      Element element1 = document7.appendElement("%");
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertSame(document0, document7);
      assertNotSame(document0, document8);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document8);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document6);
      assertSame(document2, document5);
      assertSame(document2, document7);
      assertNotSame(document2, document1);
      assertNotSame(element1, element0);
      assertSame(document6, document0);
      assertSame(document6, document4);
      assertNotSame(document6, document8);
      assertSame(document6, document2);
      assertSame(document6, document7);
      assertNotSame(document6, document3);
      assertNotSame(document6, document1);
      assertSame(document6, document5);
      assertSame(document7, document5);
      assertSame(document7, document0);
      assertSame(document7, document6);
      assertSame(document7, document4);
      assertNotSame(document7, document1);
      assertNotSame(document7, document3);
      assertSame(document7, document2);
      assertNotSame(document7, document8);
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(4, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals(4, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("</", element1.baseUri());
      assertEquals("%", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(3, element1.siblingIndex());
      assertEquals("%", element1.tagName());
      assertEquals("</", document6.baseUri());
      assertEquals("#root", document6.tagName());
      assertEquals(4, document6.childNodeSize());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("</", document6.location());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertEquals("</", document7.location());
      assertEquals(0, document7.siblingIndex());
      assertFalse(document7.updateMetaCharsetElement());
      assertFalse(document7.isBlock());
      assertEquals(4, document7.childNodeSize());
      assertEquals("</", document7.baseUri());
      assertEquals("#root", document7.tagName());
      assertEquals(Document.QuirksMode.quirks, document7.quirksMode());
      assertTrue(document7.hasParent());
      assertEquals("#document", document7.nodeName());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document8));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document6.equals((Object)document8));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document8));
      
      Document document9 = (Document)document1.prepend("yG#y");
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertNotSame(document0, document9);
      assertSame(document0, document7);
      assertNotSame(document0, document8);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document1, document6);
      assertSame(document1, document9);
      assertNotSame(document1, document4);
      assertNotSame(document1, document5);
      assertNotSame(document1, document8);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document7);
      assertSame(document9, document1);
      assertNotSame(document9, document7);
      assertNotSame(document9, document4);
      assertNotSame(document9, document8);
      assertNotSame(document9, document0);
      assertNotSame(document9, document2);
      assertSame(document9, document3);
      assertNotSame(document9, document5);
      assertNotSame(document9, document6);
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(4, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document9.location());
      assertEquals("#root", document9.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document9.quirksMode());
      assertEquals(2, document9.childNodeSize());
      assertFalse(document9.updateMetaCharsetElement());
      assertEquals("#document", document9.nodeName());
      assertEquals(1, document9.siblingIndex());
      assertTrue(document9.hasParent());
      assertEquals("</", document9.baseUri());
      assertFalse(document9.isBlock());
      assertNotNull(document9);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document8));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document9.equals((Object)document7));
      assertFalse(document9.equals((Object)document4));
      assertFalse(document9.equals((Object)document8));
      assertFalse(document9.equals((Object)document0));
      assertFalse(document9.equals((Object)document2));
      assertFalse(document9.equals((Object)document5));
      assertFalse(document9.equals((Object)document6));
      
      document6.nodelistChanged();
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertNotSame(document0, document9);
      assertSame(document0, document7);
      assertNotSame(document0, document8);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document8);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertNotSame(document2, document9);
      assertSame(document2, document6);
      assertSame(document2, document5);
      assertSame(document2, document7);
      assertNotSame(document2, document1);
      assertSame(document6, document0);
      assertSame(document6, document4);
      assertNotSame(document6, document8);
      assertSame(document6, document2);
      assertSame(document6, document7);
      assertNotSame(document6, document3);
      assertNotSame(document6, document9);
      assertNotSame(document6, document1);
      assertSame(document6, document5);
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(4, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("</", document2.baseUri());
      assertEquals(4, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("</", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("</", document6.baseUri());
      assertEquals("#root", document6.tagName());
      assertEquals(4, document6.childNodeSize());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("</", document6.location());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document9));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document8));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document9));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document6.equals((Object)document8));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document9));
      assertFalse(document6.equals((Object)document1));
      
      Pattern pattern0 = Pattern.compile(")M$YVea/(Oa", 62);
      assertEquals(62, pattern0.flags());
      assertEquals(")M$YVea/(Oa", pattern0.toString());
      assertEquals(")M$YVea/(Oa", pattern0.pattern());
      assertNotNull(pattern0);
      
      Elements elements2 = document1.getElementsMatchingOwnText(pattern0);
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertNotSame(document0, document9);
      assertSame(document0, document7);
      assertNotSame(document0, document8);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document1, document6);
      assertSame(document1, document9);
      assertNotSame(document1, document4);
      assertNotSame(document1, document5);
      assertNotSame(document1, document8);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document7);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(4, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("</", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(62, pattern0.flags());
      assertEquals(")M$YVea/(Oa", pattern0.toString());
      assertEquals(")M$YVea/(Oa", pattern0.pattern());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertNotNull(elements2);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document9));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document8));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document7));
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parse("QtvCg['CIkGxekq6v|", "QtvCg['CIkGxekq6v|");
      assertEquals("QtvCg['CIkGxekq6v|", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("QtvCg['CIkGxekq6v|", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Elements elements0 = document0.nextElementSiblings();
      assertEquals("QtvCg['CIkGxekq6v|", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("QtvCg['CIkGxekq6v|", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element0 = new Element("tetarea");
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("tetarea", element0.tagName());
      assertEquals("tetarea", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Document document1 = (Document)document0.appendTo(element0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("QtvCg['CIkGxekq6v|", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("QtvCg['CIkGxekq6v|", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("tetarea", element0.tagName());
      assertEquals("tetarea", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("QtvCg['CIkGxekq6v|", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("QtvCg['CIkGxekq6v|", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      Document document2 = (Document)document0.toggleClass("QtvCg['CIkGxekq6v|");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("QtvCg['CIkGxekq6v|", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("QtvCg['CIkGxekq6v|", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("QtvCg['CIkGxekq6v|", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("QtvCg['CIkGxekq6v|", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertNotNull(document2);
      
      String string0 = document0.baseUri();
      assertEquals("QtvCg['CIkGxekq6v|", string0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertEquals("QtvCg['CIkGxekq6v|", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("QtvCg['CIkGxekq6v|", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertNotNull(string0);
      
      boolean boolean0 = document0.hasClass("br");
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertEquals("QtvCg['CIkGxekq6v|", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("QtvCg['CIkGxekq6v|", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      
      Elements elements1 = document1.getElementsMatchingText("textarea");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertEquals("QtvCg['CIkGxekq6v|", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("QtvCg['CIkGxekq6v|", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("tetarea", element0.tagName());
      assertEquals("tetarea", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("QtvCg['CIkGxekq6v|", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("QtvCg['CIkGxekq6v|", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      
      Document document3 = (Document)document1.attr("Z[NJt!?~k/cm8HufH5K", false);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertEquals("QtvCg['CIkGxekq6v|", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("QtvCg['CIkGxekq6v|", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("tetarea", element0.tagName());
      assertEquals("tetarea", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("QtvCg['CIkGxekq6v|", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("QtvCg['CIkGxekq6v|", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("QtvCg['CIkGxekq6v|", document3.baseUri());
      assertEquals("QtvCg['CIkGxekq6v|", document3.location());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      
      Pattern pattern0 = Pattern.compile("tt");
      assertEquals(0, pattern0.flags());
      assertEquals("tt", pattern0.toString());
      assertEquals("tt", pattern0.pattern());
      assertNotNull(pattern0);
      
      Elements elements2 = document0.getElementsMatchingOwnText(pattern0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertEquals("QtvCg['CIkGxekq6v|", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("QtvCg['CIkGxekq6v|", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(0, pattern0.flags());
      assertEquals("tt", pattern0.toString());
      assertEquals("tt", pattern0.pattern());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertNotNull(elements2);
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      
      Elements elements3 = document0.getElementsByAttributeValue("Uu'Qtf64}Xg", "Z[NJt!?~k/cm8HufH5K");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertEquals("QtvCg['CIkGxekq6v|", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("QtvCg['CIkGxekq6v|", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertNotNull(elements3);
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements2));
      
      Document document4 = (Document)document2.before((Node) element0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertEquals("QtvCg['CIkGxekq6v|", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("QtvCg['CIkGxekq6v|", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("tetarea", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("tetarea", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("QtvCg['CIkGxekq6v|", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("QtvCg['CIkGxekq6v|", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("QtvCg['CIkGxekq6v|", document4.location());
      assertEquals("QtvCg['CIkGxekq6v|", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.siblingIndex());
      assertNotNull(document4);
      
      String string1 = document4.className();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertEquals("QtvCg['CIkGxekq6v|", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("QtvCg['CIkGxekq6v|", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("tetarea", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("tetarea", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("QtvCg['CIkGxekq6v|", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("QtvCg['CIkGxekq6v|", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("QtvCg['CIkGxekq6v|", document4.location());
      assertEquals("QtvCg['CIkGxekq6v|", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.siblingIndex());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      TextNode textNode0 = new TextNode("", "");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertNotNull(textNode0);
      
      Document document1 = (Document)document0.appendChild(textNode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(textNode0.hasParent());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      boolean boolean0 = document1.hasText();
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(textNode0.hasParent());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      
      Elements elements0 = document1.getElementsMatchingText("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(textNode0.hasParent());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertNotNull(elements0);
      
      Document document2 = (Document)document0.attr("Uu'Qtf64}Xg", false);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      
      CDataNode cDataNode0 = new CDataNode("br");
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      Document document3 = (Document)document1.val("Gu3Dwc`");
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(textNode0.hasParent());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertNotNull(document3);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parse("e+&R~_A>l-", "e+&R~_A>l-");
      assertEquals(0, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("e+&R~_A>l-", document1.location());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document0.appendTo(document2);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("e+&R~_A>l-", document3.baseUri());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("e+&R~_A>l-", document3.location());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      
      Elements elements0 = document2.nextElementSiblings();
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Element element0 = new Element("e+&R~_A>l-");
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("e+&R~_A>l-", element0.tagName());
      assertEquals("e+&R~_A>l-", element0.nodeName());
      assertNotNull(element0);
      
      Document document4 = (Document)document0.appendTo(document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document4);
      assertSame(document4, document0);
      assertNotSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals("e+&R~_A>l-", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals(1, document4.siblingIndex());
      assertEquals("e+&R~_A>l-", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      
      Document document5 = (Document)document3.toggleClass("e+&R~_A>l-");
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertSame(document2, document3);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document5);
      assertNotSame(document5, document1);
      assertSame(document5, document0);
      assertSame(document5, document3);
      assertSame(document5, document2);
      assertSame(document5, document4);
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("e+&R~_A>l-", document3.baseUri());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("e+&R~_A>l-", document3.location());
      assertEquals("e+&R~_A>l-", document5.baseUri());
      assertFalse(document5.isBlock());
      assertTrue(document5.hasParent());
      assertEquals("e+&R~_A>l-", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.siblingIndex());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document5.equals((Object)document1));
      
      String string0 = document0.baseUri();
      assertEquals("e+&R~_A>l-", string0);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document1));
      
      boolean boolean0 = document0.hasClass("e+&R~_A>l-");
      assertFalse(boolean0);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.equals((Object)document1));
      
      Elements elements1 = document0.getElementsByAttributeValueContaining("%", "br");
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      
      String string1 = document3.className();
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertSame(document2, document3);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document5);
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("e+&R~_A>l-", document3.baseUri());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("e+&R~_A>l-", document3.location());
      assertNotNull(string1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      
      Document document6 = (Document)document1.appendText("e+&R~_A>l-");
      assertSame(document0, document3);
      assertNotSame(document0, document6);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document6);
      assertNotSame(document1, document0);
      assertNotSame(document1, document5);
      assertNotSame(document1, document4);
      assertNotSame(document6, document4);
      assertNotSame(document6, document5);
      assertSame(document6, document1);
      assertNotSame(document6, document3);
      assertNotSame(document6, document0);
      assertNotSame(document6, document2);
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals("e+&R~_A>l-", document6.location());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(3, document6.childNodeSize());
      assertEquals("#document", document6.nodeName());
      assertEquals("e+&R~_A>l-", document6.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertFalse(document6.isBlock());
      assertNotNull(document6);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document2));
      
      boolean boolean1 = Element.preserveWhitespace(document2);
      assertFalse(boolean1);
      assertSame(document0, document3);
      assertNotSame(document0, document6);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document6);
      assertSame(document2, document5);
      assertSame(document2, document3);
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document6));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = document5.hasText();
      assertTrue(boolean2);
      assertSame(document0, document3);
      assertNotSame(document0, document6);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document6);
      assertSame(document2, document5);
      assertSame(document2, document3);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document6);
      assertSame(document3, document4);
      assertSame(document3, document5);
      assertNotSame(document5, document1);
      assertSame(document5, document0);
      assertSame(document5, document3);
      assertSame(document5, document2);
      assertSame(document5, document4);
      assertNotSame(document5, document6);
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("e+&R~_A>l-", document3.baseUri());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("e+&R~_A>l-", document3.location());
      assertEquals("e+&R~_A>l-", document5.baseUri());
      assertFalse(document5.isBlock());
      assertTrue(document5.hasParent());
      assertEquals("e+&R~_A>l-", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.siblingIndex());
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document6));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Document document7 = document2.clone();
      assertSame(document0, document3);
      assertNotSame(document0, document6);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document7);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document6);
      assertSame(document2, document5);
      assertSame(document2, document3);
      assertNotSame(document2, document7);
      assertNotSame(document7, document0);
      assertNotSame(document7, document2);
      assertNotSame(document7, document1);
      assertNotSame(document7, document3);
      assertNotSame(document7, document4);
      assertNotSame(document7, document5);
      assertNotSame(document7, document6);
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document7.hasParent());
      assertEquals(1, document7.childNodeSize());
      assertEquals("#root", document7.tagName());
      assertEquals(0, document7.siblingIndex());
      assertEquals("#document", document7.nodeName());
      assertEquals("e+&R~_A>l-", document7.baseUri());
      assertFalse(document7.isBlock());
      assertEquals("e+&R~_A>l-", document7.location());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertNotNull(document7);
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document6));
      
      Element element1 = document7.appendElement(".");
      assertNotSame(element1, element0);
      assertSame(document0, document3);
      assertNotSame(document0, document6);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document7);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document6);
      assertSame(document2, document5);
      assertSame(document2, document3);
      assertNotSame(document2, document7);
      assertNotSame(document7, document0);
      assertNotSame(document7, document2);
      assertNotSame(document7, document1);
      assertNotSame(document7, document3);
      assertNotSame(document7, document4);
      assertNotSame(document7, document5);
      assertNotSame(document7, document6);
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals(".", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals(".", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("e+&R~_A>l-", element1.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document7.hasParent());
      assertEquals("#root", document7.tagName());
      assertEquals(0, document7.siblingIndex());
      assertEquals("#document", document7.nodeName());
      assertEquals("e+&R~_A>l-", document7.baseUri());
      assertFalse(document7.isBlock());
      assertEquals("e+&R~_A>l-", document7.location());
      assertEquals(2, document7.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document6));
      
      Document document8 = (Document)document6.prepend("V_GD{ld8 bS");
      assertSame(document0, document3);
      assertNotSame(document0, document6);
      assertNotSame(document0, document8);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document7);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document8, document5);
      assertNotSame(document8, document0);
      assertNotSame(document8, document7);
      assertSame(document8, document6);
      assertNotSame(document8, document2);
      assertNotSame(document8, document3);
      assertSame(document8, document1);
      assertNotSame(document8, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document6);
      assertSame(document1, document8);
      assertNotSame(document1, document0);
      assertNotSame(document1, document5);
      assertNotSame(document1, document7);
      assertNotSame(document1, document4);
      assertNotSame(document6, document4);
      assertNotSame(document6, document5);
      assertSame(document6, document1);
      assertNotSame(document6, document7);
      assertNotSame(document6, document3);
      assertNotSame(document6, document0);
      assertNotSame(document6, document2);
      assertSame(document6, document8);
      assertEquals(2, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document8.siblingIndex());
      assertEquals("e+&R~_A>l-", document8.location());
      assertEquals("#document", document8.nodeName());
      assertEquals(4, document8.childNodeSize());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document8.baseUri());
      assertFalse(document8.isBlock());
      assertEquals("#root", document8.tagName());
      assertFalse(document8.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(4, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals("e+&R~_A>l-", document6.location());
      assertEquals(0, document6.siblingIndex());
      assertEquals(4, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("#document", document6.nodeName());
      assertEquals("e+&R~_A>l-", document6.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertFalse(document6.isBlock());
      assertNotNull(document8);
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document8.equals((Object)document5));
      assertFalse(document8.equals((Object)document0));
      assertFalse(document8.equals((Object)document7));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document7));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document2));
      
      document7.nodelistChanged();
      assertSame(document0, document3);
      assertNotSame(document0, document6);
      assertNotSame(document0, document8);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document7);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document2, document8);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document6);
      assertSame(document2, document5);
      assertSame(document2, document3);
      assertNotSame(document2, document7);
      assertNotSame(document7, document0);
      assertNotSame(document7, document2);
      assertNotSame(document7, document1);
      assertNotSame(document7, document3);
      assertNotSame(document7, document4);
      assertNotSame(document7, document8);
      assertNotSame(document7, document5);
      assertNotSame(document7, document6);
      assertEquals(2, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document7.hasParent());
      assertEquals("#root", document7.tagName());
      assertEquals(0, document7.siblingIndex());
      assertEquals("#document", document7.nodeName());
      assertEquals("e+&R~_A>l-", document7.baseUri());
      assertFalse(document7.isBlock());
      assertEquals("e+&R~_A>l-", document7.location());
      assertEquals(2, document7.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document8));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document8));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document6));
      
      Pattern pattern0 = Pattern.compile("e+&R~_A>l-", 840);
      assertEquals("e+&R~_A>l-", pattern0.pattern());
      assertEquals(840, pattern0.flags());
      assertEquals("e+&R~_A>l-", pattern0.toString());
      assertNotNull(pattern0);
      
      Document document9 = (Document)document7.addClass("e+&R~_A>l-");
      assertSame(document0, document3);
      assertNotSame(document0, document6);
      assertNotSame(document0, document8);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document7);
      assertNotSame(document0, document9);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document2, document8);
      assertNotSame(document2, document1);
      assertNotSame(document2, document9);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document6);
      assertSame(document2, document5);
      assertSame(document2, document3);
      assertNotSame(document2, document7);
      assertSame(document9, document7);
      assertNotSame(document9, document5);
      assertNotSame(document9, document4);
      assertNotSame(document9, document1);
      assertNotSame(document9, document2);
      assertNotSame(document9, document3);
      assertNotSame(document9, document0);
      assertNotSame(document9, document6);
      assertNotSame(document9, document8);
      assertNotSame(document7, document0);
      assertNotSame(document7, document2);
      assertNotSame(document7, document1);
      assertNotSame(document7, document3);
      assertNotSame(document7, document4);
      assertNotSame(document7, document8);
      assertNotSame(document7, document5);
      assertNotSame(document7, document6);
      assertSame(document7, document9);
      assertEquals(2, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document9.nodeName());
      assertEquals("e+&R~_A>l-", document9.baseUri());
      assertFalse(document9.isBlock());
      assertEquals("e+&R~_A>l-", document9.location());
      assertEquals(0, document9.siblingIndex());
      assertEquals("#root", document9.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document9.quirksMode());
      assertFalse(document9.hasParent());
      assertEquals(2, document9.childNodeSize());
      assertFalse(document9.updateMetaCharsetElement());
      assertFalse(document7.hasParent());
      assertEquals("#root", document7.tagName());
      assertEquals(0, document7.siblingIndex());
      assertEquals("#document", document7.nodeName());
      assertEquals("e+&R~_A>l-", document7.baseUri());
      assertFalse(document7.isBlock());
      assertEquals("e+&R~_A>l-", document7.location());
      assertEquals(2, document7.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertNotNull(document9);
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document8));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document9.equals((Object)document5));
      assertFalse(document9.equals((Object)document4));
      assertFalse(document9.equals((Object)document1));
      assertFalse(document9.equals((Object)document2));
      assertFalse(document9.equals((Object)document3));
      assertFalse(document9.equals((Object)document0));
      assertFalse(document9.equals((Object)document6));
      assertFalse(document9.equals((Object)document8));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document8));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document6));
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parse("e+&R~_A>l-", "e+&R~_A>l-");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document0.appendTo(document2);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("e+&R~_A>l-", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("e+&R~_A>l-", document3.baseUri());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      
      Elements elements0 = document2.nextElementSiblings();
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Element element0 = new Element("e+&R~_A>l-");
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("e+&R~_A>l-", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("e+&R~_A>l-", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      
      Document document4 = (Document)document0.appendTo(document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertNotSame(document4, document1);
      assertSame(document4, document2);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("e+&R~_A>l-", document4.baseUri());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.siblingIndex());
      assertEquals(1, document4.childNodeSize());
      assertEquals("e+&R~_A>l-", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      
      Document document5 = (Document)document3.toggleClass("e+&R~_A>l-");
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document5);
      assertSame(document5, document0);
      assertSame(document5, document4);
      assertNotSame(document5, document1);
      assertSame(document5, document2);
      assertSame(document5, document3);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("e+&R~_A>l-", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("e+&R~_A>l-", document3.baseUri());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("e+&R~_A>l-", document5.baseUri());
      assertFalse(document5.isBlock());
      assertTrue(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(1, document5.siblingIndex());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("e+&R~_A>l-", document5.location());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document5.equals((Object)document1));
      
      String string0 = document0.baseUri();
      assertEquals("e+&R~_A>l-", string0);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document1));
      
      boolean boolean0 = document0.hasClass("e+&R~_A>l-");
      assertFalse(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.equals((Object)document1));
      
      Elements elements1 = document0.getElementsByAttributeValueContaining("%", "br");
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      
      String string1 = document3.className();
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document5);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("e+&R~_A>l-", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("e+&R~_A>l-", document3.baseUri());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(string1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = Element.preserveWhitespace(document4);
      assertFalse(boolean1);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document1, document5);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertNotSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document5);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("e+&R~_A>l-", document4.baseUri());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.siblingIndex());
      assertEquals(1, document4.childNodeSize());
      assertEquals("e+&R~_A>l-", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document4.equals((Object)document1));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = document4.hasText();
      assertTrue(boolean2);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document1, document5);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertNotSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document5);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("e+&R~_A>l-", document4.baseUri());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.siblingIndex());
      assertEquals(1, document4.childNodeSize());
      assertEquals("e+&R~_A>l-", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document4.equals((Object)document1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Element element1 = document0.appendElement("java.lang.String@0000000108");
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(element1, element0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("e+&R~_A>l-", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      
      Document document6 = (Document)document4.prepend("e+&R~_A>l-");
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document6);
      assertNotSame(document0, document1);
      assertNotSame(document1, document6);
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document1, document5);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertNotSame(document4, document1);
      assertSame(document4, document6);
      assertSame(document4, document2);
      assertSame(document4, document5);
      assertNotSame(document6, document1);
      assertSame(document6, document4);
      assertSame(document6, document5);
      assertSame(document6, document3);
      assertSame(document6, document0);
      assertSame(document6, document2);
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("e+&R~_A>l-", document4.baseUri());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.siblingIndex());
      assertEquals(3, document4.childNodeSize());
      assertEquals("e+&R~_A>l-", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("#root", document6.tagName());
      assertFalse(document6.isBlock());
      assertEquals(1, document6.siblingIndex());
      assertEquals("e+&R~_A>l-", document6.location());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(3, document6.childNodeSize());
      assertEquals("#document", document6.nodeName());
      assertTrue(document6.hasParent());
      assertEquals("e+&R~_A>l-", document6.baseUri());
      assertNotNull(document6);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document6.equals((Object)document1));
      
      document5.nodelistChanged();
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document6);
      assertNotSame(document0, document1);
      assertSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document2, document4);
      assertSame(document2, document6);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document6);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document5);
      assertSame(document5, document0);
      assertSame(document5, document4);
      assertSame(document5, document6);
      assertNotSame(document5, document1);
      assertSame(document5, document2);
      assertSame(document5, document3);
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("e+&R~_A>l-", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("e+&R~_A>l-", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(3, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("e+&R~_A>l-", document5.baseUri());
      assertFalse(document5.isBlock());
      assertTrue(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(3, document5.childNodeSize());
      assertEquals(1, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("e+&R~_A>l-", document5.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document5.equals((Object)document1));
      
      Pattern pattern0 = Pattern.compile("", 1);
      assertEquals("", pattern0.toString());
      assertEquals(1, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertNotNull(pattern0);
      
      Pattern pattern1 = Pattern.compile("%", 1);
      assertNotSame(pattern1, pattern0);
      assertEquals("%", pattern1.pattern());
      assertEquals("%", pattern1.toString());
      assertEquals(1, pattern1.flags());
      assertNotNull(pattern1);
      assertFalse(pattern1.equals((Object)pattern0));
      
      Elements elements2 = document4.getElementsMatchingOwnText(pattern1);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document6);
      assertNotSame(document0, document1);
      assertNotSame(document1, document6);
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document1, document5);
      assertNotSame(pattern1, pattern0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertNotSame(document4, document1);
      assertSame(document4, document6);
      assertSame(document4, document2);
      assertSame(document4, document5);
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("%", pattern1.pattern());
      assertEquals("%", pattern1.toString());
      assertEquals(1, pattern1.flags());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertEquals("e+&R~_A>l-", document4.baseUri());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.siblingIndex());
      assertEquals(3, document4.childNodeSize());
      assertEquals("e+&R~_A>l-", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertNotNull(elements2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(pattern1.equals((Object)pattern0));
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(document4.equals((Object)document1));
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parse("QtvCg['CIkGxekq6v|", "QtvCg['CIkGxekq6v|");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("QtvCg['CIkGxekq6v|", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("QtvCg['CIkGxekq6v|", document0.location());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("QtvCg['CIkGxekq6v|", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("QtvCg['CIkGxekq6v|", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("QtvCg['CIkGxekq6v|", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("QtvCg['CIkGxekq6v|", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document1.clone();
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("QtvCg['CIkGxekq6v|", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("QtvCg['CIkGxekq6v|", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("QtvCg['CIkGxekq6v|", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("QtvCg['CIkGxekq6v|", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("QtvCg['CIkGxekq6v|", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("QtvCg['CIkGxekq6v|", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document3 = document1.parser(parser0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("QtvCg['CIkGxekq6v|", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("QtvCg['CIkGxekq6v|", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("QtvCg['CIkGxekq6v|", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("QtvCg['CIkGxekq6v|", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals("QtvCg['CIkGxekq6v|", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("QtvCg['CIkGxekq6v|", document3.location());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      Document document4 = Parser.parse("Tag name must not be empty.", "Tag name must not be empty.");
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("Tag name must not be empty.", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("Tag name must not be empty.", document4.location());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertNotNull(document4);
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      
      List<Node> list0 = parser1.parseFragmentInput("Tag name must not be empty.", document2, "html");
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("QtvCg['CIkGxekq6v|", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("QtvCg['CIkGxekq6v|", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("QtvCg['CIkGxekq6v|", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("QtvCg['CIkGxekq6v|", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("QtvCg['CIkGxekq6v|", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("QtvCg['CIkGxekq6v|", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      
      Elements elements0 = document1.getElementsMatchingText("^qY");
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("QtvCg['CIkGxekq6v|", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("QtvCg['CIkGxekq6v|", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("QtvCg['CIkGxekq6v|", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("QtvCg['CIkGxekq6v|", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      
      String string0 = "tetarea";
      Elements elements1 = document0.getElementsByAttributeStarting(string0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("QtvCg['CIkGxekq6v|", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("QtvCg['CIkGxekq6v|", document0.location());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      
      Document document5 = (Document)document3.prependChild(document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document2, document4);
      assertNotSame(document2, document5);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(parser0, parser1);
      assertNotSame(document3, document4);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document5);
      assertNotSame(document3, document0);
      assertNotSame(document5, document0);
      assertSame(document5, document3);
      assertNotSame(document5, document2);
      assertNotSame(document5, document4);
      assertSame(document5, document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("QtvCg['CIkGxekq6v|", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("QtvCg['CIkGxekq6v|", document0.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("QtvCg['CIkGxekq6v|", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("QtvCg['CIkGxekq6v|", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("QtvCg['CIkGxekq6v|", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("QtvCg['CIkGxekq6v|", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals("QtvCg['CIkGxekq6v|", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertEquals("QtvCg['CIkGxekq6v|", document3.location());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertEquals("QtvCg['CIkGxekq6v|", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(2, document5.childNodeSize());
      assertEquals("QtvCg['CIkGxekq6v|", document5.location());
      assertFalse(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.isBlock());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
      
      Element element0 = document1.body();
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("QtvCg['CIkGxekq6v|", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("QtvCg['CIkGxekq6v|", document0.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("QtvCg['CIkGxekq6v|", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("QtvCg['CIkGxekq6v|", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("QtvCg['CIkGxekq6v|", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Element element0 = new Element("yG#y");
      assertEquals("yG#y", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("yG#y", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      String string0 = "isindex";
      Element element1 = element0.text("yG#y");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("yG#y", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("yG#y", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("yG#y", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("yG#y", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      
      // Undeclared exception!
      try { 
        element1.after((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Document.createShell("[foiP36&5");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("[foiP36&5", document0.location());
      assertEquals("[foiP36&5", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.html("]]>");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("[foiP36&5", document0.location());
      assertEquals("[foiP36&5", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("[foiP36&5", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("[foiP36&5", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "html");
      assertFalse(boolean0);
      
      Document document0 = Parser.parseBodyFragment("html", "html");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("html", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("html", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      Document document1 = document0.parser((Parser) null);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("html", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("html", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.location());
      assertEquals("html", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      nodeArray0[1] = (Node) document1;
      Element element0 = new Element(".");
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(".", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(".", element0.nodeName());
      assertNotNull(element0);
      
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) document0;
      DocumentType documentType0 = new DocumentType(".", "html", "D8[#Aq", "br");
      assertEquals(0, documentType0.siblingIndex());
      assertFalse(documentType0.hasParent());
      assertEquals("#doctype", documentType0.nodeName());
      assertNotNull(documentType0);
      
      nodeArray0[4] = (Node) documentType0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      Element element1 = document1.createElement("br");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(element1, element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("html", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("html", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.location());
      assertEquals("html", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(element1.hasParent());
      assertEquals("br", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("html", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("br", element1.tagName());
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      
      nodeArray0[7] = (Node) element1;
      // Undeclared exception!
      try { 
        document0.insertChildren((-1840), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parse("e+&R~_A>l-", "e+&R~_A>l-");
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document0.appendTo(document2);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertEquals(1, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("e+&R~_A>l-", document3.location());
      assertEquals("e+&R~_A>l-", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      
      Elements elements0 = document2.nextElementSiblings();
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertEquals(1, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Element element0 = new Element("e+&R~_A>l-");
      assertEquals("e+&R~_A>l-", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("e+&R~_A>l-", element0.nodeName());
      assertNotNull(element0);
      
      Document document4 = (Document)document0.appendTo(document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document4);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertNotSame(document4, document1);
      assertSame(document4, document2);
      assertEquals(1, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("e+&R~_A>l-", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      
      Document document5 = (Document)document3.toggleClass("e+&R~_A>l-");
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertNotSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document3, document5);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(document5, document1);
      assertSame(document5, document3);
      assertSame(document5, document0);
      assertSame(document5, document2);
      assertSame(document5, document4);
      assertEquals(1, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("e+&R~_A>l-", document3.location());
      assertEquals("e+&R~_A>l-", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.siblingIndex());
      assertTrue(document5.hasParent());
      assertEquals("e+&R~_A>l-", document5.baseUri());
      assertFalse(document5.isBlock());
      assertEquals("e+&R~_A>l-", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document5.equals((Object)document1));
      
      String string0 = document0.baseUri();
      assertEquals("e+&R~_A>l-", string0);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertEquals(1, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document1));
      
      boolean boolean0 = document0.hasClass("e+&R~_A>l-");
      assertFalse(boolean0);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertEquals(1, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.equals((Object)document1));
      
      Elements elements1 = document0.getElementsByAttributeValueContaining("%", "br");
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(elements1, elements0);
      assertEquals(1, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      
      String string1 = document3.className();
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertNotSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document3, document5);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertEquals(1, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("e+&R~_A>l-", document3.location());
      assertEquals("e+&R~_A>l-", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertNotNull(string1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      
      Document document6 = (Document)document1.appendText("e+&R~_A>l-");
      assertSame(document0, document4);
      assertNotSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document6);
      assertNotSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(document1, document5);
      assertNotSame(document6, document4);
      assertSame(document6, document1);
      assertNotSame(document6, document0);
      assertNotSame(document6, document2);
      assertNotSame(document6, document5);
      assertNotSame(document6, document3);
      assertEquals(1, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(3, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("e+&R~_A>l-", document6.location());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(3, document6.childNodeSize());
      assertEquals("e+&R~_A>l-", document6.baseUri());
      assertFalse(document6.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertEquals("#document", document6.nodeName());
      assertNotNull(document6);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document3));
      
      boolean boolean1 = Element.preserveWhitespace(document2);
      assertFalse(boolean1);
      assertSame(document0, document4);
      assertNotSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document6);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertEquals(1, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document6));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = document5.hasText();
      assertTrue(boolean2);
      assertSame(document0, document4);
      assertNotSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document6);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertNotSame(document3, document1);
      assertSame(document3, document4);
      assertNotSame(document3, document6);
      assertSame(document3, document5);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(document5, document1);
      assertSame(document5, document3);
      assertSame(document5, document0);
      assertSame(document5, document2);
      assertNotSame(document5, document6);
      assertSame(document5, document4);
      assertEquals(1, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("e+&R~_A>l-", document3.location());
      assertEquals("e+&R~_A>l-", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.siblingIndex());
      assertTrue(document5.hasParent());
      assertEquals("e+&R~_A>l-", document5.baseUri());
      assertFalse(document5.isBlock());
      assertEquals("e+&R~_A>l-", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document6));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Document document7 = document2.clone();
      assertSame(document0, document4);
      assertNotSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document0, document7);
      assertNotSame(document2, document7);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document6);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertNotSame(document7, document5);
      assertNotSame(document7, document0);
      assertNotSame(document7, document2);
      assertNotSame(document7, document1);
      assertNotSame(document7, document6);
      assertNotSame(document7, document4);
      assertNotSame(document7, document3);
      assertEquals(1, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document7.tagName());
      assertEquals("e+&R~_A>l-", document7.location());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertFalse(document7.hasParent());
      assertEquals("e+&R~_A>l-", document7.baseUri());
      assertFalse(document7.isBlock());
      assertEquals(0, document7.siblingIndex());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("#document", document7.nodeName());
      assertEquals(1, document7.childNodeSize());
      assertNotNull(document7);
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document3));
      
      Element element1 = document7.appendElement(".");
      assertNotSame(element1, element0);
      assertSame(document0, document4);
      assertNotSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document0, document7);
      assertNotSame(document2, document7);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document6);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertNotSame(document7, document5);
      assertNotSame(document7, document0);
      assertNotSame(document7, document2);
      assertNotSame(document7, document1);
      assertNotSame(document7, document6);
      assertNotSame(document7, document4);
      assertNotSame(document7, document3);
      assertEquals(".", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("e+&R~_A>l-", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals(".", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document7.tagName());
      assertEquals("e+&R~_A>l-", document7.location());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertFalse(document7.hasParent());
      assertEquals("e+&R~_A>l-", document7.baseUri());
      assertFalse(document7.isBlock());
      assertEquals(0, document7.siblingIndex());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("#document", document7.nodeName());
      assertEquals(2, document7.childNodeSize());
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document3));
      
      Document document8 = (Document)document6.prepend("V_GD{ld8 bS");
      assertSame(document0, document4);
      assertNotSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document8);
      assertSame(document0, document5);
      assertNotSame(document0, document7);
      assertSame(document8, document6);
      assertNotSame(document8, document3);
      assertSame(document8, document1);
      assertNotSame(document8, document2);
      assertNotSame(document8, document7);
      assertNotSame(document8, document5);
      assertNotSame(document8, document4);
      assertNotSame(document8, document0);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document7);
      assertSame(document1, document6);
      assertNotSame(document1, document3);
      assertSame(document1, document8);
      assertNotSame(document1, document4);
      assertNotSame(document1, document5);
      assertNotSame(document6, document4);
      assertSame(document6, document1);
      assertSame(document6, document8);
      assertNotSame(document6, document0);
      assertNotSame(document6, document2);
      assertNotSame(document6, document7);
      assertNotSame(document6, document5);
      assertNotSame(document6, document3);
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(2, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document8.nodeName());
      assertEquals(0, document8.siblingIndex());
      assertEquals("e+&R~_A>l-", document8.location());
      assertEquals(4, document8.childNodeSize());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document8.baseUri());
      assertEquals("#root", document8.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertFalse(document8.hasParent());
      assertFalse(document8.isBlock());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(4, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("e+&R~_A>l-", document6.location());
      assertEquals(0, document6.siblingIndex());
      assertEquals(4, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document6.baseUri());
      assertFalse(document6.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertEquals("#document", document6.nodeName());
      assertNotNull(document8);
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document8.equals((Object)document7));
      assertFalse(document8.equals((Object)document5));
      assertFalse(document8.equals((Object)document4));
      assertFalse(document8.equals((Object)document0));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document7));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document3));
      
      document7.nodelistChanged();
      assertSame(document0, document4);
      assertNotSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document8);
      assertSame(document0, document5);
      assertNotSame(document0, document7);
      assertNotSame(document2, document7);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document6);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertNotSame(document2, document8);
      assertNotSame(document7, document5);
      assertNotSame(document7, document8);
      assertNotSame(document7, document0);
      assertNotSame(document7, document2);
      assertNotSame(document7, document1);
      assertNotSame(document7, document6);
      assertNotSame(document7, document4);
      assertNotSame(document7, document3);
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(2, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document7.tagName());
      assertEquals("e+&R~_A>l-", document7.location());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertFalse(document7.hasParent());
      assertEquals("e+&R~_A>l-", document7.baseUri());
      assertFalse(document7.isBlock());
      assertEquals(0, document7.siblingIndex());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("#document", document7.nodeName());
      assertEquals(2, document7.childNodeSize());
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document8));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document8));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document3));
      
      Pattern pattern0 = Pattern.compile("e+&R~_A>l-", 840);
      assertEquals("e+&R~_A>l-", pattern0.pattern());
      assertEquals("e+&R~_A>l-", pattern0.toString());
      assertEquals(840, pattern0.flags());
      assertNotNull(pattern0);
      
      Elements elements2 = document7.getElementsMatchingOwnText(pattern0);
      assertSame(document0, document4);
      assertNotSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document8);
      assertSame(document0, document5);
      assertNotSame(document0, document7);
      assertNotSame(document2, document7);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document6);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertNotSame(document2, document8);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotSame(document7, document5);
      assertNotSame(document7, document8);
      assertNotSame(document7, document0);
      assertNotSame(document7, document2);
      assertNotSame(document7, document1);
      assertNotSame(document7, document6);
      assertNotSame(document7, document4);
      assertNotSame(document7, document3);
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(2, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("e+&R~_A>l-", pattern0.pattern());
      assertEquals("e+&R~_A>l-", pattern0.toString());
      assertEquals(840, pattern0.flags());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertEquals("#root", document7.tagName());
      assertEquals("e+&R~_A>l-", document7.location());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertFalse(document7.hasParent());
      assertEquals("e+&R~_A>l-", document7.baseUri());
      assertFalse(document7.isBlock());
      assertEquals(0, document7.siblingIndex());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("#document", document7.nodeName());
      assertEquals(2, document7.childNodeSize());
      assertNotNull(elements2);
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document8));
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document8));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document3));
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("d'AtbtKC>ug", parseSettings0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertNotNull(tag0);
      
      FormElement formElement0 = new FormElement(tag0, "-}hJudcG'k9", (Attributes) null);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertNotNull(formElement0);
      
      FormElement formElement1 = formElement0.addElement((Element) null);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertNotNull(formElement1);
      
      int int0 = formElement1.elementSiblingIndex();
      assertEquals(0, int0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      
      Map<String, String> map0 = formElement1.dataset();
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals("-}hJudcG'k9", formElement1.baseUri());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      Element element0 = formElement0.appendElement("-}hJudcG'k9");
      assertSame(formElement0, formElement1);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals("-}hJudcG'k9", element0.baseUri());
      assertEquals("-}hjudcg'k9", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("-}hjudcg'k9", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Document document0 = Document.createShell("#comment");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#comment", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#comment", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertNotNull(document_OutputSettings2);
      
      Document document1 = document0.outputSettings(document_OutputSettings2);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#comment", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#comment", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals("#comment", document1.baseUri());
      assertEquals("#comment", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      Element element1 = document1.head();
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document1, document0);
      assertNotSame(element1, element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#comment", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#comment", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals("#comment", document1.baseUri());
      assertEquals("#comment", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("#comment", element1.baseUri());
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      
      Element element2 = element1.prepend("R7=q5pjQZ4*+C%]A5");
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document1, document0);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertNotSame(element2, element0);
      assertSame(element2, element1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#comment", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#comment", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals("#comment", document1.baseUri());
      assertEquals("#comment", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("#comment", element1.baseUri());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals("#comment", element2.baseUri());
      assertEquals("head", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertNotNull(element2);
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      
      document1.nodelistChanged();
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#comment", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#comment", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals("#comment", document1.baseUri());
      assertEquals("#comment", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      
      Pattern pattern0 = Pattern.compile("d'AtbtKC>ug", 1);
      assertEquals(1, pattern0.flags());
      assertEquals("d'AtbtKC>ug", pattern0.pattern());
      assertEquals("d'AtbtKC>ug", pattern0.toString());
      assertNotNull(pattern0);
      
      Document document2 = document1.normalise();
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("#comment", document2.location());
      assertEquals("#comment", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#comment", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#comment", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals("#comment", document1.baseUri());
      assertEquals("#comment", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document2);
      
      Elements elements0 = document2.getElementsMatchingOwnText(pattern0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertEquals(1, pattern0.flags());
      assertEquals("d'AtbtKC>ug", pattern0.pattern());
      assertEquals("d'AtbtKC>ug", pattern0.toString());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("#comment", document2.location());
      assertEquals("#comment", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#comment", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#comment", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals("#comment", document1.baseUri());
      assertEquals("#comment", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = ".%s";
      Element element0 = new Element(".%s");
      assertEquals(".%s", element0.nodeName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(".%s", element0.tagName());
      assertNotNull(element0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = "<";
      DataNode dataNode0 = DataNode.createFromEncoded("<", "<");
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      dataNode0.coreValue("<");
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      
      DataNode dataNode1 = dataNode0.setWholeData("xGTuM^k %6*i");
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode1, dataNode0);
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(dataNode1.hasParent());
      assertEquals("#data", dataNode1.nodeName());
      assertEquals(0, dataNode1.siblingIndex());
      assertNotNull(dataNode1);
      
      Document document0 = new Document("xGTuM^k %6*i");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xGTuM^k %6*i", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xGTuM^k %6*i", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      String string2 = element0.html();
      assertEquals("", string2);
      assertEquals(".%s", element0.nodeName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(".%s", element0.tagName());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Elements elements0 = element0.children();
      assertEquals(".%s", element0.nodeName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(".%s", element0.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      // Undeclared exception!
      try { 
        element0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = "d'AtbtKC>ug";
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("d'AtbtKC>ug", parseSettings0);
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertNotNull(tag0);
      
      String string1 = "-}hJudcG'k9";
      FormElement formElement0 = new FormElement(tag0, "-}hJudcG'k9", (Attributes) null);
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(formElement0.isBlock());
      assertEquals("-}hJudcG'k9", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertNotNull(formElement0);
      
      String string2 = null;
      // Undeclared exception!
      try { 
        formElement0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = "b6hvH$Vs*i]cIc";
      String string1 = "HG}W`<";
      Document document0 = Parser.parse("b6hvH$Vs*i]cIc", "HG}W`<");
      assertEquals("HG}W`<", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("HG}W`<", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.removeClass("HG}W`<");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("HG}W`<", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("HG}W`<", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("HG}W`<", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("HG}W`<", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      String string2 = null;
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueStarting(" ?Cv", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = ".,";
      Document document0 = Parser.parse(".,", ".,");
      assertEquals(1, document0.childNodeSize());
      assertEquals(".,", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(".,", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Element element0 = new Element("b6hvH$Vs*i]cIc");
      assertEquals("b6hvH$Vs*i]cIc", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("b6hvH$Vs*i]cIc", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("b6hvH$Vs*i]cIc"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Element element1 = element0.classNames((Set<String>) linkedHashSet0);
      assertFalse(linkedHashSet0.contains("b6hvH$Vs*i]cIc"));
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("b6hvH$Vs*i]cIc", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("b6hvH$Vs*i]cIc", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("b6hvH$Vs*i]cIc", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("b6hvH$Vs*i]cIc", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
      
      DataNode dataNode0 = new DataNode("b6hvH$Vs*i]cIc");
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      dataNode0.coreValue("b6hvH$Vs*i]cIc");
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      
      element1.reparentChild(dataNode0);
      assertFalse(linkedHashSet0.contains("b6hvH$Vs*i]cIc"));
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("b6hvH$Vs*i]cIc", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("b6hvH$Vs*i]cIc", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("b6hvH$Vs*i]cIc", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("b6hvH$Vs*i]cIc", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("#data", dataNode0.nodeName());
      assertTrue(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      
      Pattern pattern0 = Pattern.compile("b6hvH$Vs*i]cIc");
      assertEquals("b6hvH$Vs*i]cIc", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("b6hvH$Vs*i]cIc", pattern0.toString());
      assertNotNull(pattern0);
      
      Matcher matcher0 = pattern0.matcher("b6hvH$Vs*i]cIc");
      assertEquals("b6hvH$Vs*i]cIc", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("b6hvH$Vs*i]cIc", pattern0.toString());
      assertFalse(matcher0.hasTransparentBounds());
      assertEquals("java.util.regex.Matcher[pattern=b6hvH$Vs*i]cIc region=0,14 lastmatch=]", matcher0.toString());
      assertTrue(matcher0.hasAnchoringBounds());
      assertEquals(0, matcher0.groupCount());
      assertNotNull(matcher0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("ZmAF&}VoFK9^3", "ZmAF&}VoFK9^3");
      assertFalse(parser0.isTrackErrors());
      assertEquals("ZmAF&}VoFK9^3", document0.baseUri());
      assertEquals("ZmAF&}VoFK9^3", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.parser(parser0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("ZmAF&}VoFK9^3", document0.baseUri());
      assertEquals("ZmAF&}VoFK9^3", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ZmAF&}VoFK9^3", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ZmAF&}VoFK9^3", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        document1.appendElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parse("QtvCg['CIkGxekq6v|", "");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Elements elements0 = document0.nextElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Element element0 = new Element("tetarea");
      assertEquals("tetarea", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("tetarea", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Document document1 = (Document)document0.appendTo(element0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tetarea", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("tetarea", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      Document document2 = (Document)document0.toggleClass("QtvCg['CIkGxekq6v|");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      boolean boolean0 = document0.hasClass("br");
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      Elements elements1 = document0.getElementsByAttributeValueContaining("%", "QtvCg['CIkGxekq6v|");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements1, elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      
      String string0 = document2.className();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertNotNull(string0);
      
      Document document3 = (Document)document2.appendText("V_GD{ld8 bS");
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      
      boolean boolean1 = Element.preserveWhitespace(document2);
      assertFalse(boolean1);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = document3.hasText();
      assertTrue(boolean2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Element element1 = document3.appendElement("QtvCg['CIkGxekq6v|");
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(element1, element0);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("qtvcg['cikgxekq6v|", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("qtvcg['cikgxekq6v|", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      
      Document document4 = (Document)document3.prepend("#comment");
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(4, document0.childNodeSize());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(4, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(4, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertTrue(document4.hasParent());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(4, document4.childNodeSize());
      assertNotNull(document4);
      
      document0.nodelistChanged();
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(4, document0.childNodeSize());
      
      Document document5 = (Document)document2.val("textarea");
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertSame(document5, document4);
      assertSame(document5, document2);
      assertSame(document5, document0);
      assertSame(document5, document1);
      assertSame(document5, document3);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(4, document0.childNodeSize());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(4, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(4, document5.childNodeSize());
      assertEquals("", document5.location());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertEquals("", document5.baseUri());
      assertFalse(document5.isBlock());
      assertEquals("#root", document5.tagName());
      assertEquals(0, document5.siblingIndex());
      assertNotNull(document5);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("9Pt{e~3b.RCS 3G7h", ": ");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(": ", document0.baseUri());
      assertEquals(": ", document0.location());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(": ", document0.baseUri());
      assertEquals(": ", document0.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(": ", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(": ", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      Document document2 = document1.clone();
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(": ", document0.baseUri());
      assertEquals(": ", document0.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(": ", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(": ", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(": ", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(": ", document2.baseUri());
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document1;
      CDataNode cDataNode0 = new CDataNode("S`4");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Node node0 = cDataNode0.parent();
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertNull(node0);
      
      nodeArray0[1] = null;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document2;
      nodeArray0[5] = (Node) document0;
      // Undeclared exception!
      try { 
        document2.insertChildren(3, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parse("", "H\"9gh\"hmH)B><q#l%f,");
      assertEquals(0, document0.siblingIndex());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      String string0 = "i\\FTj5}5!pE=v-pf";
      Elements elements0 = document0.getElementsByIndexEquals(298);
      assertEquals(0, document0.siblingIndex());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Document document1 = (Document)document0.text("iFTj5}5!pE=v-pf");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      
      Document document2 = (Document)document0.text("i@o?TY8zl");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document2.location());
      assertNotNull(document2);
      
      Document document3 = new Document("");
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals("", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertNotNull(document3);
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      
      boolean boolean0 = document2.hasSameValue(document3);
      assertFalse(boolean0);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document2.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals("", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      
      Elements elements1 = document2.getElementsByAttributeStarting("MOZ\")");
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(elements1, elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document2.location());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertTrue(elements1.equals((Object)elements0));
      
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      assertEquals(":matchText", evaluator_MatchText0.toString());
      assertNotNull(evaluator_MatchText0);
      
      boolean boolean1 = document0.is((Evaluator) evaluator_MatchText0);
      assertFalse(boolean1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(":matchText", evaluator_MatchText0.toString());
      assertFalse(document0.equals((Object)document3));
      assertTrue(boolean1 == boolean0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      
      List<Node> list0 = parser1.parseFragmentInput("M1)enkVKm", document0, "");
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document3));
      
      Elements elements2 = document0.getElementsMatchingText("org.jsoup.select.Evaluator$IsNthOfType");
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("H\"9gh\"hmH)B><q#l%f,", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertNotNull(elements2);
      assertFalse(document0.equals((Object)document3));
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      
      // Undeclared exception!
      try { 
        document2.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragment("", "");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      TextNode textNode0 = new TextNode("", "");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertNotNull(textNode0);
      
      Document document1 = (Document)document0.appendChild(textNode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertTrue(textNode0.hasParent());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertNotNull(document1);
      
      boolean boolean0 = document1.hasText();
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertTrue(textNode0.hasParent());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      
      // Undeclared exception!
      try { 
        document1.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parse("e+&R~_A>l-", "e+&R~_A>l-");
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("e+&R~_A>l-", document2.location());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document0.appendTo(document2);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("e+&R~_A>l-", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals(1, document2.siblingIndex());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("e+&R~_A>l-", document3.location());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("e+&R~_A>l-", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      
      Elements elements0 = document2.nextElementSiblings();
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("e+&R~_A>l-", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals(1, document2.siblingIndex());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document4 = (Document)document1.toggleClass("e+&R~_A>l-");
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertSame(document4, document1);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("e+&R~_A>l-", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("e+&R~_A>l-", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals("e+&R~_A>l-", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      
      String string0 = document1.baseUri();
      assertEquals("e+&R~_A>l-", string0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("e+&R~_A>l-", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      
      boolean boolean0 = document4.hasClass("e+&R~_A>l-");
      assertFalse(boolean0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertSame(document4, document1);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("e+&R~_A>l-", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("e+&R~_A>l-", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals("e+&R~_A>l-", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      
      String string1 = null;
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueContaining((String) null, "e+&R~_A>l-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parse("e+&R~_A>l-", "e+&R~_A>l-");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document1.normalise();
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Element element0 = document2.body();
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("e+&R~_A>l-", element0.baseUri());
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      String string0 = document0.absUrl("e+&R~_A>l-");
      assertEquals("", string0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      
      Tag tag0 = Tag.valueOf("l~O");
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertEquals("l~O", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("l~O", tag0.getName());
      assertNotNull(tag0);
      
      Element element1 = new Element(tag0, "dir");
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertEquals("l~O", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("l~O", tag0.getName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("l~O", element1.tagName());
      assertEquals("dir", element1.baseUri());
      assertEquals("l~O", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      
      Document document3 = (Document)document1.val("label");
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("e+&R~_A>l-", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      
      Document document4 = (Document)document2.append("id");
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("e+&R~_A>l-", document4.location());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("e+&R~_A>l-", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("d'AtbtKC>ug", parseSettings0);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      FormElement formElement0 = new FormElement(tag0, "-}JudcG'k", (Attributes) null);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("-}JudcG'k", formElement0.baseUri());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertNotNull(formElement0);
      
      FormElement formElement1 = formElement0.addElement((Element) null);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("-}JudcG'k", formElement0.baseUri());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("-}JudcG'k", formElement1.baseUri());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertNotNull(formElement1);
      
      int int0 = formElement1.elementSiblingIndex();
      assertEquals(0, int0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("-}JudcG'k", formElement0.baseUri());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("-}JudcG'k", formElement1.baseUri());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      
      Map<String, String> map0 = formElement1.dataset();
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("-}JudcG'k", formElement0.baseUri());
      assertEquals("d'AtbtKC>ug", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("d'AtbtKC>ug", formElement0.tagName());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("-}JudcG'k", formElement1.baseUri());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("d'AtbtKC>ug", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals("d'AtbtKC>ug", formElement1.tagName());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      Document document0 = new Document("d'AtbtKC>ug");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("d'AtbtKC>ug", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("d'AtbtKC>ug", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("d'AtbtKC>ug", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("d'AtbtKC>ug", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("d'AtbtKC>ug", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("d'AtbtKC>ug", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      Document document2 = (Document)document1.clone();
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("d'AtbtKC>ug", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("d'AtbtKC>ug", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("d'AtbtKC>ug", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("d'AtbtKC>ug", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("d'AtbtKC>ug", document2.location());
      assertEquals("d'AtbtKC>ug", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      FormElement formElement2 = new FormElement(tag0, "d'AtbtKC>ug", (Attributes) null);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals(0, formElement2.siblingIndex());
      assertEquals(0, formElement2.childNodeSize());
      assertEquals("d'AtbtKC>ug", formElement2.tagName());
      assertFalse(formElement2.isBlock());
      assertEquals("d'AtbtKC>ug", formElement2.nodeName());
      assertFalse(formElement2.hasParent());
      assertEquals("d'AtbtKC>ug", formElement2.baseUri());
      assertNotNull(formElement2);
      assertFalse(formElement2.equals((Object)formElement0));
      assertFalse(formElement2.equals((Object)formElement1));
      
      FormElement formElement3 = formElement2.addElement((Element) null);
      assertNotSame(formElement2, formElement0);
      assertSame(formElement2, formElement3);
      assertNotSame(formElement2, formElement1);
      assertNotSame(formElement3, formElement1);
      assertNotSame(formElement3, formElement0);
      assertSame(formElement3, formElement2);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("d'AtbtKC>ug", tag0.toString());
      assertEquals("d'AtbtKC>ug", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals(0, formElement2.siblingIndex());
      assertEquals(0, formElement2.childNodeSize());
      assertEquals("d'AtbtKC>ug", formElement2.tagName());
      assertFalse(formElement2.isBlock());
      assertEquals("d'AtbtKC>ug", formElement2.nodeName());
      assertFalse(formElement2.hasParent());
      assertEquals("d'AtbtKC>ug", formElement2.baseUri());
      assertEquals("d'AtbtKC>ug", formElement3.tagName());
      assertFalse(formElement3.isBlock());
      assertEquals("d'AtbtKC>ug", formElement3.nodeName());
      assertFalse(formElement3.hasParent());
      assertEquals("d'AtbtKC>ug", formElement3.baseUri());
      assertEquals(0, formElement3.childNodeSize());
      assertEquals(0, formElement3.siblingIndex());
      assertNotNull(formElement3);
      assertFalse(formElement2.equals((Object)formElement0));
      assertFalse(formElement2.equals((Object)formElement1));
      assertFalse(formElement3.equals((Object)formElement1));
      assertFalse(formElement3.equals((Object)formElement0));
      
      // Undeclared exception!
      try { 
        formElement3.insertChildren(0, (Node[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Children collection to be inserted must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Comment comment0 = new Comment(".,");
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(comment0);
      
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertNull(xmlDeclaration0);
      
      Document document0 = Parser.parse(".,", ".,");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(".,", document0.baseUri());
      assertEquals(".,", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parse("e+&R~_A>l-", "e+&R~_A>l-");
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document1.normalise();
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Element element0 = document2.createElement("e+&R~_A>l-");
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("e+&R~_A>l-", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("e+&R~_A>l-", element0.tagName());
      assertEquals("e+&R~_A>l-", element0.nodeName());
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Document document3 = Parser.parse("ForeignContent", "ForeignContent");
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("ForeignContent", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertEquals("ForeignContent", document3.baseUri());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = parser0.parseFragmentInput("ForeignContent", element0, "e+&R~_A>l-");
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("e+&R~_A>l-", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("e+&R~_A>l-", element0.tagName());
      assertEquals("e+&R~_A>l-", element0.nodeName());
      assertFalse(parser0.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      
      Elements elements0 = document0.getElementsMatchingText("oUmeD=:k3_nNd6+G");
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      
      Elements elements1 = document2.getElementsByAttributeStarting("Ds?Jo*}5%?\"vhyax");
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(elements1, elements0);
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertTrue(elements1.equals((Object)elements0));
      
      Element element1 = new Element("e+&R~_A>l-");
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("e+&R~_A>l-", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals("e+&R~_A>l-", element1.tagName());
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      
      Document document4 = (Document)document2.prependChild(element1);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertNotSame(element1, element0);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertEquals("e+&R~_A>l-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("e+&R~_A>l-", element1.nodeName());
      assertEquals("e+&R~_A>l-", element1.tagName());
      assertEquals("e+&R~_A>l-", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("e+&R~_A>l-", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(2, document4.childNodeSize());
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      
      Document document5 = (Document)document3.attr("e+&R~_A>l-", false);
      assertNotSame(document3, document4);
      assertSame(document3, document5);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document5, document2);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertSame(document5, document3);
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("ForeignContent", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertEquals("ForeignContent", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.childNodeSize());
      assertEquals("ForeignContent", document5.location());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals("ForeignContent", document5.baseUri());
      assertFalse(document5.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertNotNull(document5);
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      
      // Undeclared exception!
      try { 
        document2.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Element element0 = new Element("yG#y");
      assertEquals("yG#y", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("yG#y", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      String string0 = "isindex";
      Element element1 = element0.text("yG#y");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("yG#y", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("yG#y", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("yG#y", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("yG#y", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      
      Comment comment0 = new Comment("isindex");
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertNotNull(comment0);
      
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertFalse(xmlDeclaration0.hasParent());
      assertNotNull(xmlDeclaration0);
      
      Element element2 = element0.prependChild(xmlDeclaration0);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertEquals("yG#y", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("yG#y", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(2, element0.childNodeSize());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertTrue(xmlDeclaration0.hasParent());
      assertEquals(2, element2.childNodeSize());
      assertEquals("yG#y", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("", element2.baseUri());
      assertFalse(element2.hasParent());
      assertEquals("yG#y", element2.nodeName());
      assertNotNull(element2);
      
      xmlDeclaration0.nodelistChanged();
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertTrue(xmlDeclaration0.hasParent());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        comment0.removeChild(xmlDeclaration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parse("e+&R~_A>l-", "%h51Brf4VA");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("%h51Brf4VA", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("%h51Brf4VA", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("%h51Brf4VA", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("%h51Brf4VA", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("%h51Brf4VA", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("%h51Brf4VA", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document1.normalise();
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("%h51Brf4VA", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("%h51Brf4VA", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("%h51Brf4VA", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("%h51Brf4VA", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("%h51Brf4VA", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("%h51Brf4VA", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Element element0 = document2.body();
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("%h51Brf4VA", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("%h51Brf4VA", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("%h51Brf4VA", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("%h51Brf4VA", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("%h51Brf4VA", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("%h51Brf4VA", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("%h51Brf4VA", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Elements elements0 = element0.getElementsByAttributeValueStarting(" ?Cv", "e+&R~_A>l-");
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("%h51Brf4VA", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("%h51Brf4VA", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("%h51Brf4VA", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("%h51Brf4VA", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("%h51Brf4VA", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("%h51Brf4VA", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("%h51Brf4VA", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Elements elements1 = document0.getElementsByTag("%h51Brf4VA");
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(elements1, elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("%h51Brf4VA", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("%h51Brf4VA", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertTrue(elements1.equals((Object)elements0));
      
      boolean boolean0 = Element.preserveWhitespace(document2);
      assertFalse(boolean0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("%h51Brf4VA", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("%h51Brf4VA", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("%h51Brf4VA", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("%h51Brf4VA", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("%h51Brf4VA", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("%h51Brf4VA", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Elements elements2 = document2.previousElementSiblings();
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("%h51Brf4VA", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("%h51Brf4VA", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("%h51Brf4VA", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("%h51Brf4VA", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("%h51Brf4VA", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("%h51Brf4VA", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertNotNull(elements2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Tag tag0 = Tag.valueOf("yG#y");
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertEquals("yG#y", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertEquals("yG#y", tag0.getName());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "yG#y");
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertEquals("yG#y", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertEquals("yG#y", tag0.getName());
      assertEquals("yG#y", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("yG#y", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("yG#y", element0.nodeName());
      assertNotNull(element0);
      
      Element element1 = element0.nextElementSibling();
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertEquals("yG#y", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertEquals("yG#y", tag0.getName());
      assertEquals("yG#y", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("yG#y", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("yG#y", element0.nodeName());
      assertNull(element1);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("html", "s+");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // s+
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Tag tag0 = Tag.valueOf("yG#y");
      assertEquals("yG#y", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("yG#y", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode("tetarea");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.parser.ParseError", attributes0);
      assertEquals("yG#y", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("yG#y", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("yG#y", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("yG#y", formElement0.tagName());
      assertEquals("org.jsoup.parser.ParseError", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertNotNull(formElement0);
      
      List<Attribute> list0 = attributes0.asList();
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Element element0 = formElement0.attr("zYlTB[L1u:Xt|cCC", true);
      assertSame(formElement0, element0);
      assertSame(element0, formElement0);
      assertEquals("yG#y", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("yG#y", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("yG#y", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("yG#y", formElement0.tagName());
      assertEquals("org.jsoup.parser.ParseError", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals("yG#y", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.parser.ParseError", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("yG#y", element0.nodeName());
      assertNotNull(element0);
      
      Pattern pattern0 = Pattern.compile("body");
      assertEquals("body", pattern0.toString());
      assertEquals("body", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertNotNull(pattern0);
      
      Document document0 = Parser.parseBodyFragment("zYlTB[L1u:Xt|cCC", "org.jsoup.parser.ParseError");
      assertEquals("org.jsoup.parser.ParseError", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.ParseError", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      assertEquals("body", pattern0.toString());
      assertEquals("body", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("org.jsoup.parser.ParseError", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.ParseError", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = document0.getElementsByAttributeValue("zYlTB[L1u:Xt|cCC", "tetarea");
      assertNotSame(elements1, elements0);
      assertEquals("org.jsoup.parser.ParseError", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.ParseError", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      
      // Undeclared exception!
      try { 
        document0.before((Node) cDataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parse("e+&R~_A>l-", "e+&R~_A>l-");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("e+&R~_A>l-", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document1.normalise();
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("e+&R~_A>l-", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Element element0 = document2.body();
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("e+&R~_A>l-", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("e+&R~_A>l-", document2.location());
      assertEquals("e+&R~_A>l-", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("e+&R~_A>l-", element0.baseUri());
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Tag tag0 = Tag.valueOf("l~O");
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("l~O", tag0.getName());
      assertEquals("l~O", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      Element element1 = new Element(tag0, "dir");
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("l~O", tag0.getName());
      assertEquals("l~O", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("l~O", element1.tagName());
      assertEquals("l~O", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("dir", element1.baseUri());
      assertFalse(element1.isBlock());
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      
      Document document3 = (Document)document1.val("label");
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("e+&R~_A>l-", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("e+&R~_A>l-", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("e+&R~_A>l-", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document1.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("e+&R~_A>l-", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("e+&R~_A>l-", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = "%h51Brf4VA";
      Document document0 = Parser.parse("e+&R~_A>l-", "%h51Brf4VA");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("%h51Brf4VA", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("%h51Brf4VA", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("%h51Brf4VA", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("%h51Brf4VA", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("%h51Brf4VA", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("%h51Brf4VA", document1.baseUri());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document1.normalise();
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("%h51Brf4VA", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("%h51Brf4VA", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("%h51Brf4VA", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("%h51Brf4VA", document1.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("%h51Brf4VA", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("%h51Brf4VA", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Element element0 = document2.body();
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("%h51Brf4VA", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("%h51Brf4VA", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("%h51Brf4VA", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("%h51Brf4VA", document1.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("%h51Brf4VA", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("%h51Brf4VA", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("%h51Brf4VA", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      String string1 = null;
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parse("QtvCg['CIkGxekq6v|", "");
      document0.nextElementSiblings();
      Element element0 = new Element("tetarea");
      document0.appendTo(element0);
      Element element1 = document0.toggleClass("QtvCg['CIkGxekq6v|");
      document0.baseUri();
      document0.hasClass("br");
      document0.getElementsByAttributeValueContaining("%", "QtvCg['CIkGxekq6v|");
      element1.className();
      Element element2 = element1.appendText("V_GD{ld8 bS");
      Element.preserveWhitespace(element1);
      element2.hasText();
      element2.appendElement("noframes");
      element2.prepend("#comment");
      document0.nodelistChanged();
      Pattern pattern0 = Pattern.compile("id", 840);
      document0.getElementsMatchingOwnText(pattern0);
      assertEquals(4, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.removeClass("");
      Document document1 = Parser.parse("applet", "TS,");
      document1.getElementsByAttributeValueContaining("TS,", "s");
      element0.className();
      String string0 = "V_GD{ld8 bS";
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      // Undeclared exception!
      try { 
        Tag.valueOf("", parseSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("3SZq", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("3SZq");
      Attributes attributes0 = cDataNode0.attributes();
      Attribute attribute0 = new Attribute("<_", (String) null);
      Attributes attributes1 = attributes0.put(attribute0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "3SZq", attributes1);
      pseudoTextElement0.getElementsByTag("RPQ=cl");
      assertEquals("3SZq", pseudoTextElement0.baseUri());
      
      // Undeclared exception!
      try { 
        pseudoTextElement0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parse("", "H\"9gh\"hmH)B><q#l%f,");
      document0.getElementsByIndexEquals(298);
      document0.text("iFTj5}5!pE=v-pf");
      Element element0 = document0.text("i@o?TY8zl");
      String string0 = "";
      Document document1 = new Document("");
      element0.hasSameValue(document1);
      element0.getElementsByAttributeStarting("MOZ\")");
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      document0.is((Evaluator) evaluator_MatchText0);
      document0.ensureChildNodes();
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "H\"9gh\"hmH)B><q#l%f,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = "b6hvH$Vs*i]cIc";
      Element element0 = new Element("b6hvH$Vs*i]cIc");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Element element1 = element0.classNames((Set<String>) linkedHashSet0);
      DataNode dataNode0 = new DataNode("b6hvH$Vs*i]cIc");
      dataNode0.coreValue("b6hvH$Vs*i]cIc");
      element1.reparentChild(dataNode0);
      Pattern pattern0 = Pattern.compile("#");
      pattern0.matcher("b6hvH$Vs*i]cIc");
      element0.getElementsMatchingText(pattern0);
      Element element2 = element1.tagName("#");
      // Undeclared exception!
      try { 
        element2.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Document.createShell("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      byteArrayOutputStream0.close();
      byteArrayOutputStream0.writeTo(mockPrintStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      mockPrintStream1.println(false);
      document0.outerHtml((Appendable) mockPrintStream1);
      String string0 = "";
      // Undeclared exception!
      try { 
        document0.before("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = "QtvCg['CIkGxekq6v|";
      Document document0 = Parser.parse("QtvCg['CIkGxekq6v|", "");
      document0.nextElementSiblings();
      // Undeclared exception!
      try { 
        document0.child(29);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 29, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parse(".,", ".,");
      Element element0 = document0.appendElement("value");
      Element element1 = element0.getElementById("uEGv$[/t.]N");
      assertEquals(".,", element0.baseUri());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("d'AtbtKC>ug", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "-}hJudcG'k9", (Attributes) null);
      FormElement formElement1 = formElement0.addElement((Element) null);
      formElement1.elementSiblingIndex();
      formElement1.dataset();
      // Undeclared exception!
      try { 
        formElement1.getElementsByAttributeValueStarting("d'AtbtKC>ug", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("cs~n`>2V#|3-%U'\"1", "cs~n`>2V#|3-%U'\"1");
      Element element0 = document0.head();
      element0.ownerDocument();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        element0.is("cs~n`>2V#|3-%U'\"1");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'n`': unexpected token at '`'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("9Pt{e~3b.RCS 37h", ": ");
      document0.className();
      document0.textNodes();
      document0.data();
      document0.getAllElements();
      document0.getElementsByAttributeValue(" ", "GZ(A55");
      document0.previousElementSiblings();
      document0.ensureChildNodes();
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("9Pt{e~3b.RCS 37h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 9Pt{e~3b.RCS 37h
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "textarea");
      String string0 = "!rZxG8Ff>g#>MK";
      Document document0 = Parser.parseBodyFragmentRelaxed("!rZxG8Ff>g#>MK", "@T-N");
      Element element0 = document0.tagName("@T-N");
      element0.setBaseUri("!rZxG8Ff>g#>MK");
      element0.previousSibling();
      element0.getElementsByAttributeValue("tetarea", "tetarea");
      Element element1 = document0.prependText("!rZxG8Ff>g#>MK");
      String string1 = "yG#y";
      element1.getElementsMatchingOwnText("yG#y");
      Document document1 = (Document)document0.prependText("yG#y");
      // Undeclared exception!
      try { 
        document1.replaceChild(element1, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = "YLV9>[Bo#";
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("YLV9>[Bo#", parseSettings0);
      parseSettings0.normalizeTag("#");
      CDataNode cDataNode0 = new CDataNode("#");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.clone();
      FormElement formElement0 = new FormElement(tag0, "YLV9>[Bo#", attributes1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      parseSettings0.normalizeTag("UZ");
      attributes0.forEach(consumer0);
      attributes1.dataset();
      // Undeclared exception!
      try { 
        formElement0.getElementsMatchingOwnText("(Pm4)Vhq}YOZ)o!vjG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: (Pm4)Vhq}YOZ)o!vjG
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.after((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = "U4)9T[rb0T+";
      String string1 = "AWDq%=I";
      Document document0 = Parser.parseBodyFragment("U4)9T[rb0T+", "AWDq%=I");
      Document document1 = document0.clone();
      // Undeclared exception!
      try { 
        document1.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = "HHotNO?S3";
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "HHotNO?S3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parse(" > ", "mcy;[&lS");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(false);
      Document document1 = document0.outputSettings(document_OutputSettings2);
      document0.setParentNode(document1);
      document0.isBlock();
      Element element0 = document0.clone();
      // Undeclared exception!
      try { 
        element0.insertChildren(640, (Node[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Children collection to be inserted must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Element element0 = new Element(".%s");
      element0.hasClass(".%s");
      DataNode dataNode0 = DataNode.createFromEncoded("<", "<");
      dataNode0.coreValue("<");
      DataNode dataNode1 = dataNode0.setWholeData("xGTuM^k %6*i");
      Element element1 = element0.prependChild(dataNode1);
      element0.html();
      element0.children();
      element0.getElementsByClass("xGTuM^k %6*i");
      MockFile mockFile0 = new MockFile("YMdLWE?.nXbYHo");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      element0.html(mockFileWriter0);
      dataNode0.toString();
      Element element2 = element1.prependChild(dataNode1);
      Element element3 = element2.text(".%s");
      element1.getElementsByAttributeValue(".", "<");
      element1.attr("Cpwd", "<");
      // Undeclared exception!
      try { 
        element3.getElementsByAttributeValueMatching("#root", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = "u.vEsA),mr$Q~";
      Document document0 = Parser.parseBodyFragment("u.vEsA),mr$Q~", "");
      Element element0 = document0.head();
      int int0 = (-2167);
      // Undeclared exception!
      try { 
        element0.child((-2167));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = "B/\\";
      Document document0 = Parser.parse("B/", "B/");
      document0.createElement("B/");
      String string1 = "action";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("action", "action");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // action
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragment("", "");
      TextNode textNode0 = new TextNode("", "");
      document0.reparentChild(textNode0);
      Document document1 = (Document)document0.appendChild(textNode0);
      document1.hasText();
      // Undeclared exception!
      try { 
        document1.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.removeClass("");
      element0.getElementsByAttributeValueStarting("Fk7vglV\"D%$8L7~I", " ?Cv");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parse("e+&R~_A>l-", "%h51Brf4VA");
      Document document1 = document0.clone();
      Document document2 = document1.normalise();
      Element element0 = document2.body();
      Element element1 = element0.attr("%h51Brf4VA", false);
      Pattern pattern0 = Pattern.compile("tt");
      document0.getElementsMatchingOwnText(pattern0);
      document0.getElementsByAttributeValue("ds", "e+&R~_A>l-");
      element1.before((Node) element0);
      element1.className();
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals("%h51Brf4VA", element1.baseUri());
      assertNotSame(document2, document0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Document.createShell("b$NqFKBQZl)U[");
      document0.classNames();
      assertEquals(1, document0.childNodeSize());
      assertEquals("b$NqFKBQZl)U[", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":not%s", "Tag name must not be empty.");
      Document document1 = document0.clone();
      Parser parser0 = Parser.xmlParser();
      Document document2 = document1.parser(parser0);
      Document document3 = Parser.parse("", "");
      parser0.parseFragmentInput("", document3, "");
      document2.getElementsMatchingText("Tag name must not be empty.");
      document2.getElementsByAttributeStarting(".");
      document1.prependChild(document0);
      document1.attr(" />", false);
      assertEquals(2, document1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Tag tag0 = Tag.valueOf("yG#y");
      Element element0 = new Element(tag0, "yG#y");
      Element element1 = element0.val("|,x{=g_K");
      assertEquals("yG#y", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parse("2s:/S<-3prF*0r", "");
      document0.textNodes();
      document0.doSetBaseUri("2s:/S<-3prF*0r");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      document0.clone();
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      String string0 = "Children collection to be inserted must not be null.";
      String string1 = Node.EmptyString;
      Tag tag0 = Tag.valueOf("|B%wD9H,x;M \"YK", parseSettings0);
      Element element0 = new Element(tag0, "|B%wD9H,x;M \"YK");
      Tag.valueOf("|B%wD9H,x;M \"YK");
      Document document0 = new Document("Jj%}WPE!?}X<@>$xIZ");
      document0.head();
      // Undeclared exception!
      try { 
        element0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = "|B%wD9H,x;M \"YK";
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      String string1 = "Children collection to be inserted must not be null.";
      parseSettings0.normalizeAttribute("Children collection to be inserted must not be null.");
      Tag tag0 = Tag.valueOf("|B%wD9H,x;M \"YK", parseSettings0);
      Element element0 = new Element(tag0, "|B%wD9H,x;M \"YK");
      Tag.valueOf("|B%wD9H,x;M \"YK");
      String string2 = "Jj%}WPE!?}X<@>$xIZ";
      Document document0 = new Document("Jj%}WPE!?}X<@>$xIZ");
      document0.head();
      // Undeclared exception!
      try { 
        element0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = "QgG+nHi+kcQ";
      Document document0 = Parser.parseBodyFragmentRelaxed("QgG+nHi+kcQ", "'mJV9,");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      document_OutputSettings0.prettyPrint(false);
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset((Charset) null);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      Document document1 = document0.outputSettings(document_OutputSettings3);
      document1.appendText("'mJV9,");
      // Undeclared exception!
      try { 
        document0.before("QgG+nHi+kcQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
