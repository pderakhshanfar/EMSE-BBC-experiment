/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 21:03:23 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.net.URI;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      document0.toggleClass("Children collection to be inserted must not be null.");
      document0.toggleClass("Children collection to be inserted must not be null.");
      document0.siblingIndex = 8218;
      document0.hasClass("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      document0.setParentNode(document0);
      document0.empty();
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = new Document("s+");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(mockPrintWriter0, 3152, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parse("[/ZoclG&O|<p~1", ".");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s+", "s+");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      Document document1 = Parser.parse("!2?a/", "I)o$.y])");
      Document document2 = (Document)document0.attr("I)o$.y])", true);
      document0.setParentNode(document1);
      document2.wrap("!2?a/");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Element element0 = new Element("basefont");
      Element element1 = element0.prependElement("basefont");
      element1.wrap("<basefont><basefont class=\"java.lang.String@0000000027\"></basefont>");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parse("b6asefont", "b6asefont");
      Element element0 = document0.body();
      element0.wrap(":");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "j]D");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Document.createShell("r7Z9_fr");
      document0.setSiblingIndex((-91));
      document0.val("@vPV^4ben*&Q,#7");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("formnovalidate", "sr~-}ux!~3emaez{");
      Element element0 = document0.body();
      element0.val("formnovalidate");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Element element0 = new Element("0\"XCmK3");
      element0.val("0\"XCmK3");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parse("M6-v0ZiP+", "M6-v0ZiP+");
      Element element0 = document0.appendElement("u/&w?*vg");
      element0.toggleClass("<[$oy05`;x5heh");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parse("Bd", "Bd");
      document0.setSiblingIndex((-34));
      document0.toggleClass("QrZJ7W$>`b|0`Nd");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Document.createShell("7d");
      Element element0 = document0.head();
      element0.toggleClass("org.jsoup.nodes.PseudoTextElement");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Document.createShell("#");
      Element element0 = document0.body();
      element0.text("#");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Document.createShell("#");
      document0.text("#");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parse("&`;<ig`Y}", "M6-v0ZiP+");
      Element element0 = document0.appendElement("<[$Oy05`;x5Heh");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S9=B}IWm", "*(@s");
      document0.setSiblingIndex((-424));
      document0.tagName("J)Ln[L]L0");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("O'*bN4/w$Hk%[Oz23 ", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "html", attributes0);
      element0.tagName("html");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parse("&`;<ig`Y}", "M6-v0ZiP+");
      Element element0 = document0.appendElement("<[$Oy05`;x5Heh");
      element0.tagName("<[$Oy05`;x5Heh");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("c+:y+djgo8.a.r&0c_.", "body");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parse("n=uuejgaxp", "textarea");
      Element element0 = document0.appendElement("br");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Document.createShell("#");
      Element element0 = document0.body();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = new Document("t )JL'");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parse("doctypepublicidentifie<_singlequoted", "doctypepublicidentifie<_singlequoted");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      document0.selectFirst("m");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Element element0 = new Element("progriss");
      element0.selectFirst("progriss");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Qd", "Qd");
      document0.appendElement("Qd");
      document0.select("Qd");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" <%s>", " <%s>");
      document0.setSiblingIndex((-693));
      document0.removeClass(" <%s>");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("html", "html");
      Element element0 = document0.appendElement("html");
      element0.removeClass("html");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Document.createShell("progress");
      Element element0 = document0.body();
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = new Document("^r");
      document0.appendElement("^r");
      document0.appendTo(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parse("Bd", "Bd");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S9=B}IWm", "*(@s");
      document0.setSiblingIndex((-424));
      document0.prependText("'^:_{A,y\"w0");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Document.createShell("#");
      Element element0 = document0.body();
      element0.prependText("#");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "head");
      document0.prependElement("head");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Document.createShell("progress");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      document0.setSiblingIndex((-406));
      document0.prepend("s+");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parse("0#gHS*W=wIroW,o~", "0#gHS*W=wIroW,o~");
      Element element0 = document0.head();
      element0.prepend("H#hQ");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Document.createShell("' 0/#vU Zje%c%(R");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("org.jsoup.select.Evaluator$AttributeWithValueStarting", "");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Document.createShell("!zd");
      document0.appendChild(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")%`", ")%`");
      Element element0 = document0.head();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      Document document1 = Document.createShell("progress");
      document1.setParentNode(document0);
      document1.parent();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      document0.setParentNode(document0);
      document0.empty();
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parse("M6-v0ZiP+", "M6-v0ZiP+");
      Elements elements0 = document0.getElementsByAttributeValueNot("M6-v0ZiP+", "M6-v0ZiP+");
      Document document1 = document0.clone();
      Element element0 = document1.insertChildren(1, (Collection<? extends Node>) elements0);
      document0.before("RVE]CdwsI}w");
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parse("[/ZoclG&O|<p~1", ".");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Document.createShell("7d");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Document.createShell("7d");
      Element element0 = document0.appendElement("org.jsoup.nodes.PseudoTextElement");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Document.createShell("7d");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parse("sr~-}ux!~3emaez{", "sr~-}ux!~3emaez{");
      Element element0 = document0.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parse("#A", "");
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("");
      document0.is((Evaluator) evaluator_ContainsOwnText0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("", "");
      Evaluator.IsNthOfType evaluator_IsNthOfType0 = new Evaluator.IsNthOfType(194, 194);
      document0.is((Evaluator) evaluator_IsNthOfType0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Bd", "Bd");
      Element element0 = document0.appendElement("Bd");
      element0.is("Bd");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Document.createShell("7d");
      Element element0 = document0.head();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) document0;
      element0.insertChildren((-1), nodeArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren(1, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^r", "^r");
      Element element0 = document0.appendElement("^r");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      element0.insertChildren(0, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Wa", "Wa");
      document0.siblingIndex = (-1201815216);
      document0.html("64K&.sMj4'T_?");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parse("M6-v0ZiG+", "M6-v0ZiG+");
      Element element0 = document0.appendElement("d");
      element0.html("org.jsoup.select.Evaluator$ContainsOwnText");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("html", parseSettings0);
      Element element0 = new Element(tag0, "oK`UlHA;R\"5|j&A5");
      element0.html("html");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = new Document("M6-v0ZiG+");
      PipedWriter pipedWriter0 = new PipedWriter();
      document0.html(pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parse("&`;<ig`Y}", "M6-v0ZiP+");
      document0.hasClass("&`;<ig`Y}");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parse("M6-v0ZiP+", "M6-v0ZiP+");
      document0.getElementsMatchingText("");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("InTable", "InTable");
      Pattern pattern0 = Pattern.compile("pattern syntax error:");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "head");
      Pattern pattern0 = Pattern.compile("head", (-1568));
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("fp<]Q+twtgf(:2,QK>A", "org.jsoup.nodes.Element$1");
      document0.getElementsMatchingOwnText("");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.ang,string@0000000076", "java.ang,string@0000000076");
      document0.getElementsByTag("java.ang,string@0000000076");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("_o", "EIPd*5 =@0N{2).lJoH");
      document0.getElementsByTag("#root");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Document.createShell("s5<w{\"5-l }y8S");
      document0.getElementsByIndexGreaterThan(28);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#!9]eqk`", "#!9]eqk`");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("sr~-}ux!~3emaez{", "sr~-}ux!~3emaez{");
      document0.getElementsByAttributeValueStarting("C3?^'v^_v", "k&sugnkqsr");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("U8~W!:~(DJf_da0|>g", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("org.jsoup.select.Collector");
      Attributes attributes0 = cDataNode0.attributes();
      Attribute attribute0 = new Attribute("e`B#}4-]Mcn<AF7/_%", "head");
      Attributes attributes1 = attributes0.put(attribute0);
      Element element0 = new Element(tag0, "java.lang.string@0000000036", attributes1);
      element0.getElementsByAttributeValueStarting("e`B#}4-]Mcn<AF7/_%", "head");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = new Document("aW?n|A)");
      document0.getElementsByAttributeValueNot("aW?n|A)", "     ");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Tag tag0 = Tag.valueOf("progriss");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("s+", "progriss");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "s+", attributes1);
      pseudoTextElement0.getElementsByAttributeValueMatching("s+", "progriss");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parse("Bd", "Bd");
      document0.getElementsByAttributeValueEnding("QrZJ7W$>`b|0`Nd", "Bd");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("V|]jN$-+):!y", "aJ:zPQC:N");
      document0.getElementsByAttributeValueContaining("V|]jN$-+):!y", "V|]jN$-+):!y");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("^r", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("&lt;", ";+j[.UNT");
      attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "progress", attributes0);
      formElement0.getElementsByAttributeValue("&lt;", ";+j[.UNT");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("64{us~p9RB}w", "64{us~p9RB}w");
      Element element0 = document0.attr("html", "MN PW2rgX3L$>MVW");
      element0.getElementsByAttributeStarting("html");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("7d", "7d");
      Element element0 = document0.appendElement("7d");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("javaVlang.string@0000000084", "~iocf");
      Element element0 = document0.createElement("~iocf");
      document0.prependChild(element0);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";wl!`&o?7)+DeF* #$U", "");
      document0.setSiblingIndex(795);
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S9=B}IWm", "*(@s");
      document0.setSiblingIndex((-424));
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Document.createShell("7d");
      Element element0 = document0.head();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Document.createShell("7d");
      Element element0 = document0.appendElement("7d");
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Document.createShell("r7Z9_fr");
      document0.setSiblingIndex((-91));
      DataNode dataNode0 = new DataNode("r7Z9_fr", "r7Z9_fr");
      document0.doClone(dataNode0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("InTable", "InTable");
      Element element0 = document0.head();
      Element element1 = element0.doClone(document0);
      element1.getElementsByIndexLessThan(381);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("L-+", "L-+");
      Element element0 = document0.head();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Document.createShell("7d");
      Element element0 = document0.appendElement("org.jsoup.nodes.PseudoTextElement");
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("org.jsoup.helper.ChangeNotifyingArrayList");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Document document0 = Parser.parseBodyFragmentRelaxed("progress", "0\"XCmK3");
      Element element0 = document0.body();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parse("sr~-}ux!~3emaez{", "sr~-}ux!~3emaez{");
      Element element0 = document0.head();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Qd", "fp<]Q+twtgf(:2,QK>A");
      Element element0 = document0.toggleClass("dav;].6:");
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("]/;u0yi_G", ":nth-child(%d)");
      document0.toggleClass(":eq(");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Document.createShell("B&'V%5f+jxI.t5");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parse("br", "\"");
      Element element0 = document0.appendElement("br");
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^r", "^r");
      document0.appendElement("^r");
      document0.child(1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("y++y`.LX)yDEDwY0|q", "java.lang.string@0000000038 qr~ezj7w$>`b0`d");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parse("}6-v0ZxG+", "}6-v0ZxG+");
      document0.setParentNode(document0);
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parse("[/ZoclG&O|<p~1", ".");
      Element element0 = document0.appendElement(".");
      DataNode dataNode0 = new DataNode((String) null, "9vk");
      element0.before((Node) dataNode0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("sr~-}ux!~3emaez{", "sr~-}ux!~3emaez{");
      Element element0 = document0.body();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      Document document1 = Document.createShell("progress");
      document1.setParentNode(document0);
      document1.before("u/&w?*vg");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parse("Qd", "Qd");
      Element element0 = document0.head();
      element0.before("#root");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Bd", "Bd");
      Element element0 = document0.body();
      element0.before("Bd");
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = new Document("");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "2zkX/LxmBvH");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parse("M6-v0ZiG+", "M6-v0ZiG+");
      document0.attr("M6-v0ZiG+", true);
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parse("+/A)!C*M'i:W+'xw", "<[$oy05`;x5heh");
      Element element0 = document0.appendElement("Pattern syntax error: ");
      element0.attr("<[$oy05`;x5heh", false);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Us73vPz");
      CDataNode cDataNode0 = new CDataNode("hc]@");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "Children collection to be inserted must not be null.", attributes0);
      formElement0.setSiblingIndex((-2061666966));
      formElement0.attr("Children collection to be inserted must not be null.", true);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      Element element0 = document0.head();
      element0.attr("zXh9YV^Y>zlt\\z|r", false);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.ang,string@0000000076", "java.ang,string@0000000076");
      document0.attr("java.ang,string@0000000076", true);
      document0.getElementsByAttribute("java.ang,string@0000000076");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Document.createShell("#");
      Element element0 = document0.body();
      element0.attr("#", "7");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Document.createShell("Enndmag");
      Element element0 = document0.body();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      document0.setSiblingIndex((-406));
      document0.appendText("s+");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Document.createShell("#");
      Element element0 = document0.body();
      element0.appendText("#");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      Element element0 = document0.head();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = new Document("DoctypeSystemIdentifier_doubleQuoted");
      Element element0 = document0.prependElement("DoctypeSystemIdentifier_doubleQuoted");
      element0.siblingIndex = (-1890);
      element0.append("_b7Tw7RMk_S+U@.");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Document.createShell("HH");
      Element element0 = document0.body();
      element0.append("HH");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = new Document("");
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Bd", "Bd");
      Element element0 = document0.body();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s+", "s+");
      Element element0 = document0.appendElement("Children collection to be inserted must not be null.");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Bd", "Bd");
      Element element0 = document0.createElement("Bd");
      document0.appendTo(element0);
      document0.after((Node) element0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parse("6u+pv*", "6u+pv*");
      Element element0 = document0.head();
      element0.after("6u+pv*");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parse("Bd", "Bd");
      Element element0 = document0.appendElement("Bd");
      element0.after("Bd");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      Document document1 = Document.createShell("progress");
      document1.setParentNode(document0);
      document1.after("");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("?D%?&L_<I|9", "?D%?&L_<I|9");
      document0.setSiblingIndex((-781));
      document0.addClass("?D%?&L_<I|9");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Document.createShell("HH");
      Element element0 = document0.body();
      element0.addClass("HH");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("?D%?&L_<I|9", "?D%?&L_<I|9");
      document0.addClass("?D%?&L_<I|9");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parse("M6-v0ZiG+", "M6-v0ZiG+");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.wrap("org.jsoup.select.StructuralEvaluator$ImmediateParent");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parse("M6-v0ZiG+", "M6-v0ZiG+");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.val("M6-v0ZiG+");
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("='`<NEHYl-N+X>", "='`<NEHYl-N+X>");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document1 = document0.parser(parser1);
      // Undeclared exception!
      try { 
        document1.val("='`<NEHYl-N+X>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = new Document("s+");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("", "");
      // Undeclared exception!
      try { 
        document0.text("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Qd", "Qd");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("nyy?2myo`]s+y", "nyy?2myo`]s+y");
      TextNode textNode0 = new TextNode("nyy?2myo`]s+y");
      document0.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parse("M6-v0ZiG+", "M6-v0ZiG+");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.tagName("Y=iQ!o5?rY7;zJeQ(!");
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document0 = parser1.parseInput("^", "8 bh");
      // Undeclared exception!
      try { 
        document0.tagName("#root");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      // Undeclared exception!
      try { 
        document0.tagName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Document.createShell("PV\")6R|NMU");
      DataNode dataNode0 = new DataNode("PV\")6R|NMU");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Document.createShell("r7Z9_fr");
      // Undeclared exception!
      try { 
        document0.selectFirst("@vPV^4ben*&Q,#7");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '@vPV^4ben*&Q,#7': unexpected token at '@vPV^4ben*&Q,#7'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X[@:kj5:", "#root");
      // Undeclared exception!
      try { 
        document0.selectFirst("+FCi,<[=>>z%");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '''
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Tag tag0 = Tag.valueOf("$VALUES");
      Element element0 = new Element(tag0, "p-Oc;jTVz*^)]\"bU4C]");
      // Undeclared exception!
      try { 
        element0.select("</");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '</': unexpected token at '</'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("#root", ";wl!`&o?7)+DeF* #$U");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parse("[/ZoclG&O|<p~1", ".");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = new Document("?D%?&L_<I|9");
      document0.childNodes = null;
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".", "!h{");
      CDataNode cDataNode0 = new CDataNode((String) null);
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Document.createShell("7d");
      DocumentType documentType0 = new DocumentType("i%N-SAL4KH#YN%eU", "i%N-SAL4KH#YN%eU", "D{]eWBL:CPXGJTR%;D", "}W[#h%w!qk&]^");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#A", "#A");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("}6-v0ZxG+", "}6-v0ZxG+");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.prependElement("}6-v0ZxG+");
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = new Document("javaVlang.string@0000000084");
      Element element0 = document0.addClass("javaVlang.string@0000000084");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      List<Node> list0 = Parser.parseFragment("javaVlang.string@0000000084", (Element) document0, "javaVlang.string@0000000084", parseErrorList0);
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.prependElement("Y");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = new Document("bhNA#o$");
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document1 = document0.parser(parser1);
      // Undeclared exception!
      try { 
        document1.prependElement("java.ang,string@0000000076");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("V|]jN$-+):!y", "aJ:zPQC:N");
      // Undeclared exception!
      try { 
        document0.prependElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parse("hq(Zz0J\"ScU &", "head");
      DataNode dataNode0 = new DataNode("V^f]TcTV,NbP}pz", "class");
      dataNode0.reparentChild(dataNode0);
      // Undeclared exception!
      try { 
        document0.prependChild(dataNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Bd", "Bd");
      Element element0 = document0.appendElement("Bd");
      element0.reparentChild(document0);
      // Undeclared exception!
      try { 
        element0.prependChild(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parse("C?AE", "iWHC#xeB&$lSIq=jw%");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parse("}6-v0ZxG+", "}6-v0ZxG+");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.prepend("p9rIH+!uu");
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.appendElement("br");
      List<Node> list0 = Parser.parseFragment("br", (Element) document0, "UB2KTNF*+C");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.prepend("br");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("org.jsoup.select.Evaluator$AttributeWithValueStarting", "");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("hr", parseSettings0);
      Element element0 = new Element(tag0, "br");
      CDataNode cDataNode0 = new CDataNode("class");
      element0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        element0.parents();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Document.createShell("");
      TextNode textNode0 = new TextNode("");
      document0.parentNode = (Node) textNode0;
      document0.appendText("");
      // Undeclared exception!
      try { 
        document0.ownText();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("?D%?&L_<I|9", "?D%?&L_<I|9");
      File file0 = MockFile.createTempFile("|StsPbV$H,\"T;", ";@;]gwS,M=U2j%9");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(614);
      // Undeclared exception!
      document0.outerHtmlTail(mockFileWriter0, 614, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s+", "s+");
      CharBuffer charBuffer0 = CharBuffer.allocate(338);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 1616, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("YA@1ML.yrt[", "YA@1ML.yrt[");
      PipedReader pipedReader0 = new PipedReader(900);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(pipedWriter0, 900, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parse("Childrencollect_nto be inserted must not benul?.", "Childrencollect_nto be inserted must not benul?.");
      MockFile mockFile0 = new MockFile("Childrencollect_nto be inserted must not benul?.");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockFileWriter0, (-1595), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("?D%?&L_<I|9", "?D%?&L_<I|9");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlTail(pipedWriter0, 352, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parse("Bb", "Bb");
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(1665);
      // Undeclared exception!
      document0.outerHtmlHead(mockPrintWriter0, 1665, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "progress", 0, 0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 0, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "s+");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(stringBuilder0, (-2972), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = new Document("YQY@{&xd]^2");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlHead(pipedWriter0, 46, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Element element0 = new Element("</");
      DocumentType documentType0 = new DocumentType("org.jsoup.select.Selector", "org.jsoup.select.Selector", "org.jsoup.select.Selector", "</");
      element0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        element0.nextElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("X#\"*bO", "X#\"*bO");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Document.createShell("HH");
      DataNode dataNode0 = new DataNode(" ");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("?DK?=L_<O9", "?DK?=L_<O9");
      document0.setParentNode(document0);
      Evaluator.IsNthChild evaluator_IsNthChild0 = new Evaluator.IsNthChild(0, 0);
      // Undeclared exception!
      document0.is((Evaluator) evaluator_IsNthChild0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = new Document("m6v0zip+");
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      // Undeclared exception!
      try { 
        document0.is((Evaluator) evaluator_IsRoot0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Document.createShell("HH");
      // Undeclared exception!
      try { 
        document0.is((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Bd", "Bd");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.is("id");
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parse("kd", "kd");
      // Undeclared exception!
      try { 
        document0.is("I[yn|!%");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '''
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Document.createShell("7d");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parse("M6-v0ZiP+", "M6-v0ZiP+");
      Elements elements0 = document0.getElementsByAttributeValueNot("JfC$qQsBWW)", "JfC$qQsBWW)");
      // Undeclared exception!
      try { 
        document0.insertChildren(1, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parse("Lse", "Lse");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Element element0 = new Element("(J{X$G5iD{)|u;4");
      List<Node> list0 = element0.childNodes();
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.html((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Document.createShell("B&'V%5f+jxI.t5");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parse("M6-vZi|+", "M6-vZi|+");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#!9]eqk`", "#!9]eqk`");
      document0.parentNode = (Node) document0;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      // Undeclared exception!
      document0.html(mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Z", "#A");
      // Undeclared exception!
      try { 
        document0.html((MockFileWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parse("basefont", "basefont");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = new Document("?D%?&L_<I|9");
      Element element0 = document0.appendElement("87zu(XIi_vfmFj");
      element0.setSiblingIndex((-1899));
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parse("Bd", "Bd");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parse("Bd", "Bd");
      TextNode textNode0 = TextNode.createFromEncoded("Bd");
      document0.setParentNode(textNode0);
      Pattern pattern0 = Pattern.compile("Bd");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText(pattern0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")%`", ")%`");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText(")%`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: )%`
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Document.createShell("7d");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")%`", ")%`");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText(")%`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: )%`
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parse("^r", "^r");
      DataNode dataNode0 = DataNode.createFromEncoded("meta[charset]", (String) null);
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("meta[charset]");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parse("F1ZzYl/#`B\u0004WK", "F1ZzYl/#`B\u0004WK");
      TextNode textNode0 = new TextNode("c+:y+djgo8.a.r&0c_.");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("F1ZzYl/#`B\u0004WK");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";wl!`&o?7)+DeF* #$U", "");
      Element element0 = document0.appendElement("f:/@5y)g 28");
      element0.setSiblingIndex((-1573));
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("f:/@5y)g 28");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parse("ndC$dM", "ndC$dM");
      Element element0 = document0.body();
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText(")m7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Bd", "Bd");
      Comment comment0 = new Comment("Bd");
      document0.setParentNode(comment0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("vw|=^ow?q}~`7asz");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Element element0 = new Element("s+");
      // Undeclared exception!
      try { 
        element0.getElementsByTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = new Document("s+");
      document0.setParentNode(document0);
      document0.setSiblingIndex((-2307));
      // Undeclared exception!
      try { 
        document0.getElementsByTag("s+");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s+", "s+");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = new Document(")M7");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", ")M7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^r", "^r");
      Element element0 = document0.appendElement("^r");
      List<Node> list0 = document0.childNodesCopy();
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("^r", "^r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#A", "#A");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("basefont", parseSettings0);
      Attributes attributes0 = new Attributes();
      attributes0.put("bas2fonb", "l.Vb<$<sn");
      Element element0 = new Element(tag0, "pj(7y0&X", attributes0);
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueMatching("bas2fonb", (Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$AttributeWithValueMatching", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Document.createShell("7d");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching(",uNQpZFJ", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("formnovalidate", "sr~-}ux!~3emaez{");
      Element element0 = document0.body();
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("sr~-}ux!~3emaez{", "sr~-}ux!~3emaez{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "j]D");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("R&]", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("inert", "inert");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "inert");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parse("bw+c|sst|2q6", "bw+c|sst|2q6");
      Element element0 = document0.body();
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.getElementById("bw+c|sst|2q6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#A", "#A");
      // Undeclared exception!
      try { 
        document0.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("</", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("</");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "</", attributes0);
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        element0.getAllElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Element element0 = new Element(" />");
      CDataNode cDataNode0 = new CDataNode(" />");
      Element element1 = element0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element1.firstElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      CDataNode cDataNode0 = new CDataNode("Children collection to be inserted must not be null.");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.elementSiblingIndex();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Document.createShell("javrVlang.s;rin}@00m0000084");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.dataNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Element element0 = new Element("0\"XCmK3");
      Element element1 = element0.doClone(element0);
      // Undeclared exception!
      try { 
        element1.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '0\"XCmK3': unexpected token at '\"XCmK3'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parse(" />", "3T\"Ua-f");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parse("M6-v0ZiP+", "M6-v0ZiP+");
      // Undeclared exception!
      try { 
        document0.child((-1983023168));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000069");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("java.lang.string@0000000069", "x';*)U8X*Glx9Vz(?dm", false);
      Element element0 = document0.doClone(xmlDeclaration0);
      // Undeclared exception!
      try { 
        element0.before((Node) document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = new Document("Childrencollect_nto be inserted must not benul?.");
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.before("W/9o@H");
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parse("&`;<ig`Y}", "M6-v0ZiP+");
      Element element0 = document0.appendElement("<[$Oy05`;x5Heh");
      element0.setSiblingIndex(887);
      // Undeclared exception!
      try { 
        element0.before("org.jsoup.nodes.Element$1");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 887, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Document.createShell("7d");
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Document.createShell("Bd");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.attr("Bd", (String) null);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("?D%?&L_<I|9", "?D%?&L_<I|9");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "Rz6`2B;gS&}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$y", ":N&2^J&zbu");
      Document document1 = new Document("java.lang.string@0000000056");
      document0.setParentNode(document1);
      // Undeclared exception!
      try { 
        document0.appendTo(document1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("7d", "7d");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Element element0 = new Element("java.lang.string@0000000059");
      Element element1 = element0.val("}Q>kw?q");
      List<Node> list0 = Parser.parseXmlFragment("A3~N~w74yxG`pY", "compact");
      element1.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.appendText("java.lang.string@0000000059");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parse("M6-vZi|+", "M6-vZi|+");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parse("Bd", "Bd");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.appendElement("Bd");
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Document.createShell("^r");
      List<Node> list0 = Parser.parseXmlFragment("html", "^r");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendElement("^r");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000040", "org.jsoup.parser.Token");
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document1 = document0.parser(parser1);
      // Undeclared exception!
      try { 
        document1.appendElement(":containsOwn");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Document.createShell("         ");
      // Undeclared exception!
      try { 
        document0.appendElement("         ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.Element$NodeList");
      element0.reparentChild(element0);
      // Undeclared exception!
      try { 
        element0.appendChild(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = new Document("s+");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Tag tag0 = Tag.valueOf("dUtP(Uro<<N]}");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "dUtP(Uro<<N]}", attributes0);
      formElement0.reparentChild(formElement0);
      // Undeclared exception!
      formElement0.append("sVS!yFdrlT]QP0x");
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.DocumentType", "org.jsoup.nodes.DocumentType");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      List<Node> list0 = Parser.parseFragment("org.jsoup.nodes.DocumentType", (Element) document0, "DoctypePublicIdentifier_doubleQuoted", parseErrorList0);
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.append("org.jsoup.nodes.DocumentType");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Document.createShell("7d");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "j]D");
      document0.appendChild(document0);
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s+", "s+");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.after("Split offset must be not be negative");
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      Element element0 = document0.appendElement("org.jsoup.nodes.Element$2");
      CDataNode cDataNode0 = new CDataNode("C/AF");
      List<Node> list0 = cDataNode0.ensureChildNodes();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.after("org.jsoup.nodes.Element$2");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Element element0 = new Element("D>?");
      CDataNode cDataNode0 = new CDataNode("");
      Element element1 = element0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element1.after("i.+@I1V!2");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "&lt;", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "id");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = new Document("B");
      document0.html((MockPrintWriter) null);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parse("Bd", "Bd");
      document0.toggleClass("Bd");
      document0.toggleClass("QrZJ7W$>`b|0`Nd");
      document0.hasClass("QrZJ7W$>`b|0`Nd");
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Tag tag0 = Tag.valueOf("bW).^RFA9");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "bW).^RFA9", attributes0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      // Undeclared exception!
      try { 
        formElement0.classNames((Set<String>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parse("sr~-}ux!~3emaez{", "sr~-}ux!~3emaez{");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      document0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("#root", ";wl!`&o?7)+DeF* #$U");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = new Document("</");
      CDataNode cDataNode0 = new CDataNode("</");
      Element element0 = document0.appendChild(cDataNode0);
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("L-+", "L-+");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parse("M6-v0ZiP+", "M6-v0ZiP+");
      Element element0 = document0.appendElement("u/&w?*vg");
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      document0.setParentNode(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parse("[/ZoclG&O|<p~1", ".");
      Element element0 = document0.appendElement(".");
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Document.createShell("7d");
      Element element0 = document0.appendElement("7d");
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.tagName("br");
      Element element0 = document0.appendElement("br");
      element0.prepend("br");
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parse("Qd", "Qd");
      document0.cssSelector();
      document0.removeAttr("#root");
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Document.createShell("/imzWN'QHL");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parse("sr~-}ux!~3emaez{", "sr~-}ux!~3emaez{");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("fallback", "fallback");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("basefont", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "pj(7y0&X", attributes0);
      element0.getElementsByAttributeValueMatching("bas2fonb", (Pattern) null);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Qd", "Qd");
      document0.select("Qd");
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Element element0 = new Element("progriss");
      element0.id();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Document.createShell("7d");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = new Document(")M7");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings0);
      document0.html();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.appendElement("br");
      element0.prepend("br");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(charArrayWriter0, (-1), document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Document.createShell("EndTag");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "EndTag");
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parse("br", "\"");
      Element element0 = document0.appendElement("br");
      element0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Element element0 = new Element("basefont");
      element0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Document.createShell("'");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, 19, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val("value");
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      CDataNode cDataNode0 = new CDataNode("p");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "}6-v0ZxG+", attributes0);
      formElement0.val();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@mE~nJd6x$n~X", "@mE~nJd6x$n~X");
      document0.toggleClass("@mE~nJd6x$n~X");
      document0.toggleClass("@mE~nJd6x$n~X");
      document0.toggleClass("@mE~nJd6x$n~X");
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parse("Bd", "Bd");
      document0.toggleClass("Bd");
      document0.toggleClass("Bd");
      document0.getElementsByClass("Bd");
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parse("td", "td");
      Element element0 = document0.toggleClass("td");
      Element element1 = document0.head();
      document0.siblingElements();
      element1.getElementsByClass("java.lang.string@0000000069");
      element1.childNodesCopy();
      element1.val();
      element1.is("c");
      element1.children();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element0.previousElementSiblings();
      document0.toggleClass("td");
      document0.hasClass("java.lang.string@0000000069");
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = new Document("YQY@{&xd]^2");
      document0.toggleClass("YQY@{&xd]^2");
      document0.toggleClass(" ");
      document0.hasClass("html");
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Bd", "Bd");
      document0.toggleClass("lwGHJkx*3#-Gg4.Q");
      document0.getElementsByClass(":only-of-type");
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", ":lt(");
      document0.toggleClass("!;k{TXhv *^/\nv");
      document0.hasClass("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = new Document("YQY@{&xd]^2");
      document0.toggleClass("YQY@{&xd]^2");
      document0.hasClass("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("s+");
      Document document0 = Parser.parseBodyFragment(":contains(text) query must not be empty", "AQ)uan*8wL/");
      document0.appendChild(cDataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Document.createShell("7d");
      Comment comment0 = new Comment("i%N-SAL4KH#YN%eU");
      document0.prependChild(comment0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = new Document("s+");
      DataNode dataNode0 = new DataNode("s+", "z{");
      document0.appendChild(dataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.appendText("");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parse("br", "\"");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Bd", "Bd");
      document0.reparentChild(document0);
      document0.getElementsContainingOwnText("Bd");
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.appendElement("br");
      document0.appendElement("br");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Document.createShell("       ");
      CDataNode cDataNode0 = new CDataNode("org.jsoup.select.Evaluator$AttributeWithValueContaining");
      Element element0 = document0.prependChild(cDataNode0);
      Pattern pattern0 = Pattern.compile("       ", 1579);
      element0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Bd", "Bd");
      DataNode dataNode0 = new DataNode("Bd");
      document0.appendChild(dataNode0);
      document0.getElementsMatchingOwnText("org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      document0.appendText("s+");
      document0.getElementsContainingText("s+");
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^r", "^r");
      Element element0 = document0.appendElement("^r");
      List<Node> list0 = document0.childNodesCopy();
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("^r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parse("br", "\"");
      document0.appendElement("\"value");
      document0.getElementsContainingText("markupdeclarationopen");
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parse("br", "\"");
      document0.appendElement("br");
      document0.getElementsContainingText("markupdeclarationopen");
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Vclass", "Vclass");
      Comment comment0 = new Comment("Vclass");
      document0.appendChild(comment0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parse("sr~-}ux!~3emaez{", "sr~-}ux!~3emaez{");
      document0.getElementById("sr~-}ux!~3emaez{");
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Bd", "Bd");
      Element element0 = document0.body();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      document0.setParentNode(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      document0.setParentNode(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Document.createShell("#");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Document.createShell("7d");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      document0.nextElementSibling();
      assertEquals("s+", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parse("6u+pv*", "6u+pv*");
      Element element0 = document0.head();
      Element element1 = element0.nextElementSibling();
      assertEquals("6u+pv*", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parse("[/ZoclG&O|<p~1", ".");
      Element element0 = document0.appendElement(".");
      Elements elements0 = element0.siblingElements();
      assertEquals(".", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = new Document("hWa");
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Document.createShell("' 0/#vU Zje%c%(R");
      Element element0 = document0.body();
      element0.wrap("' 0/#vU Zje%c%(R");
      element0.cssSelector();
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      document0.toggleClass("id");
      document0.cssSelector();
      assertEquals("s+", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Document.createShell("B&'V%5f+jxI.t5");
      Node[] nodeArray0 = new Node[9];
      // Undeclared exception!
      try { 
        document0.insertChildren(2552, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Tag tag0 = Tag.valueOf("s+");
      Element element0 = new Element(tag0, "gf");
      Node[] nodeArray0 = new Node[9];
      // Undeclared exception!
      try { 
        element0.insertChildren((-1881178147), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Document.createShell("basefont");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren(0, nodeArray0);
      assertEquals(1, element0.childNodeSize());
      assertEquals("basefont", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren(1029, (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Document.createShell("' 0/#vU Zje%c%(R");
      Elements elements0 = document0.parents();
      // Undeclared exception!
      try { 
        document0.insertChildren((-2551), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^r", "^r");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      assertEquals("^r", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Document.createShell("basefont");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("basefont", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("#A", "#A");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("#A", document0.baseUri());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parse("sr~-}ux!~3emaez{", "sr~-}ux!~3emaez{");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("sr~-}ux!~3emaez{", document0.baseUri());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.appendText("");
      Elements elements0 = element0.getElementsByIndexGreaterThan((-546));
      assertEquals(2, document0.childNodeSize());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Bd", "Bd");
      Element element0 = document0.selectFirst("body");
      assertEquals("Bd", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Tag tag0 = Tag.valueOf("$VALUES");
      Element element0 = new Element(tag0, "p-Oc;jTVz*^)]\"bU4C]");
      Elements elements0 = element0.getElementsMatchingText("$VALUES");
      assertEquals("p-Oc;jTVz*^)]\"bU4C]", element0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Element element0 = new Element("progriss");
      Elements elements0 = element0.getAllElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Document.createShell("7d");
      Element element0 = document0.removeClass("#W");
      assertEquals("7d", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parse("Qd", "Qd");
      // Undeclared exception!
      try { 
        document0.before("#root");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.ang,string@0000000076", "java.ang,string@0000000076");
      document0.getElementsByAttribute("java.ang,string@0000000076");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Parser.parse("sr~-}ux!~3emaez{", "sr~-}ux!~3emaez{");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("Ie,+EK~>!PpD?6ffh", "\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Parser.parse("doctypepublicidentifie<_singlequoted", "doctypepublicidentifie<_singlequoted");
      Element element0 = document0.shallowClone();
      assertEquals("doctypepublicidentifie<_singlequoted", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Document.createShell("7d");
      Element element0 = document0.clone();
      assertEquals("7d", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNotSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = Parser.parse("b6asefont", "b6asefont");
      document0.doSetBaseUri("Gg}o?zcD~}M{\"");
      assertEquals("Gg}o?zcD~}M{\"", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s+", "s+");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Document document0 = Parser.parse("M6-v0ZiP+", "M6-v0ZiP+");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", "M6-v0ZiP+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Wa", "Wa");
      document0.getElementsByAttributeValueMatching("Wa", "org.jsoup.nodes.Element$2");
      assertEquals("Wa", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'", "'");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("'", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Document document0 = Parser.parse("u/&w?*vg", "u/&w?*vg");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("u/&w?*vg", "(5JaD+:KoI=$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: (5JaD+:KoI=$
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Document document0 = Parser.parse("6u+pv*", "6u+pv*");
      Elements elements0 = document0.getElementsByIndexEquals(1130);
      assertEquals("6u+pv*", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Bd", "Bd");
      document0.getElementsByAttributeStarting("Bd");
      assertEquals(1, document0.childNodeSize());
      assertEquals("Bd", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("InTable", "InTable");
      Elements elements0 = document0.getElementsByIndexLessThan(381);
      assertEquals("InTable", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.DataNode", parseSettings0);
      Element element0 = new Element(tag0, "org.jsoup.nodes.DataNode");
      // Undeclared exception!
      try { 
        element0.after("org.jsoup.nodes.DataNode");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Element element0 = new Element("progriss");
      Element element1 = element0.prepend("");
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Document document0 = Document.createShell("' 0/#vU Zje%c%(R");
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals("html > body", string0);
      assertEquals("' 0/#vU Zje%c%(R", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'", "'");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("'", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Document document0 = Document.createShell("7d");
      document0.getElementsByAttributeValue("[ZMY#Eea6T{uy[j}M:", "v|]jn$-+):!y");
      assertEquals("7d", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s+", "s+");
      Element element0 = document0.html("");
      assertEquals("s+", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("org.jsoup.select.Evaluator$AttributeWithValueStarting", "");
      String string0 = document0.wholeText();
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueStarting", string0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Document document0 = new Document("Childrencollect_nto be inserted must not benul?.");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Document document0 = Parser.parse("Bd", "Bd");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("?D%?&L_<I9", "?D%?&L_<I9");
      Elements elements0 = document0.getElementsContainingOwnText("RcdataLessthanSign");
      assertEquals("?D%?&L_<I9", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("O'*bN4/w$Hk%[Oz23 ", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "html", attributes0);
      element0.dataset();
      assertEquals("html", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Document document0 = Parser.parse("progriss", "progriss");
      assertEquals(1, document0.childNodeSize());
      
      document0.title("progriss");
      Elements elements0 = document0.getElementsContainingText("progriss");
      assertEquals(5, elements0.size());
      assertEquals("progriss", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.tagName("br");
      document0.appendElement("br");
      document0.html();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Document document0 = Document.createShell("#");
      document0.prependText("#");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^r", "^r");
      // Undeclared exception!
      try { 
        document0.child(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Document document0 = Parser.parse("Bd", "Bd");
      Pattern pattern0 = Pattern.compile("Bd");
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      assertEquals("Bd", document0.baseUri());
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("1RJaV~gV8z{[ ", "k?Dy?=L/_<O9r");
      document0.appendText("k?Dy?=L/_<O9r");
      document0.getElementsContainingText("org.jsoup.nodes.Element$NodeList");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Document document0 = Document.createShell("' 0/#vU Zje%c%(R");
      // Undeclared exception!
      try { 
        document0.wrap("' 0/#vU Zje%c%(R");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Document document0 = Document.createShell("7d");
      document0.nextElementSiblings();
      assertEquals("7d", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }
}
