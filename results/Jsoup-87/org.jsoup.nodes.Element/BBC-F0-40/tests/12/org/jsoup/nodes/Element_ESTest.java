/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 21:43:13 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Tag tag0 = Tag.valueOf("N7cwUAa\"");
      CDataNode cDataNode0 = new CDataNode("N7cwUAa\"");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "N7cwUAa\"", attributes0);
      formElement0.reparentChild(formElement0);
      formElement0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parse("f'", "f'");
      Elements elements0 = document0.nextElementSiblings();
      document0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlTail(stringBuffer0, 0, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("even", "even");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(mockPrintWriter0, 6, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Document.createShell("even");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f'", "f'");
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      document1.wrap("$Yb/GnK2NRTq");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.prependElement("br");
      element0.wrap("<br><br></br>\n<html>\n <head></head>\n <body>\n  br\n </body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Document.createShell("open");
      Element element0 = document0.body();
      element0.wrap("OW-@n.zI$_m9jApJ");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("on", "on");
      Element element0 = document0.body();
      element0.wrap("o-kpa");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("#root");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "pjDx@J`|PY", attributes0);
      pseudoTextElement0.siblingIndex = (-1830);
      pseudoTextElement0.val((String) null);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Document.createShell("open");
      Element element0 = document0.body();
      element0.val("open");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Tag tag0 = Tag.valueOf("OnushadA");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "OnushadA", attributes0);
      pseudoTextElement0.val("textarea");
      pseudoTextElement0.val();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parse("P", "P");
      Element element0 = document0.body();
      element0.toggleClass("");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String inputmustnot be null", "String inputmustnot be null");
      document0.setSiblingIndex((-46));
      document0.toggleClass("String inputmustnot be null");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("head", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "'", attributes0);
      formElement0.toggleClass(":eq(%d)");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("on", "on");
      Element element0 = document0.body();
      element0.text("m ^");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("on", "on");
      document0.text("m ^");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = new Document("lLqa0JhF)");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.prependElement("on");
      document0.prependText("on");
      element0.tagName("on");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("h5", "");
      document0.tagName("h5");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Document.createShell("'");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Document.createShell("open");
      Element element0 = document0.body();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("href", "href");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Document.createShell("CS~{;c^");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Hp}Rm093", "Hp}Rm093");
      document0.selectFirst("textarea");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Document.createShell("cs");
      document0.prependElement("cs");
      Element element0 = document0.prependText("cs");
      element0.selectFirst("cs");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("OnushadA", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "OnushadA", attributes0);
      pseudoTextElement0.selectFirst("OnushadA");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Document.createShell("cs");
      Element element0 = document0.prependElement("cs");
      element0.prependText("cs");
      document0.selectFirst("cs");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("open", "open");
      document0.prependElement("open");
      document0.select("open");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parse("//;ik?x:d/j=ayf", "meta");
      document0.setSiblingIndex((-2701));
      document0.removeClass("//;ik?x:d/j=ayf");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("</", "</");
      Element element0 = document0.body();
      element0.removeClass("%");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("</", "</");
      document0.removeClass("%");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'", "'");
      Element element0 = document0.body();
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("on", "on");
      Element element0 = document0.body();
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) element0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) element0;
      document0.addChildren(nodeArray0);
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Document.createShell("on");
      Element element0 = document0.body();
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) element0;
      nodeArray0[7] = (Node) element0;
      nodeArray0[8] = (Node) element0;
      element0.addChildren(nodeArray0);
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("textarea");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "textarea", attributes0);
      Element.preserveWhitespace(pseudoTextElement0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$2", "Dk#'Q(h[");
      document0.setSiblingIndex((-1102214078));
      document0.prependText("Cookie value must not be null");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'", "'");
      Element element0 = document0.body();
      element0.prependText("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parse("f'", "f'");
      document0.prependElement("html");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parse("f'", "f'");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Document.createShell("open");
      Element element0 = document0.body();
      element0.prepend("open");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = new Document("");
      document0.prepend("");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("nt^AUZ", "nt^AUZ");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Document.createShell(";pen");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parse(";A0wOT+1rp}", ":72E&3)%_=0v/JSW");
      Element element0 = document0.body();
      document0.prepend("(Xo`HS_344L");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Document.createShell("open");
      Element element0 = document0.body();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = new Document("lLqa0JhF)");
      document0.reparentChild(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Document.createShell("on");
      Element element0 = document0.prependElement("on");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("on", "on");
      document0.append("DvM7qyPV5xM");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Document.createShell("even");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Document.createShell("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", "Could not determine a form action URL for submit. Ensure you set a base URI when parsing.");
      document0.appendChild(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'", "'");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'", "'");
      Element element0 = document0.body();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("#root");
      FormElement formElement0 = new FormElement(tag0, "#root", attributes0);
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      formElement0.is((Evaluator) evaluator_AllElements0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("open", "open");
      Element element0 = document0.prependElement("open");
      element0.is("open");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Element");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "org.jsoup.nodes.Element", attributes0);
      Document document0 = Document.createShell("`An?");
      FormElement formElement0 = new FormElement(tag0, "^s+", attributes0);
      Element element1 = document0.body();
      Node[] nodeArray0 = new Node[6];
      Node node0 = cDataNode0.clone();
      nodeArray0[0] = node0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) formElement0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) cDataNode0;
      nodeArray0[5] = (Node) element1;
      formElement0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("#root");
      FormElement formElement0 = new FormElement(tag0, "#root", attributes0);
      formElement0.prependText("#root");
      Node[] nodeArray0 = new Node[0];
      formElement0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", ">-XbaVLuMrbFw`a2;");
      Element element0 = document0.body();
      List<DataNode> list0 = document0.dataNodes();
      LinkedList<DataNode> linkedList0 = new LinkedList<DataNode>(list0);
      element0.insertChildren(0, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'", "'");
      LinkedHashSet<DataNode> linkedHashSet0 = new LinkedHashSet<DataNode>();
      document0.insertChildren(1, (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parse("f'", "f'");
      document0.setSiblingIndex(4363);
      document0.html("f'");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = new Document("Q");
      document0.setSiblingIndex((-998));
      document0.html("</");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("even", "even");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6nLyZ9)rfelediC", "Q");
      document0.empty();
      document0.html((BufferedWriter) null);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = new Document("br");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Q", "Q");
      document0.hasClass("y65m.;#\u0005ZDm%O7");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Tag tag0 = Tag.valueOf("UDG C@P");
      Element element0 = new Element(tag0, "");
      element0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "#root");
      Element element0 = document0.text("#root");
      Pattern pattern0 = Pattern.compile("#root", 20);
      element0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("open", "open");
      document0.getElementsMatchingText("nvnGC6iy~P}9+<$4x");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'", "'");
      document0.getElementsMatchingText("'");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("even", "even");
      Pattern pattern0 = Pattern.compile("=>jLRqo6vRMJ");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("#root");
      FormElement formElement0 = new FormElement(tag0, "#root", attributes0);
      formElement0.getElementsContainingOwnText("|i");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'", "'");
      document0.getElementsByTag("h");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.prependElement("on");
      document0.getElementsByTag("on");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parse("7f[N&s;jZ", "");
      document0.getElementsByIndexGreaterThan(0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*6$B_rK>)~Tn", "*6$B_rK>)~Tn");
      document0.getElementsByIndexEquals(1246);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Tag tag0 = Tag.valueOf("OnushadA");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "OnushadA", attributes0);
      pseudoTextElement0.getElementsByClass("]v|h^Vh)l$F");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Element element0 = new Element("RawtextEndTagName");
      element0.getElementsByAttributeValueNot("RawtextEndTagName", "org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Element");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("'", "'");
      Element element0 = new Element(tag0, "org.jsoup.nodes.Element", attributes1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.jsoup.nodes.Element";
      attributes1.keys = stringArray0;
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.Element", (-1473));
      element0.getElementsByAttributeValueMatching("org.jsoup.nodes.Element", pattern0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("A5\"s", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "A5\"s", attributes0);
      formElement0.getElementsByAttributeValueEnding("A5\"s", "A5\"s");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("@", "@");
      document0.getElementsByAttributeValueContaining("@", " > ");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Q", "Q");
      document0.getElementsByAttributeStarting("Q");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = new Document("param");
      document0.attr("v>b:dhv^#D= C TA.ve", true);
      document0.getElementsByAttributeStarting("v>b:dhv^#D= C TA.ve");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Tag tag0 = Tag.valueOf("value");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded(":a3|qIj*lpUxU`", "%Wj:2;B3?|79P6b#X");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "value", attributes1);
      formElement0.getElementsByAttribute(":a3|qIj*lpUxU`");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'", "'");
      Element element0 = document0.body();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("on", "on");
      document0.prependChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("</", "</");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'", "'");
      Element element0 = document0.body();
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parse("P", "P");
      Element element0 = document0.body();
      element0.doClone(element0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Document.createShell("even");
      Element element0 = document0.head();
      CDataNode cDataNode0 = new CDataNode("PX%@OdOw/3aH=7+");
      element0.doClone(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parse("f'", "f'");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("open", "open");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("", "");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Document.createShell("nohref");
      Element element0 = document0.body();
      Set<String> set0 = document0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("b?r", "bru");
      document0.toggleClass("ToX*.Sw\"?QwebN\"c-");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("noshade", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "open", attributes0);
      pseudoTextElement0.appendElement("textarea");
      pseudoTextElement0.children();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Element");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "org.jsoup.nodes.Element", attributes0);
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("noshade", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "open", attributes0);
      Element element0 = pseudoTextElement0.prependText("open");
      element0.appendElement("textarea");
      pseudoTextElement0.child(0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("noshade", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "open", attributes0);
      pseudoTextElement0.appendElement("textarea");
      pseudoTextElement0.child(0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.reparentChild(document0);
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("class", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "OnushadA", attributes0);
      Element element0 = pseudoTextElement0.appendElement("OnushadA");
      element0.before("");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.prependElement("on");
      element0.before("on");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Document.createShell("open");
      Element element0 = document0.body();
      element0.before("open");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parse("rbAg{:]VR0FlaS", "rbAg{:]VR0FlaS");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Tag tag0 = Tag.valueOf("OnushadA");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "OnushadA", attributes0);
      pseudoTextElement0.setSiblingIndex((-1436010313));
      pseudoTextElement0.attr("D:[WRo3x}>rYF38y)7", true);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X", "&3p]&T)c:\"pOpheqC");
      Element element0 = document0.body();
      element0.attr("&3p]&T)c:\"pOpheqC", true);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Document.createShell("multipart/form-data; boundary=");
      Element element0 = document0.body();
      element0.attr("?02", "org.jsoup.select.StructuralEvaluator$ImmediateParent");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("dl", "&p");
      document0.siblingIndex = (-488);
      document0.attr("ajS~8%", "ajS~8%");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("on", "on");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      element1.attr("on", (String) null);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("X<", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      Document document0 = new Document("?7Si^WaqpI");
      formElement0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":not%s", "OnushadA");
      Element element0 = document0.body();
      element0.appendText("pubSysKey");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "CW#`KCnf>");
      Element element0 = document0.prependElement("br");
      element0.appendText("br");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("form");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "form", attributes0);
      Element element0 = pseudoTextElement0.appendElement("form");
      element0.prepend(".");
      element0.before(".");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "9");
      Element element0 = document0.body();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f'", "f'");
      document0.setSiblingIndex(4363);
      document0.append("l^npDArT|N{hWTaT");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("on", "class");
      Element element0 = document0.head();
      element0.append("%(o.N7ao");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Document.createShell("even");
      Element element0 = document0.head();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("o", "JLhRJ$jl';Ak|MaK\"s@");
      Document document1 = document0.clone();
      document1.reparentChild(document0);
      document0.after((Node) document1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'", "'");
      Element element0 = document0.prependElement("'");
      element0.after("'");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parse("U`> =VU5%HTq'9{;", "U`> =VU5%HTq'9{;");
      document0.siblingIndex = 62;
      document0.addClass("U`> =VU5%HTq'9{;");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = new Document("Q");
      document0.setSiblingIndex((-998));
      document0.addClass("I'+Jcz");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Document.createShell("open");
      Element element0 = document0.head();
      element0.addClass("2m5j{5quu=z5r<sdz}=");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("n", "n");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.wrap("n n");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("#root", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, " > ", attributes0);
      // Undeclared exception!
      try { 
        formElement0.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
      TextNode textNode0 = TextNode.createFromEncoded("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.wrap("Insert position out of bounds.");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Tag tag0 = Tag.valueOf("N7cwUAa\"");
      CDataNode cDataNode0 = new CDataNode("N7cwUAa\"");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "N7cwUAa\"", attributes0);
      formElement0.reparentChild(formElement0);
      // Undeclared exception!
      formElement0.val("#w`\"+]^T#O7]");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("OnushadA", parseSettings0);
      Attributes attributes0 = new Attributes();
      attributes0.vals = null;
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "OnushadA", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.val("OnushadA");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("OnushadA", parseSettings0);
      Attributes attributes0 = new Attributes();
      String[] stringArray0 = new String[2];
      attributes0.keys = stringArray0;
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "OnushadA", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.val("OnushadA");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Document.createShell("open");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = new Document("Q");
      // Undeclared exception!
      try { 
        document0.text("&SR&YVD");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parse("f'", "f'");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'", "'");
      Element element0 = document0.body();
      Element element1 = element0.after("'");
      element0.replaceWith(element1);
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("X", "X");
      DataNode dataNode0 = DataNode.createFromEncoded("RB3", "fF%fkZ_0,T|\t-");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Q", "Q");
      Element element0 = document0.prependElement(" />");
      element0.setSiblingIndex((-1140487361));
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("on", "on");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.tagName("\u000086&5I");
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = new Document("open");
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Document.createShell("open");
      // Undeclared exception!
      try { 
        document0.selectFirst("vP%");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'vP%': unexpected token at '%'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("jnushjdA", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "jnushjdA", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.selectFirst("K[F4>[t*J%");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '''
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parse("f'", "f'");
      // Undeclared exception!
      try { 
        document0.select("f'");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'f'': unexpected token at '''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Document.createShell("`An?");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("I_[J]WDPL~n1DE1@^0", "]4rR9ly#r^Cm4l% u");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String inputmustnot be null", "String inputmustnot be null");
      TextNode textNode0 = TextNode.createFromEncoded("String inputmustnot be null", "String inputmustnot be null");
      textNode0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parse("6gAqi|ReI_IH>?", "6gAqi|ReI_IH>?");
      List<Node> list0 = document0.childNodes();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.prependText("6gAqi|ReI_IH>?");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Document.createShell("even");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("open", "open");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.prependElement("head");
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "tMk");
      List<Node> list0 = document0.childNodes();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.prependElement("tMk");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f'", "f'");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.prependElement("f'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("open", "open");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = new Document("lLqa0JhF)");
      CDataNode cDataNode0 = new CDataNode("L");
      Node node0 = cDataNode0.doClone(document0);
      // Undeclared exception!
      try { 
        document0.prependChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("on", "on");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.body();
      element0.before((Node) document0);
      // Undeclared exception!
      element0.prepend("");
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Tag tag0 = Tag.valueOf("`#k/1vVl");
      CDataNode cDataNode0 = new CDataNode("V _:{-!>:E3:<6o>");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "`#k/1vVl", attributes0);
      // Undeclared exception!
      try { 
        element0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Tag tag0 = Tag.valueOf("8kGKMj^bN=X");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "O", attributes0);
      DataNode dataNode0 = new DataNode("org.jsoup.nodes.Element");
      Element element1 = element0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        element1.prepend("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      DocumentType documentType0 = new DocumentType("/>", "*6)BrKN)~Tn", "+#!XOWlIb|RQN", "<html>\n <head></head>\n <body></body>\n</html>");
      document0.parentNode = (Node) documentType0;
      // Undeclared exception!
      try { 
        document0.parents();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f'", "f'");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.ownText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cs", "cs");
      TextNode textNode0 = TextNode.createFromEncoded("cs", "X:cs");
      document0.setParentNode(textNode0);
      document0.prependText("cs");
      // Undeclared exception!
      try { 
        document0.ownText();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parse("cVQyQ-CxIq+RP", "org.jsoup.parser.Token$StartTag");
      StringBuilder stringBuilder0 = new StringBuilder(":%s(%dn%+d)");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1248);
      // Undeclared exception!
      document0.outerHtmlTail(stringBuilder0, 1248, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*6$B_rK>)~Tn", "*6$B_rK>)~Tn");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "*6$B_rK>)~Tn");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 1246, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("open", "open");
      CharBuffer charBuffer0 = CharBuffer.allocate(6);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, (-1786), document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Document.createShell("Dk#'Q(h[");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charArrayWriter0, 754, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Document.createShell("open");
      MockFile mockFile0 = new MockFile(":nth-child(%d)");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintWriter0, (-3109), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Document.createShell("onuhada");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlTail(pipedWriter0, 17, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parse(":jnth-Bhild(%d)", ":jnth-Bhild(%d)");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("html");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(59);
      // Undeclared exception!
      document0.outerHtmlHead(mockPrintWriter0, 8250, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("GRQgR2~yr2huO<vt_", "");
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 1957, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parse("shRn", "shRn");
      MockFile mockFile0 = new MockFile("shRn");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      document0.outerHtmlHead(mockPrintStream0, 2147483645, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parse("f'", "f'");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, 6, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("on", "on");
      MockFile mockFile0 = new MockFile("textarea");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockFileWriter0, (-27), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Element element0 = new Element("RawtextEndTagName");
      // Undeclared exception!
      try { 
        element0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode((String) null);
      Document document0 = Parser.parseBodyFragmentRelaxed("String iLpKtmustnot be nucl", "String iLpKtmustnot be nucl");
      cDataNode0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.PseudoTextElement");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f'", "f'");
      TextNode textNode0 = TextNode.createFromEncoded("Insert position out of bounds.");
      document0.parentNode = (Node) textNode0;
      Evaluator.IsNthLastOfType evaluator_IsNthLastOfType0 = new Evaluator.IsNthLastOfType((-1436010313), 7);
      // Undeclared exception!
      try { 
        document0.is((Evaluator) evaluator_IsNthLastOfType0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.TextNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", "amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      // Undeclared exception!
      try { 
        document0.is("kJ@ziz*T})]YpG7");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'kJ@ziz*T})]YpG7': unexpected token at '@ziz*T})]YpG7'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("open", "open");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.is("open");
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = new Document("</");
      // Undeclared exception!
      try { 
        document0.is("huq[%FIvm5'[3'JnNjJ");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'F'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Tag tag0 = Tag.valueOf("N7cwUAa\"");
      CDataNode cDataNode0 = new CDataNode("N7cwUAa\"");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "N7cwUAa\"", attributes0);
      formElement0.setParentNode(cDataNode0);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) formElement0;
      nodeArray0[1] = (Node) cDataNode0;
      nodeArray0[2] = (Node) formElement0;
      nodeArray0[3] = (Node) cDataNode0;
      nodeArray0[4] = (Node) formElement0;
      nodeArray0[5] = (Node) cDataNode0;
      nodeArray0[6] = (Node) formElement0;
      // Undeclared exception!
      try { 
        formElement0.insertChildren(0, nodeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parse("h", "h");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("h", "Y$xAn1", true);
      nodeArray0[5] = (Node) xmlDeclaration0;
      nodeArray0[6] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Document.createShell("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("open", "open");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.html((BufferedWriter) null);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Document.createShell("even");
      // Undeclared exception!
      try { 
        document0.html((BufferedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("open", "open");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("textarea");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "class", attributes0);
      Element element0 = pseudoTextElement0.appendElement("textarea");
      element0.setSiblingIndex((-2));
      // Undeclared exception!
      try { 
        pseudoTextElement0.html();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "org.jsoup.nodes.Element", attributes0);
      // Undeclared exception!
      try { 
        element0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Tag tag0 = Tag.valueOf("N7cwUAa\"");
      CDataNode cDataNode0 = new CDataNode("N7cwUAa\"");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "N7cwUAa\"", attributes0);
      // Undeclared exception!
      try { 
        formElement0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Tag tag0 = Tag.valueOf("IAY");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.element", attributes0);
      // Undeclared exception!
      try { 
        formElement0.getElementsMatchingText("nq{l9\"t\"MQNA<Z^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: nq{l9\"t\"MQNA<Z^
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("}X}47l27", "}X}47l27");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("0g`UOp{9", "F`urWAWWWod){ED");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Document.createShell("even");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("g,vMkan{2!Ye,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: g,vMkan{2!Ye,
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("name", "name");
      DataNode dataNode0 = new DataNode("@e-g");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("#Ae,");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("u", "u");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Document.createShell("cs");
      Element element0 = document0.prependElement("cs");
      CDataNode cDataNode0 = new CDataNode("cs");
      element0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexLessThan(15);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      Comment comment0 = new Comment(":nth-child(%d)", "AM9y,");
      document0.parentNode = (Node) comment0;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexEquals(15);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'", "'");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("'", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("DMs=|", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Document.createShell("'");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("org.jsoup.nodes.Element", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f'", "f'");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("f'", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parse("}Cb5=Vs7u]`", "!{Um}sk26W=hoDJe4*");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("class", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'", "'");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("'", "*y5alfX");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: *y5alfX
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parse("f'", "f'");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("f'", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("even", "even");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("-", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Document.createShell("'");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("'", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parse("f'", "f'");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("head", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Tag tag0 = Tag.valueOf("w*coh");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("w*coh", "w*coh");
      Attributes attributes2 = attributes1.put("/>", true);
      FormElement formElement0 = new FormElement(tag0, "/>", attributes2);
      String[] stringArray0 = new String[1];
      attributes1.keys = stringArray0;
      // Undeclared exception!
      try { 
        formElement0.getElementsByAttributeValue("AlL&L", "w*coh");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZES3RRJBIyu4", "csP w");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parse("U`>=NVU5%Hyq9{;", "U`>=NVU5%Hyq9{;");
      document0.siblingIndex = (-131);
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("-JORC%>B");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Tag tag0 = Tag.valueOf("N7cwUAa\"");
      CDataNode cDataNode0 = new CDataNode("N7cwUAa\"");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "extended", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Document.createShell("class");
      Element element0 = document0.prependElement("class");
      element0.siblingIndex = (-2778);
      // Undeclared exception!
      try { 
        document0.getElementById("class");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("#root");
      FormElement formElement0 = new FormElement(tag0, "#root", attributes0);
      // Undeclared exception!
      try { 
        formElement0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Tag tag0 = Tag.valueOf("N7cwUAa\"");
      CDataNode cDataNode0 = new CDataNode("N7cwUAa\"");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "N7cwUAa\"", attributes0);
      formElement0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        formElement0.firstElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f'", "f'");
      TextNode textNode0 = TextNode.createFromEncoded("Insert position out of bounds.");
      document0.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        document0.elementSiblingIndex();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("<0|`O1wZI(dQm2no7:k", "");
      DocumentType documentType0 = new DocumentType("mW_LOp=gZx3=04|r", "mW_LOp=gZx3=04|r", "h", "sU", "h");
      Element element0 = document0.doClone(documentType0);
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parse("", "html");
      // Undeclared exception!
      try { 
        document0.child(24576);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 24576, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("open", "open");
      // Undeclared exception!
      try { 
        document0.child((-836));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("pMhn", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "L8TJ", attributes0);
      FormElement formElement1 = (FormElement)formElement0.appendChild(formElement0);
      // Undeclared exception!
      formElement1.before(":nth-child(%d)");
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'", "'");
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("href", "href");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.attr("Children collection to be inserted must not be null.", "e~wIv>}e=MDB");
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("open", "open");
      // Undeclared exception!
      try { 
        document0.attr((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parse("U`> =VU5%HTq'9{;", "U`> =VU5%HTq'9{;");
      document0.siblingIndex = 62;
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 62, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f'", "f'");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("mF", "mF");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.appendText(">px~$)@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("cB}jm#}<`B1", "2");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("on", "on");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.appendElement("on");
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "#root");
      // Undeclared exception!
      try { 
        document0.appendElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Element element0 = new Element("pattern syntax error:");
      List<Node> list0 = element0.childNodes();
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.appendChild(element0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = new Document("=E0lC");
      CDataNode cDataNode0 = new CDataNode("=E0lC");
      Node node0 = cDataNode0.doClone(document0);
      // Undeclared exception!
      try { 
        document0.appendChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("f'");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("f'", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      // Undeclared exception!
      try { 
        formElement0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("open", "open");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.append("open");
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Document.createShell("z;6q?");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = new Document("html");
      TextNode textNode0 = new TextNode((String) null, (String) null);
      document0.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        document0.append("html");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Tag tag0 = Tag.valueOf("N7cwUAa\"");
      CDataNode cDataNode0 = new CDataNode("N7cwUAa\"");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "N7cwUAa\"", attributes0);
      formElement0.reparentChild(formElement0);
      // Undeclared exception!
      try { 
        formElement0.after((Node) formElement0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("open", "open");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.after("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'", "'");
      Element element0 = document0.prependElement("'");
      element0.setSiblingIndex(4363);
      // Undeclared exception!
      try { 
        element0.after("'");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4364, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("'");
      FormElement formElement0 = new FormElement(tag0, "'", attributes0);
      // Undeclared exception!
      try { 
        formElement0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("Dhn");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "Wmz", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "meta[name=charset]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      StringBuilder stringBuilder0 = new StringBuilder();
      document0.html(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Document.createShell("nohref");
      Element element0 = document0.toggleClass("nohref");
      Set<String> set0 = element0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("'", "'");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("open", "open");
      document0.prependText("open");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("", "");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("open", "open");
      Element element0 = document0.prependElement("open");
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Document.createShell(";pen");
      Element element0 = document0.body();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'", "'");
      Element element0 = document0.prependElement("'");
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "org.jsoup.nodes.element");
      Element element0 = document0.head();
      element0.html("org.jsoup.nodes.element");
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Document.createShell("nohref");
      document0.toggleClass("");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("noshade", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "open", attributes0);
      pseudoTextElement0.children();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "org.jsoup.select.Evaluator$IndexEquals");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Document.createShell("on");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("OnushadA", "textarea");
      Pattern pattern0 = Pattern.compile("OnushadA", (-2061794399));
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'", "'");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parse("oB", "oB");
      Element element0 = document0.createElement("oB");
      List<Node> list0 = document0.childNodes();
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.prependChild(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("", "");
      Evaluator.AttributeStarting evaluator_AttributeStarting0 = new Evaluator.AttributeStarting("G}OXDx'}i2mSTj&4");
      document0.is((Evaluator) evaluator_AttributeStarting0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X", "&3p]&T)c:\"pOpheqC");
      Pattern pattern0 = Pattern.compile("X", 1);
      document0.getElementsByAttributeValueMatching("xFa-S//j)s`rx,Eion[", pattern0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = new Document("#7.");
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'", "'");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parse("f'", "f'");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.html();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "si^Lq3Uqu\u0001Bw");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.prependElement("br");
      element0.appendElement("br");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.prependElement("br");
      document0.replaceChild(element0, element0);
      document0.html();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      try { 
        document0.outerHtmlHead(pipedWriter0, 1, document_OutputSettings1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("value");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "value", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.val((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("noshade", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "open", attributes0);
      Element element0 = pseudoTextElement0.appendElement("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("b?r", "bru");
      Document document1 = document0.clone();
      document1.ensureChildNodes();
      document1.toggleClass("ToX*.Sw\"?QwebN\"c-");
      document1.toggleClass("java.lang.String@0000000054");
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("fs", "YZp$G\"rZh`t8r`0");
      document0.toggleClass("YZp$G\"rZh`t8r`0");
      document0.toggleClass("fs");
      document0.hasClass("fs");
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String inputmust not be null", "String inputmust not be null");
      Element element0 = document0.toggleClass("String inputmust not be null");
      document0.toggleClass("String inputmust not be null");
      element0.hasClass("d5*sRsl6}");
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rp_6kXhfTdy8\"]~x1", "head");
      document0.toggleClass("wreb&pbio%l6%kz'+");
      document0.toggleClass(" acB-V<ru2P5{p ");
      document0.hasClass("head");
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String inputmustnot be null", "String inputmustnot be null");
      document0.toggleClass("String inputmustnot be null");
      document0.hasClass("String inputmustnot be null");
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Q", "Q");
      document0.addClass("<html>\n <head></head>\n <body>\n  Q\n </body>\n</html>");
      document0.hasClass("org.jsoup.select.StructuralEvaluator");
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Document.createShell("String input must not be null");
      document0.toggleClass("String input must not be null");
      document0.hasClass(".ehG<!Yr^x3g");
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nharacterReferenceIncdata", "nharacterReferenceIncdata");
      DataNode dataNode0 = DataNode.createFromEncoded("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      document0.prependChild(dataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s<~<!~*VayAv/_=;", "s<~<!~*VayAv/_=;");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parse("<!DOCTYPE", "org.jsoup.nodes.Element$2");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("open", "open");
      document0.prependText("");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("on", "on");
      document0.reparentChild(document0);
      document0.getElementsMatchingOwnText("on");
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.prependElement("br");
      document0.prependElement("br");
      document0.getElementsMatchingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Element element0 = new Element("value");
      CDataNode cDataNode0 = new CDataNode("2u^9nO");
      Element element1 = element0.prependChild(cDataNode0);
      element1.getElementsContainingText("Must supply an even number of key value pairs");
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Q", "Q");
      document0.title("nvnGC6iy~P}9+<$4x");
      document0.getElementsMatchingOwnText("even");
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Document.createShell("on");
      Element element0 = document0.appendElement("^#ns[KU9{=UV]tEhCg");
      DocumentType documentType0 = new DocumentType("aod[*a-%EO>)(U%f", "on", "7D9\"3<", "7D9\"3<");
      element0.after((Node) documentType0);
      document0.getElementsMatchingOwnText("on");
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Document.createShell("'");
      Element element0 = document0.appendText("org.jsoup.nodes.Element");
      element0.prependText("'");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Document.createShell("'");
      Element element0 = document0.appendText("org.jsoup.nodes.Element");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'", "'");
      document0.prependElement("br");
      Element element0 = document0.prependText("body");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("on", "on");
      document0.prependElement("on");
      document0.prependText("on");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parse("h", "h");
      DataNode dataNode0 = new DataNode("h", "=QK>'|3}.?\"Z~W)KH");
      document0.appendChild(dataNode0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Document.createShell("W");
      document0.getElementById("W");
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("'", "'");
      Element element0 = document0.prependElement("'");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Tag tag0 = Tag.valueOf("N7cwUAa\"");
      CDataNode cDataNode0 = new CDataNode("N7cwUAa\"");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "N7cwUAa\"", attributes0);
      formElement0.reparentChild(formElement0);
      formElement0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("open", "open");
      document0.reparentChild(document0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("on", "on");
      document0.reparentChild(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X", "&3p]&T)c:\"pOpheqC");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Document.createShell("open");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      element1.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parse("f'", "f'");
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("open", "open");
      Element element0 = document0.prependElement("open");
      Elements elements0 = element0.nextElementSiblings();
      assertEquals("open", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'", "'");
      document0.appendTo(document0);
      document0.siblingElements();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("open", "open");
      document0.siblingElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("open", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'", "'");
      Element element0 = document0.body();
      element0.after("'");
      String string0 = element0.cssSelector();
      assertEquals("html > body:nth-child(2)", string0);
      assertEquals("'", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'", "'");
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals("'", element0.baseUri());
      assertEquals("html > body", string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("html", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "html", attributes0);
      Element element0 = pseudoTextElement0.appendElement("QnE'AA<:");
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'qne'aa<|': unexpected token at ''aa<|'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = new Document("Q");
      Element element0 = document0.addClass("I'+Jcz");
      element0.cssSelector();
      assertEquals("Q", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Document.createShell("even");
      Node[] nodeArray0 = new Node[3];
      // Undeclared exception!
      try { 
        document0.insertChildren(1100, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", ">-XbaVLuMrbFw`a2;");
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
      try { 
        document0.insertChildren((-999), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("#root");
      FormElement formElement0 = new FormElement(tag0, "#root", attributes0);
      Node[] nodeArray0 = new Node[0];
      Element element0 = formElement0.insertChildren(0, nodeArray0);
      assertEquals("#root", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'", "'");
      Elements elements0 = document0.getElementsContainingText("'");
      // Undeclared exception!
      try { 
        document0.insertChildren(1143, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parse("?gD", "");
      LinkedList<XmlDeclaration> linkedList0 = new LinkedList<XmlDeclaration>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1744), (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("0R@.P~0sl", "0R@.P~0sl");
      List<Node> list0 = document0.ensureChildNodes();
      // Undeclared exception!
      try { 
        document0.insertChildren(1, (Collection<? extends Node>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Document.createShell("shhRn");
      DataNode dataNode0 = DataNode.createFromEncoded("shhRn", "D^0n>m1>i^");
      document0.prependChild(dataNode0);
      document0.dataNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("open", "open");
      Element element0 = document0.prependText("open");
      List<TextNode> list0 = element0.textNodes();
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("on", "on");
      Element element0 = document0.prependElement("on");
      document0.prependText("on");
      element0.firstElementSibling();
      assertEquals(3, document0.childNodeSize());
      assertEquals("on", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "org.jsoup.select.Evaluator$IndexEquals");
      Elements elements0 = document0.getElementsByIndexLessThan(55296);
      assertEquals("org.jsoup.select.Evaluator$IndexEquals", document0.baseUri());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("A5\"s", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "A5\"s", attributes0);
      Elements elements0 = formElement0.getElementsByIndexGreaterThan(60);
      assertTrue(elements0.isEmpty());
      assertEquals("A5\"s", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Document.createShell("head");
      Element element0 = document0.selectFirst("head");
      assertEquals("head", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parse("h", "h");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      document0.getAllElements();
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("'");
      FormElement formElement0 = new FormElement(tag0, "'", attributes0);
      Element element0 = formElement0.removeClass("'");
      assertEquals(0, attributes0.size());
      assertEquals("'", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Document.createShell("open");
      // Undeclared exception!
      try { 
        document0.before("open");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Parser.parse("U`>=NVU5%Hyq9{;", "U`>=NVU5%Hyq9{;");
      document0.getElementsByAttribute("-JORC%>B");
      assertEquals("U`>=NVU5%Hyq9{;", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByAttributeValueNot("br", "            ");
      assertEquals("br", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("A5\"s", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "A5\"s", attributes0);
      Element element0 = formElement0.shallowClone();
      assertEquals("A5\"s", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parse("cls", "cls");
      Document document1 = document0.clone();
      document1.childNodes = null;
      // Undeclared exception!
      try { 
        document1.getElementsByIndexEquals(823);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("open", "open");
      document0.doSetBaseUri("s");
      assertEquals("s", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Document.createShell("on");
      DocumentType documentType0 = new DocumentType("aod[*a-%EO>)(U%f", "on", "7D9\"3<", "7D9\"3<");
      // Undeclared exception!
      try { 
        document0.after((Node) documentType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("#root");
      FormElement formElement0 = new FormElement(tag0, "#root", attributes0);
      // Undeclared exception!
      try { 
        formElement0.getElementsByClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parse("f'", "f'");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("org.jsoup.nodes.Element$1", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("open", "open");
      document0.is("open");
      assertEquals(1, document0.childNodeSize());
      assertEquals("open", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";=;Mvj#,` PA#7p", "zFuwTU4Ie!e7");
      document0.getElementsByAttributeValueMatching(";=;Mvj#,` PA#7p", "");
      assertEquals("zFuwTU4Ie!e7", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Document.createShell("open");
      Element element0 = document0.val("open");
      assertEquals("open", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Document.createShell("head");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      assertEquals(3, elements0.size());
      assertEquals("head", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("open", "0`ev");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Document document0 = new Document("~ Vu,m~;");
      document0.getElementsByIndexLessThan(0);
      assertEquals("~ Vu,m~;", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":not%s", "OnushadA");
      // Undeclared exception!
      try { 
        document0.after("[ta2ZzNi<N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("open", "open");
      document0.select("open");
      assertEquals(1, document0.childNodeSize());
      assertEquals("open", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Q", "Q");
      document0.getElementsByAttributeValueStarting("Q", "<html>\n <head></head>\n <body>\n  Q\n </body>\n</html>");
      assertEquals(1, document0.childNodeSize());
      assertEquals("Q", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      document0.getElementsByAttributeValue("2IN;twMt|(", "Sae");
      assertEquals("Insert position out of bounds.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Document document0 = Document.createShell("Strig input must not be nul");
      document0.wholeText();
      assertEquals("Strig input must not be nul", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Document document0 = Document.createShell("on");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      Elements elements0 = document0.getElementsContainingOwnText("org.jsoup.nodes.Element");
      assertEquals(1, elements0.size());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Element element0 = new Element("RawtextEndTagName");
      Map<String, String> map0 = element0.dataset();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("on", "on");
      Element element0 = document0.child(0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("on", element0.baseUri());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "#root");
      Pattern pattern0 = Pattern.compile("#root", 20);
      document0.getElementsMatchingText(pattern0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("on", "on");
      // Undeclared exception!
      try { 
        document0.wrap("o-kpa");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }
}
