/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 21:46:06 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Insert postion out of boud_.", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Insert postion out of boud_.", attributes0);
      formElement0.toggleClass("U");
      formElement0.toggleClass("U");
      formElement0.getElementsByClass("Insert postion out of boud_.");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parse(";H[&uJ?hq4n", ";H[&uJ?hq4n");
      Document document1 = Parser.parse(";H[&uJ?hq4n", ";H[&uJ?hq4n");
      Element element0 = document1.appendTo(document0);
      Element element1 = document0.doClone(element0);
      document0.appendTo(element1);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = new Document("Insert poiton outof bouds.");
      Element element0 = document0.doClone(document0);
      element0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element", parseSettings0);
      Element element0 = new Element(tag0, "textarea");
      element0.prepend("textarea");
      Node[] nodeArray0 = new Node[8];
      // Undeclared exception!
      try { 
        element0.insertChildren((-253), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      document0.prependElement("Pattern syntax error: ");
      Elements elements0 = document0.getElementsByAttributeValueMatching("J\"2uxA:0o3]Ktk`", "Pattern syntax error: ");
      document0.insertChildren(1, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("q", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("q");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "q", attributes0);
      StringBuilder stringBuilder0 = new StringBuilder();
      formElement0.outerHtmlTail(stringBuilder0, 0, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(stringWriter0, 0, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      FormElement formElement0 = new FormElement(tag0, "html", (Attributes) null);
      formElement0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Element element0 = new Element("\"0E@b+lUoV");
      element0.doSetBaseUri("uc");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      Element element0 = document0.doClone(document0);
      element0.wrap(";o9Ph1@A#[oh_hMU}h");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      Element element0 = document0.head();
      element0.wrap("head");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("2cPCL33'smT ", "2cPCL33'smT ");
      Element element0 = document0.body();
      element0.wrap("2cPCL33'smT ");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nsert poston out of boud_.", "nsert poston out of boud_.");
      Document document1 = Parser.parse("nsert poston out of boud_.", "nsert poston out of boud_.");
      Element element0 = document1.appendTo(document0);
      element0.val("id");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      FormElement formElement0 = new FormElement(tag0, "html", (Attributes) null);
      formElement0.val("html");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      document0.val("Insert position out of bounds.");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parse("Insert postion out of boud_.", "Insert postion out of boud_.");
      document0.appendTo(document0);
      document0.toggleClass("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "head");
      Element element0 = document0.body();
      element0.text("<d7X");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Document.createShell("'f");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.Token$TokenType", "mNH25ES8!U4~");
      Document document1 = Parser.parse("mNH25ES8!U4~", "mNH25ES8!U4~");
      document0.appendTo(document1);
      document0.tagName("$?dV^9^C^+d`qGw");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.Token$TokenType", "mNH25ES8!U4~");
      document0.tagName("$?dV^9^C^+d`qGw");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "head");
      Element element0 = document0.head();
      element0.tagName("head");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Tag tag0 = Tag.valueOf("`m`~u>");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "`m`~u>", attributes0);
      pseudoTextElement0.tagName();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      FormElement formElement0 = new FormElement(tag0, "java.lang.string@0000000034 head", (Attributes) null);
      formElement0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parse("h|\"t\u0002P", "%6,");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "Qu.~>");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      document0.selectFirst("br");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.select("body");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert postion out of boud_.", "Insert postion out of boud_.");
      Element element0 = document0.appendTo(document0);
      element0.removeClass("#document");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      FormElement formElement0 = new FormElement(tag0, "html", (Attributes) null);
      Element element0 = formElement0.prependChild(formElement0);
      element0.prependText("html");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      document0.prependElement("html");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parse("Insert postion out of boud_.", "Insert postion out of boud_.");
      Element element0 = document0.appendTo(document0);
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("Insert postion out of boud_.", true);
      element0.prependChild(xmlDeclaration0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Document.createShell("8&nkV) d&/PR");
      Element element0 = document0.body();
      element0.prepend("");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parse("Insert postion out of boud_.", "Insert postion out of boud_.");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert poiton outof bouds.", "Insert poiton outof bouds.");
      Element element0 = document0.head();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      Element element0 = document0.head();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parse("IV]j", "org.jsoup.select.Evaluator$MatchesOwn");
      Document document1 = Parser.parse("pattern syntax error:", "v{%A");
      Document document2 = (Document)document1.appendTo(document0);
      document2.parent();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parse("IV]j", "org.jsoup.select.Evaluator$MatchesOwn");
      Document document1 = (Document)document0.appendTo(document0);
      document1.parent();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert postion out of boud_.", "Insert postion out of boud_.");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "Qu.~>");
      Document document1 = new Document("Qu.~>");
      document1.appendTo(document0);
      document1.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parse("$0Ki>5kQviSR", "java.lang.string@0000000028 insert osition out th bounds.");
      Element element0 = document0.body();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      document0.is((Evaluator) evaluator_AllElements0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      Document document1 = document0.clone();
      Element element0 = document0.doClone(document1);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) element0;
      document0.insertChildren(1, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document1;
      document0.insertChildren(1, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.doClone(document0);
      LinkedList<DocumentType> linkedList0 = new LinkedList<DocumentType>();
      element0.insertChildren(1, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Tag tag0 = Tag.valueOf("9NR9d:");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "9NR9d:", attributes0);
      Element element1 = element0.text("9NR9d:");
      element1.html();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Tag tag0 = Tag.valueOf("`m`~u>");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "`m`~u>", attributes0);
      pseudoTextElement0.html();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      document0.id();
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parse(".", ".");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Document.createShell("Insert{position out offbounds.");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Document.createShell("Insert posiion ot of bound.");
      document0.prependText("Insert posiion ot of bound.");
      document0.getElementsMatchingText("Insert posiion ot of bound.");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parse("$0Ki>5kQviSR", "java.lang.string@0000000028 insert osition out th bounds.");
      Pattern pattern0 = Pattern.compile("$0Ki>5kQviSR");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Document.createShell("nnuertpoitonoutof bods");
      document0.getElementsMatchingOwnText("}XW^");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      document0.text("Insert position out of bounds.");
      document0.getElementsContainingText("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parse("Insert poition out of bouds.", "Insert poition out of bouds.");
      document0.getElementsContainingOwnText("class");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      FormElement formElement0 = new FormElement(tag0, "html", (Attributes) null);
      formElement0.getElementsByTag("html");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!8gdR@0m60Yvy", "Qu.~>");
      Element element0 = document0.head();
      element0.getElementsByIndexLessThan(124);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Document.createShell("Insert poition out of bouds.");
      document0.getElementsByIndexGreaterThan((-1727));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      FormElement formElement0 = new FormElement(tag0, "html", (Attributes) null);
      formElement0.toggleClass("html");
      formElement0.addClass("html");
      formElement0.getElementsByClass("html");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Tag tag0 = Tag.valueOf("qDG&u:BR@?G!1+1KR");
      Attributes attributes0 = new Attributes();
      attributes0.put("#root", "FftWF#xlcz1^3z8");
      FormElement formElement0 = new FormElement(tag0, "qDG&u:BR@?G!1+1KR", attributes0);
      formElement0.getElementsByAttributeValueNot("#root", "FftWF#xlcz1^3z8");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Qu.~>", "Qu.~>");
      document0.getElementsByAttributeValueEnding("Qd.->K", "Qu.~>");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("Insert poiton outof bouds.", parseSettings0);
      Attributes attributes0 = new Attributes();
      attributes0.put("Insert poiton outof bouds.", true);
      FormElement formElement0 = new FormElement(tag0, "Insert poiton outof bouds.", attributes0);
      formElement0.getElementsByAttributeStarting("Insert poiton outof bouds.");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      document0.prependChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      Element element0 = document0.appendTo(document0);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parse("Insert postion out of boud_.", "Insert postion out of boud_.");
      Element element0 = document0.appendTo(document0);
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Document.createShell("C$.");
      Element element0 = document0.head();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";H[&uJ?hq(4n", ";H[&uJ?hq(4n");
      Element element0 = document0.appendTo(document0);
      document0.doClone(element0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      FormElement formElement0 = new FormElement(tag0, "html", (Attributes) null);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "html", (Attributes) null);
      formElement0.doClone(pseudoTextElement0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000034 head");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parse("Insert poition out of bouds.", "Insert poition out of bouds.");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = new Document("1x");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Document.createShell("Insert poition out of bouds.");
      Element element0 = document0.appendTo(document0);
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!8gdR@0m60Yvy", "Qu.~>");
      Element element0 = document0.head();
      Set<String> set0 = document0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Tag tag0 = Tag.valueOf("ht8ml");
      FormElement formElement0 = new FormElement(tag0, "ht8ml", (Attributes) null);
      Element element0 = formElement0.toggleClass("ht8ml");
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Tag tag0 = Tag.valueOf("s+");
      FormElement formElement0 = new FormElement(tag0, "s+", (Attributes) null);
      Element element0 = formElement0.toggleClass("s+");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Tag tag0 = Tag.valueOf("button");
      CDataNode cDataNode0 = new CDataNode("button");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Element$1", attributes0);
      formElement0.children();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      Element element0 = document0.prependElement("Pattern syntax error: ");
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      Element element0 = document0.prepend("Insert position out of bounds.");
      element0.child(0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      document0.prependElement("truespeed");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Document.createShell("nnuertpoitonoutof bods");
      Element element0 = document0.head();
      Element element1 = element0.removeClass("}XW^");
      element1.before((Node) element0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf(">", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.Evaluator$MatchesOwn", attributes0);
      formElement0.prependChild(formElement0);
      Document document0 = new Document("DG-*n|3ChY");
      formElement0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert poiton outof bouds.", "Insert poiton outof bouds.");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!8gdR@0m60Yvy", "Qu.~>");
      document0.attr("Qu.~>", true);
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!8gdR@0m60Yvy", "Qu.~>");
      Element element0 = document0.head();
      element0.attr("Qu.~>", true);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parse("Insert postion out of boud_.", "Insert postion out of boud_.");
      document0.appendTo(document0);
      document0.attr("Insert postion out of boud_.", false);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parse("Insert postion out of boud_.", "Insert postion out of boud_.");
      document0.empty();
      document0.attr("Insert postion out of boud_.", false);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Document.createShell("s9");
      document0.setSiblingIndex(41);
      document0.attr("ha", "head");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Document.createShell("Insert poiton outof bouds.");
      Element element0 = document0.doClone(document0);
      element0.attr("Insert poiton outof bouds.", "fFg>M{");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Document.createShell(".");
      Element element0 = document0.createElement("OoX-{/mkha2zPG");
      element0.attr("0>rgw{SC `", "B$|eQcx8J~");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      Element element0 = document0.head();
      Element element1 = element0.before("of");
      element1.appendText("");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      Element element0 = document0.head();
      element0.appendText("");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Element element0 = new Element("#root");
      element0.appendElement("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Qu.~>", "Qu.~>");
      document0.appendElement("textarea");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      document0.appendElement("head");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      Element element0 = document0.head();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      Document document1 = document0.clone();
      document0.appendChild(document1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      Document document1 = Parser.parse("Insert position out of bounds.", "Insert position out of bounds.");
      document1.appendTo(document0);
      Element element0 = document1.previousElementSibling();
      element0.append("body");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      Document document1 = Parser.parse("Insert position out of bounds.", "Insert position out of bounds.");
      document1.appendTo(document0);
      document1.append("o'(i!6L");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000066 :matches(regex) query must not + empty", "java.lang.string@0000000066 :matches(regex) query must not + empty");
      Element element0 = document0.head();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parse("h|\"t\u0002P", "%6,");
      Element element0 = document0.prependElement("br");
      element0.after("br");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parse("Qu.~>", "head");
      Element element0 = document0.body();
      element0.after("head");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parse("Insert postion out of boud_.", "Insert postion out of boud_.");
      document0.appendTo(document0);
      document0.addClass("org.jsoup.parser.HtmlTreeBuilderState$24");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";H[&uJ?hq(4n", ";H[&uJ?hq(4n");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.wrap("java.lang.string@0000000067 br");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("'@=f", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "'@=f", attributes0);
      // Undeclared exception!
      try { 
        formElement0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "br", (Attributes) null);
      formElement0.prependChild(formElement0);
      // Undeclared exception!
      formElement0.val("S4FpjnS");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      FormElement formElement0 = new FormElement(tag0, "html", (Attributes) null);
      // Undeclared exception!
      try { 
        formElement0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Tag tag0 = Tag.valueOf("9NR9d:");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "\"w5){U`EmK", attributes0);
      // Undeclared exception!
      try { 
        element0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.tagName("[_CTcRFpmE4_gC L$1$");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("m|8;K'rc)N", "");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      TextNode textNode0 = new TextNode("Insert position out of bounds.", "b ");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.siblingElements();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Qu.~>", "Qu.~>");
      // Undeclared exception!
      try { 
        document0.selectFirst("Qu.~>");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("org.jsoup.UncheckedIOException");
      Document document0 = parser0.parseInput((Reader) stringReader0, "");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parse("h|\"t\u0002P", "%6,");
      // Undeclared exception!
      try { 
        document0.select("Insert poiton outof9bouds.");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Qu.~>", "Qu.~>");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Insert position out of bounds.", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "-X[GRiY", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Qu.~>", "Qu.~>");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Document.createShell("H_Wf(4E\"Z`7XJ'T");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.prependElement("H_Wf(4E\"Z`7XJ'T");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      FormElement formElement0 = new FormElement(tag0, "html", (Attributes) null);
      formElement0.setParentNode(formElement0);
      // Undeclared exception!
      try { 
        formElement0.prependChild(formElement0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Element element0 = new Element("\"0E@b+lUoV");
      // Undeclared exception!
      try { 
        element0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      FormElement formElement0 = new FormElement(tag0, "html", (Attributes) null);
      formElement0.prependChild(formElement0);
      // Undeclared exception!
      formElement0.prepend("\"~ZH>peXeM");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Qu.~>", "Qu.~>");
      Document document1 = document0.clone();
      TextNode textNode0 = TextNode.createFromEncoded("org.jsoup.nodes.Attributes");
      document1.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        document1.prepend("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      CDataNode cDataNode0 = new CDataNode("html");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "WVl", attributes0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "html");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        formElement0.outerHtmlTail(charBuffer0, (-495), document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Pattern syntax error: ", "Pattern syntax error: ");
      CharBuffer charBuffer0 = CharBuffer.allocate(774);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(58);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 58, document_OutputSettings1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintStream0, (-2698), (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("T36_Un +T!MdZ", "8,Jc|3%.seysE;'W");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintWriter0, (-2679), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, 0, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Children collection to be inserted must not be null.", "had");
      MockFile mockFile0 = new MockFile("s+", "Children collection to be inserted must not be null.");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockPrintStream0, (-1), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parse("hFYl", "hFYl");
      CDataNode cDataNode0 = new CDataNode(")2$h");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.nextElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "Qu.~>");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TextNode textNode0 = new TextNode("html", "html");
      Document document0 = new Document("head");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.lastElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parse("Insert postion out of boud_.", "Insert postion out of boud_.");
      document0.appendTo(document0);
      Evaluator.IsNthOfType evaluator_IsNthOfType0 = new Evaluator.IsNthOfType(51, (-1));
      // Undeclared exception!
      document0.is((Evaluator) evaluator_IsNthOfType0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("         ", "         ");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("", "@MW*LiwGsK");
      // Undeclared exception!
      try { 
        document0.is("@MW*LiwGsK");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '@MW*LiwGsK': unexpected token at '@MW*LiwGsK'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Document.createShell("!8gdR@0m60Yvy");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      CDataNode cDataNode0 = new CDataNode("!8gdR@0m60Yvy");
      nodeArray0[2] = (Node) cDataNode0;
      nodeArray0[3] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      FormElement formElement0 = new FormElement(tag0, "html", (Attributes) null);
      Elements elements0 = formElement0.getElementsByAttributeValueNot("html", "Insert position out of bounds.");
      formElement0.prependChild(formElement0);
      // Undeclared exception!
      try { 
        formElement0.insertChildren(1, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parse("DF<HTZ", "DF<HTZ");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.html("big");
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parse(";H[&uJ?hq4n", ";H[&uJ?hq4n");
      Element element0 = document0.appendTo(document0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      element0.html(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf(">", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.Evaluator$MatchesOwn", attributes0);
      Element element0 = formElement0.prependChild(formElement0);
      // Undeclared exception!
      element0.html();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!8gdR@0m60Yvy", "(\"tw{");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.nodes.Element$2", (Attributes) null);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "html", (Attributes) null);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsMatchingText("?'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: ?'
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parse("Insert postion out of boud_.", "Insert postion out of boud_.");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Document.createShell("8&nkV) d&/PR");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("8&nkV) d&/PR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 8&nkV) d&/PR
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert postion out of boud_.", "Insert postion out of boud_.");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("Insert postion out of boud_.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Element element0 = new Element("%4TRQ(E3>Ik92");
      // Undeclared exception!
      try { 
        element0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Document.createShell("C+OM#;KcPE");
      Comment comment0 = new Comment("Insert poition out of bouds.", "Insert poition out of bouds.");
      Element element0 = document0.doClone(comment0);
      // Undeclared exception!
      try { 
        element0.getElementsByIndexEquals((-1));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "Qu.~>");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "(\"tw{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Tag tag0 = Tag.valueOf("9NR9d:");
      Attributes attributes0 = new Attributes();
      String[] stringArray0 = new String[3];
      Element element0 = new Element(tag0, "9NR9d:", attributes0);
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueNot("org.jsoup.select.Evaluator$MatchesOwn", stringArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Document.createShell("Insert poiton outof bouds.");
      Element element0 = document0.doClone(document0);
      Document document1 = (Document)element0.clearAttributes();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("wsPV:43y");
      FormElement formElement0 = new FormElement(tag0, "Insert poiton outof bouds.", attributes0);
      document1.appendTo(formElement0);
      Pattern pattern0 = Pattern.compile("wsPV:43y");
      // Undeclared exception!
      try { 
        formElement0.getElementsByAttributeValueMatching("U^iu<fnkSdk?P^_6*Nh", pattern0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("Pattern syntax error: ", "Q6P8_&7W{U'?z/Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: Q6P8_&7W{U'?z/Q
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "Qu.~>");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", "Qu.~>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parse(">>b}", ">>b}");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue(">>b}", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parse("Insert poiton outof bouds.", "Insert poiton outof bouds.");
      Element element0 = document0.head();
      element0.setSiblingIndex((-109));
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValue("Insert poiton outof bouds.", "Insert poiton outof bouds.");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("html", parseSettings0);
      CDataNode cDataNode0 = new CDataNode((String) null);
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "html", attributes0);
      // Undeclared exception!
      try { 
        formElement0.getElementsByAttributeStarting((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Tag tag0 = Tag.valueOf("9NR9d:");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "font", attributes0);
      // Undeclared exception!
      try { 
        formElement0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "html", (Attributes) null);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!8gdR@0m60Yvy", "Qu.~>");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!8gdR@0m60Yvy", "Qu.~>");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("`", "`");
      // Undeclared exception!
      try { 
        document0.child(2156);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2156, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      Comment comment0 = new Comment("_K[w&dtSX", "CONTINUE");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      Document document1 = (Document)document0.doClone(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document1.before((Node) comment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parse("Insert postion out of boud_.", "Insert postion out of boud_.");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.before(";");
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Tag tag0 = Tag.valueOf("9NR9d:");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("9NR9d:", false);
      String[] stringArray0 = new String[3];
      attributes1.keys = stringArray0;
      Element element0 = new Element(tag0, "9NR9d:", attributes1);
      // Undeclared exception!
      try { 
        element0.attr("org.jsoup.selct.Evaluator$MatchesOwn", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert postion out of boud_.", "Insert postion out of boud_.");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.attr("org.jsoup.nodes.Element", "Insert postion out of boud_. Insert postion out of boud_.");
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "html", (Attributes) null);
      // Undeclared exception!
      try { 
        pseudoTextElement0.attr((String) null, "U");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Tag tag0 = Tag.valueOf("%<~rN!");
      Element element0 = new Element(tag0, "thead");
      element0.setParentNode(element0);
      // Undeclared exception!
      try { 
        element0.appendTo(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Element element0 = new Element("tfoot");
      // Undeclared exception!
      try { 
        element0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parse("Insert postion out of boud_.", "Insert postion out of boud_.");
      document0.appendTo(document0);
      document0.siblingIndex = (-5587);
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Tag tag0 = Tag.valueOf("9NR9d:");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "9NR9d:", attributes0);
      element0.parentNode = (Node) element0;
      // Undeclared exception!
      element0.appendElement("-yj=_0wjpyWp1=");
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Cookie value must not be null");
      CDataNode cDataNode0 = new CDataNode("nuZU>_#sp-={7z");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "7!", attributes0);
      // Undeclared exception!
      try { 
        formElement0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = new Document("Insert poiton outof bouds.");
      Element element0 = document0.doClone(document0);
      // Undeclared exception!
      try { 
        document0.appendChild(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("OK9[:96/UYmO", "OK9[:96/UYmO");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parse("Insert position o+t of bounds.", "tZv;t:!c1O");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      FormElement formElement0 = new FormElement(tag0, "html", (Attributes) null);
      Element element0 = formElement0.prependChild(formElement0);
      // Undeclared exception!
      try { 
        formElement0.after((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert postion out of boud_.", "Insert postion out of boud_.");
      Element element0 = document0.head();
      element0.before((Node) document0);
      // Undeclared exception!
      document0.after("Insert postion out of boud_.");
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Element element0 = new Element("6]fU0c4I-*<o");
      // Undeclared exception!
      try { 
        element0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("org.jsoup.parser.ParseSettings");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "org.jsoup.parser.ParseSettings", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Tag tag0 = Tag.valueOf("_cI)>: w");
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Document.createShell("head");
      CharBuffer charBuffer0 = CharBuffer.allocate(353);
      document0.html(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("TQ5-M", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("TQ5-M");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "TQ5-M", attributes0);
      formElement0.toggleClass("WLg3AOPF ;]rt8'g");
      formElement0.toggleClass("java.lang.string@0000000027 insert position s+ of bounds.");
      formElement0.hasClass(", URL=");
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Tag tag0 = Tag.valueOf("BG}4b6");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Rb5KAqwp", attributes0);
      formElement0.toggleClass("~_3l]Nbx3'$PMlr");
      formElement0.toggleClass(" K9$##Uz[8CS1[mk/Vt");
      formElement0.hasClass("body");
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Insert postion out of boud_.");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Insert postion out of boud_.", attributes0);
      formElement0.toggleClass("Insert postion out of boud_.");
      formElement0.toggleClass("C.");
      formElement0.hasClass("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Document.createShell("head");
      document0.hasClass("rg.jsoup.nodes.Eleme$NodeList");
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      FormElement formElement0 = new FormElement(tag0, "java.lang.string@0000000034 head", (Attributes) null);
      Element element0 = formElement0.toggleClass("LAjL?(+nlg*lS*XDku");
      element0.hasClass("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$MatchesOwn");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "html");
      document0.prependText("5]vT(FzV");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Document.createShell("id");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parse("IV]j", "org.jsoup.select.Evaluator$MatchesOwn");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Document.createShell("Insert poition out of bouds.");
      Element element0 = document0.body();
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parse("br", "pZMX~PAw.HU#j&rH~W");
      Element element0 = new Element("nav");
      document0.appendTo(element0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parse("br", "pZMX~PAw.HU#j&rH~W");
      Element element0 = document0.appendTo(document0);
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      document0.appendTo(document0);
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      Element element0 = document0.head();
      element0.html("head");
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Tag tag0 = Tag.valueOf("s+");
      FormElement formElement0 = new FormElement(tag0, "s+", (Attributes) null);
      formElement0.className();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parse("IV]j", "org.jsoup.select.Evaluator$MatchesOwn");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Document.createShell(".");
      // Undeclared exception!
      try { 
        document0.child((-4698));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = new Document("5xkgrri");
      Pattern pattern0 = Pattern.compile("", (-1122));
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Document.createShell("Insert poition out of bouds.");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = new Document("`[H");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parse("Insert postion out of boud_.", "Insert postion out of boud_.");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("Insert postion out of boud_.", true);
      document0.prependChild(xmlDeclaration0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = new Document(".");
      Pattern pattern0 = Pattern.compile(".");
      document0.getElementsByAttributeValueMatching(".", pattern0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert postion out of boud_.", "Insert postion out of boud_.");
      document0.select("#root");
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Qu.~>", "Qu.~>");
      document0.attributes();
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "head");
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert poiton outof bouds.", "Insert poiton outof bouds.");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.toString();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "MCaJu^*eDU3ldqB_b'", attributes0);
      formElement0.val("head");
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "G6Kc&&abDUFl=pW.h", attributes0);
      formElement0.val();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Tag tag0 = Tag.valueOf("s+");
      FormElement formElement0 = new FormElement(tag0, "s+", (Attributes) null);
      formElement0.toggleClass("s+");
      Element element0 = formElement0.toggleClass("s+");
      element0.toggleClass("s+");
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      FormElement formElement0 = new FormElement(tag0, "html", (Attributes) null);
      Element element0 = formElement0.toggleClass("html");
      element0.toggleClass("html");
      element0.hasClass("html");
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Insert postion out of boud_.", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Insert postion out of boud_.", attributes0);
      formElement0.toggleClass("U");
      formElement0.toggleClass("U");
      Element element0 = formElement0.toggleClass("0}ZA fq=O.U!@X");
      element0.hasClass("U");
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf(" > ", parseSettings0);
      CDataNode cDataNode0 = new CDataNode(" > ");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, " > ", attributes0);
      Element element0 = formElement0.toggleClass("");
      element0.toggleClass(" > ");
      element0.getElementsByClass("D< bao(a7 Q");
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Tag tag0 = Tag.valueOf("s+");
      FormElement formElement0 = new FormElement(tag0, "s+", (Attributes) null);
      formElement0.toggleClass("s+");
      formElement0.getElementsByClass("s+");
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      document0.text("Insert position out of bounds.");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of bounds.", "InColumnGroup");
      document0.prependText("");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parse(";H[&uJ?hq4n", ";H[&uJ?hq4n");
      Element element0 = document0.doClone(document0);
      document0.appendTo(element0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Comment comment0 = new Comment("baOm4EpD$UF3a*o[");
      Element.preserveWhitespace(comment0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Document.createShell(",&-hs]%L#]5zx)");
      document0.title(",&-hs]%L#]5zx)");
      Pattern pattern0 = Pattern.compile("sa>yim%Llj_hF0<", 239);
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Document.createShell(",&-hs]%L#]5zx)");
      document0.title(",&-hs]%L#]5zx)");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      document0.append(":gt(%d)");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      document0.append(":gt(%d)");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert postion out of boud_.", "Insert postion out of boud_.");
      Document document1 = Parser.parse("Insert postion out of boud_.", "Insert postion out of boud_.");
      document1.appendTo(document0);
      Element element0 = document0.doClone(document1);
      element0.text();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      Element element0 = document0.head();
      element0.appendTo(document0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      document0.getElementById("textarea");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!8gdR@0m60Yvy", "Qu.~>");
      Element element0 = document0.head();
      Element element1 = element0.lastElementSibling();
      element1.data();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      Element element0 = document0.doClone(document0);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      Element element0 = document0.head();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Tag tag0 = Tag.valueOf("9NR9d:");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "9NR9d:", attributes0);
      element0.parentNode = (Node) element0;
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parse("Insert poition out of bouds.", "Insert poition out of bouds.");
      document0.appendTo(document0);
      Element element0 = document0.previousElementSibling();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Document.createShell("BG}4b6");
      Element element0 = document0.head();
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(1, elements0.size());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      document0.nextElementSibling();
      assertEquals("head", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!8gdR@0m60Yvy", "Qu.~>");
      document0.siblingElements();
      assertEquals("Qu.~>", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      document0.appendTo(document0);
      document0.siblingElements();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      document0.addClass("body");
      document0.cssSelector();
      assertEquals(1, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Document.createShell("&~(#`%C!OwM");
      Node[] nodeArray0 = new Node[9];
      // Undeclared exception!
      try { 
        document0.insertChildren(3213227, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Cookie value must not be null");
      CDataNode cDataNode0 = new CDataNode("nuZU>_#sp-={7z");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "7!", attributes0);
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      Element element0 = formElement0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      assertEquals("7!", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parse(".", ".");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-457), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000066 :matches(regex) query must not + empty", "java.lang.string@0000000066 :matches(regex) query must not + empty");
      Elements elements0 = document0.previousElementSiblings();
      // Undeclared exception!
      try { 
        document0.insertChildren(53, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Document.createShell("'f");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, list0.size());
      assertEquals("'f", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "html");
      document0.prependText("5]vT(FzV");
      document0.textNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Document.createShell("Insert poiton outof bouds.");
      Element element0 = document0.doClone(document0);
      element0.before(":matchesOwn(%s)");
      element0.getElementsByIndexEquals(90);
      assertEquals(2, document0.childNodeSize());
      assertEquals("Insert poiton outof bouds.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parse("hFYl", "hFYl");
      Elements elements0 = document0.getElementsByIndexGreaterThan(32);
      assertEquals(0, elements0.size());
      assertEquals("hFYl", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      Element element0 = document0.selectFirst("head");
      assertEquals("head", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Document.createShell("lMclhT%HMoKNP5");
      document0.getElementsByTag("lMclhT%HMoKNP5");
      assertEquals(1, document0.childNodeSize());
      assertEquals("lMclhT%HMoKNP5", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Document.createShell("Insert posiion ot of bound.");
      Elements elements0 = document0.getElementsMatchingText("Insert posiion ot of bound.");
      assertEquals(0, elements0.size());
      assertEquals("Insert posiion ot of bound.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Qu.~>", "Qu.~>");
      document0.is("script");
      assertEquals(1, document0.childNodeSize());
      assertEquals("Qu.~>", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      document0.getAllElements();
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Document.createShell("nnuertpoitonoutof bods");
      Element element0 = document0.removeClass("}XW^");
      assertEquals("nnuertpoitonoutof bods", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Document.createShell("Insert poiton outof bouds.");
      // Undeclared exception!
      try { 
        document0.before(":matchesOwn(%s)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      document0.getElementsByAttribute("Rb5KAqwp");
      assertEquals("head", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "Qu.~>");
      Element element0 = document0.shallowClone();
      assertEquals("Qu.~>", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = new Document(".");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      document0.getElementsByAttributeValueContaining("org.jsoup.nodes.element", "org.jsoup.nodes.Element$NodeList");
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      Elements elements0 = document0.getElementsContainingText("textarea");
      assertEquals(1, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("", "<html>\n <head></head>\n <body></body>\n</html>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      // Undeclared exception!
      try { 
        document0.wrap("head");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("Insert poiton outof bouds.", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Insert poiton outof bouds.", attributes0);
      formElement0.getElementsByAttributeStarting("Insert poiton outof bouds.");
      assertEquals("Insert poiton outof bouds.", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Document.createShell("'f");
      // Undeclared exception!
      try { 
        document0.prependElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Document.createShell("s9");
      Elements elements0 = document0.getElementsByIndexLessThan(41);
      assertFalse(elements0.isEmpty());
      assertEquals(1, document0.childNodeSize());
      assertEquals("s9", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert postion out of boud_.", "Insert postion out of boud_.");
      // Undeclared exception!
      try { 
        document0.after("Insert postion out of boud_.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      Elements elements0 = document0.getElementsMatchingOwnText("head");
      assertEquals(1, elements0.size());
      assertEquals("head", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Document.createShell("Insert poition out of bouds.");
      Element element0 = document0.prepend("rg.jsoup.nodes.Eleme$NodeList");
      String string0 = element0.ownText();
      assertEquals(2, document0.childNodeSize());
      assertEquals("rg.jsoup.nodes.Eleme$NodeList", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("html > head", string0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!8gdR@0m60Yvy", "Qu.~>");
      document0.getElementsByAttributeValueStarting("!8gdR@0m60Yvy", "(\"tw{");
      assertEquals("Qu.~>", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parse("Insert poiton outof bouds.", "Insert poiton outof bouds.");
      document0.getElementsByAttributeValue("Insert poiton outof bouds.", "Insert poiton outof bouds.");
      assertEquals("Insert poiton outof bouds.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Cookie value must not be null");
      CDataNode cDataNode0 = new CDataNode("nuZU>_#sp-={7z");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "7!", attributes0);
      formElement0.wholeText();
      assertEquals("7!", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert postion out of boud_.", "Insert postion out of boud_.");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Element element0 = new Element("head");
      String string0 = element0.baseUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parse("Insert postion out of boud_.", "Insert postion out of boud_.");
      Elements elements0 = document0.getElementsContainingOwnText("Insert postion out of boud_.");
      assertEquals(1, elements0.size());
      assertEquals("Insert postion out of boud_.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!8gdR@0m60Yvy", "Qu.~>");
      document0.dataset();
      assertEquals("Qu.~>", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      boolean boolean0 = document0.is((Evaluator) evaluator_IsRoot0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      Element element0 = document0.appendText("");
      assertEquals("head", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Document.createShell("BG}4b6");
      Element element0 = document0.head();
      Element element1 = element0.nextElementSibling();
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
      assertEquals("BG}4b6", element1.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      document0.children();
  }
}
