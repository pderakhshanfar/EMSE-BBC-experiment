/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 21:33:43 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Document.createShell("");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add(" />");
      Element element0 = document0.classNames((Set<String>) linkedHashSet0);
      element0.getElementsByClass("j&Z@CyTsCIhl{D!+x");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000148 cp367 csascii textarea ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us", "/%vs");
      Node[] nodeArray0 = new Node[6];
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("~", "d|cBr6");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      document0.outerHtmlTail(charArrayWriter0, 122, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("DKF*SD0o&**x0", "DKF*SD0o&**x0");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Document.createShell("meta[charset]");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("fM", "fM");
      document0.doSetBaseUri("fM");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!-", "!-");
      Element element0 = document0.appendElement("!-");
      element0.wrap("!-");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("O?", "O?");
      Element element0 = document0.prependElement("br");
      element0.wrap("<br>\n<html>\n <head></head>\n <body>\n  O?\n </body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Tag tag0 = Tag.valueOf("required");
      FormElement formElement0 = new FormElement(tag0, "required", (Attributes) null);
      formElement0.siblingIndex = (int) (byte) (-114);
      formElement0.val("required");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      Element element0 = document0.body();
      element0.val("</");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Tag tag0 = Tag.valueOf("iso-ir-6");
      FormElement formElement0 = new FormElement(tag0, "~Q-p`#jW_>BDC,", (Attributes) null);
      formElement0.val("iso-ir-6");
      formElement0.val();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      document1.siblingIndex = 776;
      document0.toggleClass("tZ*)`'!V$&EXH");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("R$2McP:ZPd )OXy", "R$2McP:ZPd )OXy");
      document0.setSiblingIndex((-4521));
      document0.toggleClass("R$2McP:ZPd )OXy");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Document.createShell(",Z<qWPy,p^ ");
      Element element0 = document0.head();
      element0.toggleClass("");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      Element element0 = document0.append("tZ*)`'!V$&EXH");
      element0.parentNode = (Node) document0;
      document0.toggleClass("tZ*)`'!V$&EXH");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$IndexGreaterThan");
      Element element0 = document0.head();
      element0.text("br");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5", "5");
      Element element0 = document0.appendElement("5");
      element0.text("5");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Tag tag0 = Tag.valueOf("required");
      FormElement formElement0 = new FormElement(tag0, "required", (Attributes) null);
      formElement0.text(":containsData(");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = new Document("H^Cv<Ecd&~");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!-", "!-");
      Element element0 = document0.appendElement("!-");
      element0.tagName("v3$qS");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Element element0 = new Element("fQFTF");
      element0.tagName("body");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parse("ir", "ir");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Element element0 = new Element("source");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("e:V}3>$*Ln,$i\"Nb4$", "e:V}3>$*Ln,$i\"Nb4$");
      document0.normalise();
      Element element0 = document0.body();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = new Document("zDFg'nqnw:c2");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("H'`{58]_e", "Ma3TXFAoQy2");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf(" />", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "702a[1", attributes0);
      element0.selectFirst("EmVO9");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      document0.selectFirst("body");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parse("ir", "ir");
      document0.appendElement("ir");
      document0.selectFirst("ir");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Element element0 = new Element("ir");
      element0.html("C~r^q");
      element0.selectFirst("ir");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "ol_");
      document0.select("#root");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "");
      document0.select("head");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Element element0 = new Element("(([+-])?(d+)?)n(s*([+-])?s*d+)?");
      element0.removeClass("+");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parse("ir", "ir");
      Element element0 = document0.appendElement("ir");
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("f@MM", "f@MM");
      Element element0 = document0.body();
      Element element1 = element0.removeClass("3to5/");
      element1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = new Document("i_-ir,6");
      document0.setSiblingIndex((-1));
      document0.prependText("i_-ir,6");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("f@MM", "f@MM");
      Element element0 = document0.body();
      element0.prependText("");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!-", "!-");
      Element element0 = document0.appendElement("!-");
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Element element0 = new Element("form");
      DataNode dataNode0 = new DataNode("        ");
      element0.prependChild(dataNode0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#", "#");
      document0.setSiblingIndex((-602));
      document0.prepend("~");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parse("tag name must not be empty. cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us", "tag name must not be empty. cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      Element element0 = document0.head();
      element0.prepend("tag name must not be empty. cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5", "5");
      Element element0 = document0.appendElement("5");
      element0.prepend("5");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("f@MM", "f@MM");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(";X:W27|=3KVzC#'^\"#N", "");
      document0.appendTo(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.QueryParser", "=,v/q");
      Element element0 = document0.body();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = new Document("z7m.e\"p+zx-vp>{,y>m");
      document0.reparentChild(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5", "5");
      Element element0 = document0.appendElement("5");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      Element element0 = document0.append("tZ*)`'!V$&EXH");
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = new Document("R+Uk.");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("}iso-ir-6", "}iso-ir-6");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      Element element0 = document0.body();
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.reparentChild(document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Document.createShell("+");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Element element0 = new Element("fQFTF");
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText((String) null);
      element0.is((Evaluator) evaluator_ContainsOwnText0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("f@MM", "f@MM");
      Pattern pattern0 = Pattern.compile("br");
      Evaluator.MatchesOwn evaluator_MatchesOwn0 = new Evaluator.MatchesOwn(pattern0);
      document0.is((Evaluator) evaluator_MatchesOwn0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parse("ir", "ir");
      Element element0 = document0.appendElement("ir");
      element0.is("ir");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = new Document("");
      Node[] nodeArray0 = new Node[0];
      document0.insertChildren((-1), nodeArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ)`'!V$&EXH", "tZ)`'!V$&EXH");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren((-1), nodeArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!-", "!-");
      Element element0 = document0.appendElement("!-");
      Elements elements0 = document0.parents();
      element0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ)`'!V$&EXH", "tZ)`'!V$&EXH");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("java.lang.string@0000000038 3to5/ csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      document0.html((Appendable) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = new Document("py,xzL!)|k`<m}h=!");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Element element0 = new Element("form");
      element0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("x[IVIV(_.", "org.jsoup.nodes.Element$2");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      Pattern pattern0 = Pattern.compile("6yKd");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("u", "u");
      Pattern pattern0 = Pattern.compile("u");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Document.createShell("fZw9aA9l^");
      document0.getElementsMatchingText(" > ");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Cqctjhg.1U", "br");
      Pattern pattern0 = Pattern.compile("Cqctjhg.1U");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parse("ir", "ir");
      document0.getElementsMatchingOwnText("ir");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("CONTINUE", "CONTINUE");
      document0.getElementsContainingOwnText("CONTINUE");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      document0.getElementsByTag(":DfJH!L)+V}'");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Element element0 = new Element("U7G-W7-[|*M&Nn9N/");
      element0.getElementsByTag("U7G-W7-[|*M&Nn9N/");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parse("required", "java.lang.string@0000000048 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      document0.getElementsByIndexLessThan(120);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Document.createShell("LK%yxLLq':Uv");
      document0.getElementsByIndexGreaterThan((-2523));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Document.createShell("isoir-");
      document0.getElementsByIndexEquals(32);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      document0.getElementsByAttributeValueNot("                ", "                ");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("0]E9QTARP>", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("l_", ".QucPg_tFp^*");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "0]E9QTARP>", attributes1);
      formElement0.getElementsByAttributeValueMatching("l_", "");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsByAttributeValueContaining("+Q>Z9_1`0oB,Q,O_P.", "+Q>Z9_1`0oB,Q,O_P.");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parse("ir", "ir");
      document0.attr("ir", "ir");
      document0.getElementsByAttributeValue("ir", "ir");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@dUj>", "@dUj>");
      Element element0 = document0.attr("org.jsoup.nodes.Element$2", true);
      element0.getElementsByAttributeStarting("org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      document0.getElementsByAttribute("tZ*)`'!V$&EXH");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("RCDATAEndTagName", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put(":containsOwn", ":containsOwn");
      Element element0 = new Element(tag0, "RCDATAEndTagName", attributes1);
      element0.getElementsByAttribute(":containsOwn");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parse("ir", "ir");
      Element element0 = document0.prependElement("br");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parse("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      Element element0 = document0.head();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5", "5");
      Element element0 = document0.appendElement("5");
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Document.createShell("tZ)`'!V$&EXH");
      Element element0 = document0.head();
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("tZ)`'!V$&EXH", "?&@", false);
      element0.doClone(xmlDeclaration0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Document.createShell(" zisy-irV6");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Element element0 = new Element("form");
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Document.createShell("html");
      Element element0 = document0.createElement("/");
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Document.createShell("");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      document0.setSiblingIndex((-43));
      document0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000076 cp367 csascii iso-ir-6 3to5/ iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us", "]&Fov|puJQg)R[xjZ_");
      Element element0 = document0.body();
      Locale locale0 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parse("ir", "ir");
      Element element0 = document0.prependElement("br");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      document0.toggleClass("tZ*)`'!V$&EXH");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("iso_646.irv:1991", "declare");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      Element element0 = document0.classNames(set0);
      element0.className();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Tag tag0 = Tag.valueOf("'Rm");
      Element element0 = new Element(tag0, "|P^OL{gnO?YAj:C~w");
      element0.children();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Element element0 = new Element("$=");
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Document.createShell("html");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("f@MM", "f@MM");
      Element element0 = document0.body();
      element0.wrap("allowfullscreen");
      element0.before((Node) element0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Document.createShell("S(:.cB9<}8h8");
      Element element0 = document0.prependElement("qH0^(7&Vk4WCFx#");
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5", "5");
      Element element0 = document0.appendElement("5");
      element0.before("java.lang.string@0000000038 cp367 csascii iso-ir-6 3to5/ iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("f@MM", "f@MM");
      Element element0 = document0.body();
      element0.before("t{VCfy1Kz2eqH]|Lt");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Element element0 = new Element("d@~-MO#");
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".", ".");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Document.createShell("+");
      Element element0 = document0.head();
      element0.attr("F*,:-*KUQ}Kl", true);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(";X:W27|=3KVzC#'^\"#N", "");
      document0.appendTo(document0);
      document0.attr("", false);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Tag tag0 = Tag.valueOf("script");
      FormElement formElement0 = new FormElement(tag0, "Insert position out of bounds.", (Attributes) null);
      formElement0.attr(":has(", "i");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parse("ir", "ir");
      Element element0 = document0.appendElement("ir");
      element0.attr("ir", "ir");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5", "5");
      Element element0 = document0.appendElement("5");
      element0.appendText("kbd");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Document.createShell("LK%yxLLq':Uv");
      Element element0 = document0.head();
      element0.appendText("html");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Document.createShell("meta[charset]");
      document0.appendElement("li");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Document.createShell(",Z<qWPy,p^ ");
      Element element0 = document0.head();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ)`'!V$&EXH", "tZ)`'!V$&EXH");
      document0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("f@MM", "f@MM");
      Element element0 = document0.body();
      element0.append("3to5/");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("2'", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "2'", attributes0);
      pseudoTextElement0.append("");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.QueryParser", "=,v/q");
      Element element0 = document0.body();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("form", "/@xA~M~#6");
      Element element0 = document0.head();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$IndexGreaterThan");
      Element element0 = document0.head();
      element0.after("W5Zap+^lKXn");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!-", "!-");
      Element element0 = document0.appendElement("!-");
      element0.after("!-");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.QueryParser", "=,v/q");
      Element element0 = document0.body();
      element0.after("iso-ir-6");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("required", "required");
      Element element0 = document0.body();
      element0.addClass("daJ4CxOZN62~VAF");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Element element0 = new Element("d@~-MO#");
      element0.addClass("d@~-MO#");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Document.createShell("iso-ir-6");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.wrap("vH Krn>s$");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Tag tag0 = Tag.valueOf("'Rm");
      Element element0 = new Element(tag0, "|P^OL{gnO?YAj:C~w");
      CDataNode cDataNode0 = new CDataNode("|P^OL{gnO?YAj:C~w");
      Element element1 = element0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element1.wrap("RawtextEndTagName");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      Element element0 = document0.append("tZ*)`'!V$&EXH");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      element0.val("')");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("dr", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("[", true);
      Attributes attributes2 = attributes1.put("(Wr8O7Tf q", "Z'jum 51~^S=-D:YJ^");
      Attributes attributes3 = attributes2.clone();
      String[] stringArray0 = new String[1];
      attributes3.keys = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "[", attributes3);
      // Undeclared exception!
      try { 
        formElement0.val("class");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = new Document("tZ*)`'!V$&EXH");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = new Document("5");
      // Undeclared exception!
      try { 
        document0.text("5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("|tKNKA-l?kL1*`p]eu");
      Document document0 = parser0.parseInput((Reader) stringReader0, "3^m@% ~&09)D:");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parse("ir", "ir");
      Element element0 = document0.appendElement("ir");
      element0.siblingIndex = (-3717);
      // Undeclared exception!
      try { 
        element0.text();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      Element element0 = document0.append("tZ*)`'!V$&EXH");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      element0.tagName("kD");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Document.createShell("\"9OIw0TY/");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Document.createShell("iso-ir-6");
      document0.html("form");
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parse("required", "java.lang.string@0000000048 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      TextNode textNode0 = TextNode.createFromEncoded("org.jsoup.select.QueryParser");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.selectFirst("2$,,");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '2$,,': unexpected token at '$,,'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ)`'!V$&EXH", "tZ)`'!V$&EXH");
      // Undeclared exception!
      try { 
        document0.select("tZ)`'!V$&EXH");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'tZ)`'!V$&EXH': unexpected token at ')`'!V$&EXH'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Document.createShell("tZ*)`'!V$&EXH");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("z7m.e\"p+zx-vp>{,y>m", "z7m.e\"p+zx-vp>{,y>m");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("ba(E>Tl:sh;$)_{j", true);
      document0.parentNode = (Node) xmlDeclaration0;
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Element element0 = new Element("}e2BSV:;_Y%xKl");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("textarea", "ni'r", false);
      element0.parentNode = (Node) xmlDeclaration0;
      // Undeclared exception!
      try { 
        element0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("body", "body");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("r", "d|cBr6");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.prependElement("7owyq");
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Document.createShell("C>6Hw,qBjI");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-792));
      List<Node> list0 = Parser.parseFragment("body", (Element) document0, "C>6Hw,qBjI", parseErrorList0);
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.prependElement("C>6Hw,qBjI");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document0 = parser1.parseInput("", "");
      // Undeclared exception!
      try { 
        document0.prependElement("E9My/!7d*XG(|[\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.prependElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("QT(8s", "java.lang.string@0000000038 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 </");
      Comment comment0 = new Comment("java.lang.string@0000000038 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 </", "QT(8s");
      Element element0 = document0.doClone(comment0);
      // Undeclared exception!
      try { 
        document0.prependChild(element0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Tag tag0 = Tag.valueOf("!-");
      FormElement formElement0 = new FormElement(tag0, ";>[kzB*<'7-q=_,O", (Attributes) null);
      CDataNode cDataNode0 = new CDataNode("2r>Pr");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.prependChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      Element element0 = document0.append("tZ*)`'!V$&EXH");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.prepend("#=TuCQE(^O_");
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("fM", "fM");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("jtW.^e_");
      Document document0 = parser0.parseInput((Reader) stringReader0, "kbd");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("kbd", true);
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document0.prepend("<!kbd!>");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parse("required", "java.lang.string@0000000048 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      TextNode textNode0 = TextNode.createFromEncoded("org.jsoup.select.QueryParser");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.parents();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parse("ir", "ir");
      DataNode dataNode0 = new DataNode("ir");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.parent();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ni-r", "ni-r");
      StringBuilder stringBuilder0 = new StringBuilder("e;Y}LSAQK?G@hAWB");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(1971);
      // Undeclared exception!
      document0.outerHtmlTail(stringBuilder0, 143, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 1, 1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 60, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Document.createShell("iso-ir-6");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charArrayWriter0, 2147483645, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Document.createShell("WJirHUwf~#}r|1LC]");
      StringBuilder stringBuilder0 = new StringBuilder("atTq\"0/G~Y9rVdYz__V");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(stringBuilder0, (-2055), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parse("", "~");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlTail(pipedWriter0, 46, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "textarea", (Attributes) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter("textarea");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      document_OutputSettings1.indentAmount(60);
      // Undeclared exception!
      formElement0.outerHtmlHead(bufferedWriter0, 2220, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = new Document("R+Uk.");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "@0mt&l9Yfmd9)^");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 392, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      MockFile mockFile0 = new MockFile("tZ*)`'!V$&EXH", ";Fk;hOhs<#p9f");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockPrintStream0, 3762, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Document.createShell("meta[charset]");
      StringBuilder stringBuilder0 = new StringBuilder("meta[charset]");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(stringBuilder0, (-114), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = new Document("is_-ir,6");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlHead(pipedWriter0, 65, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = new Document("ir");
      DataNode dataNode0 = new DataNode("ir", "ir");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.nextElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("jtW.^e_");
      Document document0 = parser0.parseInput((Reader) stringReader0, "kbd");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("kbd", true);
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document0.nextElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Document.createShell("U)uZTXIo,J-O]:ps*CF");
      document0.appendTo(document0);
      Evaluator.Tag evaluator_Tag0 = new Evaluator.Tag("6");
      // Undeclared exception!
      document0.is((Evaluator) evaluator_Tag0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = new Document("textarea");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("3/", parseSettings0);
      Element element0 = new Element(tag0, "3/");
      TextNode textNode0 = TextNode.createFromEncoded("html");
      element0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        element0.is((Evaluator) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.TextNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$IndexGreaterThan");
      // Undeclared exception!
      try { 
        document0.is("org.jsoup.select.Evaluator$AllElements");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.select.Evaluator$AllElements': unexpected token at '$AllElements'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.is("#document");
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000039 cp367 csascii iso-ir-6 )gsyw iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 io646-us ibm367 646 us");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = parser0.parseFragmentInput("", document0, "KR\"HgL~Y");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), (Collection<? extends Node>) list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      Element element0 = document0.append("tZ*)`'!V$&EXH");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.html("tZ*)`'!V$&EXH");
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      List<Node> list0 = Parser.parseFragment("head", (Element) document0, " E!<UU<?If3z$b6", parseErrorList0);
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.html("abrt.6q/yn_m3{xxv");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Document.createShell("iso-ir-6");
      document0.reparentChild(document0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      document0.html((Appendable) charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("required", "required");
      Charset charset0 = document0.charset();
      byte[] byteArray0 = new byte[7];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ)`'!V$&EXH", "tZ)`'!V$&EXH");
      // Undeclared exception!
      try { 
        document0.html((CharArrayWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("fZw9aA9l^", "fZw9aA9l^");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Document.createShell("fZw9aA9l^");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parse("iso-ir-6", "iso-ir-6");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("tZ*)`'!V$&EXH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: tZ*)`'!V$&EXH
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000076 cp367 csascii iso-ir-6 3to5/ iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us", "]&Fov|puJQg)R[xjZ_");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("]&Fov|puJQg)R[xjZ_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: ]&Fov|puJQg)R[xjZ_
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000008 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 ir", "4@vg?]YI yk#.6'y");
      CDataNode cDataNode0 = new CDataNode("ir");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("java.lang.string@0000000008 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 ir");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5", "5");
      Element element0 = document0.appendElement("5");
      element0.siblingIndex = (-1705);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("5");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("B>JVf!T]]h{", "multiple");
      Element element0 = document0.appendElement("/oW/wZ&");
      List<Node> list0 = document0.childNodesCopy();
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.getElementsContainingText("multiple");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("is_-ir,6", "is_-ir,6");
      CDataNode cDataNode0 = new CDataNode("/A;iev\" :/");
      cDataNode0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("WpB:33]");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parse("i-r6", "i-r6");
      document0.setSiblingIndex((-66));
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("i-r6");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Document.createShell("0ie/r");
      Element element0 = document0.prependElement("br");
      element0.setSiblingIndex((-301));
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("0ie/r");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("z7m.e\"p+zxvp>{,y>m", "z7m.e\"p+zxvp>{,y>m");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexLessThan(254);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Document.createShell("iso-ir-6");
      document0.siblingIndex = (-544);
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.getElementsByIndexLessThan((-11));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexEquals(138);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Document.createShell("ir");
      CDataNode cDataNode0 = new CDataNode("ir");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.getElementsByIndexEquals((-1929));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Document.createShell("meta[charset]");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      element0.siblingIndex = (-4415);
      // Undeclared exception!
      try { 
        document0.getElementsByClass("org.jsoup.select.Evaluator$Id");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("2'", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "2'", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsByAttributeValueStarting((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("<html>\n <head></head>\n <body>\n  tZ*)`'!V$&amp;EXH\n </body>\n</html>", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      Document document1 = (Document)document0.append("tZ*)`'!V$&EXH");
      document1.setSiblingIndex((-389));
      document1.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueNot("4!PTu>Ov#^ZiI)2", "#root");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Document.createShell(":prev*%s");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("aGL>x", "org.jsoup.nodes.Element$NodeList");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("", "ti0y(ApQu1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: ti0y(ApQu1
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("fZw9aA9l^", "fZw9aA9l^");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("l~zS&U81},Mq5M", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("NR^=", "NR^=");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", "`{P66oO]W1C5^Rb,*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = new Document("Children collection to be inserted must not be null.");
      Element element0 = document0.createElement("{bd$@Yan");
      element0.appendTo(document0);
      element0.setSiblingIndex((-1432352094));
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueContaining("{bd$@Yan", "'X\"F;-w;5zqesc<)1W:");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parse("py,xzL!)|k`<m}h=!", "^D){dc[[P`LL%");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementById("Tag name must not be empty.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = new Document("Dx8z/:czun@|]CYd|j");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Document.createShell(" zisy-irV6");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Document.createShell("iso-ir-6");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = new Document(")u(I");
      Comment comment0 = new Comment(")u(I");
      document0.setParentNode(comment0);
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZR*g`'!V$&EXH", "tZR*g`'!V$&EXH");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Pattern syntax error: ", "option[selected]");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = new Document("i_-ir,6");
      // Undeclared exception!
      try { 
        document0.child(22);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 22, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Element element0 = new Element("(([+-])?(d+)?)n(s*([+-])?s*d+)?");
      // Undeclared exception!
      try { 
        element0.child((-367));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = new Document("#root");
      CDataNode cDataNode0 = new CDataNode("VW");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.before((Node) document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("f@MM", "f@MM");
      Element element0 = document0.body();
      element0.setSiblingIndex(133);
      // Undeclared exception!
      try { 
        element0.before((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 133, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      Document document1 = (Document)document0.append("tZ*)`'!V$&EXH");
      document1.parentNode = (Node) document1;
      // Undeclared exception!
      document1.before("WfPyOHjo]{w#UA&");
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("zlGR", "zlGR");
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("fZw9aA9l^", "fZw9aA9l^");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.attr("html", "SYSTEM");
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      // Undeclared exception!
      try { 
        document0.attr((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = new Document("d2i.uha");
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Document.createShell("iso-i-6");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(2510);
      List<Node> list0 = Parser.parseFragment("EndTag", (Element) document0, "input", parseErrorList0);
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendText("java.lang.string@0000000066 cp367 declare iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("i-r6", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "i-r6", attributes0);
      // Undeclared exception!
      try { 
        formElement0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      Element element0 = document0.append("tZ*)`'!V$&EXH");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.appendElement("<html>\n <head></head>\n <body>\n  tZ*)`'!V$&amp;EXH\n </body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("is_-ir,6", "is_-ir,6");
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = parser0.parseFragmentInput("is_-ir,6", document0, "is_-ir,6");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendElement("is_-ir,6");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("org.jsoup.helper.Validate", " > ");
      parser0.settings((ParseSettings) null);
      // Undeclared exception!
      try { 
        document0.appendElement("AfterAttributeName");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000039 cp367 csascii iso-ir-6 )gsyw iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 io646-us ibm367 646 us");
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.appendChild(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must not be null.", "5J8=US~u7ea");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(";X:W27|=3KVzC#'^\"#N", "");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.append("!td?}3wB|");
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Element element0 = new Element("(([+-])?(d+)?)n(s*([+-])?s*d+)?");
      // Undeclared exception!
      try { 
        element0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Document.createShell("iso-ir-6");
      CDataNode cDataNode0 = new CDataNode("iso-ir-6");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.append("iso-ir-6");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("fZw9aA9l^", "fZw9aA9l^");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.after("fZw9aA9l^");
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.body();
      document0.reparentChild(element0);
      // Undeclared exception!
      try { 
        element0.after("[iY%d9Y9b|U1J#");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Tag tag0 = Tag.valueOf("script");
      FormElement formElement0 = new FormElement(tag0, "Insert position out of bounds.", (Attributes) null);
      DocumentType documentType0 = new DocumentType("e{3J>S R\"/EFUA>+=;", "BPq=JS%39F*", "rtqih5h0|e!q8c", "#", "wQ");
      formElement0.parentNode = (Node) documentType0;
      // Undeclared exception!
      try { 
        formElement0.after("e{3J>S R\"/EFUA>+=;");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Document.createShell("tZ)`'!V$&EXH");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "o_[pk", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "html");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Tag tag0 = Tag.valueOf("c/L/dB(>P>O");
      FormElement formElement0 = new FormElement(tag0, "String input must not be null", (Attributes) null);
      formElement0.html((CharArrayWriter) null);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = new Document("is_-ir,6");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Element element0 = document0.classNames(set0);
      element0.hasClass("is_-ir,6");
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("iso-ir-6", "iso-ir-6");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
      document0.hasClass("iso-ir-6");
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("O?", "O?");
      document0.hasClass("br");
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("iso-ir-6", "iso-ir-6");
      DocumentType documentType0 = new DocumentType("iso-ir-6", "iso-ir-6", "Hkp!:ElQz\"u`9");
      document0.prependChild(documentType0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Document.createShell("meta[charset]");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Document.createShell("iso-i-6");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(2510);
      List<Node> list0 = Parser.parseFragment("EndTag", (Element) document0, "input", parseErrorList0);
      document0.childNodes = list0;
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Element element0 = new Element("d@~-MO#");
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5", "5");
      Element element0 = document0.appendElement("5");
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Document.createShell("'e]|Rz<w\"p@7e");
      Element element0 = document0.head();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parse("ir", "ir");
      Element element0 = document0.appendElement("ir");
      Element element1 = element0.doClone(document0);
      element1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000076 cp367 csascii iso-ir-6 3to5/ iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us", "]&Fov|puJQg)R[xjZ_");
      Element element0 = document0.body();
      element0.html("VCcMglE|k#");
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      document0.classNames(set0);
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("B>JVf!T]]h{", "multiple");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("iso_646.irv:1991", "declare");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5", "5");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!-", "!-");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = new Document("zDFg'nqnw:c2");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5", "5");
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!-", "!-");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000039 cp367 csascii iso-ir-6 )gsyw iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 io646-us ibm367 646 us");
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      // Undeclared exception!
      try { 
        document0.is((Evaluator) evaluator_IsRoot0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Tag tag0 = Tag.valueOf("required");
      FormElement formElement0 = new FormElement(tag0, "required", (Attributes) null);
      formElement0.getElementsByAttributeValueMatching("required", (Pattern) null);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parse("ir", "ir");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Document.createShell("S(:.cB9<}8h8");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("DKF*SD0o&**x0", "DKF*SD0o&**x0");
      document0.title("DKF*SD0o&**x0");
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "textarea", (Attributes) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter("textarea");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      formElement0.outerHtmlHead(bufferedWriter0, 2220, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Element element0 = new Element("source");
      element0.prependElement("source");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        element0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      Element element0 = new Element(tag0, "br");
      element0.toString();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("O?", "O?");
      document0.prependElement("br");
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must not be null.", "5J8=US~u7ea");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.html();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      FormElement formElement0 = new FormElement(tag0, "AfterHead", (Attributes) null);
      formElement0.val("bdo");
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "SKIP_ENTIRELY", attributes0);
      formElement0.val();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("iso-ir-6", "iso-ir-6");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Element element0 = document0.classNames(set0);
      element0.toggleClass("iso-ir-6");
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Document.createShell("^@");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("java.lang.string@0000000146 cp367 csascii textarea ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      linkedHashSet0.add("^@");
      document0.classNames((Set<String>) linkedHashSet0);
      document0.hasClass("^@");
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Document.createShell("");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("java.lang.string@0000000146 cp367 csascii textarea ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      linkedHashSet0.add("");
      document0.classNames((Set<String>) linkedHashSet0);
      document0.getElementsByClass(" IM7z,{U");
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parse("-g", "iso-ir-6");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("AttributeName");
      linkedHashSet0.add("$usEyDOf(G7M,:Eq");
      linkedHashSet0.add("8Qsg:[`57");
      Element element0 = document0.classNames((Set<String>) linkedHashSet0);
      element0.getElementsByClass("$usEyDOf(G7M,:Eq");
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Document.createShell("");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("java.lang.string@0000000146 cp367 csascii textarea ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      linkedHashSet0.add("");
      linkedHashSet0.add((String) null);
      Element element0 = document0.classNames((Set<String>) linkedHashSet0);
      element0.getElementsByClass("org.jsoup.select.Evaluator$Id");
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
      document0.hasClass("<html>\n <head></head>\n <body>\n  tZ*)`'!V$&amp;EXH\n </body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000038 cp367 csascii frameset ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us", "java.lang.string@0000000038 cp367 csascii frameset ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Element element0 = document0.classNames(set0);
      element0.hasClass("java.lang.string@0000000038 cp367 csascii frameset ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000008 cp367 csascii is_-ir,6 ascii iso_646.irv1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us bm367 646 us", "java.lang.string@0000000008 cp367 csascii is_-ir,6 ascii iso_646.irv1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us bm367 646 us");
      Comment comment0 = new Comment("br", "java.lang.string@0000000008 cp367 csascii is_-ir,6 ascii iso_646.irv1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us bm367 646 us");
      document0.prependChild(comment0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("iso-ir-6", "iso-ir-6");
      DocumentType documentType0 = new DocumentType("iso-ir-6", "iso-ir-6", "Hkp!:ElQz\"u`9");
      document0.prependChild(documentType0);
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parse("|", "java.lang.string@0000000076 3to5/ csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      document0.html("          ");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("br");
      Element.preserveWhitespace(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("i6", "i6");
      document0.prependElement("br");
      Pattern pattern0 = Pattern.compile(".ngpa0=f4]khro&;o", 46);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parse("i-r6", "i-r6");
      document0.reparentChild(document0);
      CDataNode cDataNode0 = new CDataNode("hwLF99$~ g$);9y`O'");
      document0.after((Node) cDataNode0);
      document0.getElementsContainingText("i-r6");
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("iso-ir-6", "iso-ir-6");
      document0.title("iso-ir-6");
      document0.getElementsContainingText("iso-ir-6");
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parse("ir", "ir");
      DataNode dataNode0 = new DataNode("ir");
      document0.appendChild(dataNode0);
      document0.getElementsMatchingOwnText(";");
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Document.createShell("R$2McP:ZPd )OXy");
      Element element0 = document0.append("R$2McP:ZPd )OXy");
      element0.prependText("R$2McP:ZPd )OXy");
      element0.getElementsContainingText("R$2McP:ZPd )OXy");
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("'|}7|0", "br");
      document0.appendElement("br");
      document0.getElementsContainingText("g9oEgEz0");
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5", "5");
      document0.appendElement("5");
      document0.getElementsContainingText("r>S%Re|\u0003LYm_/}!(4e");
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      DocumentType documentType0 = new DocumentType("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH", "org.jsoup.nodes.Element$NodeList", "<html>\n <head></head>\n <body>\n  tZ*)`'!V$&amp;EXH\n </body>\n</html>", (String) null);
      document0.prependChild(documentType0);
      document0.getElementsContainingText("tZ*)`'!V$&EXH");
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("iso-ir-6", "iso-ir-6");
      document0.getElementById("Aig/KTZ{k");
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parse("+bsB6RwZLSteP", "?-*w}xb:i");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      Element element0 = document0.append("tZ*)`'!V$&EXH");
      element0.parentNode = (Node) document0;
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Document.createShell("iso-ir-6");
      Element element0 = document0.appendElement("iso-ir-6");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Document.createShell("iso-ir-6");
      document0.reparentChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("cp367", "head");
      Element element0 = document0.appendElement("]A!dN");
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Document.createShell("*so-i-6");
      document0.reparentChild(document0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parse("iso-ir-6", "iso-ir-6");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000038 cp367 csascii frameset ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us", "java.lang.string@0000000038 cp367 csascii frameset ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tZ)`'!V$&EXH", "tZ)`'!V$&EXH");
      Element element0 = document0.head();
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
      assertEquals("tZ)`'!V$&EXH", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      document0.siblingElements();
      assertEquals("tZ*)`'!V$&EXH", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("f@MM", "f@MM");
      Element element0 = document0.body();
      Element element1 = element0.removeClass("org.jsoup.select.Evaluator$ContainsData");
      element0.wrap("allowfullscreen");
      element1.cssSelector();
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("#root", element0.baseUri());
      assertEquals("html > head", string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ir", "ir");
      Element element0 = document0.appendElement("ir");
      Element element1 = element0.appendElement("rr0%ui7ed");
      // Undeclared exception!
      try { 
        element1.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'rr0%ui7ed': unexpected token at '%ui7ed'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Document.createShell("iso-ir-6");
      document0.reparentChild(document0);
      String string0 = document0.cssSelector();
      assertEquals(1, document0.childNodeSize());
      assertEquals("iso-ir-6", document0.baseUri());
      assertEquals("#root", string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("iso_646.irv:1991", "declare");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      Element element0 = document0.classNames(set0);
      element0.cssSelector();
      assertEquals("declare", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Node[] nodeArray0 = new Node[5];
      // Undeclared exception!
      try { 
        document0.insertChildren((-2655), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("fZw9aA9l^", "fZw9aA9l^");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren(48, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = new Document("Dx8z/:czun@|]CYd|j");
      LinkedList<PseudoTextElement> linkedList0 = new LinkedList<PseudoTextElement>();
      // Undeclared exception!
      try { 
        document0.insertChildren(2147483645, (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Document.createShell("meta[charset]");
      Elements elements0 = document0.getElementsByAttributeValueEnding("svg", "svg");
      // Undeclared exception!
      try { 
        document0.insertChildren((-2699), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000039 cp367 csascii iso-ir-6 )gsyw iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 io646-us ibm367 646 us");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = parser0.parseFragmentInput("", document0, "KR\"HgL~Y");
      Document document1 = (Document)document0.insertChildren((-1), (Collection<? extends Node>) list0);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      LinkedHashSet<CDataNode> linkedHashSet0 = new LinkedHashSet<CDataNode>();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      assertEquals("tZ*)`'!V$&EXH", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5", "5");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("5", document0.baseUri());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("f@MM", "f@MM");
      Element element0 = document0.body();
      List<TextNode> list0 = element0.textNodes();
      assertEquals("f@MM", element0.baseUri());
      assertFalse(list0.isEmpty());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("f@MM", "f@MM");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(1, document0.childNodeSize());
      assertEquals("f@MM", document0.baseUri());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Document.createShell("iso-ir-6");
      document0.html("form");
      document0.reparentChild(document0);
      document0.nextElementSibling();
      assertEquals("iso-ir-6", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      Elements elements0 = document0.getElementsByIndexGreaterThan(10);
      assertEquals("tZ*)`'!V$&EXH", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parse("3to5/", "Tag name must not be empty.");
      Elements elements0 = document0.getElementsMatchingText("3to5/");
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "head");
      document0.getAllElements();
      assertEquals("head", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5", "5");
      // Undeclared exception!
      try { 
        document0.before("java.lang.string@0000000038 cp367 csascii iso-ir-6 3to5/ iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = new Document("tZ*)`'!V$&EXH");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = new Document("zDFg'nqnw:c2");
      document0.getElementsByAttributeValueNot("8sDsBs,W%) i$)Dw", "zDFg'nqnw:c2");
      assertEquals("zDFg'nqnw:c2", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Parser.parse("3to5/", "3to5/");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("H'`{58]_e", "Ma3TXFAoQy2");
      Element element0 = document0.shallowClone();
      assertEquals("Ma3TXFAoQy2", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!-", "!-");
      Element element0 = document0.clone();
      assertNotSame(element0, document0);
      assertEquals("!-", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("form", "/@xA~M~#6");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000154 cp367 csascii textarea ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("java.lang.string@0000000154 cp367 csascii textarea ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Parser.parse("ir", "ir");
      document0.is("ir");
      assertEquals("ir", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Parser.parse("ir", "ir");
      document0.getElementsByAttributeValueMatching(";", "ir");
      assertEquals("ir", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tZ)`'!V$&EXH", "tZ)`'!V$&EXH");
      Elements elements0 = document0.getElementsByIndexEquals(1);
      assertEquals(1, elements0.size());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tZ)`'!V$&EXH", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.QueryParser", "=,v/q");
      document0.getElementsByAttributeStarting("iso-ir-6");
      assertEquals("=,v/q", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = Parser.parse("ir", "ir");
      Element element0 = document0.prependElement("ol");
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("ir", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Document document0 = Document.createShell("iso-ir-6");
      Elements elements0 = document0.getElementsByIndexLessThan((-11));
      assertEquals("iso-ir-6", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!-", "!-");
      // Undeclared exception!
      try { 
        document0.after("!-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Tag tag0 = Tag.valueOf("required");
      FormElement formElement0 = new FormElement(tag0, "required", (Attributes) null);
      Element element0 = formElement0.prepend("");
      assertEquals("required", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Document document0 = Parser.parse("iso-ir-6", "iso-ir-6");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("2'", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "2'", attributes0);
      pseudoTextElement0.getElementsByAttributeValueStarting("zH", "textarea");
      assertEquals("2'", pseudoTextElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Document document0 = Parser.parse("|", "java.lang.string@0000000076 3to5/ csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      Elements elements0 = document0.getElementsByAttributeValue("class", "java.lang.string@0000000076 3to5/ csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Tag tag0 = Tag.valueOf("required");
      FormElement formElement0 = new FormElement(tag0, "required", (Attributes) null);
      Element element0 = formElement0.attr("required", true);
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueMatching("required", (Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$AttributeWithValueMatching", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      document0.wholeText();
      assertEquals(1, document0.childNodeSize());
      assertEquals("Pattern syntax error: ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Document document0 = Document.createShell("S(:.cB9<}8h8");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Element element0 = new Element("source");
      Elements elements0 = element0.getElementsContainingOwnText("source");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZ*)`'!V$&EXH", "tZ*)`'!V$&EXH");
      document0.dataset();
      assertEquals("tZ*)`'!V$&EXH", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Document document0 = Parser.parse("(p7;rzry9:k", "(p7;rzry9:k");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tZR*g`'!V$&EXH", "tZR*g`'!V$&EXH");
      Element element0 = document0.tagName("radio");
      assertEquals("tZR*g`'!V$&EXH", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!-", "!-");
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.child(0);
      assertEquals("!-", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Document document0 = Document.createShell("*so-i-6");
      document0.previousElementSiblings();
      assertEquals("*so-i-6", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Document document0 = Parser.parse("(p7;rzry9:k", "(p7;rzry9:k");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Document document0 = Document.createShell("LK%yxLLq':Uv");
      document0.appendText("html");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("O?", "O?");
      // Undeclared exception!
      try { 
        document0.wrap("<br>\n<html>\n <head></head>\n <body>\n  O?\n </body>\n</html>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Document document0 = new Document("#root");
      document0.nextElementSiblings();
      assertEquals("#root", document0.baseUri());
  }
}
