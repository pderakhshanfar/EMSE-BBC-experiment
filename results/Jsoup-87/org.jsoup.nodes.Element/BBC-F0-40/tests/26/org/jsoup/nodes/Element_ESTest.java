/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 21:59:15 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("/V$[t=", "Patern syntax error: ");
      Element element0 = document0.toggleClass("/V$[t=");
      element0.addClass("tag name must not be empty.");
      document0.getElementsByClass("DQ1");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("yayt{e`d3oxfrm", "[aj^*b+dg]g");
      document0.appendChild(document0);
      Element element0 = document0.empty();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s+", "s+");
      MockFile mockFile0 = new MockFile("b2eo");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlTail(mockFileWriter0, 60, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s+", "s+");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Document.createShell("v");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Document.createShell("[AJ^*b+dg]G");
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      document1.wrap("3wKjoNE/zy .t~IH");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "]@Cqz");
      Element element0 = document0.body();
      element0.wrap("p,lglyg");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parse("Patern syntax erro: ", "Patern syntax erro: ");
      document0.setSiblingIndex((-2665));
      document0.val("InCell");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Document.createShell("[AJ^*b+dg]G");
      Element element0 = document0.body();
      element0.val(" jwrO ");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Document.createShell("[AJ^*b+dg]G");
      Element element0 = document0.prependElement("L");
      element0.val(" jwrO ");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("oL{8/M&*@(%5GLX)`!v", "oL{8/M&*@(%5GLX)`!v");
      document0.siblingIndex = (-1550);
      document0.toggleClass("java.lang.string@0000000206 gq");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Patern syntax error: ", "Patern syntax error: ");
      Element element0 = document0.appendChild(document0);
      element0.toggleClass("*M6NuWffr<HO");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = new Document("br");
      document0.toggleClass("s+");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$AllElements", "org.jsoup.select.Evaluator$AllElements");
      document0.appendChild(document0);
      document0.text("sub");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Document.createShell("</");
      document0.setSiblingIndex((-4121));
      document0.text("html");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.head();
      element0.text("wZ[ybF^-p^mn/v L|");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s+", "s+");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      document0.tagName("~Wn]");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Patern syntax error: ", "Patern syntax error: ");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      Element element0 = document0.prependElement("br");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parse("T", "title");
      Element element0 = document0.body();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s+", "s+");
      Element element0 = document0.body();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("id", "id");
      Element element0 = document0.prependElement("id");
      document0.appendChild(element0);
      element0.selectFirst("id");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Element element0 = new Element("noshade");
      element0.selectFirst("noshade");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s+", "s+");
      document0.select("body");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Document.createShell("</");
      document0.setSiblingIndex((-4121));
      document0.removeClass("org.jsoup.nodes.XmlDeclaration");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parse("", "head");
      Element element0 = document0.body();
      element0.removeClass("head");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      document0.prependElement("s+");
      Element element0 = document0.appendTo(document0);
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      CDataNode cDataNode0 = new CDataNode("yc\">s,~q1");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "textarea", attributes0);
      Element.preserveWhitespace(element0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("T", "T");
      Element element0 = document0.body();
      element0.prependText("}pY1<#g");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Document.createShell("[AJ^*b+dg]G");
      document0.prependElement("title");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s+", "s+");
      Element element0 = document0.body();
      Element element1 = document0.appendTo(element0);
      element1.prependChild(element0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      Element element0 = document0.head();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s+", "s+");
      Document document1 = Parser.parseBodyFragment("s+", "s+");
      document1.appendTo(document0);
      document1.prepend("s+");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parse("lc`{gO", "lc`{gO");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s+", "s+");
      Element element0 = document0.body();
      document0.appendTo(element0);
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Document.createShell("7J]?~!Z");
      Element element0 = document0.body();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Document.createShell("[AJ^*b+dg]G");
      Document document1 = (Document)document0.appendChild(document0);
      document1.parent();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.prependElement("br");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      document0.prependText("\".rh3zys<#5&jh^pus");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[aj^*b+dg]g", "Eq");
      Document document1 = document0.clone();
      document1.appendChild(document0);
      document0.empty();
      Element element0 = document0.previousElementSibling();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parse("FRF-I~prz&4RCW", "FRF-I~prz&4RCW");
      Element element0 = document0.appendTo(document0);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|_vNqi`}85", "|_vNqi`}85");
      Element element0 = document0.body();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = new Document("[aj^*b+dg]g");
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      document0.is((Evaluator) evaluator_IsEmpty0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parse(")J\u0007r+[?M", ")J\u0007r+[?M");
      Evaluator.IsNthLastOfType evaluator_IsNthLastOfType0 = new Evaluator.IsNthLastOfType((-2555), (-1399));
      document0.is((Evaluator) evaluator_IsNthLastOfType0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a_vNi35", "a_vNi35");
      Element element0 = document0.body();
      element0.is("html > body");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "tl");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s+", "s+");
      Element element0 = document0.body();
      Elements elements0 = document0.getElementsContainingText("s+");
      element0.insertChildren((-1), (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parse("#root", "xqwDU!7uPI_-b+hGqN");
      Elements elements0 = document0.getElementsContainingText(":not(");
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("s+", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "s+", attributes0);
      formElement0.insertChildren((-1), (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      Element element0 = document0.body();
      element0.html("java.lang.string@0000000087");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("basefont", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "N8U1;+ab2]o,uUo14", attributes0);
      pseudoTextElement0.html();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      Element element0 = document0.toggleClass("Pattern syntax error: ");
      Element element1 = element0.toggleClass("o'DxO5b5x7=SFa");
      element1.hasClass("o'DxO5b5x7=SFa");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s+", "s+");
      Document document1 = (Document)document0.addClass("org.jsoup.nodes.Element$2");
      document1.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("7J]?~!Z", "u6LaW^P|[:AwBV-Zapu");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Document.createShell("[AJ^*b+dg]G");
      Pattern pattern0 = Pattern.compile("title", 6);
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("textarea");
      Document document0 = parser0.parseInput((Reader) stringReader0, "org.jsoup.nodes.Element$2");
      Pattern pattern0 = Pattern.compile("textarea", 59);
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = new Document("PUBLIC");
      Pattern pattern0 = Pattern.compile("Pattern syntax error: ", 40);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("title");
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput((Reader) stringReader0, "title");
      Pattern pattern0 = Pattern.compile("title");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("OM~s0{A'R?K,H6?(aD", "");
      document0.getElementsMatchingOwnText("3wKjoNE/zy .t~IH");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.getElementsMatchingOwnText("");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("jRVJpt sP", "jRVJpt sP");
      document0.getElementsByTag("G_m3y0w#[d/tG HUsO");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("id", "id");
      document0.getElementsByTag("html");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Tag tag0 = Tag.valueOf("epm9S&U2R{F\"mB.2F*");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "epm9S&U2R{F\"mB.2F*", attributes0);
      formElement0.getElementsByIndexLessThan((-2314));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Document.createShell("noshade");
      document0.getElementsByIndexGreaterThan(1336);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Document.createShell("[AJ^*b+dg]G");
      Element element0 = document0.toggleClass("[AJ^*b+dg]G");
      element0.addClass("br");
      element0.getElementsByClass("br");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=+{e)P+hN/x`x;!A=k", "Gextarea");
      document0.getElementsByAttributeValueStarting("=+{e)P+hN/x`x;!A=k", "8k$v&Bn3v+3S");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("f<UO'}>X^+", parseSettings0);
      Element element0 = new Element(tag0, "f<UO'}>X^+");
      element0.attr(" ", "`OnH9)am;b");
      element0.getElementsByAttributeValueMatching("", "");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "br");
      document0.getElementsByAttribute("kt(c<d@+q");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s+", "s+");
      Element element0 = document0.prependElement("s+");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("T", "T");
      Element element0 = document0.appendTo(document0);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Document.createShell("[AJ^*b+dg]G");
      Element element0 = document0.prependElement("L");
      Element element1 = element0.lastElementSibling();
      element1.empty();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Document.createShell("[AJ^*b+dg]G");
      document0.appendChild(document0);
      document0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Document.createShell("[AJ^*b+dg]G");
      Tag tag0 = Tag.valueOf("title");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "head", attributes0);
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Element element0 = new Element("s+");
      element0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Document.createShell("[AJ^*b+dg]G");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Element element0 = new Element("title");
      Set<String> set0 = element0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Patern syntax error: ", "Patern syntax error: ");
      document0.appendChild(document0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      document0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("textarea");
      Document document0 = parser0.parseInput((Reader) stringReader0, "org.jsoup.nodes.Element$2");
      document0.addClass("textarea");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n!7~ciFp]hw^g^!Se,", "n!7~ciFp]hw^g^!Se,");
      Element element0 = document0.toggleClass("eDg@9X``~7$dp");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[aj^*b+dg]g", "M");
      document0.empty();
      document0.children();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("");
      Document document0 = parser0.parseInput((Reader) stringReader0, "");
      Element element0 = document0.prependElement("zb$4yKvc,`");
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parse(")J\u0007r+[?M", ")J\u0007r+[?M");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", ":]'.1BIy");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s+", "s+");
      Element element0 = document0.body();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("id", "id");
      Element element0 = document0.prependElement("id");
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("oL{N/M&a@(%5GLX)`!v", "oL{N/M&a@(%5GLX)`!v");
      document0.parentNode = (Node) document0;
      Tag tag0 = Tag.valueOf("textarea", (ParseSettings) null);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "oL{N/M&a@(%5GLX)`!v", attributes0);
      document0.before((Node) pseudoTextElement0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Document.createShell("[AJ^*b+dg]G");
      Element element0 = document0.prependElement("L");
      element0.before("x|zQ");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = new Document("id");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("h5", "h5");
      document0.attr("3ec@=DXHU`::%~o95<a", "3ec@=DXHU`::%~o95<a");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parse("T", "title");
      Element element0 = document0.body();
      element0.attr("small", false);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Document.createShell("7");
      Element element0 = document0.prependElement("MD wKsE_[e)#>n&W3");
      element0.attr("]#t", false);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "br");
      Document document1 = Parser.parseBodyFragment("#root", "#root");
      Document document2 = (Document)document0.appendTo(document1);
      document2.attr("br", "vYx\"N`%2kE_}:}h>\"R");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Unexpectedly reached end of file (EOF) in input state [%s]", "A");
      Element element0 = document0.head();
      element0.attr("title", "title");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      document0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      Element element0 = document0.body();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parse("_H/*vuP", "strong");
      Element element0 = document0.body();
      element0.appendText("l");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parse("_H/*vuP", "strong");
      document0.appendText("l");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = new Document("s+");
      document0.appendElement("s+");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s+", "s+");
      document0.appendElement("org.jsoup.select.Evaluator$ContainsOwnText");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|", "|");
      document0.appendElement("head");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      Element element0 = document0.body();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s+", "s+");
      Element element0 = document0.body();
      element0.append("s+");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("il", "il");
      Element element0 = document0.prependElement("il");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parse("nl>n;", "Pattern syntax error: ");
      Element element0 = document0.body();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parse("nl>n;", "Pattern syntax error: ");
      Element element0 = document0.body();
      element0.after("[AJ^*b+dg]G");
      element0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "br");
      Element element0 = document0.prependElement("br");
      element0.after("#root");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("yayt{e`d3oxfrm", "[aj^*b+dg]g");
      document0.empty();
      document0.addClass("[aj^*b+dg]g");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("yayt{e`d3oxfrm", "[aj^*b+dg]g");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.wrap("[aj^*b+dg]g");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[aj^*b+dg]g", "[aj^*b+dg]g");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.val("[aj^*b+dg]g");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n!7~ciFp]hw^g^!Se,", "n!7~ciFp]hw^g^!Se,");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = new Document("br");
      // Undeclared exception!
      try { 
        document0.text("br");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("yayt{e`d3oxfrm", "[aj^*b+dg]g");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.tagName("yayt{e`d3oxfrm");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("|_vN<i`}85", "aW##");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[aj^*b+dg]g", "M");
      document0.appendChild(document0);
      document0.empty();
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Tag name must not be empty.", "Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.selectFirst(" />");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ' />': unexpected token at '/>'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parse("", "head");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("T", "T");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Tag tag0 = Tag.valueOf("CBGJjZ_ACQ.wwfS`");
      Element element0 = new Element(tag0, "CBGJjZ_ACQ.wwfS`");
      // Undeclared exception!
      try { 
        element0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Document.createShell("=VTckSs+V-+7");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("2N^ZJ~pS}h8", "qh6(y+r");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.prependElement("title");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      parser0.settings((ParseSettings) null);
      Document document0 = parser0.parseInput("org.jsoup.nodes.Element$1", "REMOVE");
      // Undeclared exception!
      try { 
        document0.prependElement("()1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Document.createShell("J");
      // Undeclared exception!
      try { 
        document0.prependElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("yayt{e`d3oxfrm", "[aj^*b+dg]g");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.prepend("[aj^*b+dg]g");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("7", "7");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("O-Bwi%xV_8", "O-Bwi%xV_8");
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("basefont", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "N8U1;+ab2]o,uUo14", attributes0);
      Element element0 = pseudoTextElement0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        element0.parents();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.DataNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, 2893, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Document.createShell("Q1Drx8l6kA{Z");
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[3];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, (-3333), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rj9>2b CDWTp", "rj9>2b CDWTp");
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(344);
      CharsetEncoder charsetEncoder0 = document_OutputSettings1.encoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(dataOutputStream0, charsetEncoder0);
      // Undeclared exception!
      document0.outerHtmlHead(outputStreamWriter0, 344, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, (-2073948184), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("yayt{e`d3oxfrm", "[aj^*b+dg]/!\"");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.is((Evaluator) null);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parse(".aPMH", ".aPMH");
      // Undeclared exception!
      try { 
        document0.is("rkeYDcN[aN");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at 'aN'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("_lQ", "_lQ");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.is("org.jsoup.nodes.NodeUtils");
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|_vN<i`}85", "|_vN<i`}85");
      // Undeclared exception!
      try { 
        document0.is("yo[ NSg5J%Qk2GT");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'Q'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parse("FRF-I~prz&4RCW", "FRF-I~prz&4RCW");
      Elements elements0 = document0.getElementsContainingText("FRF-I~prz&4RCW");
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Document.createShell("t");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.html("<ygOV &F_A.m,O");
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "7J]?~!Z");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parse("head", "%:");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.html((MockPrintStream) null);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.html((CharArrayWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[aj^*b+dg]g", "M");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("UR3p;@|:", "^l-");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("7", "7");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parse("pot8:5+[R8$i", "^o| tt");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText(")~M^C<Z7DD/z[2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: )~M^C<Z7DD/z[2
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText(")");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: )
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rj9>2b CDWTp", "rj9>2b CDWTp");
      Element element0 = document0.head();
      List<Node> list0 = Parser.parseFragment("Gq", (Element) null, "rj9>2b CDWTp");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("p?y2</<l#@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("id", "id");
      Element element0 = document0.body();
      element0.siblingIndex = (-516);
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("id");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parse("n!7~ciFp]hw^g^!Se,", "n!7~ciFp]hw^g^!Se,");
      // Undeclared exception!
      try { 
        document0.getElementsByTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parse("lc`{gO", "lc`{gO");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("il", "il");
      Element element0 = document0.prependElement("il");
      document0.replaceChild(element0, element0);
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("Hspz#19 e++", "y[NP0NnFA3;YW");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Document.createShell("noshade");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("br", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("#comment", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parse(" />", "y#HSCX%");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("title", "rN1HcEUk){S_bv~/$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: rN1HcEUk){S_bv~/$
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("", "#root");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[aj^*b+dg]g", "M");
      Document document1 = document0.clone();
      document1.childNodes = null;
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueContaining("M", "3LU,BC");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining((String) null, "s+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("s+", "\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$NodeList");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue((String) null, "org.jsoup.nodes.Element$NodeList");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s+", "s+");
      Element element0 = document0.body();
      element0.siblingIndex = (-50);
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("s+", "s+");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(".13lH-~kZbJR2L;", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Element element0 = new Element(".");
      // Undeclared exception!
      try { 
        element0.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("T", "T");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s+", "s+");
      Element element0 = document0.body();
      Document document1 = Parser.parseBodyFragment("s+", "s+");
      document1.appendTo(element0);
      element0.addClass("s+");
      // Undeclared exception!
      try { 
        document1.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'body.java.lang.String@0000000189': unexpected token at '@0000000189'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.child(29);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 29, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("w0t(JPbMw", "w0t(JPbMw");
      // Undeclared exception!
      try { 
        document0.child((-430));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Document.createShell("[AJ^*b+dg]G");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.before("/Yql\"fzz+");
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[aj^*b+dg]g", "M");
      Document document1 = document0.clone();
      document1.appendChild(document0);
      document1.empty();
      // Undeclared exception!
      try { 
        document0.before("M");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Document.createShell("[AJ^*b+dg]G");
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("yayt{e`d3oxfrm", "[aj^*b+dg]g");
      Document document1 = (Document)document0.appendChild(document0);
      // Undeclared exception!
      document1.attr("yayt{e`d3oxfrm", "yayt{e`d3oxfrm");
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|", "#root");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("=,aD/}_p PVqS)t", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Entities$1");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "=,aD/}_p PVqS)t", attributes0);
      Element element1 = element0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element1.appendTo(element0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[aj^*b+dg]g", "M");
      document0.appendChild(document0);
      Element element0 = document0.empty();
      // Undeclared exception!
      try { 
        document0.appendTo(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Document.createShell("[AJ^*b+dg]G");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parse("|_vN<i`}85", "|_vN<i`}85");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.appendElement("|_vN<i`}85");
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Document.createShell("[AJ1^b+~g]G");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$AttributeWithValueNot", "org.jsoup.select.Evaluator$AttributeWithValueNot");
      document0.prependChild(document0);
      Element element0 = document0.empty();
      // Undeclared exception!
      try { 
        element0.appendChild(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("T", "T");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parse("yPQ@", "yPQ@");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.append("java.lang.string@0000000088 dq1 name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Document.createShell("X");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("yayt{e`d3oxfrm", "[aj^*b+dg]g");
      document0.appendChild(document0);
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("0vSVqt(", "0vSVqt(");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s+", "s+");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document0.html(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      Element element0 = document0.toggleClass("Pattern syntax error: ");
      element0.addClass("Pattern syntax error: ");
      element0.hasClass("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("oL{8/M&*@(%5GLX)`!v", "oL{8/M&*@(%5GLX)`!v");
      document0.hasClass("oL{8/M&*@(%5GLX)`!v");
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s+", "s+");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      Element element0 = document0.append("Pattern syntax error: ");
      element0.data();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n!7~ciFp]hw^g^!Se,", "n!7~ciFp]hw^g^!Se,");
      document0.html("org.jsoup.nodes.Element$2");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "C5");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parse("FRF-I~prz&4RCW", "FRF-I~prz&4RCW");
      document0.appendTo(document0);
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Document.createShell("[AJ^*b+dg]G");
      Element element0 = document0.prependElement("L");
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Document.createShell("AfterBody");
      Element element0 = document0.body();
      Element element1 = element0.wrap("AfterBody");
      element1.prepend("AfterBody");
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parse("|_vN<i`}85", "|_vN<i`}85");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Document.createShell("[AJ^*b+dg]G");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = new Document("br");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|_vNqi`}85", "|_vNqi`}85");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s+", "s+");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("yayt{e`d3oxfrm", "[aj^*b+dg]/!\"");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("7J]?~!Z", "u6LaW^P|[:AwBV-Zapu");
      Pattern pattern0 = Pattern.compile("nC", 43);
      document0.getElementsByAttributeValueMatching("7J]?~!Z", pattern0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = new Document("id");
      document0.select("id");
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Element element0 = new Element("SznwlVW!H");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Document.createShell("[AJ^*b+dg]G");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Document.createShell("[AJ^*b+dg]G");
      document0.title("[AJ^*b+dg]G");
      document0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("id", "id");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "br");
      document0.prependElement("br");
      document0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Patern synax erro:", "Patern synax erro:");
      MockPrintStream mockPrintStream0 = new MockPrintStream("java.lang.snring@0000000100");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(mockPrintStream0, 2184, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = new Document("br");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      Element element0 = document0.toggleClass("Pattern syntax error: ");
      element0.toggleClass("java.lang.string@0000000038");
      element0.hasClass("java.lang.string@0000000100");
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Patern syntax error: ", "Patern syntax error: ");
      document0.toggleClass("Kue)EM=%.)gx458%@v");
      Element element0 = document0.toggleClass(" dr");
      element0.hasClass("class");
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s+", "s+");
      document0.toggleClass("s+");
      document0.hasClass("br");
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Patern syntax error: ", "Patern syntax error: ");
      Element element0 = document0.toggleClass("Patern syntax error: ");
      element0.hasClass("java.lang.string@0000000206 br");
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parse("Patern syntax erro: ", "Patern syntax erro: ");
      Element element0 = document0.toggleClass("Patern syntax erro: ");
      element0.hasClass("java.lang.snring@0000000100");
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.prependText("");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parse("yPQ@", "yPQ@");
      document0.parentNode = (Node) document0;
      document0.getElementsContainingOwnText("yPQ@");
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("Z*~LJNT[zsuRxMeL", "Z*~LJNT[zsuRxMeL", "#root", "Z*~LJNT[zsuRxMeL", "textarea");
      Element.preserveWhitespace(documentType0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parse("<[aj^*b+dg]g></[aj^*b+dg]g>\n<html>\n <head>\n  <title>[AJ^*b+dg]G</title>\n </head>\n <body></body>\n</html>", "");
      document0.getElementsContainingOwnText((String) null);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("QRPmBBgN7bz>", "QRPmBBgN7bz>");
      CDataNode cDataNode0 = new CDataNode("N*/>,n\"T3)]");
      document0.appendChild(cDataNode0);
      document0.getElementsMatchingText("QRPmBBgN7bz>");
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      document0.append("Pattern syntax error: ");
      document0.getElementsMatchingText("x|zQ");
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = Parser.parse("T", "title");
      Document document1 = parser0.parseInput("T", "T");
      Element element0 = document1.appendChild(document0);
      element0.getElementsMatchingText("title");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "br");
      Element element0 = document0.prependElement("br");
      document0.appendChild(element0);
      document0.getElementsMatchingText("br");
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Document.createShell("[AJ^*b+dg]G");
      DocumentType documentType0 = new DocumentType("[AJ^*b+dg]G", "", "AD<#>^rKM", (String) null);
      Element element0 = document0.appendChild(documentType0);
      element0.getElementsMatchingText("[AJ^*b+dg]G");
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Document.createShell("J");
      Element element0 = document0.body();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("T", "T");
      Element element0 = document0.body();
      document0.appendTo(element0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|_vNqi`}85", "|_vNqi`}85");
      Element element0 = document0.body();
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("yayt{e`d3oxfrm", "[aj^*b+dg]/!\"");
      document0.appendChild(document0);
      document0.empty();
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parse("", "head");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s+", "s+");
      Element element0 = document0.prependElement("s+");
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("jRVJpt sP", "jRVJpt sP");
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must not be null.", "YPPQ*wD3VsOA*sgr:7");
      Element element0 = document0.body();
      Elements elements0 = element0.nextElementSiblings();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Document.createShell("[AJ^*b+dg]G");
      document0.siblingElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("[AJ^*b+dg]G", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[aj^*b+dg]g", "M");
      document0.appendChild(document0);
      document0.siblingElements();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a_vNi35", "a_vNi35");
      Element element0 = document0.body();
      element0.before("a_vNi35");
      String string0 = element0.cssSelector();
      assertEquals("a_vNi35", element0.baseUri());
      assertEquals("html > body:nth-child(4)", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Document.createShell("7J]?~!Z");
      document0.toggleClass("m9ted");
      document0.cssSelector();
      assertEquals(1, document0.childNodeSize());
      assertEquals("7J]?~!Z", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("id", parseSettings0);
      Attributes attributes0 = new Attributes();
      attributes0.put("id", "id");
      FormElement formElement0 = new FormElement(tag0, "bjdZ!z:p*J\"c07?", attributes0);
      String string0 = formElement0.cssSelector();
      assertEquals("#id", string0);
      assertEquals("bjdZ!z:p*J\"c07?", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Document.createShell("[AJ^*b+dg]G");
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
      try { 
        document0.insertChildren(124, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parse("title", "^KzplXtBykO]q+");
      Node[] nodeArray0 = new Node[9];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1339), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Document.createShell("[AJ^*b+dg]G");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren(0, nodeArray0);
      assertEquals(1, element0.childNodeSize());
      assertEquals("[AJ^*b+dg]G", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Document.createShell("/Yql\"fzz+");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren(939, (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Document.createShell("[AJ^*b+dg]G");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-128), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      Elements elements0 = document0.getElementsContainingText("Pattern syntax error: ");
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) elements0);
      assertEquals("Pattern syntax error: ", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Tag tag0 = Tag.valueOf(" />");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, " />", attributes0);
      DataNode dataNode0 = new DataNode("]", " > ");
      pseudoTextElement0.prependChild(dataNode0);
      List<DataNode> list0 = pseudoTextElement0.dataNodes();
      assertEquals(" />", pseudoTextElement0.baseUri());
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "a");
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.isEmpty());
      assertEquals("a", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("nC", "nC");
      Element element0 = document0.body();
      List<TextNode> list0 = element0.textNodes();
      assertEquals("nC", element0.baseUri());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Document.createShell("J");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(1, document0.childNodeSize());
      assertEquals("J", document0.baseUri());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("nC", "T");
      Element element0 = document0.body();
      Element element1 = document0.appendTo(element0);
      element1.lastElementSibling();
      assertEquals(2, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Tag name must not be empty.", "Tag name must not be empty.");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-4374));
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("id", "id");
      document0.selectFirst("id");
      assertEquals("id", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertEquals(1, document0.childNodeSize());
      
      document0.title("R6}kCK");
      String string0 = document0.wholeText();
      assertEquals("R6}kCK", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "C5");
      document0.getAllElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("C5", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parse("", "head");
      Element element0 = document0.removeClass("head");
      assertEquals(1, element0.childNodeSize());
      assertEquals("head", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a_vNi35", "a_vNi35");
      // Undeclared exception!
      try { 
        document0.before("a_vNi35");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Element element0 = new Element("T");
      // Undeclared exception!
      try { 
        element0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("il", "il");
      document0.getElementsByAttributeValueNot("Hspz#19 e++", "y[NP0NnFA3;YW");
      assertEquals("il", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s+", "s+");
      Element element0 = document0.shallowClone();
      assertEquals("s+", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must not be null.", "YPPQ*wD3VsOA*sgr:7");
      Document document1 = document0.clone();
      Element element0 = document0.appendTo(document1);
      element0.tagName("`w");
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.doSetBaseUri("/Yql\"fzz+");
      assertEquals("/Yql\"fzz+", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("il", "il");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parse("", "head");
      document0.getElementsByAttributeValueContaining("qh6(y+r", "f_(5ohi@.o");
      assertEquals(1, document0.childNodeSize());
      assertEquals("head", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a_vNi35", "a_vNi35");
      document0.is("html > body");
      assertEquals("a_vNi35", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parse("title", "^KzplXtBykO]q+");
      document0.getElementsByAttributeValueMatching("^KzplXtBykO]q+", " />");
      assertEquals(1, document0.childNodeSize());
      assertEquals("^KzplXtBykO]q+", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = new Document("br");
      document0.val("sjrMVuwV Zg,f");
      String string0 = document0.val();
      assertEquals("sjrMVuwV Zg,f", string0);
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("yayt{e`d3oxfrm", "[aj^*b+dg]g");
      // Undeclared exception!
      try { 
        document0.wrap("[aj^*b+dg]g");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parse("nl>n;", "Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("7J]?~!Z", "u6LaW^P|[:AwBV-Zapu");
      Elements elements0 = document0.getElementsByIndexEquals(43);
      assertEquals("u6LaW^P|[:AwBV-Zapu", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Element element0 = new Element("[AJ^*b+Adg]G");
      Elements elements0 = element0.getElementsByAttributeStarting("UG%Zabs(a?!UX");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      document0.prependElement("br");
      document0.getElementsContainingOwnText("br");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[AJ^*b+dg]G", "[AJ^*b+dg]G");
      Elements elements0 = document0.getElementsByIndexLessThan(1659);
      assertEquals(1, document0.childNodeSize());
      assertEquals(3, elements0.size());
      assertEquals("[AJ^*b+dg]G", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s+", "s+");
      // Undeclared exception!
      try { 
        document0.after("^<;%(SE~'sEW3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parse("", "'");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Document.createShell("AfterBody");
      document0.prepend("AfterBody");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("&#x", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s+", "s+");
      document0.getElementsByAttributeValue("s+", "s+");
      assertEquals("s+", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Document.createShell("7");
      Element element0 = document0.attr("]#t", false);
      assertEquals(1, element0.childNodeSize());
      assertEquals("7", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.wholeText();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("id", "id");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Element element0 = new Element("s+");
      Elements elements0 = element0.getElementsByAttributeValueEnding("[aj^*b+dg]g", "title");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Patern syntax error: ", "Patern syntax error: ");
      document0.dataset();
      assertEquals("Patern syntax error: ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|", "|");
      Element element0 = document0.tagName("head");
      assertEquals("|", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("Pattern syntax error: ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = new Document("A*>&");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Document.createShell("[AJ^*b+dg]G");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=+{e)P+hN/x`x;!A=k", "Gextarea");
      Elements elements0 = document0.children();
      assertEquals(1, elements0.size());
      assertEquals("Gextarea", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|", "|");
      document0.getElementById("|");
  }
}
