/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 21:42:28 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      Element element0 = document0.html("?1");
      document0.reparentChild(document0);
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("D", "video");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      CDataNode cDataNode0 = new CDataNode("video");
      nodeArray0[2] = (Node) cDataNode0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9Hci7 z>OEl", "R");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlTail(charArrayWriter0, 1914, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gr9J9!KCe4qZbC3", "gr9J9!KCe4qZbC3");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("java.lang.string@0000000075", false);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charset0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(outputStreamWriter0, 352, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("UAI}h(]/|~$&6", "UAI}h(]/|~$&6");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.stging@0000000169", "java.lang.stging@0000000169");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{-", "{-");
      Element element0 = document0.appendElement("wnv=xo9;ci zoel");
      element0.wrap("{-");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9;cizEl", "wnV=xO9;cizEl");
      Element element0 = document0.head();
      element0.wrap("oa#");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = new Document("?1");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("LwZY`_EP", "LwZY`_EP");
      Element element0 = document0.appendElement("LwZY`_EP");
      element0.siblingIndex = (-1108596078);
      element0.val((String) null);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9Hci7 z>OEl", "jR");
      Element element0 = document0.body();
      element0.val("class");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9;ci zOEl", "{-");
      Element element0 = document0.val("{-");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("TC<yaOW|M", "x*xN5wy3WER0,");
      document0.appendTo(document0);
      document0.toggleClass("org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Element element0 = new Element("java.lang.string@0000000040");
      Element element1 = element0.html("java.lang.string@0000000040");
      element1.siblingIndex = (-318);
      element0.toggleClass("'*~?w7P~eI\"V^-jF");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">", ">");
      Element element0 = document0.head();
      element0.toggleClass(".");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = new Document("?1");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("TC<yaOW|M", "x*xN5wy3WER0,");
      Document document1 = Parser.parseBodyFragmentRelaxed("x*xN5wy3WER0,", "Rawtext");
      document0.appendTo(document1);
      document0.tagName("_*9wiHW0Y`qGSC==");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = new Document("C~");
      document0.tagName("body");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = new Document("id");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Tr:,xF$D64OGoq'!A");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.Evaluator$AttributeWithValueMatching", attributes0);
      formElement0.tag();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      formElement0.tag();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parse("{wvrS0s}GAI%$p\")3", "{wvrS0s}GAI%$p\")3");
      Element element0 = document0.body();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Element element0 = new Element("br");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Document.createShell("{-");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "bn", attributes0);
      formElement0.selectFirst("AfterAfterBody");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Element element0 = new Element("A");
      element0.selectFirst("A");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bn", "bn");
      Element element0 = document0.appendElement("bn");
      element0.selectFirst("bn");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Document.createShell("mentitem");
      document0.select("mentitem");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      document0.select("head");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Document.createShell(",^LQS6{.C");
      Element element0 = document0.body();
      element0.removeClass("lnas8YP6-2");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("wV=xO9;cizEl", "wV=xO9;cizEl");
      document0.appendChild(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Element element0 = new Element("th");
      element0.prependText(":nth-child(%d)");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      document0.appendChild(document0);
      document0.prependText(":nth-child(%d)");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      document0.prependElement("head");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("wV=xO9;cizEl", "wV=xO9;cizEl");
      document0.prependElement("Tag name must not be empty.");
      document0.appendChild(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9Hci7 z>OEl", "{-");
      Element element0 = document0.appendElement("{-");
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      Element element0 = document0.head();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      Element element0 = document0.head();
      element0.prepend("4!0Kl~jD-]|op");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parse("J-*]LBsS|v3", "LwtY`_EP");
      Element element0 = document0.appendElement("LwtY`_EP");
      element0.prepend("java.lang.string@0000000075");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("");
      Document document0 = parser0.parseInput((Reader) stringReader0, "tag name must not be empty.");
      document0.prepend("");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("m{h", "m{h");
      Element element0 = document0.head();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9;ci zOEl", "{-");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[_\"]dFx^3liV`z#vzX3", "?1");
      Element element0 = document0.head();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("LwZY`_EP", "LwZY`_EP");
      Document document1 = Document.createShell("DoctypePublicIdentifier_doubleQuoted");
      document0.appendTo(document1);
      Element element0 = document0.appendElement("LwZY`_EP");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parse("bn", "bn");
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "bn", attributes0);
      document0.setParentNode(formElement0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("mk", "{MM7vvEvO");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = new Document("");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Document.createShell("wnV=xO9;ci zOEl");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Document.createShell("bn");
      Element element0 = document0.prependChild(document0);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]R", "wnV=xO9Hci7 z>OEl");
      Element element0 = document0.appendElement("]R");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.stging@0000000169", "java.lang.stging@0000000169");
      Element element0 = document0.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parse("", "%aB&+lCunb]?w_{!IF");
      Evaluator.Id evaluator_Id0 = new Evaluator.Id("");
      document0.is((Evaluator) evaluator_Id0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      document0.is("Queue not long enough to consume sequence");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Document.createShell("{-");
      Element element0 = document0.head();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.stging@0000000169", "java.lang.stging@0000000169");
      Element element0 = document0.head();
      Node[] nodeArray0 = new Node[0];
      element0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bn", "bn");
      Element element0 = document0.appendElement("bn");
      LinkedHashSet<Element> linkedHashSet0 = new LinkedHashSet<Element>();
      element0.insertChildren((-1), (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parse("+=mJ|a!xQ", "+=mJ|a!xQ");
      document0.siblingIndex = (-4642);
      document0.html("&Xe~s[w?<lC*dL./");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("html", "");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Tag tag0 = Tag.valueOf(" > ");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      formElement0.html((OutputStreamWriter) null);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = new Document("?1");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9;ci zOEl", "{-");
      document0.toggleClass("<html>\n <head></head>\n <body>\n  wnV=xO9;ci zOEl\n </body>\n</html>");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parse("<gvH.lang.string@q0?000016\"", "java.lang.string@0000000041");
      document0.getElementsMatchingText(":%s(%d)");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("557[y", "video");
      Pattern pattern0 = Pattern.compile("org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling", 46);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Tag tag0 = Tag.valueOf("PUBLIC");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "6EG0*~", attributes0);
      formElement0.getElementsMatchingOwnText("O");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = new Document(":nth-child(%d)");
      document0.getElementsByTag("<html>\n <head></head>\n <body>\n  ?1\n </body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9;ci zOEl", "{-");
      document0.getElementsByTag("html");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name 8ust not be empty.", "Tag name 8ust not be empty.");
      document0.getElementsByIndexGreaterThan(402);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9Hci7 z>OEl", "!$");
      document0.getElementsByAttributeValueStarting("not", "not");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$AttributeWithValue");
      document0.getElementsByAttributeValueNot(";dDGOE%D [Mm", ":nth-child(%d)");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$CssNthEvaluator", "wnV=xO9;cizEl");
      document0.attr("ppjaeAdgciL&tR !)}", "ppjaeAdgciL&tR !)}");
      document0.getElementsByAttribute("ppjaeAdgciL&tR !)}");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9Hci7 z>OEl", "{-");
      Element element0 = document0.appendElement("{-");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Document.createShell("3p>i06~5IM");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      document0.reparentChild(document0);
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      document0.appendChild(document0);
      document0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$AttributeWithValue");
      document0.siblingIndex = (-2701);
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("?.o+3: 5?2", "meter", true);
      document0.doClone(xmlDeclaration0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("MakpDeclarationOpen", "MakpDeclarationOpen");
      Element element0 = document0.head();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]R", "wnV=xO9Hci7 z>OEl");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]R", "wnV=xO9Hci7 z>OEl");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9;cizEl", "wnV=xO9;cizEl");
      document0.appendChild(document0);
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.stging@0000000169", "java.lang.stging@0000000169");
      Element element0 = document0.head();
      Locale locale0 = Locale.ENGLISH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Document.createShell("SYSTEM");
      Element element0 = document0.toggleClass("I{=N}m|wX5|%W[");
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      document0.toggleClass("");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = new Document("e!c#N65uz,%1zCwP");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Element element0 = new Element("br");
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("@2?6(TPcsu.74tO", "wnV=xO9Hci7 z>OEl");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      document0.reparentChild(document0);
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      Element element0 = document0.head();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9Hci7 z>OEl", "wnV=xO9Hci7 z>OEl");
      Document document1 = new Document("wnV=xO9Hci7 z>OEl");
      document0.reparentChild(document1);
      document1.before("org.jsoup.parser.XmlTreeBuilder");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000054", "java.lang.string@0000000054");
      Element element0 = document0.body();
      element0.before("java.lang.string@0000000054");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parse("(7=i|_X>^bp} &ui*Q", "(7=i|_X>^bp} &ui*Q");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = new Document("9~Pj;AE4&1");
      document0.attr("&#xa0;", "Tag name must not be empty.");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000054", "java.lang.string@0000000054");
      Element element0 = document0.body();
      Element element1 = element0.text(".");
      element1.attr("Wh", false);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("--!", "--!");
      Element element0 = document0.head();
      element0.attr("--!", false);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("H`~OS0M", "H`~OS0M");
      document0.setSiblingIndex((-3422));
      document0.attr("*&1cT", "\"");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      Element element0 = document0.appendElement("th");
      element0.attr("u9vh.UyF)2I", "3yfl'GCIEv\"W0.");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = new Document("dXu@q.");
      document0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      Element element0 = document0.head();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      Element element0 = document0.appendElement("th");
      element0.appendText("");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parse("MarkupDeclarationOpen", "MarkupDeclarationOpen");
      document0.setSiblingIndex((-4904));
      Tag tag0 = Tag.valueOf("MarkupDeclarationOpen");
      Element element0 = new Element(tag0, "(q527lw");
      document0.appendChild(element0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("m{h", "m{h");
      Element element0 = document0.head();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Tag tag0 = Tag.valueOf("li", (ParseSettings) null);
      Element element0 = new Element(tag0, "~^=^@BZgF");
      element0.append("mu&iG3q'");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("D", "video");
      Element element0 = document0.appendElement("D");
      element0.append("D");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = new Document("?1");
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parse("jR", "wnV=xO9Hci7 z>OEl");
      Element element0 = document0.appendElement("jR");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name 8ust not be empty.", "Tag name 8ust not be empty.");
      Element element0 = document0.head();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      Document document1 = new Document("?1");
      document0.reparentChild(document1);
      document1.after("s+");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]R", "wnV=xO9Hci7 z>OEl");
      Element element0 = document0.appendElement("]R");
      element0.after("wnV=xO9Hci7 z>OEl");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parse("lwzy`_ep", "TA,w-5kgD3HbBw");
      Element element0 = document0.body();
      element0.after("L.E@arS23");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9Hci7 z>OEl", "{-");
      Element element0 = document0.appendElement("{-");
      element0.addClass("wnv=xo9;cizel");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parse("+=mJ|a!xQ", "+=mJ|a!xQ");
      document0.siblingIndex = (-4642);
      document0.addClass("+=mJ|a!xQ");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      Element element0 = document0.head();
      element0.addClass("html > head");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000169", "java.lang.string@0000000169");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.wrap("java.lang.string@0000000169");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = "GPDKt;Sl]\\u5P$gGq";
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf(string0, parseSettings0);
      CDataNode cDataNode0 = new CDataNode(string0);
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, string0, attributes0);
      Document document0 = new Document(string0);
      String string1 = formElement0.outerHtml();
      formElement0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        formElement0.wrap(string1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "ut0vuMG");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf(">$}", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, ">$}", attributes0);
      TextNode textNode0 = new TextNode(">$}");
      element0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        element0.wrap(">$}");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("mk", "mk");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.val("#root");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parse("S4J-l]LBsS|v3", "LwtY`_EP");
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document1 = document0.parser(parser1);
      // Undeclared exception!
      try { 
        document1.val("S4J-l]LBsS|v3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = new Document("dXu@q.");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      Element element0 = document0.empty();
      // Undeclared exception!
      try { 
        element0.text("IOe:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("--!", "--!");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("L/$k", "L/$k");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.tagName("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parse("", "%aB&+lCunb]?w_{!IF");
      // Undeclared exception!
      try { 
        document0.selectFirst("5^,!Z)6p");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '5^,!Z)6p': unexpected token at '^,!Z)6p'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Document.createShell("MarkupDeclarationOpen");
      // Undeclared exception!
      try { 
        document0.selectFirst("[yF+s%");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = ''
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      // Undeclared exception!
      try { 
        document0.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("j-H?", "j-H?");
      // Undeclared exception!
      try { 
        document0.select("$VALUES");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '$VALUES': unexpected token at '$VALUES'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Document.createShell("wnV=xO9;cizEl");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parse("wnV~xO9Hci7 z>OEl", "wnV~xO9Hci7 z>OEl");
      TextNode textNode0 = TextNode.createFromEncoded("wnV~xO9Hci7 z>OEl");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      DocumentType documentType0 = new DocumentType("UE+Z.0XgBe5EhL#'k,", "UE+Z.0XgBe5EhL#'k,", ":nth-child(%d)", "UE+Z.0XgBe5EhL#'k,", ":nth-child(%d)");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        Element.preserveWhitespace(document0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = new Document("e!c#N65uz,%1zCwP");
      List<Node> list0 = document0.childNodes();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.prependText("PLAINTEXT");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$CssNthEvaluator", "wnV=xO9;cizEl");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9Hci7 z>OEl", "{-");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.prependElement("Children collection to be inserted must not be null.");
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parse("(7=i|_X>^bp} &ui*Q", "(7=i|_X>^bp} &ui*Q");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = new Document("@$F#XUj");
      DocumentType documentType0 = new DocumentType("{a4d/|x;neFi_&6d==-", "org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element", "org.jsoup.nodes.Element$1", "{a4d/|x;neFi_&6d==-");
      documentType0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.prependChild(documentType0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("mk", "mk");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gr9J9!KCe4qZbC3", "gr9J9!KCe4qZbC3");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.prepend("ul");
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("br", false);
      document0.parentNode = (Node) xmlDeclaration0;
      // Undeclared exception!
      try { 
        document0.parent();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parse("nobr", "{-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{-");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(2717);
      // Undeclared exception!
      document0.outerHtmlTail(mockPrintWriter0, 5, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("557[y", "video");
      StringBuilder stringBuilder0 = new StringBuilder(2796);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuilder0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 2796, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("}C5>!Bzn2xL", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "}]!nA", attributes0);
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        element0.outerHtmlTail(charBuffer0, 60, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, 0, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$IndexLessThan", "org.jsoup.select.Evaluator$ContainsOwnText");
      MockFileWriter mockFileWriter0 = new MockFileWriter("x\"2t]/x WVRYfIkX9");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockFileWriter0, (-1518), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Element element0 = new Element("br");
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      document_OutputSettings0.indentAmount(263);
      // Undeclared exception!
      element0.outerHtmlHead(charBuffer0, 897, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("wnV=xO9Hci7 z>OEl", "]R");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, (-1510), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parse("nobr", "{-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{-");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockPrintWriter0, (-2), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Ik}A`JVo");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "(uS]d(2k[sA~", attributes0);
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        formElement0.outerHtmlHead(pipedWriter0, 0, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Tag tag0 = Tag.valueOf("&lt;");
      CDataNode cDataNode0 = new CDataNode("br");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "'@gS3", attributes0);
      Element element0 = formElement0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.nextElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9Hci7 z>OEl", "{-");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9;cizEl", "wnV=xO9;cizEl");
      Document document1 = document0.normalise();
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      document1.parentNode = (Node) document0;
      // Undeclared exception!
      document0.is((Evaluator) evaluator_IsOnlyChild0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9;ci zOEl", "wnV=xO9;ci zOEl");
      Evaluator.Id evaluator_Id0 = new Evaluator.Id((String) null);
      // Undeclared exception!
      try { 
        document0.is((Evaluator) evaluator_Id0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Id", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      // Undeclared exception!
      try { 
        formElement0.is("org.jsoup.select.Evaluator$AllElements");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.select.Evaluator$AllElements': unexpected token at '$AllElements'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("MarkupDeclarationOpen", "MarkupDeclarationOpen");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.is("MarkupDeclarationOpen");
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{-", "{-");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.html("{-");
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = new Document("bn");
      DataNode dataNode0 = new DataNode("[");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        element0.html("MarkupDeclarationOpen");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      document0.addChildren(nodeArray0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("r;2Loms");
      // Undeclared exception!
      document0.html((OutputStreamWriter) mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("9-*]+9B}S|\"v3", "9-*]+9B}S|\"v3");
      // Undeclared exception!
      try { 
        document0.html((OutputStreamWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("html", "");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parse("6L*sfT:&nu", "f,LF5/d~");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset((Charset) null);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      // Undeclared exception!
      try { 
        document1.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document$OutputSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parse("bn", "bn");
      DataNode dataNode0 = new DataNode("bn");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("557[y", "video");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = new Document("dXu@q.");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9Hci7 z>OEl", "!$");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parse("+=mJ|a!xQ", "+=mJ|a!xQ");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("M*fAl~?Wyw@d x[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: M*fAl~?Wyw@d x[
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("LwZY`_EP", "LwZY`_EP");
      CDataNode cDataNode0 = new CDataNode((String) null);
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("Insert position out of bounds.");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tyGyZe", "tyGyZe");
      document0.setSiblingIndex((-1812));
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("tyGyZe");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Document.createShell("{-");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("wnV=xO9Hci7 z>OEl", "wnV=xO9Hci7 z>OEl");
      CDataNode cDataNode0 = new CDataNode("wnV=xO9Hci7 z>OEl");
      document0.setParentNode(cDataNode0);
      Pattern pattern0 = Pattern.compile("wnV=xO9Hci7 z>OEl", 414);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText(pattern0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parse("Q>\"", "Q>\"");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parse("Jidj-R8Db7O", "Jidj-R8Db7O");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("^:e,~a{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: ^:e,~a{
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", ":nth-child(%d)");
      CDataNode cDataNode0 = new CDataNode("'eI2@SD\"!eeGYl$<ju");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingText(":nth-child(%d)");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parse("MarkupDeclarationOpen", "MarkupDeclarationOpen");
      document0.setSiblingIndex((-4904));
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("MarkupDeclarationOpen");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parse("id", "id");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("id");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parse("J-*]LBsS|v3", "J-*]LBsS|v3");
      TextNode textNode0 = new TextNode("Pk{kCIG~pd<^4h]5X=J", "Pk{kCIG~pd<^4h]5X=J");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("Pk{kCIG~pd<^4h]5X=J");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = new Document("9~Pj;AE4&1");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parse("id", "id");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexLessThan(36);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b%c#8JTLI1CD)", "b%c#8JTLI1CD)");
      TextNode textNode0 = TextNode.createFromEncoded("");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.getElementsByIndexGreaterThan(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Document.createShell("wnV=xO9;cizEl");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("wnV=xO9;cizEl", "java.lang.string@0000000114 java.lang.string@0000000057 textarea java.lang.string@0000000039 textarea ", true);
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document0.getElementsByIndexEquals((-2430));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9;cizEl", "wnV=xO9;cizEl");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Document.createShell("ScriptDataEscapeStartDash");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot(".~uO>Vdq)|x1ixk@4", ".~uO>Vdq)|x1ixk@4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":nth-child(%d)", ":nth-child(%d)");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", "F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("9~Pj;AE4&1", "9~Pj;AE4&1");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("", "9~Pj;AE4&1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9;ci zOEl", "{-");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("wnV=xO9;ci zOEl", "{-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: {-
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", ":nth-child(%d)");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("#root", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", "?1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "$!<xXbL*QqFU0Pu;PtG");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "aPx)*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Document.createShell("value");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting(" ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Element element0 = new Element("java.lang.string@0000000054");
      CDataNode cDataNode0 = new CDataNode("java.lang.string@0000000054");
      element0.prependChild(cDataNode0);
      cDataNode0.setSiblingIndex((-1823));
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeStarting("br");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("4N=Ig-l)%U", "4N=Ig-l)%U");
      // Undeclared exception!
      try { 
        document0.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("8:<wO#,tT|ARO", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("[%s^=%s]");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "8:<wO#,tT|ARO", attributes0);
      pseudoTextElement0.childNodes = null;
      // Undeclared exception!
      try { 
        pseudoTextElement0.getAllElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = new Document("9~Pj;AE4&1");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Document.createShell("h#socdl8hfqxvx^");
      DocumentType documentType0 = new DocumentType("o&_o'+=`+V|US(?gl", "s4A5b^l", "java.lang.string@0000000039 > ");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parse("LwZY`_EP", "LwZY`_EP");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.dataNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Document.createShell("{-");
      Element element0 = document0.head();
      element0.tagName("{-");
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '{-': unexpected token at '{-'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parse("<gvH.lang.string@q0?000016\"", "java.lang.string@0000000041");
      DataNode dataNode0 = new DataNode((String) null, (String) null);
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = new Document(":nth-child(%d)");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      // Undeclared exception!
      try { 
        element0.child(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Tag tag0 = Tag.valueOf("&lt;");
      CDataNode cDataNode0 = new CDataNode("br");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "'@gS3", attributes0);
      // Undeclared exception!
      try { 
        formElement0.child((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.before("java.lang.string@0000000108");
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Document.createShell("{-");
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Document.createShell("{-");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.attr("{-", "java.lang.string@0000000057 java.lang.string@0000000039 textarea java.lang.string@0000000039 textarea ");
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9;ci zOEl", "{-");
      // Undeclared exception!
      try { 
        document0.attr((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parse("RL15!lxYnt##s", "RL15!lxYnt##s");
      Element element0 = document0.appendElement("RL15!lxYnt##s");
      element0.siblingIndex = 3584;
      // Undeclared exception!
      try { 
        element0.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3584, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'2#sn,m]i$(Vm6", "'2#sn,m]i$(Vm6");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{-", "{-");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.appendElement("{-");
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parse("J-*]LBsS|v3", "LwtY`_EP");
      Parser parser0 = Parser.xmlParser();
      ParseErrorList parseErrorList0 = parser0.getErrors();
      List<Node> list0 = Parser.parseFragment("L*Dz|l:_==", (Element) document0, "L*Dz|l:_==", parseErrorList0);
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendElement("LwtY`_EP");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      StringReader stringReader0 = new StringReader("oj=}]1MMz gX<*0K:&");
      Document document0 = parser1.parseInput((Reader) stringReader0, "Tag name must ot be empty.");
      // Undeclared exception!
      try { 
        document0.appendElement(" />");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("9-2*]+9B}S|\"uv3", "9-2*]+9B}S|\"uv3", "9-2*]+9B}S|\"uv3", "6EG0*~");
      Document document0 = Document.createShell("SYSTEM");
      CDataNode cDataNode0 = new CDataNode("PUBLIC");
      Node node0 = cDataNode0.doClone(documentType0);
      // Undeclared exception!
      try { 
        document0.appendChild(node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Document.createShell("{-");
      Element element0 = document0.appendElement("9Y|w-_uQA");
      TextNode textNode0 = new TextNode("9Y|w-_uQA", "");
      textNode0.parentNode = (Node) element0;
      // Undeclared exception!
      try { 
        document0.appendChild(textNode0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9;ci zOE", "{-");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.append("*8");
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("CGh7->0^23", "CGh7->0^23");
      CDataNode cDataNode0 = new CDataNode("#");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.append("k$P][Ug,gIA_\"-x9");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("LwZY`_EP", "LwZY`_EP");
      Element element0 = document0.appendElement("LwZY`_EP");
      // Undeclared exception!
      try { 
        element0.after((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9;ci zOEl", "{-");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.after("7`l>)");
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]R", "wnV=xO9Hci7 z>OEl");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode(" !");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "-Z{E", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      MockFileWriter mockFileWriter0 = new MockFileWriter("h6", true);
      document0.html(mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      Element element0 = document0.toggleClass("");
      element0.toggleClass("");
      document0.hasClass("java.lang.string@0000000039");
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      document0.toggleClass("");
      document0.hasClass("java.lang.string@0000000039");
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b%c#8JTLI1CD)", "b%c#8JTLI1CD)");
      document0.hasClass("yG^e");
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("557[y", "video");
      Element element0 = document0.toggleClass("557[y");
      element0.hasClass("org.jsoup.UncheckedIOException");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("?1");
      document0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Element element0 = new Element("9-2*]+9B}S|\"uv3");
      DocumentType documentType0 = new DocumentType("9-2*]+9B}S|\"uv3", "9-2*]+9B}S|\"uv3", "9-2*]+9B}S|\"uv3", "6EG0*~");
      Element element1 = element0.prependChild(documentType0);
      element1.data();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      document0.html("?1");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Document.createShell("{-");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9Hci7 z>OEl", "jR");
      Element element0 = document0.appendElement("jR");
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      document0.reparentChild(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("557[y", "video");
      document0.reparentChild(document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("557[y", "video");
      document0.reparentChild(document0);
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Document.createShell("wnV=xO9;cizEl");
      Element element0 = document0.body();
      element0.html("H>o*P(K#l&$nOmT-$kg");
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      document0.attributes();
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9Hci7 z>OEl", "wnV=xO9Hci7 z>OEl");
      document0.text("'vs3~<:p(&^hp;Uv 6*");
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.stging@0000000169", "java.lang.stging@0000000169");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      Element element0 = document0.empty();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      Pattern pattern0 = Pattern.compile("vFR0bE", (-866));
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9;cizEl", "wnV=xO9;cizEl");
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      document0.is((Evaluator) evaluator_IsOnlyChild0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      Pattern pattern0 = Pattern.compile("Insert position out of bounds.");
      document0.getElementsByAttributeValueMatching("6{_6jw\"x-6k|rP", pattern0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("]\";Z4BHxwP9pO", "{wvrS0s}GAI%$p\")3");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("br", "br");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parse("bn", "bn");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Element element0 = new Element("br");
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        element0.outerHtmlHead(charBuffer0, 897, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      Element element0 = document0.appendElement("br");
      element0.toString();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Element element0 = new Element("br");
      element0.appendElement("br");
      element0.toString();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("frameset", "}pbeyifsx4efy81");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings0);
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" > ", "s+");
      Element element0 = document0.appendElement("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("wnV=xO9Hci7 z>OEl", "wnV=xO9Hci7 z>OEl");
      document0.toggleClass("`dir");
      document0.toggleClass("?1");
      document0.toggleClass("?1");
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9;cizEl", "wnV=xO9;cizEl");
      Element element0 = document0.toggleClass("wnV=xO9;cizEl");
      document0.toggleClass("");
      element0.hasClass("{-");
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9;cizEl", "wnV=xO9;cizEl");
      document0.toggleClass("wnV=xO9;cizEl");
      Element element0 = document0.addClass("<html>\n <head></head>\n <body>\n  wnV=xO9;cizEl\n </body>\n</html>");
      element0.hasClass("wnV=xO9;cizEl");
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9;cizEl", "wnV=xO9;cizEl");
      document0.toggleClass("wnV=xO9;cizEl");
      document0.addClass("<html>\n <head></head>\n <body>\n  wnV=xO9;cizEl\n </body>\n</html>");
      document0.getElementsByClass("java.lang.string@0000000036");
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Document.createShell("{-");
      document0.toggleClass(">yR8$Q?5rvn{|");
      Element element0 = document0.toggleClass("{-");
      element0.hasClass("{-");
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      document0.toggleClass("");
      document0.getElementsByClass("java.lang.string@0000000038");
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Document.createShell("bn");
      Element element0 = document0.toggleClass("bn");
      element0.hasClass("center");
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Element element0 = new Element("java.lang.string@0000000054");
      CDataNode cDataNode0 = new CDataNode("java.lang.string@0000000054");
      Element element1 = element0.prependChild(cDataNode0);
      element1.data();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("wnV@=xO9;cizEl", "wnV@=xO9;cizEl");
      Comment comment0 = new Comment("BlMBek)8boOW*:3|&K", "BlMBek)8boOW*:3|&K");
      document0.appendChild(comment0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parse("h#socdl8hfqxvx^", "h#socdl8hfqxvx^");
      DataNode dataNode0 = new DataNode("h#socdl8hfqxvx^", "h#socdl8hfqxvx^");
      document0.appendChild(dataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Element element0 = new Element("9-2*]+9B}S|\"uv3");
      DocumentType documentType0 = new DocumentType("9-2*]+9B}S|\"uv3", "9-2*]+9B}S|\"uv3", "9-2*]+9B}S|\"uv3", "6EG0*~");
      element0.prependChild(documentType0);
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9Hci7 z>OEl", "!$");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "even");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.appendElement("br");
      document0.appendElement("br");
      document0.getElementsContainingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9;ci zOEl", "head");
      CDataNode cDataNode0 = new CDataNode("textarea");
      document0.appendChild(cDataNode0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9;ci zOEl", "{-");
      Element element0 = document0.tagName("textarea");
      element0.getElementsContainingOwnText("PDP$if)");
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("MarkupDeclarationOpen", "MarkupDeclarationOpen");
      document0.setParentNode(document0);
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("MarkupDeclarationOpen", "MarkupDeclarationOpen", false);
      document0.after((Node) xmlDeclaration0);
      document0.getElementsContainingOwnText("MarkupDeclarationOpen");
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = new Document("?1");
      Element element0 = document0.prepend("Queue not long enough to consume sequence");
      Document document1 = document0.normalise();
      TextNode textNode0 = new TextNode("");
      document1.appendChild(textNode0);
      element0.text();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parse("5)~KI`_WM3_ 3PY", "dF-|zrem,TT0EE(");
      Document document1 = Document.createShell("dF-|zrem,TT0EE(");
      document1.appendElement("br");
      document0.appendChild(document1);
      document0.getElementsContainingText("dF-|zrem,TT0EE(");
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      document0.appendElement("th");
      document0.getElementsContainingText("");
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", ":nth-child(%d)");
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      DocumentType documentType0 = new DocumentType(":nth-child(%d)", "map", "th");
      linkedHashSet0.add(documentType0);
      document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      document0.getElementsContainingText(":nth-child(%d)");
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000169", "java.lang.string@0000000169");
      document0.setParentNode(document0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{-", "{-");
      document0.setParentNode(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      Element element0 = document0.body();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      document0.reparentChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parse("{wvrS0s}GAI%$p\")3", "{wvrS0s}GAI%$p\")3");
      Element element0 = document0.body();
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("@2?6(TPcsu.74tO", "wnV=xO9Hci7 z>OEl");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parse(" > ", " > ");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Document.createShell("{-");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals("{-", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Document.createShell("xmlns:");
      document0.nextElementSibling();
      assertEquals("xmlns:", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]R", "]R");
      Element element0 = document0.head();
      Element element1 = element0.nextElementSibling();
      assertEquals(1, element1.siblingIndex());
      assertEquals("]R", element1.baseUri());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9Hci7 z>OEl", "{-");
      Element element0 = document0.appendElement("{-");
      Elements elements0 = element0.siblingElements();
      assertEquals("{-", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9;ci zOEl", "{-");
      document0.siblingElements();
      assertEquals("{-", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = new Document("{-");
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("LwZY`_EP", "LwZY`_EP");
      Element element0 = document0.head();
      assertEquals(0, element0.siblingIndex());
      
      element0.before("LwZY`_EP");
      String string0 = element0.cssSelector();
      assertEquals("html > head:nth-child(3)", string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.stging@0000000169", "java.lang.stging@0000000169");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("html > head", string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("?1", "?1");
      Element element0 = document0.toggleClass("");
      element0.cssSelector();
      assertEquals("?1", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9;ci zOEl", "{-");
      Node[] nodeArray0 = new Node[6];
      // Undeclared exception!
      try { 
        document0.insertChildren(12, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parse("", "%aB&+lCunb]?w_{!IF");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1644953643), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.stging@0000000169", "java.lang.stging@0000000169");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren(0, nodeArray0);
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = new Document("Se'`");
      LinkedHashSet<XmlDeclaration> linkedHashSet0 = new LinkedHashSet<XmlDeclaration>();
      // Undeclared exception!
      try { 
        document0.insertChildren(4720, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      Elements elements0 = document0.getElementsMatchingText("");
      // Undeclared exception!
      try { 
        document0.insertChildren((-2760), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Document.createShell("mentitem");
      DataNode dataNode0 = DataNode.createFromEncoded(" ", "java.lang.string@0000000042");
      document0.appendChild(dataNode0);
      document0.dataNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9Hci7 z>OEl", "jR");
      Element element0 = document0.body();
      List<TextNode> list0 = element0.textNodes();
      assertEquals("jR", element0.baseUri());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Document.createShell("xmlns:");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(1, document0.childNodeSize());
      assertEquals("xmlns:", document0.baseUri());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("557[y", "vidzo");
      document0.prependText("&]");
      Elements elements0 = document0.getElementsByIndexLessThan(0);
      assertEquals("vidzo", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b%c#8JTLI1CD)", "b%c#8JTLI1CD)");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      assertEquals("b%c#8JTLI1CD)", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("MarkupDeclarationOpen", "MarkupDeclarationOpen");
      Element element0 = document0.selectFirst("body");
      assertEquals(1, element0.siblingIndex());
      assertEquals("MarkupDeclarationOpen", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000169", "java.lang.string@0000000169");
      Elements elements0 = document0.getAllElements();
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Document.createShell(",^LQS6{.C");
      Element element0 = document0.removeClass("lnas8YP6-2");
      assertEquals(",^LQS6{.C", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      // Undeclared exception!
      try { 
        document0.before("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{-", "{-");
      document0.getElementsByAttribute("org.jsoup.parser.TokenQueue");
      assertEquals("{-", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.stging@0000000169");
      document0.getElementsByAttributeValueNot(" ", " ");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Document.createShell("{-");
      Element element0 = document0.shallowClone();
      assertEquals(1, document0.childNodeSize());
      assertEquals("{-", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("#", "#");
      document0.doSetBaseUri("#");
      assertEquals("#", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("MarkupDeclarationOpen", "MarkupDeclarationOpen");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("MarkupDeclarationOpen", "MarkupDeclarationOpen", false);
      // Undeclared exception!
      try { 
        document0.after((Node) xmlDeclaration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("]\";Z4BHxwP9pO", "{wvrS0s}GAI%$p\")3");
      Element element0 = document0.appendElement("textarea");
      element0.val(" 5pwr7t>");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9;ci zOEl", "{-");
      document0.getElementsByAttributeValueContaining("{-", "AfterDoctypeSystemKeyword");
      assertEquals("{-", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      document0.getElementsByAttributeValueEnding("]X=", "a");
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Element element0 = new Element("br");
      boolean boolean0 = element0.is("br");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = new Document("9~Pj;AE4&1");
      document0.getElementsByAttributeValueMatching("9~Pj;AE4&1", "9~Pj;AE4&1");
      assertEquals("9~Pj;AE4&1", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000169", "java.lang.string@0000000169");
      // Undeclared exception!
      try { 
        document0.wrap("java.lang.string@0000000169");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parse("wnV=xO9;cizEl", "wnV=xO9;cizEl");
      Elements elements0 = document0.getElementsMatchingOwnText("wnV=xO9;cizEl");
      assertEquals("wnV=xO9;cizEl", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Document.createShell("wnV=xO9;cizEl");
      Elements elements0 = document0.getElementsByIndexEquals((-2430));
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals("wnV=xO9;cizEl", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parse("(7=i|_X>^bp} &ui*Q", "(7=i|_X>^bp} &ui*Q");
      document0.getElementsByAttributeStarting("(7=i|_X>^bp} &ui*Q");
      assertEquals("(7=i|_X>^bp} &ui*Q", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("MakpDeclarationOpen", "MakpDeclarationOpen");
      Elements elements0 = document0.getElementsByIndexLessThan(34);
      assertEquals(1, document0.childNodeSize());
      assertEquals("MakpDeclarationOpen", document0.baseUri());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parse("lwzy`_ep", "TA,w-5kgD3HbBw");
      // Undeclared exception!
      try { 
        document0.after("L.E@arS23");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("wnV=xO9Hci7 z>OEl", "wnV=xO9Hci7 z>OEl");
      Pattern pattern0 = Pattern.compile("wnV=xO9Hci7 z>OEl", 414);
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      assertEquals("wnV=xO9Hci7 z>OEl", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Document.createShell("xmlns:");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("9-*]+9B}S|\"v3", "9-*]+9B}S|\"v3");
      // Undeclared exception!
      try { 
        document0.select((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Document.createShell("xmlns:");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("org.jsoup.nodes.Element", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("LwZY`_EP", "LwZY`_EP");
      document0.getElementsByAttributeValue("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      assertEquals("LwZY`_EP", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("--!", "--!");
      Element element0 = document0.attr("--!", false);
      assertEquals("--!", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parse("?1", "?1");
      document0.wholeText();
      assertEquals("?1", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]R", "wnV=xO9Hci7 z>OEl");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
      assertEquals("wnV=xO9Hci7 z>OEl", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lwty`>%>", "lwty`>%>");
      // Undeclared exception!
      try { 
        document0.tagName("                    ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "even");
      document0.prependText("");
      boolean boolean0 = document0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("557[y", "video");
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.child(0);
      assertEquals("video", element0.baseUri());
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Document document0 = Parser.parse(" > ", " > ");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals(" > ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bn", "bn");
      Elements elements0 = document0.getElementsMatchingText("bn");
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Document document0 = new Document("mk");
      document0.appendText("{MM7vvEvO");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Document document0 = Document.createShell("2x%fAv4*");
      Elements elements0 = document0.children();
      assertEquals("2x%fAv4*", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Document document0 = new Document("mk");
      document0.nextElementSiblings();
      assertEquals("mk", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("MarkupDeclarationOpen", "MarkupDeclarationOpen");
      document0.getElementById("MarkupDeclarationOpen");
  }
}
