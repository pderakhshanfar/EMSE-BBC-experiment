/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 21:54:58 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.PipedWriter;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = new Document(";N=n?cvH");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(";N=n?cvH", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";N=n?cvH", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertFalse(set0.contains(";N=n?cvH"));
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      
      Document document1 = (Document)document0.classNames(set0);
      assertNotNull(document1);
      assertFalse(set0.contains(";N=n?cvH"));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(";N=n?cvH", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";N=n?cvH", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertEquals(";N=n?cvH", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(";N=n?cvH", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      
      boolean boolean0 = document1.hasClass(";N=n?cvH");
      assertFalse(boolean0);
      assertFalse(set0.contains(";N=n?cvH"));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(";N=n?cvH", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";N=n?cvH", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertEquals(";N=n?cvH", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(";N=n?cvH", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("kQ`6.|?T?Cn]%dK1f6", "kQ`6.|?T?Cn]%dK1f6");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.location());
      assertFalse(document0.hasParent());
      
      MockFile mockFile0 = new MockFile((File) null, "kQ`6.|?T?Cn]%dK1f6");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      assertNotNull(mockFileWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      
      document0.outerHtmlTail(mockFileWriter0, 1532, document_OutputSettings0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y&EFq,] K~U[xs|bA", "Y&EFq,] K~U[xs|bA");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Y&EFq,] K~U[xs|bA");
      assertNotNull(mockPrintWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      document0.outerHtmlHead(mockPrintWriter0, 122, document_OutputSettings0);
      assertFalse(document0.hasParent());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Tag tag0 = Tag.valueOf("I+");
      assertNotNull(tag0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertEquals("I+", tag0.getName());
      assertEquals("I+", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      
      Element element0 = new Element(tag0, "I+");
      assertNotNull(element0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertEquals("I+", tag0.getName());
      assertEquals("I+", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("I+", element0.baseUri());
      assertEquals("I+", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("I+", element0.tagName());
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = new Document("YTEFq,] KH~U[xs|bA");
      assertNotNull(document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("YTEFq,] KH~U[xs|bA", document0.location());
      assertEquals("YTEFq,] KH~U[xs|bA", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      
      document0.nodelistChanged();
      assertEquals(0, document0.childNodeSize());
      assertEquals("YTEFq,] KH~U[xs|bA", document0.location());
      assertEquals("YTEFq,] KH~U[xs|bA", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", ":gt(%d)");
      assertNotNull(document0);
      assertEquals(":gt(%d)", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(":gt(%d)", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertEquals(":gt(%d)", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(":gt(%d)", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Tag tag0 = Tag.valueOf("3hkXV')2f&]");
      assertNotNull(tag0);
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("3hkXV')2f&]", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertEquals("3hkXV')2f&]", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      
      CDataNode cDataNode0 = new CDataNode("3hkXV')2f&]");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "3hkXV')2f&]", attributes0);
      assertNotNull(formElement0);
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("3hkXV')2f&]", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertEquals("3hkXV')2f&]", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("3hkXV')2f&]", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("3hkXV')2f&]", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("3hkXV')2f&]", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      
      Elements elements0 = formElement0.getElementsMatchingOwnText("");
      assertNotNull(elements0);
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("3hkXV')2f&]", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertEquals("3hkXV')2f&]", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("3hkXV')2f&]", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("3hkXV')2f&]", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("3hkXV')2f&]", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parse("~WvD;{eNkMwL&D ", "~WvD;{eNkMwL&D ");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("~WvD;{eNkMwL&D ", document0.location());
      assertEquals("~WvD;{eNkMwL&D ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("~WvD;{eNkMwL&D ", "~WvD;{eNkMwL&D ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: ~WvD;{eNkMwL&D 
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("figure", "\"hQ");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("\"hQ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("\"hQ", document0.location());
      
      Element element0 = document0.wrap("org.jsoup.nodes.Element");
      assertNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("\"hQ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("\"hQ", document0.location());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      
      Element element1 = element0.wrap("org.jsoup.nodes.Element");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("org.jsoup.nodes.Element", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      
      document0.setSiblingIndex((-1618280579));
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals((-1618280579), document0.siblingIndex());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.val("");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals((-1618280579), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals((-1618280579), document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[LKMX`Udf]uy[}SU{^", "[LKMX`Udf]uy[}SU{^");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("[LKMX`Udf]uy[}SU{^", document0.baseUri());
      assertEquals("[LKMX`Udf]uy[}SU{^", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("[LKMX`Udf]uy[}SU{^", document0.baseUri());
      assertEquals("[LKMX`Udf]uy[}SU{^", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("[LKMX`Udf]uy[}SU{^", element0.baseUri());
      assertEquals("body", element0.tagName());
      
      Element element1 = element0.val(":has(");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("[LKMX`Udf]uy[}SU{^", document0.baseUri());
      assertEquals("[LKMX`Udf]uy[}SU{^", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("[LKMX`Udf]uy[}SU{^", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("[LKMX`Udf]uy[}SU{^", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y&EFq,] K~U[xs|", "Y&EFq,] K~U[xs|");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Y&EFq,] K~U[xs|", document0.baseUri());
      assertEquals("Y&EFq,] K~U[xs|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      
      Document document1 = Parser.parseBodyFragment("Y&EFq,l K~U[xs|bA", "Y&EFq,] K~U[xs|");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("Y&EFq,] K~U[xs|", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Y&EFq,] K~U[xs|", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      
      document1.parentNode = (Node) document0;
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Y&EFq,] K~U[xs|", document0.baseUri());
      assertEquals("Y&EFq,] K~U[xs|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("Y&EFq,] K~U[xs|", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Y&EFq,] K~U[xs|", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.parentNode.siblingIndex());
      assertFalse(document1.parentNode.hasParent());
      
      Document document2 = (Document)document1.val("Y&EFq,l K~U[xs|bA");
      assertNotNull(document2);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("Y&EFq,] K~U[xs|", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Y&EFq,] K~U[xs|", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Y&EFq,] K~U[xs|", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Y&EFq,] K~U[xs|", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y&EFq,] K~U[xs|bA", "Y&EFq,] K~U[xs|bA");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.appendChild(document0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("Y&EFq,] K~U[xs|bA", document1.location());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("Y&EFq,] K~U[xs|bA", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      
      Document document2 = (Document)document0.toggleClass("Q,dXX)Uo-QB@F");
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Y&EFq,] K~U[xs|bA", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("Y&EFq,] K~U[xs|bA", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("html", "Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      
      Element element0 = document0.createElement("html");
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("html", element0.tagName());
      
      Element element1 = element0.toggleClass("Children collection to be inserted must not be null.");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("html", element0.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("html", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.tagName());
      assertFalse(element1.hasParent());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("org.jsoup.nodes.Element", element0.baseUri());
      assertEquals("body", element0.tagName());
      
      Element element1 = element0.text("org.jsoup.nodes.Element");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("org.jsoup.nodes.Element", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("org.jsoup.nodes.Element", element1.baseUri());
      assertEquals("body", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      
      Document document1 = (Document)document0.text("org.jsoup.nodes.Element");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.nodes.Element", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Document.createShell("A3Z");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("A3Z", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("A3Z", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = Parser.parse("Chidren collecton to be inserted must not be null.", "Chidren collecton to be inserted must not be null.");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertEquals(0, document1.siblingIndex());
      assertEquals("Chidren collecton to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Chidren collecton to be inserted must not be null.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Document document2 = (Document)document1.appendTo(document0);
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("A3Z", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("A3Z", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Chidren collecton to be inserted must not be null.", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Chidren collecton to be inserted must not be null.", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("Chidren collecton to be inserted must not be null.", document2.baseUri());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Chidren collecton to be inserted must not be null.", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      
      Document document3 = (Document)document2.tagName("W6?DV9j+P9VH8pVc");
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("A3Z", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("A3Z", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Chidren collecton to be inserted must not be null.", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Chidren collecton to be inserted must not be null.", document1.location());
      assertEquals("w6?dv9j+p9vh8pvc", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("Chidren collecton to be inserted must not be null.", document2.baseUri());
      assertEquals(1, document2.siblingIndex());
      assertEquals("w6?dv9j+p9vh8pvc", document2.tagName());
      assertEquals("Chidren collecton to be inserted must not be null.", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Chidren collecton to be inserted must not be null.", document3.baseUri());
      assertEquals(1, document3.siblingIndex());
      assertEquals("Chidren collecton to be inserted must not be null.", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("w6?dv9j+p9vh8pvc", document3.tagName());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Document.createShell("A3Z");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A3Z", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("A3Z", document0.baseUri());
      
      Element element0 = document0.createElement("?JY");
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A3Z", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("A3Z", document0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("?JY", element0.tagName());
      assertEquals("A3Z", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("?JY", element0.nodeName());
      
      Element element1 = element0.tagName("W6?DV9j+P9VH8pVc");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A3Z", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("A3Z", document0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("w6?dv9j+p9vh8pvc", element0.nodeName());
      assertEquals("A3Z", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("w6?dv9j+p9vh8pvc", element0.tagName());
      assertEquals("w6?dv9j+p9vh8pvc", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("A3Z", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("w6?dv9j+p9vh8pvc", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = new Document("&di;}=h");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("&di;}=h", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("&di;}=h", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      
      String string0 = document0.tagName();
      assertNotNull(string0);
      assertEquals("#root", string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("&di;}=h", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("&di;}=h", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = new Document("");
      assertNotNull(document0);
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Tag tag0 = document0.tag();
      assertNotNull(tag0);
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertEquals("#root", tag0.getName());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = new Document("Wi");
      assertNotNull(document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Wi", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Wi", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.selectFirst("U");
      assertNull(element0);
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Wi", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Wi", document0.baseUri());
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Document.createShell("ibm367");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ibm367", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("ibm367", document0.baseUri());
      
      Elements elements0 = document0.select("ibm367");
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ibm367", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("ibm367", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Tag tag0 = Tag.valueOf("noyembed");
      assertNotNull(tag0);
      assertFalse(tag0.isKnownTag());
      assertEquals("noyembed", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertEquals("noyembed", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "noyembed", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isKnownTag());
      assertEquals("noyembed", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertEquals("noyembed", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(0, attributes0.size());
      assertEquals("noyembed", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("noyembed", formElement0.baseUri());
      assertEquals("noyembed", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      
      Elements elements0 = formElement0.select("noyembed");
      assertNotNull(elements0);
      assertFalse(tag0.isKnownTag());
      assertEquals("noyembed", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertEquals("noyembed", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(0, attributes0.size());
      assertEquals("noyembed", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("noyembed", formElement0.baseUri());
      assertEquals("noyembed", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/9AEM},ARGa", "/9AEM},ARGa");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/9AEM},ARGa", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/9AEM},ARGa", document0.location());
      
      String string0 = "a^JqITaX9[O9'v\\u>`";
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/9AEM},ARGa", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/9AEM},ARGa", document0.location());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("/9AEM},ARGa", element0.baseUri());
      assertEquals("body", element0.tagName());
      
      Element element1 = element0.removeClass(string0);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/9AEM},ARGa", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/9AEM},ARGa", document0.location());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("/9AEM},ARGa", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("/9AEM},ARGa", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("x}}edzavSJT", "x}}edzavSJT");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("x}}edzavSJT", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("x}}edzavSJT", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("x}}edzavSJT", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("x}}edzavSJT", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      
      Document document2 = (Document)document0.removeClass("#root");
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("x}}edzavSJT", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("x}}edzavSJT", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("x}}edzavSJT", document2.baseUri());
      assertTrue(document2.hasParent());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000035 cp367 &di;}=h iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      assertNotNull(document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.removeClass("body");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("x}}edzavSJT", "x}}edzavSJT");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("x}}edzavSJT", document0.location());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("x}}edzavSJT", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("x}}edzavSJT", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("x}}edzavSJT", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      
      Document document2 = (Document)document0.prependText("x}}edzavSJT");
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("x}}edzavSJT", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("x}}edzavSJT", document2.location());
      assertEquals(2, document2.siblingIndex());
      assertEquals("x}}edzavSJT", document2.baseUri());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Document.createShell("A3\"");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("A3\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A3\"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.child(0);
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("A3\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A3\"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("A3\"", element0.baseUri());
      assertEquals("html", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      
      Element element1 = element0.prependText("A3\"");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("A3\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A3\"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("A3\"", element0.baseUri());
      assertEquals("html", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.tagName());
      assertEquals(3, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(3, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("html", element1.tagName());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.nodeName());
      assertEquals("A3\"", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = new Document("on");
      assertNotNull(document0);
      assertEquals("on", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("on", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.clone();
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("on", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("on", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("on", document1.location());
      assertEquals("on", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      
      Document document2 = (Document)document1.prependChild(document0);
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("on", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("on", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("on", document1.location());
      assertEquals("on", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("on", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("on", document2.baseUri());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = new Document("on");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("on", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("on", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.prependChild(document0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("on", document0.location());
      assertEquals("on", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("on", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("on", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Document.createShell("A3\"");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("A3\"", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("A3\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.child(0);
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("A3\"", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("A3\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.nodeName());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("A3\"", element0.baseUri());
      assertEquals("html", element0.tagName());
      
      Element element1 = element0.prepend("A3\"");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("A3\"", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("A3\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(4, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("A3\"", element0.baseUri());
      assertEquals("html", element0.tagName());
      assertEquals("A3\"", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(4, element1.childNodeSize());
      assertEquals("html", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("x}}edzavSJT", "x}}edzavSJT");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("x}}edzavSJT", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.parents();
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("x}}edzavSJT", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("x}}edzavSJT", "x}}edzavSJT");
      assertNotNull(document0);
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("x}}edzavSJT", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.parent();
      assertNull(element0);
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("x}}edzavSJT", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y&EFq,] K~U[xs|bA", "Y&EFq,] K~U[xs|bA");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.baseUri());
      
      Document document1 = (Document)document0.append("Y&EFq,] K~U[xs|bA");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Y&EFq,] K~U[xs|bA", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Y&EFq,] K~U[xs|bA", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      
      String string0 = document0.ownText();
      assertNotNull(string0);
      assertEquals("Y&EFq,] K~U[xs|bA", string0);
      assertSame(document0, document1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = new Document("");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      String string0 = document0.nodeName();
      assertNotNull(string0);
      assertEquals("#document", string0);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("org.jsoup.nodes.Element", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      
      boolean boolean0 = element0.isBlock();
      assertTrue(boolean0);
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("org.jsoup.nodes.Element", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Document.createShell("8N&G[lfZLV6)W");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("8N&G[lfZLV6)W", document0.location());
      assertEquals("8N&G[lfZLV6)W", document0.baseUri());
      
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      assertNotNull(evaluator_AllElements0);
      assertEquals("*", evaluator_AllElements0.toString());
      
      boolean boolean0 = document0.is((Evaluator) evaluator_AllElements0);
      assertTrue(boolean0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("8N&G[lfZLV6)W", document0.location());
      assertEquals("8N&G[lfZLV6)W", document0.baseUri());
      assertEquals("*", evaluator_AllElements0.toString());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Tag tag0 = Tag.valueOf("noyembed");
      assertNotNull(tag0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("noyembed", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertEquals("noyembed", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "noyembed", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("noyembed", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertEquals("noyembed", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("noyembed", formElement0.tagName());
      assertEquals("noyembed", formElement0.baseUri());
      assertEquals("noyembed", formElement0.nodeName());
      
      boolean boolean0 = formElement0.is("noyembed");
      assertTrue(boolean0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("noyembed", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertEquals("noyembed", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("noyembed", formElement0.tagName());
      assertEquals("noyembed", formElement0.baseUri());
      assertEquals("noyembed", formElement0.nodeName());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf(" 3D`/Q]J)", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("3d`/q]j)", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("3d`/q]j)", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, " 3D`/Q]J)", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("3d`/q]j)", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("3d`/q]j)", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals("3d`/q]j)", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("3d`/q]j)", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(" 3D`/Q]J)", formElement0.baseUri());
      
      boolean boolean0 = formElement0.is("iso646-us");
      assertFalse(boolean0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("3d`/q]j)", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("3d`/q]j)", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals("3d`/q]j)", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("3d`/q]j)", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(" 3D`/Q]J)", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = new Document(" 3D`/Q]J)");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" 3D`/Q]J)", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" 3D`/Q]J)", document0.location());
      assertEquals("#root", document0.tagName());
      
      Node[] nodeArray0 = new Node[2];
      Tag tag0 = Tag.valueOf("#root");
      assertNotNull(tag0);
      assertTrue(tag0.isInline());
      assertEquals("#root", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertEquals("#root", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      assertNotNull(formElement0);
      assertTrue(tag0.isInline());
      assertEquals("#root", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertEquals("#root", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("#root", formElement0.nodeName());
      assertEquals("br", formElement0.baseUri());
      assertEquals("#root", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      
      nodeArray0[0] = (Node) formElement0;
      CDataNode cDataNode0 = new CDataNode(" 3D`/Q]J)");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      nodeArray0[1] = (Node) cDataNode0;
      Document document1 = (Document)document0.insertChildren(0, nodeArray0);
      assertNotNull(document1);
      assertEquals(2, nodeArray0.length);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" 3D`/Q]J)", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" 3D`/Q]J)", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(" 3D`/Q]J)", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(" 3D`/Q]J)", document1.baseUri());
      assertFalse(document1.hasParent());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("java.lang.string@0000000008 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 0+g_ d8 iso_646.irv:1991 iso646-us ibm367 646 us", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "default", (Attributes) null);
      assertNotNull(pseudoTextElement0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("default", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Element element0 = pseudoTextElement0.insertChildren((-1), (Collection<? extends Node>) linkedHashSet0);
      assertNotNull(element0);
      assertSame(pseudoTextElement0, element0);
      assertSame(element0, pseudoTextElement0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("default", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(element0.isBlock());
      assertEquals("default", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("\"hQ", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("\"hQ", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("\"hQ", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      
      CDataNode cDataNode0 = new CDataNode("id");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      
      Attribute attribute0 = new Attribute("id", "\"hQ", attributes0);
      assertNotNull(attribute0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals("\"hQ", attribute0.getValue());
      assertEquals("id", attribute0.getKey());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals("\"hQ", attribute0.getValue());
      assertEquals("id", attribute0.getKey());
      assertEquals(2, attributes1.size());
      
      FormElement formElement0 = new FormElement(tag0, ",<OhX<!$<rq9", attributes1);
      assertNotNull(formElement0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("\"hQ", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("\"hQ", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals("\"hQ", attribute0.getValue());
      assertEquals("id", attribute0.getKey());
      assertEquals(2, attributes1.size());
      assertFalse(formElement0.hasParent());
      assertEquals(",<OhX<!$<rq9", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("\"hQ", formElement0.nodeName());
      assertEquals("\"hQ", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      
      String string0 = formElement0.id();
      assertNotNull(string0);
      assertEquals("\"hQ", string0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("\"hQ", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("\"hQ", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals("\"hQ", attribute0.getValue());
      assertEquals("id", attribute0.getKey());
      assertEquals(2, attributes1.size());
      assertFalse(formElement0.hasParent());
      assertEquals(",<OhX<!$<rq9", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("\"hQ", formElement0.nodeName());
      assertEquals("\"hQ", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf(")nUIok", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals(")nuiok", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertEquals(")nuiok", tag0.toString());
      
      CDataNode cDataNode0 = new CDataNode(")nUIok");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "x}}edzavSJT", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals(")nuiok", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertEquals(")nuiok", tag0.toString());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(")nuiok", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("x}}edzavSJT", formElement0.baseUri());
      assertEquals(")nuiok", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      
      BufferedWriter bufferedWriter0 = formElement0.html((BufferedWriter) null);
      assertNull(bufferedWriter0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals(")nuiok", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertEquals(")nuiok", tag0.toString());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(")nuiok", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("x}}edzavSJT", formElement0.baseUri());
      assertEquals(")nuiok", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = new Document("&di;}=h");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("&di;}=h", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("&di;}=h", document0.baseUri());
      
      String string0 = document0.html();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("&di;}=h", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("&di;}=h", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = new Document("kQ`6.|?T?Cn]%dK1f6");
      assertNotNull(document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.baseUri());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.val("kQ`6.|?T?Cn]%dK1f6");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.baseUri());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      
      boolean boolean0 = document1.hasAttributes();
      assertTrue(boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.baseUri());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y&EFq,] K~U[xs|bA", "Y&EFq,] K~U[xs|bA");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      boolean boolean0 = document0.hasAttributes();
      assertFalse(boolean0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = new Document(" 3D`/Q]J)");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" 3D`/Q]J)", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" 3D`/Q]J)", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Pattern pattern0 = Pattern.compile("4^/Tj", 0);
      assertNotNull(pattern0);
      assertEquals("4^/Tj", pattern0.pattern());
      assertEquals("4^/Tj", pattern0.toString());
      assertEquals(0, pattern0.flags());
      
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" 3D`/Q]J)", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" 3D`/Q]J)", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("4^/Tj", pattern0.pattern());
      assertEquals("4^/Tj", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("L~TKG^d*2-$|OyUw", "L~TKG^d*2-$|OyUw");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("L~TKG^d*2-$|OyUw", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("L~TKG^d*2-$|OyUw", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      
      Pattern pattern0 = Pattern.compile("L~TKG^d*2-$|OyUw", 0);
      assertNotNull(pattern0);
      assertEquals("L~TKG^d*2-$|OyUw", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("L~TKG^d*2-$|OyUw", pattern0.toString());
      
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      assertNotNull(elements0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("L~TKG^d*2-$|OyUw", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("L~TKG^d*2-$|OyUw", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("L~TKG^d*2-$|OyUw", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("L~TKG^d*2-$|OyUw", pattern0.toString());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      
      Elements elements0 = document0.getElementsMatchingText("");
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("vqjfxi9hd|i", "vqjfxi9hd|i");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("vqjfxi9hd|i", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("vqjfxi9hd|i", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Pattern pattern0 = Pattern.compile("vqjfxi9hd|i", 66);
      assertNotNull(pattern0);
      assertEquals("vqjfxi9hd|i", pattern0.pattern());
      assertEquals("vqjfxi9hd|i", pattern0.toString());
      assertEquals(66, pattern0.flags());
      
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      assertNotNull(elements0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("vqjfxi9hd|i", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("vqjfxi9hd|i", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("vqjfxi9hd|i", pattern0.pattern());
      assertEquals("vqjfxi9hd|i", pattern0.toString());
      assertEquals(66, pattern0.flags());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.html("link");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      
      Elements elements0 = document1.getElementsMatchingOwnText("link");
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = new Document("");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      Elements elements0 = document0.getElementsContainingText("");
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("       ", "Vmrik${yUWK0g[6e2");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Vmrik${yUWK0g[6e2", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("Vmrik${yUWK0g[6e2", document0.baseUri());
      
      Elements elements0 = document0.getElementsContainingOwnText("Vmrik${yUWK0g[6e2");
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Vmrik${yUWK0g[6e2", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("Vmrik${yUWK0g[6e2", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("kQ`6.|?T?Cn]%dK1f6", "kQ`6.|?T?Cn]%dK1f6");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.getElementsByTag("org.jsoup.nodes.Attribute");
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("x}}edzavSJT", "x}}edzavSJT");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("x}}edzavSJT", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.getElementsByTag("head");
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("x}}edzavSJT", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Element element0 = new Element("csascii");
      assertNotNull(element0);
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("csascii", element0.tagName());
      assertEquals("csascii", element0.nodeName());
      
      Elements elements0 = element0.getElementsByIndexLessThan(6);
      assertNotNull(elements0);
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("csascii", element0.tagName());
      assertEquals("csascii", element0.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = new Document(";N=n?cvH");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";N=n?cvH", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";N=n?cvH", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Elements elements0 = document0.getElementsByIndexGreaterThan(134);
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";N=n?cvH", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";N=n?cvH", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("kQ`6.|?T?Cn]%dK1f6", "kQ`6.|?T?Cn]%dK1f6");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.location());
      
      Elements elements0 = document0.getElementsByAttributeValueNot("org.jsoup.nodes.Element", "Children collection to be inserted must not be null.");
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.location());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("]viGUe46xSE", "9&A8]d&P*3Ga");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals("9&A8]d&P*3Ga", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("9&A8]d&P*3Ga", document0.location());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.attr("9&A8]d&P*3Ga", "]viGUe46xSE");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals("9&A8]d&P*3Ga", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("9&A8]d&P*3Ga", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("9&A8]d&P*3Ga", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("9&A8]d&P*3Ga", document1.location());
      
      Elements elements0 = document0.getElementsByAttributeValue("9&A8]d&P*3Ga", "]viGUe46xSE");
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals("9&A8]d&P*3Ga", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("9&A8]d&P*3Ga", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/9AEM},ARGa", "/9AEM},ARGa");
      assertNotNull(document0);
      assertEquals("/9AEM},ARGa", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/9AEM},ARGa", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("/9AEM},ARGa", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/9AEM},ARGa", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("/9AEM},ARGa", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("/9AEM},ARGa", document1.location());
      
      Element element0 = document1.firstElementSibling();
      assertNotNull(element0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("/9AEM},ARGa", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/9AEM},ARGa", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("/9AEM},ARGa", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("/9AEM},ARGa", document1.location());
      assertEquals("html", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("/9AEM},ARGa", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = new Document("x}}edzavSJT");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("x}}edzavSJT", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = Parser.parseBodyFragmentRelaxed("x}}edzavSJT", "img");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertEquals(1, document1.childNodeSize());
      assertEquals("img", document1.baseUri());
      assertEquals("img", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      
      Document document2 = (Document)document0.appendTo(document1);
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(1, document0.siblingIndex());
      assertEquals("x}}edzavSJT", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("img", document1.baseUri());
      assertEquals("img", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.siblingIndex());
      assertEquals("x}}edzavSJT", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("x}}edzavSJT", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      
      Document document3 = (Document)document0.empty();
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertEquals(1, document0.siblingIndex());
      assertEquals("x}}edzavSJT", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("x}}edzavSJT", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.siblingIndex());
      assertEquals("x}}edzavSJT", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Document.createShell("A3\"");
      assertNotNull(document0);
      assertEquals("A3\"", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("A3\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.child(0);
      assertNotNull(element0);
      assertEquals("A3\"", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("A3\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.nodeName());
      assertEquals("html", element0.tagName());
      assertEquals("A3\"", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      
      Element element1 = element0.empty();
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("A3\"", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("A3\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.nodeName());
      assertEquals("html", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("A3\"", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("html", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("A3\"", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = new Document("x}}edzavSJT");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("x}}edzavSJT", document0.location());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("x}}edzavSJT", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("x}}edzavSJT", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("x}}edzavSJT", document1.location());
      
      Document document2 = (Document)document0.empty();
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("x}}edzavSJT", document0.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("x}}edzavSJT", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("x}}edzavSJT", document2.baseUri());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("org.jsoup.nodes.Element", element0.baseUri());
      assertEquals("body", element0.tagName());
      
      Element element1 = element0.doClone(document0);
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("org.jsoup.nodes.Element", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = new Document(";N=n?cvH");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(";N=n?cvH", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(";N=n?cvH", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.doClone((Node) null);
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(";N=n?cvH", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(";N=n?cvH", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(";N=n?cvH", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(";N=n?cvH", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("O5Te^", "      `");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("      `", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("      `", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("      `", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("      `", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("      `", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      
      Element element1 = element0.clone();
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("      `", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("      `", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("      `", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("      `", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertFalse(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      Document document1 = (Document)document0.classNames(set0);
      assertNotNull(document1);
      assertFalse(set0.contains(""));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      
      Set<String> set1 = document0.classNames();
      assertNotNull(set1);
      assertFalse(set1.contains(""));
      assertFalse(set1.equals((Object)set0));
      assertSame(document0, document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(set1.isEmpty());
      assertEquals(14, set1.size());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      
      Document document1 = (Document)document0.classNames(set0);
      assertNotNull(document1);
      assertFalse(set0.contains(""));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      
      String string0 = document1.className();
      assertNotNull(string0);
      assertFalse(set0.contains(""));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parse("8y\"2W>w", "menu");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("menu", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("menu", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Elements elements0 = document0.children();
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals("menu", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("menu", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      
      Document document1 = (Document)document0.html("");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      
      int int0 = document0.childNodeSize();
      assertEquals(0, int0);
      assertSame(document0, document1);
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":lt(%d)", "#root");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.baseUri());
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      int int0 = document0.childNodeSize();
      assertEquals(1, int0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.baseUri());
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Document.createShell("F[eBMU9ueY~|uT0 8");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("F[eBMU9ueY~|uT0 8", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("F[eBMU9ueY~|uT0 8", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.createElement("4");
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("F[eBMU9ueY~|uT0 8", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("F[eBMU9ueY~|uT0 8", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("4", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("4", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("F[eBMU9ueY~|uT0 8", element0.baseUri());
      assertFalse(element0.hasParent());
      
      Element element1 = element0.appendTo(document0);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("F[eBMU9ueY~|uT0 8", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("F[eBMU9ueY~|uT0 8", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("4", element0.nodeName());
      assertEquals("4", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("F[eBMU9ueY~|uT0 8", element0.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("F[eBMU9ueY~|uT0 8", element1.baseUri());
      assertEquals("4", element1.nodeName());
      assertEquals("4", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      
      Element element2 = element1.before((Node) element0);
      assertNotNull(element2);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("F[eBMU9ueY~|uT0 8", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("F[eBMU9ueY~|uT0 8", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("4", element0.nodeName());
      assertEquals("4", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("F[eBMU9ueY~|uT0 8", element0.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("F[eBMU9ueY~|uT0 8", element1.baseUri());
      assertEquals("4", element1.nodeName());
      assertEquals("4", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("F[eBMU9ueY~|uT0 8", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals("4", element2.tagName());
      assertEquals("4", element2.nodeName());
      assertEquals(1, element2.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000008 cp367 csascii iso-ir-6 izb>r iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us", "=fAhk[Ks");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("=fAhk[Ks", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("=fAhk[Ks", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("=fAhk[Ks", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("=fAhk[Ks", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("=fAhk[Ks", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      
      Element element1 = element0.before((Node) document0);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("=fAhk[Ks", document0.baseUri());
      assertEquals("=fAhk[Ks", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("=fAhk[Ks", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("=fAhk[Ks", element1.baseUri());
      assertEquals(2, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y&EFq,] K~U[xs|bA", "Y&EFq,] K~U[xs|bA");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Document document1 = Parser.parseBodyFragment("Y&EFq,] K~U[xs|bA", "Y&EFq,] K~U[xs|bA");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Y&EFq,] K~U[xs|bA", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("Y&EFq,] K~U[xs|bA", document1.location());
      
      document1.parentNode = (Node) document0;
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Y&EFq,] K~U[xs|bA", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("Y&EFq,] K~U[xs|bA", document1.location());
      assertFalse(document1.parentNode.hasParent());
      assertEquals(0, document1.parentNode.siblingIndex());
      
      Document document2 = (Document)document1.before("Wr:;px?.#E]nLN[");
      assertNotNull(document2);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Y&EFq,] K~U[xs|bA", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("Y&EFq,] K~U[xs|bA", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Y&EFq,] K~U[xs|bA", document2.baseUri());
      assertEquals("Y&EFq,] K~U[xs|bA", document2.location());
      assertEquals(1, document2.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000008 cp367 csascii iso-ir-6 izb>r iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us", "=fAhk[Ks");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("=fAhk[Ks", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("=fAhk[Ks", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("=fAhk[Ks", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("=fAhk[Ks", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals("=fAhk[Ks", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      
      Element element1 = element0.before("=fAhk[Ks");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("=fAhk[Ks", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("=fAhk[Ks", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals("=fAhk[Ks", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(3, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("=fAhk[Ks", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(3, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Document.createShell("W-V/5W*3C2");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("W-V/5W*3C2", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("W-V/5W*3C2", document0.baseUri());
      
      String string0 = document0.baseUri();
      assertNotNull(string0);
      assertEquals("W-V/5W*3C2", string0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("W-V/5W*3C2", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("W-V/5W*3C2", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      
      String string0 = document0.baseUri();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      
      Document document1 = (Document)document0.classNames(set0);
      assertNotNull(document1);
      assertFalse(set0.contains(""));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertSame(document0, document1);
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.parser.Token$Character", "org.jsoup.parser.Token$Character");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Character", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.Token$Character", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = (Document)document0.attr("org.jsoup.parser.Token$Character", false);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Character", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.Token$Character", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.parser.Token$Character", document1.location());
      assertEquals("org.jsoup.parser.Token$Character", document1.baseUri());
      assertFalse(document1.hasParent());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Document.createShell("L~TKG^d*2-$|OyUw");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("L~TKG^d*2-$|OyUw", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("L~TKG^d*2-$|OyUw", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("L~TKG^d*2-$|OyUw", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("L~TKG^d*2-$|OyUw", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("L~TKG^d*2-$|OyUw", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      
      Element element1 = element0.attr("L~TKG^d*2-$|OyUw", "L~TKG^d*2-$|OyUw");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("L~TKG^d*2-$|OyUw", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("L~TKG^d*2-$|OyUw", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("L~TKG^d*2-$|OyUw", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("L~TKG^d*2-$|OyUw", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Document.createShell("A3\"");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("A3\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A3\"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.child(0);
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("A3\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A3\"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertEquals("html", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("A3\"", element0.baseUri());
      
      Element element1 = element0.appendTo(document0);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("A3\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A3\"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertEquals("html", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("A3\"", element0.baseUri());
      assertEquals("A3\"", element1.baseUri());
      assertEquals("html", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("html", element1.tagName());
      assertTrue(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/9AEM},ARGa", "/9AEM},ARGa");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/9AEM},ARGa", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/9AEM},ARGa", document0.location());
      
      Document document1 = new Document("/9AEM},ARGa");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("/9AEM},ARGa", document1.location());
      assertEquals("/9AEM},ARGa", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      
      Document document2 = (Document)document1.appendTo(document0);
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/9AEM},ARGa", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/9AEM},ARGa", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("/9AEM},ARGa", document1.location());
      assertEquals("/9AEM},ARGa", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("/9AEM},ARGa", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("/9AEM},ARGa", document2.location());
      
      Document document3 = (Document)document2.attr("/9AEM},ARGa", "java.lang.string@0000000008 cp367 csascii iso-ir-6 izb>r iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/9AEM},ARGa", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/9AEM},ARGa", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("/9AEM},ARGa", document1.location());
      assertEquals("/9AEM},ARGa", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("/9AEM},ARGa", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("/9AEM},ARGa", document2.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("/9AEM},ARGa", document3.location());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("/9AEM},ARGa", document3.baseUri());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/9AEM}9p,ARGa", "/9AEM}9p,ARGa");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("/9AEM}9p,ARGa", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/9AEM}9p,ARGa", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("/9AEM}9p,ARGa", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/9AEM}9p,ARGa", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("/9AEM}9p,ARGa", element0.baseUri());
      
      Element element1 = element0.appendText("/9AEM}9p,ARGa");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("/9AEM}9p,ARGa", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/9AEM}9p,ARGa", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("/9AEM}9p,ARGa", element0.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("/9AEM}9p,ARGa", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Element element0 = new Element(":lt(%d)");
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(":lt(%d)", element0.nodeName());
      assertEquals(":lt(%d)", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      
      Element element1 = element0.appendElement("org.jsoup.select.CombiningEvaluator$And");
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals(":lt(%d)", element0.nodeName());
      assertEquals(":lt(%d)", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertTrue(element1.hasParent());
      assertEquals("org.jsoup.select.combiningevaluator$and", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals("org.jsoup.select.combiningevaluator$and", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      
      Element element2 = element1.attr("org.jsoup.select.CombiningEvaluator$And", true);
      assertNotNull(element2);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertNotSame(element2, element0);
      assertSame(element2, element1);
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals(":lt(%d)", element0.nodeName());
      assertEquals(":lt(%d)", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertTrue(element1.hasParent());
      assertEquals("org.jsoup.select.combiningevaluator$and", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals("org.jsoup.select.combiningevaluator$and", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("org.jsoup.select.combiningevaluator$and", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("org.jsoup.select.combiningevaluator$and", element2.tagName());
      assertFalse(element2.isBlock());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("x}}edzavSJT", "x}}edzavSJT");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("x}}edzavSJT", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.appendElement("x}}edzavSJT");
      assertNotNull(element0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("x}}edzavSJT", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("x}}edzavSJT", element0.baseUri());
      assertEquals("x}}edzavsjt", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("x}}edzavsjt", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parse("/9]EM},ARGa", "/9]EM},ARGa");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("/9]EM},ARGa", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/9]EM},ARGa", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("/9]EM},ARGa", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/9]EM},ARGa", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("/9]EM},ARGa", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      
      Element element1 = element0.appendChild(document0);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("/9]EM},ARGa", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/9]EM},ARGa", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("/9]EM},ARGa", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("/9]EM},ARGa", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y&EFq,] K~U[xs|bA", "Y&EFq,] K~U[xs|bA");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Y&EFq,] K~U[xs|bA", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("Y&EFq,] K~U[xs|bA", document1.location());
      assertEquals(0, document1.siblingIndex());
      
      Document document2 = (Document)document1.appendChild(document0);
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Y&EFq,] K~U[xs|bA", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("Y&EFq,] K~U[xs|bA", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("Y&EFq,] K~U[xs|bA", document2.baseUri());
      assertEquals("Y&EFq,] K~U[xs|bA", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      
      Element element1 = element0.append("BeforeDoctypeSystemIdentifier");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, element0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/9AEM}9p,ARGa", "/9AEM}9p,ARGa");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("/9AEM}9p,ARGa", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("/9AEM}9p,ARGa", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("/9AEM}9p,ARGa", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("/9AEM}9p,ARGa", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("/9AEM}9p,ARGa", element0.baseUri());
      
      Element element1 = element0.after((Node) document0);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/9AEM}9p,ARGa", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("/9AEM}9p,ARGa", document0.baseUri());
      assertEquals(2, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("/9AEM}9p,ARGa", element0.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("/9AEM}9p,ARGa", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[LKMX`Udf]uy[}SU{^", "[LKMX`Udf]uy[}SU{^");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("[LKMX`Udf]uy[}SU{^", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("[LKMX`Udf]uy[}SU{^", document0.baseUri());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("[LKMX`Udf]uy[}SU{^", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("[LKMX`Udf]uy[}SU{^", document0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("[LKMX`Udf]uy[}SU{^", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      
      Element element1 = element0.after("V9~3");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("[LKMX`Udf]uy[}SU{^", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("[LKMX`Udf]uy[}SU{^", document0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("[LKMX`Udf]uy[}SU{^", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("[LKMX`Udf]uy[}SU{^", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("x}}edzavSJT", "x}}edzavSJT");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertEquals("x}}edzavSJT", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertEquals("x}}edzavSJT", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("x}}edzavSJT", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      
      Element element1 = element0.addClass("<#");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertEquals("x}}edzavSJT", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("x}}edzavSJT", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("x}}edzavSJT", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("u!cfwTgM!.;B", "org.jsoup.select.Collector");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.select.Collector", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.select.Collector", document0.baseUri());
      
      Document document1 = (Document)document0.empty();
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.select.Collector", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.select.Collector", document0.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("org.jsoup.select.Collector", document1.location());
      assertEquals("org.jsoup.select.Collector", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      
      Document document2 = (Document)document1.addClass("org.jsoup.select.Collector");
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.select.Collector", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.select.Collector", document0.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("org.jsoup.select.Collector", document1.location());
      assertEquals("org.jsoup.select.Collector", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("org.jsoup.select.Collector", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.select.Collector", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = new Document("[^-a-zA-Z0-9_:.]");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("[^-a-zA-Z0-9_:.]", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("[^-a-zA-Z0-9_:.]", document0.baseUri());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y&EFq,] K~U[xs|bA", "Y&EFq,] K~U[xs|bA");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      document0.addChildren(nodeArray0);
      assertEquals(8, nodeArray0.length);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.location());
      assertEquals(1, document0.siblingIndex());
      
      // Undeclared exception!
      document0.val("Y&EFq,] K~U[xs|bA");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parse("\"hQ", "\"hQ");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("\"hQ", document0.location());
      assertEquals("\"hQ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = new Document("");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("", document0.location());
      
      // Undeclared exception!
      try { 
        document0.text(":nth-child(%d)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("x}}edzavSJT", "x}}edzavSJT");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("x}}edzavSJT", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.siblingIndex());
      assertEquals("x}}edzavSJT", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("x}}edzavSJT", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("x}}edzavSJT", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      
      // Undeclared exception!
      document0.tagName("x}}edzavSJT");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = new Document("&Gqp=");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("&Gqp=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("&Gqp=", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = new Document("YTEFq,] KH~U[xs|bA");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("YTEFq,] KH~U[xs|bA", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("YTEFq,] KH~U[xs|bA", document0.baseUri());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("YTEFq,] KH~U[xs|bA", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("YTEFq,] KH~U[xs|bA", document0.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("YTEFq,] KH~U[xs|bA", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("YTEFq,] KH~U[xs|bA", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      
      document1.parentNode = (Node) document0;
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("YTEFq,] KH~U[xs|bA", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("YTEFq,] KH~U[xs|bA", document0.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("YTEFq,] KH~U[xs|bA", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("YTEFq,] KH~U[xs|bA", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.parentNode.siblingIndex());
      assertTrue(document1.parentNode.hasParent());
      
      // Undeclared exception!
      try { 
        document1.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = new Document("[^-a-zA-Z0-9_:.]");
      assertNotNull(document0);
      assertEquals("[^-a-zA-Z0-9_:.]", document0.baseUri());
      assertEquals("[^-a-zA-Z0-9_:.]", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000059 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      
      // Undeclared exception!
      document1.prependElement("\"T");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.settings((ParseSettings) null);
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      
      Document document0 = parser0.parseInput("\"m+?d6T3]D", "%7]b7;)0% D$F%F_");
      assertNotNull(document0);
      assertSame(parser0, parser1);
      assertFalse(parser0.isTrackErrors());
      assertEquals("%7]b7;)0% D$F%F_", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("%7]b7;)0% D$F%F_", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.prependElement("Unexpectedly reached end of file (EOF) in input state [%s]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parse("4nr`4", "");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.prependElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y&EFq,] K~U[xs|bA", "Y&EFq,] K~U[xs|bA");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.location());
      
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Document.createShell("YTEFq,] KH~U[xs|bA");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("YTEFq,] KH~U[xs|bA", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("YTEFq,] KH~U[xs|bA", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, 1153, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("YTEFq,] KH~U[xs|bA", "YTEFq,] KH~U[xs|bA");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("YTEFq,] KH~U[xs|bA", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("YTEFq,] KH~U[xs|bA", document0.location());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(8192);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      assertNotNull(mockPrintWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(704);
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(704, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(704, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      
      // Undeclared exception!
      document0.outerHtmlHead(mockPrintWriter0, 60, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y&EFq,] K~U[xs|bA", "Y&EFq,] K~U[xs|bA");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.baseUri());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Y&EFq,] K~U[xs|bA");
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(17, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals("Y&EFq,] K~U[xs|bA", charBuffer0.toString());
      assertEquals(17, charBuffer0.capacity());
      assertEquals(17, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(17, charBuffer0.remaining());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 1948, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = new Document("");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("3hkXV')>f&]");
      assertNotNull(mockFileWriter0);
      
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockFileWriter0, 112, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput(":lt(%d)", "#");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.location());
      assertFalse(document0.hasParent());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("#");
      assertNotNull(mockFileWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockFileWriter0, (-3480), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("?0US/", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertEquals("?0us/", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("?0us/", tag0.getName());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Element element0 = new Element(tag0, "?0US/", attributes0);
      assertNotNull(element0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertEquals("?0us/", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("?0us/", tag0.getName());
      assertEquals(0, attributes0.size());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("?0US/", element0.baseUri());
      assertEquals("?0us/", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("?0us/", element0.tagName());
      
      // Undeclared exception!
      try { 
        element0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      DataNode dataNode0 = DataNode.createFromEncoded("", "3hkXV')2f&]");
      assertNotNull(dataNode0);
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      
      nodeArray0[1] = (Node) dataNode0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y&EFq,] K~U[xs|bA", "Y&EFq,] K~U[xs|bA");
      assertNotNull(document0);
      assertEquals("Y&EFq,] K~U[xs|bA", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.parser.Token$Character", "org.jsoup.parser.Token$Character");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Character", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Character", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Character", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Character", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Character", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.parser.Token$Character", document1.baseUri());
      
      document1.parentNode = (Node) document0;
      assertEquals("org.jsoup.parser.Token$Character", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Character", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Character", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("org.jsoup.parser.Token$Character", document1.baseUri());
      assertTrue(document1.parentNode.hasParent());
      assertEquals(0, document1.parentNode.siblingIndex());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.jsoup.parser.Token$Character", true);
      assertNotNull(mockFileWriter0);
      
      // Undeclared exception!
      document1.html(mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("eg%nY9s;t=", "?JY");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("?JY", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("?JY", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      // Undeclared exception!
      try { 
        document0.html((PipedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=fAhk[Ks", "=fAhk[Ks");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("=fAhk[Ks", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("=fAhk[Ks", document0.baseUri());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("=fAhk[Ks", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("=fAhk[Ks", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("=fAhk[Ks", document1.location());
      assertEquals("=fAhk[Ks", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = new Document(" 3D`/Q]J)");
      assertNotNull(document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals(" 3D`/Q]J)", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(" 3D`/Q]J)", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parse("L~TKG^d*2-$|OyUw", "textarea");
      assertNotNull(document0);
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parse("D{Ok", "#");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("7VJEhK1~q_p)mA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 7VJEhK1~q_p)mA
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Document.createShell("TY^ut0eDi");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("TY^ut0eDi", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("TY^ut0eDi", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("ga\bSH'", "");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parse("=:.*$8HR", "=:.*$8HR");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("=:.*$8HR", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("=:.*$8HR", document0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.getElementsByClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parse("vd", "vd");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("vd", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("vd", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("vd", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertNotNull(document0);
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("!", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = new Document("r\"'?gtm<");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("r\"'?gtm<", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("r\"'?gtm<", document0.baseUri());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding((String) null, "9aVuw9t8oNf5+1*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("x}}edzavSJT", "x}}edzavSJT");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("x}}edzavSJT", document0.location());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("/%WGQ6-|r9BL8?", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("\"hQ", "\"hQ");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("\"hQ", document0.baseUri());
      assertEquals("\"hQ", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("\"hQ", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = new Document("");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Document.createShell("L~TKG^d*2-$|OyUw");
      assertNotNull(document0);
      assertEquals("L~TKG^d*2-$|OyUw", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("L~TKG^d*2-$|OyUw", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("x}}edzavSJT", "x}}edzavSJT");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("x}}edzavSJT", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("\"hQ", "\"hQ");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("\"hQ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("\"hQ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("j#1P/G~g;3", "       ");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("       ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("       ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.child((-3256));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = new Document("kQ`6.|?T?Cn]%dK1f6");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.location());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.location());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document1.location());
      assertEquals("#root", document1.tagName());
      
      // Undeclared exception!
      document0.before("6|QCWgLyM}]O'");
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      // Undeclared exception!
      try { 
        document0.attr((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = new Document(" 3D`/Q]J)");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" 3D`/Q]J)", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" 3D`/Q]J)", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("afterbody", "0gbmbl%>@@(0?e");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("0gbmbl%>@@(0?e", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("0gbmbl%>@@(0?e", document0.location());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Document.createShell("x}}edzavSJT");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("x}}edzavSJT", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("x}}edzavSJT", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("x}}edzavSJT", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("x}}edzavSJT", document1.location());
      
      // Undeclared exception!
      document0.appendElement("x}}edzavSJT");
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("kQ`6.|?T?Cn]%dK1f6", "kQ`6.|?T?Cn]%dK1f6");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("YTEFq,] KH~U[xs|bA", "YTEFq,] KH~U[xs|bA");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("YTEFq,] KH~U[xs|bA", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("YTEFq,] KH~U[xs|bA", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      document0.reparentChild(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("YTEFq,] KH~U[xs|bA", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("YTEFq,] KH~U[xs|bA", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      
      // Undeclared exception!
      document0.append("YTEFq,] KH~U[xs|bA");
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("j#1P/G~g;3", "       ");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("       ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("       ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Document.createShell("x}}edzavSJT");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("x}}edzavSJT", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      DataNode dataNode0 = DataNode.createFromEncoded("_u?<EP.Uep@}}@(", "_u?<EP.Uep@}}@(");
      assertNotNull(dataNode0);
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      
      dataNode0.reparentChild(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("x}}edzavSJT", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y&EFq,] K~U[xs|", "Y&EFq,] K~U[xs|");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Y&EFq,] K~U[xs|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Y&EFq,] K~U[xs|", document0.location());
      
      Document document1 = Parser.parseBodyFragment("Y&EFq,l K~U[xs|bA", "Y&EFq,] K~U[xs|");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("Y&EFq,] K~U[xs|", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Y&EFq,] K~U[xs|", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      
      document1.parentNode = (Node) document0;
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Y&EFq,] K~U[xs|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Y&EFq,] K~U[xs|", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("Y&EFq,] K~U[xs|", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Y&EFq,] K~U[xs|", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document1.parentNode.siblingIndex());
      assertFalse(document1.parentNode.hasParent());
      
      // Undeclared exception!
      try { 
        document1.after((Node) document1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".)O%", "646");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("646", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("646", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "lV(Jg`WVTtADEVMsrN", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "0J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      Document document1 = (Document)document0.classNames(set0);
      assertNotNull(document1);
      assertFalse(set0.contains(""));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      
      boolean boolean0 = document0.hasClass("ascii");
      assertTrue(boolean0);
      assertSame(document0, document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf(")nUIok", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(")nuiok", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertEquals(")nuiok", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      
      CDataNode cDataNode0 = new CDataNode(")nUIok");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "x}}edzavSJT", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(")nuiok", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertEquals(")nuiok", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(")nuiok", formElement0.nodeName());
      assertEquals("x}}edzavSJT", formElement0.baseUri());
      assertEquals(")nuiok", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains("x}}edzavSJT"));
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Element element0 = formElement0.classNames(set0);
      assertNotNull(element0);
      assertFalse(set0.contains("x}}edzavSJT"));
      assertSame(formElement0, element0);
      assertSame(element0, formElement0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(")nuiok", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertEquals(")nuiok", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(")nuiok", formElement0.nodeName());
      assertEquals("x}}edzavSJT", formElement0.baseUri());
      assertEquals(")nuiok", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(")nuiok", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("x}}edzavSJT", element0.baseUri());
      assertEquals(")nuiok", element0.nodeName());
      assertFalse(element0.hasParent());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/9AEM},ARGa", "/9AEM},ARGa");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/9AEM},ARGa", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("/9AEM},ARGa", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/9AEM},ARGa", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("/9AEM},ARGa", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/9AEM},ARGa", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      
      boolean boolean0 = element0.hasText();
      assertTrue(boolean0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/9AEM},ARGa", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("/9AEM},ARGa", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/9AEM},ARGa", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = new Document(" 3D`/Q]J)");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" 3D`/Q]J)", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(" 3D`/Q]J)", document0.baseUri());
      assertFalse(document0.hasParent());
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" 3D`/Q]J)", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(" 3D`/Q]J)", document0.baseUri());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Document.createShell("YTEFq,] KH~U[xs|bA");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("YTEFq,] KH~U[xs|bA", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("YTEFq,] KH~U[xs|bA", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("YTEFq,] KH~U[xs|bA", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("YTEFq,] KH~U[xs|bA", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("YTEFq,] KH~U[xs|bA", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("YTEFq,] KH~U[xs|bA", document1.location());
      assertFalse(document1.isBlock());
      
      int int0 = document1.elementSiblingIndex();
      assertEquals(1, int0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("YTEFq,] KH~U[xs|bA", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("YTEFq,] KH~U[xs|bA", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("YTEFq,] KH~U[xs|bA", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("YTEFq,] KH~U[xs|bA", document1.location());
      assertFalse(document1.isBlock());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y&EFq,] K~U[xs|", "Y&EFq,] K~U[xs|");
      assertNotNull(document0);
      assertEquals("Y&EFq,] K~U[xs|", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Y&EFq,] K~U[xs|", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Document document1 = Parser.parseBodyFragment("Y&EFq,l K~U[xs|bA", "Y&EFq,] K~U[xs|");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertEquals("Y&EFq,] K~U[xs|", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Y&EFq,] K~U[xs|", document1.baseUri());
      
      document1.parentNode = (Node) document0;
      assertEquals("Y&EFq,] K~U[xs|", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Y&EFq,] K~U[xs|", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Y&EFq,] K~U[xs|", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Y&EFq,] K~U[xs|", document1.baseUri());
      assertFalse(document1.parentNode.hasParent());
      assertEquals(0, document1.parentNode.siblingIndex());
      
      Element element0 = document1.previousElementSibling();
      assertNull(element0);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertEquals("Y&EFq,] K~U[xs|", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Y&EFq,] K~U[xs|", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      
      Element element1 = element0.previousElementSibling();
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertEquals("org.jsoup.nodes.Element", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000035 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 4yn us", "java.lang.string@0000000035 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 4yn us");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Document.createShell("A3\"");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A3\"", document0.baseUri());
      assertEquals("A3\"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A3\"", document0.baseUri());
      assertEquals("A3\"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("A3\"", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      
      Element element1 = element0.html("A3\"");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A3\"", document0.baseUri());
      assertEquals("A3\"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("A3\"", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("A3\"", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("HLQ~.^.tu-^&\"", ".%s");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(".%s", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(".%s", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = (Document)document0.clearAttributes();
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(".%s", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(".%s", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(".%s", document1.location());
      assertEquals(".%s", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = new Document("L~TKG^d*2-$|OyUw");
      assertNotNull(document0);
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("L~TKG^d*2-$|OyUw", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("L~TKG^d*2-$|OyUw", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      boolean boolean0 = document0.hasClass("L~TKG^d*2-$|OyUw");
      assertFalse(boolean0);
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("L~TKG^d*2-$|OyUw", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("L~TKG^d*2-$|OyUw", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("L~TKG^d*2-$|OyUw", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("L~TKG^d*2-$|OyUw", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      
      String string0 = document0.className();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("       ", "Vmrik${yUWK0g[6e2");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Vmrik${yUWK0g[6e2", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Vmrik${yUWK0g[6e2", document0.location());
      
      String string0 = document0.ownText();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Vmrik${yUWK0g[6e2", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Vmrik${yUWK0g[6e2", document0.location());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Element element0 = new Element("csascii");
      assertNotNull(element0);
      assertFalse(element0.isBlock());
      assertEquals("csascii", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("csascii", element0.tagName());
      assertFalse(element0.hasParent());
      
      boolean boolean0 = element0.isBlock();
      assertFalse(boolean0);
      assertFalse(element0.isBlock());
      assertEquals("csascii", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("csascii", element0.tagName());
      assertFalse(element0.hasParent());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = new Document("L~TKG^d*2-$|OyUw");
      assertNotNull(document0);
      assertEquals("L~TKG^d*2-$|OyUw", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("L~TKG^d*2-$|OyUw", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("\"hQ", "\"hQ");
      assertNotNull(document0);
      assertEquals("\"hQ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("\"hQ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.createElement("gC|MSm'MB-q0uPTu|F");
      assertNotNull(element0);
      assertEquals("\"hQ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("\"hQ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("gC|MSm'MB-q0uPTu|F", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("\"hQ", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("gC|MSm'MB-q0uPTu|F", element0.nodeName());
      
      // Undeclared exception!
      try { 
        element0.child(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Document.createShell("A3\"");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A3\"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("A3\"", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Pattern pattern0 = Pattern.compile("A3\"");
      assertNotNull(pattern0);
      assertEquals("A3\"", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("A3\"", pattern0.toString());
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("", pattern0);
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A3\"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("A3\"", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("A3\"", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("A3\"", pattern0.toString());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("HLQ~.^.tu-^&\"", ".%s");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(".%s", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(".%s", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Set<String> set0 = document0.classNames();
      assertNotNull(set0);
      assertFalse(set0.contains(".%s"));
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(".%s", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(".%s", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("3hkXV')>f&]");
      assertNotNull(mockFileWriter0);
      
      MockFileWriter mockFileWriter1 = document0.html(mockFileWriter0);
      assertNotNull(mockFileWriter1);
      assertSame(mockFileWriter0, mockFileWriter1);
      assertSame(mockFileWriter1, mockFileWriter0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("x}}edzavSJT", "x}}edzavSJT");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("x}}edzavSJT", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      
      String string0 = document0.html();
      assertNotNull(string0);
      assertEquals("<html>\n <head></head>\n <body>\n  x}}edzavSJT\n </body>\n</html>", string0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("x}}edzavSJT", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y&EFq,] K~U[xs|bA", "Y&EFq,] K~U[xs|bA");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      String string0 = document0.val();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = new Document("");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      Document document1 = (Document)document0.classNames(set0);
      assertNotNull(document1);
      assertFalse(set0.contains(""));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      
      Elements elements0 = document0.getElementsByClass("default");
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      Document document1 = (Document)document0.classNames(set0);
      assertNotNull(document1);
      assertFalse(set0.contains(""));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      
      boolean boolean0 = document1.hasClass("br");
      assertFalse(boolean0);
      assertFalse(set0.contains("br"));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      
      Document document1 = (Document)document0.classNames(set0);
      assertNotNull(document1);
      assertFalse(set0.contains(""));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      
      boolean boolean0 = document1.hasClass("java.lang.string@0000000035 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 afterbody ibm367 646 us");
      assertFalse(boolean0);
      assertFalse(set0.contains(""));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parse("~WvD;{eNkMwL&D ", "~WvD;{eNkMwL&D ");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("~WvD;{eNkMwL&D ", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("~WvD;{eNkMwL&D ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.toggleClass("~WvD;{eNkMwL&D ");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("~WvD;{eNkMwL&D ", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("~WvD;{eNkMwL&D ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("~WvD;{eNkMwL&D ", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("~WvD;{eNkMwL&D ", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      
      boolean boolean0 = document1.hasClass("java.lang.string@0000000035 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 &di;}=h iso_646.irv:1991 iso646-us ibm367 646 us");
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("~WvD;{eNkMwL&D ", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("~WvD;{eNkMwL&D ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("~WvD;{eNkMwL&D ", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("~WvD;{eNkMwL&D ", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parse("~WvD;{eNkMwL&D ", "~WvD;{eNkMwL&D ");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("~WvD;{eNkMwL&D ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("~WvD;{eNkMwL&D ", document0.baseUri());
      
      Document document1 = (Document)document0.toggleClass("~WvD;{eNkMwL&D ");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("~WvD;{eNkMwL&D ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("~WvD;{eNkMwL&D ", document0.baseUri());
      assertEquals("~WvD;{eNkMwL&D ", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("~WvD;{eNkMwL&D ", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      boolean boolean0 = document1.hasClass("+Dx1#<rj");
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("~WvD;{eNkMwL&D ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("~WvD;{eNkMwL&D ", document0.baseUri());
      assertEquals("~WvD;{eNkMwL&D ", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("~WvD;{eNkMwL&D ", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("F`kc~RA$0TyOR", "head");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("head", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      
      String string0 = document0.data();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("head", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Document.createShell("~WvD;{eNkMwL&D ");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("~WvD;{eNkMwL&D ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("~WvD;{eNkMwL&D ", document0.location());
      
      String string0 = document0.data();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("~WvD;{eNkMwL&D ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("~WvD;{eNkMwL&D ", document0.location());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", "2X{o#QxQl#sEq%g3W");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("2X{o#QxQl#sEq%g3W", document0.baseUri());
      assertEquals("2X{o#QxQl#sEq%g3W", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("2X{o#QxQl#sEq%g3W", document0.baseUri());
      assertEquals("2X{o#QxQl#sEq%g3W", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/9AEM},ARGa", "/9AEM},ARGa");
      assertNotNull(document0);
      assertEquals("/9AEM},ARGa", document0.baseUri());
      assertEquals("/9AEM},ARGa", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertEquals("/9AEM},ARGa", document0.baseUri());
      assertEquals("/9AEM},ARGa", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.parser.Token$Character", "org.jsoup.parser.Token$Character");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.Token$Character", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Character", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.Token$Character", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Character", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Character", document1.location());
      assertEquals("org.jsoup.parser.Token$Character", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      
      document1.parentNode = (Node) document0;
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.Token$Character", document0.location());
      assertEquals("org.jsoup.parser.Token$Character", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Character", document1.location());
      assertEquals("org.jsoup.parser.Token$Character", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.parentNode.hasParent());
      assertEquals(0, document1.parentNode.siblingIndex());
      
      String string0 = document1.text();
      assertNotNull(string0);
      assertEquals("org.jsoup.parser.Token$Character", string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.Token$Character", document0.location());
      assertEquals("org.jsoup.parser.Token$Character", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Character", document1.location());
      assertEquals("org.jsoup.parser.Token$Character", document1.baseUri());
      assertFalse(document1.isBlock());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("java.lang.string@0000000035 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 &sy us", false);
      assertNotNull(xmlDeclaration0);
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      
      boolean boolean0 = Element.preserveWhitespace(xmlDeclaration0);
      assertFalse(boolean0);
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<![CDATA[", "");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("HLQ~.^.tu-^&\"", ".%s");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(".%s", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(".%s", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Pattern pattern0 = Pattern.compile("iso-ir-6", 144);
      assertNotNull(pattern0);
      assertEquals("iso-ir-6", pattern0.toString());
      assertEquals(144, pattern0.flags());
      assertEquals("iso-ir-6", pattern0.pattern());
      
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(".%s", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(".%s", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("iso-ir-6", pattern0.toString());
      assertEquals(144, pattern0.flags());
      assertEquals("iso-ir-6", pattern0.pattern());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("         ", "kQ`6.|?T?Cn]%dK1f6");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      Elements elements0 = document0.getElementsContainingOwnText("");
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("       ", "Vmrik${yUWK0g[6e2");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Vmrik${yUWK0g[6e2", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Vmrik${yUWK0g[6e2", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      String string0 = document0.wholeText();
      assertNotNull(string0);
      assertEquals("       ", string0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Vmrik${yUWK0g[6e2", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Vmrik${yUWK0g[6e2", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Document.createShell("A3\"");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("A3\"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("A3\"", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      document0.title("{@D.RFjn");
      assertFalse(document0.hasParent());
      assertEquals("A3\"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("A3\"", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = (Document)document0.appendText("2]R/eV=1");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("A3\"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("A3\"", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("A3\"", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("A3\"", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      
      Elements elements0 = document0.getElementsMatchingText(";n=n?cvh");
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertFalse(document0.hasParent());
      assertEquals("A3\"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("A3\"", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("x}}edzavSJT", "x}}edzavSJT");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("x}}edzavSJT", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = Parser.parseBodyFragmentRelaxed("LL6", "img");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertEquals("img", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("img", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Document document2 = (Document)document0.appendTo(document1);
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("x}}edzavSJT", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("img", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("img", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("x}}edzavSJT", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("x}}edzavSJT", document2.location());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      
      String string0 = document1.text();
      assertNotNull(string0);
      assertEquals("LL6 x}}edzavSJT", string0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertEquals("img", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("img", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.getElementById("org.jsoup.nodes.Element");
      assertNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Document.createShell("A3\"");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A3\"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("A3\"", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.child(0);
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A3\"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("A3\"", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("html", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.childNodeSize());
      assertEquals("A3\"", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.tagName());
      
      Document document1 = (Document)document0.html("A3\"");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A3\"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("A3\"", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("A3\"", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("A3\"", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      
      Elements elements0 = element0.previousElementSiblings();
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A3\"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("A3\"", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("html", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.childNodeSize());
      assertEquals("A3\"", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y&EFq,] K~U[xs|bA", "Y&EFq,] K~U[xs|bA");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.baseUri());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("Y&EFq,] K~U[xs|bA", element0.baseUri());
      
      Element element1 = element0.lastElementSibling();
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("Y&EFq,] K~U[xs|bA", element0.baseUri());
      assertEquals("Y&EFq,] K~U[xs|bA", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000008 cp367 csascii iso-ir-6 izb>r iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us", "=fAhk[Ks");
      assertNotNull(document0);
      assertEquals("=fAhk[Ks", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("=fAhk[Ks", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("=fAhk[Ks", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("=fAhk[Ks", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("=fAhk[Ks", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      
      Element element1 = element0.firstElementSibling();
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertEquals("=fAhk[Ks", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("=fAhk[Ks", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("=fAhk[Ks", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertEquals("=fAhk[Ks", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Document.createShell("YTEFq,] KH~U[xs|bA");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("YTEFq,] KH~U[xs|bA", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("YTEFq,] KH~U[xs|bA", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document1 = parser0.parseInput("YTEFq,] KH~U[xs|bA", "YTEFq,] KH~U[xs|bA");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("YTEFq,] KH~U[xs|bA", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("YTEFq,] KH~U[xs|bA", document1.location());
      
      Document document2 = (Document)document0.appendTo(document1);
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("YTEFq,] KH~U[xs|bA", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("YTEFq,] KH~U[xs|bA", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("YTEFq,] KH~U[xs|bA", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("YTEFq,] KH~U[xs|bA", document1.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("YTEFq,] KH~U[xs|bA", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("YTEFq,] KH~U[xs|bA", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      
      Element element0 = document0.firstElementSibling();
      assertNull(element0);
      assertFalse(document0.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("YTEFq,] KH~U[xs|bA", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("YTEFq,] KH~U[xs|bA", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "kQ`6.|?T?Cn]%dK1f6");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parse("~WvD;{eNkMwL&D ", "~WvD;{eNkMwL&D ");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("~WvD;{eNkMwL&D ", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("~WvD;{eNkMwL&D ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("~WvD;{eNkMwL&D ", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("~WvD;{eNkMwL&D ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/9AEM},ARGa", "/9AEM},ARGa");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/9AEM},ARGa", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/9AEM},ARGa", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/9AEM},ARGa", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/9AEM},ARGa", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("/9AEM},ARGa", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("/9AEM},ARGa", document1.location());
      
      Elements elements0 = document1.nextElementSiblings();
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/9AEM},ARGa", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/9AEM},ARGa", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("/9AEM},ARGa", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("/9AEM},ARGa", document1.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Document.createShell("A3Z");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("A3Z", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("A3Z", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("A3Z", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("A3Z", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("A3Z", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("A3Z", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      
      Elements elements0 = document1.siblingElements();
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("A3Z", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("A3Z", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("A3Z", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("A3Z", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Document.createShell("A3\"");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A3\"", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("A3\"", document0.baseUri());
      
      Elements elements0 = document0.siblingElements();
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A3\"", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("A3\"", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$AllElements", "org.jsoup.select.Evaluator$AllElements");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.select.Evaluator$AllElements", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.select.Evaluator$AllElements", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.select.Evaluator$AllElements", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.select.Evaluator$AllElements", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("org.jsoup.select.Evaluator$AllElements", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      
      String string0 = element0.cssSelector();
      assertNotNull(string0);
      assertEquals("html > body", string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.select.Evaluator$AllElements", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.select.Evaluator$AllElements", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("org.jsoup.select.Evaluator$AllElements", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y&EFq,] K~U[xs|bA", "Y&EFq,] K~U[xs|bA");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.parentNode = (Node) document0;
      String string0 = document0.cssSelector();
      assertEquals("#root", string0);
      assertEquals("Y&EFq,] K~U[xs|bA", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = new Document("");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
      String string0 = document0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = new Document(";N=n?cvH");
      Node[] nodeArray0 = new Node[9];
      // Undeclared exception!
      try { 
        document0.insertChildren((-826), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Bf>xJd(t+hE", "Snks-qY@<AW\"U_L~1");
      Node[] nodeArray0 = new Node[5];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
      try { 
        document0.insertChildren(883, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Document.createShell("A3\"");
      Elements elements0 = document0.getElementsByAttributeValueMatching("A3\"", "vUIW+\u0001r=cU&3Jp4%c");
      int int0 = 143;
      // Undeclared exception!
      try { 
        document0.insertChildren(int0, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000035 cp367 &di;}=h iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us", "java.lang.string@0000000035 cp367 &di;}=h iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      LinkedList<DataNode> linkedList0 = new LinkedList<DataNode>();
      LinkedHashSet<DataNode> linkedHashSet0 = new LinkedHashSet<DataNode>(linkedList0);
      // Undeclared exception!
      try { 
        document0.insertChildren((-1775), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      LinkedList<FormElement> linkedList0 = new LinkedList<FormElement>();
      Element element0 = document0.insertChildren((-1), (Collection<? extends Node>) linkedList0);
      assertEquals("Pattern syntax error: ", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Document.createShell("A3\"");
      LinkedList<FormElement> linkedList0 = new LinkedList<FormElement>();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      assertEquals(1, element0.childNodeSize());
      assertEquals("A3\"", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y&EFq,] K~U[xs|bA", "Y&EFq,] K~U[xs|bA");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(0, list0.size());
      assertEquals("Y&EFq,] K~U[xs|bA", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("figure", "\"hQ");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("\"hQ", document0.baseUri());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Document.createShell("x}}edzavSJT");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(0, list0.size());
      assertEquals(1, document0.childNodeSize());
      assertEquals("x}}edzavSJT", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("abs:", "abs:");
      Elements elements0 = document0.children();
      assertEquals("abs:", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("x}}edzavSJT", "x}}edzavSJT");
      Element element0 = document0.appendTo(document0);
      Elements elements0 = element0.previousElementSiblings();
      assertEquals("x}}edzavSJT", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Document.createShell("L~TKG^d*2-$|OyUw");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1618280579));
      assertEquals("L~TKG^d*2-$|OyUw", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Element element0 = new Element(":lt(%d)");
      // Undeclared exception!
      try { 
        element0.selectFirst("java.lang.string@0000000035 cp367 &di;}=h iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'java.lang.string@0000000035 cp367 &di;}=h iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us': unexpected token at '@0000000035 cp367 &di;}=h iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Tag tag0 = Tag.valueOf("noyembed");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "ibm367", attributes0);
      // Undeclared exception!
      try { 
        formElement0.is("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = new Document("&di;}=h");
      document0.getAllElements();
      assertEquals("&di;}=h", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000008 cp367 csascii iso-ir-6 izb>r iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us", "=fAhk[Ks");
      // Undeclared exception!
      try { 
        document0.before("=fAhk[Ks");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("u!cfwTgM!.;B", "org.jsoup.select.Collector");
      document0.getElementsByAttribute(")nuiok");
      assertEquals("org.jsoup.select.Collector", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", "kQ`6.|?T?Cn]%dK1f6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.shallowClone();
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("O5Te^", "      `");
      Element element0 = document0.clone();
      assertEquals("      `", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNotSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.doSetBaseUri("O7^P6=(K");
      assertEquals("O7^P6=(K", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/9AEM}9p,ARGa", "/9AEM}9p,ARGa");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("x}}edzavSJT", "x}}edzavSJT");
      document0.getElementsByAttributeValueContaining("noembed", "zw|xm");
      assertEquals("x}}edzavSJT", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = new Document("kQ`6.|?T?Cn]%dK1f6");
      Elements elements0 = document0.getElementsContainingText("Children collection to be inserted must not be null.");
      assertTrue(elements0.isEmpty());
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByClass("default");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/9AEM},ARGa", "/9AEM},ARGa");
      document0.getElementsByAttributeValueEnding("?", "/9AEM},ARGa");
      assertEquals("/9AEM},ARGa", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Tag tag0 = Tag.valueOf("0lIc)a>");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "0lIc)a>", attributes0);
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      pseudoTextElement0.is((Evaluator) evaluator_IsFirstChild0);
      assertEquals("0lIc)a>", pseudoTextElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y&EFq,] K~U[xs|bA", "Y&EFq,] K~U[xs|bA");
      document0.val("Y&EFq,] K~U[xs|bA");
      String string0 = document0.val();
      assertEquals("Y&EFq,] K~U[xs|bA", document0.baseUri());
      assertEquals("Y&EFq,] K~U[xs|bA", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Element element0 = new Element("t3~l");
      Elements elements0 = element0.getElementsByIndexEquals(3730);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = new Document("kQ`6.|?T?Cn]%dK1f6");
      document0.getElementsByAttributeStarting("kQ`6.|?T?Cn]%dK1f6");
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("u!cfwTgM!.;B", "org.jsoup.select.Collector");
      Elements elements0 = document0.getElementsByIndexLessThan(734);
      assertEquals("org.jsoup.select.Collector", document0.baseUri());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("fEQ/R", "class");
      // Undeclared exception!
      try { 
        document0.after(":nth-last-child(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = new Document("x}}edzavSJT");
      Elements elements0 = document0.getElementsMatchingOwnText("img");
      assertEquals("x}}edzavSJT", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Document.createShell("A3\"");
      document0.prepend("A3\"");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/9AEM},ARGa", "/9AEM},ARGa");
      // Undeclared exception!
      try { 
        document0.select("#");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("?0US/", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "?0US/", attributes0);
      element0.getElementsByAttributeValueStarting("?0US/", "?0US/");
      assertEquals("?0US/", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000008 cp367 csascii iso-ir-6 izb>r iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us", "=fAhk[Ks");
      document0.getElementsByAttributeValue("=fAhk[Ks", "java.lang.string@0000000008 cp367 csascii iso-ir-6 izb>r iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      assertEquals("=fAhk[Ks", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = new Document("&di;}=h");
      document0.wholeText();
      assertEquals("&di;}=h", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000008 cp367 csascii iso-ir-6 izb>r iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us", "=fAhk[Ks");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "kQ`6.|?T?Cn]%dK1f6");
      document0.dataset();
      assertEquals("kQ`6.|?T?Cn]%dK1f6", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Document.createShell("A3\"");
      document0.prependText("A3\"");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Document.createShell("A3\"");
      Element element0 = document0.child(0);
      assertNotNull(element0);
      
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("A3\"", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/9AEM},ARGa", "/9AEM},ARGa");
      document0.previousElementSiblings();
      assertEquals("/9AEM},ARGa", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      document0.prependElement(")nu]iok");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Document.createShell("A3\"");
      document0.appendText("2]R/eV=1");
      document0.getElementsMatchingText(";n=n?cvh");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      // Undeclared exception!
      try { 
        document0.wrap("org.jsoup.nodes.Element");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parse("/9]EM},ARGa", "/9]EM},ARGa");
      document0.id();
  }
}
