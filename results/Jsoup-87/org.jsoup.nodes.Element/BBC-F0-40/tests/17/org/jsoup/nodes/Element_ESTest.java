/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 21:47:28 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", ":*nth-child(%d)");
      Element element0 = document0.body();
      Element element1 = element0.before((Node) document0);
      element1.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = new Document("_ M](cF7bE");
      document0.parentNode = (Node) document0;
      document0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Node[] nodeArray0 = new Node[9];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1839), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Document.createShell("ft-rO5} e)gUTYE,");
      MockPrintStream mockPrintStream0 = new MockPrintStream("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlTail(mockPrintStream0, 1716, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Tag tag0 = Tag.valueOf("yf({~R2% '[=");
      CDataNode cDataNode0 = new CDataNode("Pattern syntax error: ");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "CWD%OI?M^", attributes0);
      StringBuffer stringBuffer0 = new StringBuffer("VcbM^e{`");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element0.outerHtmlHead(stringBuffer0, 828, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C%OI?M^", "C%OI?M^");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Document.createShell("S+");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(":N& z7", ":N& z7");
      document0.wrap("Sd)a6ApunF&");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Element element0 = new Element("$@R 8+_v.S(");
      element0.wholeText();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("tMxtarca");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("tMxtarca");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "tMxtarca", attributes0);
      pseudoTextElement0.setSiblingIndex((-2662));
      pseudoTextElement0.val("tMxtarca");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lYtSj=_z.", "lYtSj=_z.");
      Element element0 = document0.body();
      element0.val("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("datalist");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "datalist", attributes0);
      TextNode textNode0 = TextNode.createFromEncoded("datalist");
      pseudoTextElement0.setParentNode(textNode0);
      pseudoTextElement0.val("datalist");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lYtSj=_z.", "lYtSj=_z.");
      Element element0 = document0.val("Insert position out of bounds.");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5t |<PE<$%%>nBzu", "5t |<PE<$%%>nBzu");
      document0.siblingIndex = (-527);
      document0.toggleClass("5t |<PE<$%%>nBzu");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Document.createShell("ft-rO5} e)gUTYE,");
      Element element0 = document0.body();
      element0.toggleClass("ft-rO5} e)gUTYE,");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Document.createShell("C%OI?M^");
      document0.setSiblingIndex((-1130));
      document0.text(".vjp,[h%vxi");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      CDataNode cDataNode0 = new CDataNode("SWqVS~+z^AJtgBs=j");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "html", attributes0);
      formElement0.text();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lYtSj=_z.", "lYtSj=_z.");
      document0.tagName("menu");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.Element$1");
      element0.tagName("uS/0J^^f_]N&(1b");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = new Document("K");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(":gt(", "8\"l1LUt");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Document.createShell("ft-rO5} e)gUTYE,");
      Element element0 = document0.body();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("datalist");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "AfterDoctypeSystemIdentifier", attributes0);
      pseudoTextElement0.tag();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Elemnt$NodeList", "org.jsoup.nodes.Elemnt$NodeList");
      Element element0 = document0.body();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Tag tag0 = Tag.valueOf("^~gzLNDQ");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "value", attributes0);
      element0.selectFirst("multiple");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5t |<PE<$%%>nBzu", "5t |<PE<$%%>nBzu");
      document0.selectFirst("body");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*", "*");
      document0.selectFirst("*");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C%OI?M^", "C%OI?M^");
      document0.select("nMM0x4");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.parser.Tokeniser", "org.jsoup.parser.Tokeniser");
      Element element0 = document0.body();
      element0.removeClass("6faL@ZHr");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C%OI?M^", "C%OI?M^");
      Element element0 = document0.addClass("C%OI?M^");
      element0.siblingIndex = (-1015);
      document0.removeClass("[SaJ]ZxX%8W;2");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Document.createShell("t-rO5} e)gUTYE,");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      element1.removeClass("");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C%OI?M^", "C%OI?M^");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("textarea");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ":nth-child(%d", attributes0);
      Element.preserveWhitespace(pseudoTextElement0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      document0.siblingIndex = (-885);
      document0.prependText("br");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.body();
      element0.prependText("canvas");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parse("title", "[^%s]");
      document0.prependElement("title");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", ":*nth-child(%d)");
      Element element0 = document0.body();
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element$NodeList");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.nodes.Element$NodeList", attributes0);
      element0.prependChild(pseudoTextElement0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("tMxtarca");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("tMxtarca");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "tMxtarca", attributes0);
      pseudoTextElement0.setSiblingIndex((-2662));
      pseudoTextElement0.prepend("org.jsoup.select.combinig_valuator$and");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.body();
      element0.prepend("body");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("dEfll tD^", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "#root", attributes0);
      pseudoTextElement0.prepend("");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*EU", "KU Txpn!;f\"<H");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Document.createShell(".|X@[^T0");
      Element element0 = document0.head();
      element0.prependChild(document0);
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Document.createShell("K");
      Document document1 = Parser.parseBodyFragment("Object must not be null", "K");
      document0.parentNode = (Node) document1;
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6to^}={", "6to^}={");
      Element element0 = document0.body();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{EnZ|dOUI`", "{EnZ|dOUI`");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C%OI?M^", "C%OI?M^");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lYtSj=_z.", "lYtSj=_z.");
      Element element0 = document0.body();
      element0.wrap("d'_k_ZSUFolU eQc");
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lSOp'QR44r80D,", "lSOp'QR44r80D,");
      Element element0 = document0.appendTo(document0);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Document.createShell(".|X@[^T0");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Elemnt$NodeList", "org.jsoup.nodes.Elemnt$NodeList");
      Element element0 = document0.body();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Document.createShell("3\r[HXIMRnf[%fWHA$");
      Evaluator.IsFirstOfType evaluator_IsFirstOfType0 = new Evaluator.IsFirstOfType();
      document0.is((Evaluator) evaluator_IsFirstOfType0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lYtSj=_z.", "lYtSj=_z.");
      document0.is("K");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lYtSj=_z.", "lYtSj=_z.");
      Node[] nodeArray0 = new Node[0];
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C%OI?M^", "C%OI?M^");
      Element element0 = document0.body();
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      element0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Element element0 = new Element("]jxU%1]j+**?n");
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      element0.insertChildren(0, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C%OI?M^", "C%OI?M^");
      Element element0 = document0.body();
      element0.html("Pattern syntax error:");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = Parser.parseBodyFragment("Object must not be null", "");
      document0.parentNode = (Node) document1;
      document0.html("Object must not be null");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Tag tag0 = Tag.valueOf("value");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "@x#4Iu]", attributes0);
      element0.html((CharBuffer) null);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = new Document("&~K");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Tag tag0 = Tag.valueOf("yf({~R2% '[=");
      CDataNode cDataNode0 = new CDataNode("Pattern syntax error: ");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "CWD%OI?M^", attributes0);
      element0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("0D2Jlo`C!)P", "0D2Jlo`C!)P");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lYtSj=_z.", "lYtSj=_z.");
      document0.getElementsMatchingText("n*");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lYtSj=_z.", "lYtSj=_z.");
      Pattern pattern0 = Pattern.compile("lYtSj=_z.", (-45));
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parse("title", "[^%s]");
      document0.getElementsMatchingOwnText("[^%s]");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" > ", "VXcbM^e{`");
      document0.getElementsContainingText("");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lYtSj=_z.", "lYtSj=_z.");
      document0.getElementsContainingOwnText("lYtSj=_z.");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parse("beforedoctypename", "beforedoctypename");
      document0.getElementsByTag("html > body");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Document.createShell("S+");
      document0.getElementsByTag("html");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("CWD%OI?M^", "d");
      document0.getElementsByIndexLessThan(5543);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("yf({~R2% '[=", "yf({~R2% '[=");
      document0.getElementsByIndexGreaterThan(19);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = new Document("");
      document0.getElementsByIndexEquals((-1854990878));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lYtSj=_z.", "lYtSj=_z.");
      document0.getElementsByAttributeValueStarting("lYtSj=_z.", "lytsj=_z.");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Tag tag0 = Tag.valueOf("I");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "head", attributes0);
      formElement0.getElementsByAttributeValueNot("I", "br");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      CDataNode cDataNode0 = new CDataNode("org.jsoup.parser.Tokeniser");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("PA", parseSettings0);
      Attributes attributes1 = attributes0.put("html > body", "org.jsoup.parser.Tokeniser");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "PA", attributes1);
      pseudoTextElement0.getElementsByAttributeStarting("html > body");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000022 children collection to be selgcted must not null. #root", "java.lang.string@0000000022 children collection to be selgcted must not null. #root");
      Element element0 = document0.addClass("org.jsoup.nodes.Element$1");
      element0.getElementsByAttribute("class");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parse("AfterDoctypeSystemIdentifier", "AfterDoctypeSystemIdentifier");
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("datalist");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "AfterDoctypeSystemIdentifier", attributes0);
      document0.prependChild(pseudoTextElement0);
      pseudoTextElement0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Sp)gwJ5", "Sp)gwJ5");
      document0.appendTo(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("value", "VXcbM^e{`");
      Element element0 = document0.head();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.parser.Tokeniser", "org.jsoup.parser.Tokeniser");
      document0.appendTo(document0);
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("CWD%OI?M^", "CWD%OI?M^");
      Element element0 = document0.body();
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parse("CWD%OI?M^", ")br");
      Element element0 = document0.body();
      element0.doClone(element0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("value", "VXcbM^e{`");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = new Document("");
      document0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = new Document("K");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lYtSj=_z.", "lYtSj=_z.");
      Element element0 = document0.body();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*EU", "KU Txpn!;f\"<H");
      Tag tag0 = Tag.valueOf("KU Txpn!;f\"<H");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "R6 JwO6NI", attributes0);
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      pseudoTextElement0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = new Document("K");
      Element element0 = document0.addClass("Could not parse attribute query '%s': unexpected token at '%s'");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Tag tag0 = Tag.valueOf("^~gzLNDQ");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "value", attributes0);
      element0.children();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Document.createShell("C%OI?M^");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Element element0 = new Element("gp1(b");
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Element element0 = new Element("yf({~R2% '[=");
      Element element1 = element0.html("yf({~R2% '[=");
      element1.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Document.createShell("+T?");
      Element element0 = document0.child(0);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) element0;
      element0.insertChildren(0, nodeArray0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parse("O@kN;T", "O@kN;T");
      Element element0 = document0.head();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";=4", ";=4");
      document0.parentNode = (Node) document0;
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Document.createShell("ABp^U=jI&:oo@IkZ(");
      Document document1 = document0.clone();
      document1.prependChild(document0);
      document0.before("");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lYtSj=_z.", "lYtSj=_z.");
      Parser parser0 = Parser.htmlParser();
      Document document1 = parser0.parseInput("lYtSj=_z.", "lYtSj=_z.");
      Element element0 = document0.appendTo(document1);
      element0.before("lYtSj=_z.");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Document.createShell("ft-rO5} e)gUTYE,");
      Element element0 = document0.body();
      element0.before("             ");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = new Document("K");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("value", "VXcbM^e{`");
      document0.addClass("value");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parse("ZDkgA:^T8)^", "ZDkgA:^T8)^");
      Element element0 = document0.head();
      element0.attr("ZDkgA:^T8)^", false);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", "lYtSj=_z.");
      Element element0 = document0.body();
      element0.attr(" ", "#root");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", "lYtSj=_z.");
      document0.attr(" ", "#root");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Document.createShell("C%OI?M^");
      Element element0 = document0.body();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lYtSj=_z.", "lYtSj=_z.");
      Element element0 = document0.body();
      element0.appendText("x:+)?cc&[JqbU3");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lYtSj=_z.", "lYtSj=_z.");
      document0.appendElement("lYtSj=_z.");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Tag tag0 = Tag.valueOf("sarcasm");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Tag name must not be empty.", attributes0);
      pseudoTextElement0.appendElement("body");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      document0.setSiblingIndex((-856));
      Element element0 = document0.clone();
      document0.appendChild(element0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", ":*nth-child(%d)");
      Element element0 = document0.body();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = new Document("");
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C%OI?M^", "C%OI?M^");
      Element element0 = document0.body();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Elemnt$NodeList", "org.jsoup.nodes.Elemnt$NodeList");
      Element element0 = document0.head();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = new Document("K");
      Document document1 = Parser.parseBodyFragment("Object must not be null", "K");
      document0.parentNode = (Node) document1;
      document0.after(")>(/Bc9nhJn1[b,");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C%OI?M^", "C%OI?M^");
      Element element0 = document0.body();
      element0.after("C%OI?M^");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C%OI?M^", "C%OI?M^");
      document0.setSiblingIndex((-1));
      document0.addClass("IlhS");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.body();
      element0.addClass("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.parser.Tokeniser", "org.jsoup.parser.Tokeniser");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.wrap("org.jsoup.parser.Tokeniser");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("autofocus", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("autofocus");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "autofocus", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("5t |<pe<$%%v>n\bzu");
      Document document0 = Parser.parse("5t |<pe<$%%v>n\bzu", "abs:");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.wrap("#root");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C%OI?M^", "C%OI?M^");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.val("html > body");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("C%OI?M^");
      attributes0.keys = null;
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "9ia=((f55jgu2Zr5", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.val("html > body");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("</");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      attributes0.keys = null;
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "br", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.val();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".EIl^HElR", "Data");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("selgcted");
      String[] stringArray0 = new String[4];
      attributes0.keys = stringArray0;
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "selgcted", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.toggleClass("br");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("");
      Document document0 = parser0.parseInput((Reader) stringReader0, "NP8O?_;F/");
      // Undeclared exception!
      try { 
        document0.text("Pattern syntax error:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Element element0 = new Element("]");
      // Undeclared exception!
      try { 
        element0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Selector$SelectorParseException", "YI('s0q}D/o=)0nWt|");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5t |<PE<$%%>nBzu", "5t |<PE<$%%>nBzu");
      DocumentType documentType0 = new DocumentType("5t |<PE<$%%>nBzu", "5t |<PE<$%%>nBzu", "^*!q/xuKA{lp");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("</", "3zo%dli}3(Ui;NOZA");
      Element element0 = document0.text("3zo%dli}3(Ui;NOZA");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.tagName("org.jsoup.select.selector$selectorparseexception");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Document.createShell("lYtSjO.");
      Parser parser0 = Parser.xmlParser();
      Document document1 = parser0.parseInput("lYtSjO.", "lYtSjO.");
      document0.appendTo(document1);
      parser0.settings((ParseSettings) null);
      // Undeclared exception!
      try { 
        document0.tagName("#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = new Document("K");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("jlmn2+}lZm*nI0`u", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("jlmn2+}lZm*nI0`u");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "jlmn2+}lZm*nI0`u", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.selectFirst(" ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ' ': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lYtSj=_z.", "lYtSj=_z.");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("9p3izi4!{$m/|%kiey", "");
      // Undeclared exception!
      try { 
        document0.select("VXcbM^e{`");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'VXcbM^e{`': unexpected token at '^e{`'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf(" `0;ISj%c", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("s+");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "br", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.select((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Combining_valuator$And", "org.jsoup.select.Combining_valuator$And");
      document0.parentNode = (Node) document0;
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5t |<PE$%%>nBzu", "5t |<PE$%%>nBzu");
      DataNode dataNode0 = DataNode.createFromEncoded("5t |<PE$%%>nBzu", "java.lang.string@0000000048");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Document.createShell("#doctype");
      List<Node> list0 = document0.childNodes();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.prependText("java.lang.str`ng@0000000046");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Document.createShell(":containsOwn(");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parse("_ M](bF7bE", "_ M](bF7bE");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.prependElement("xai#v;{MM$TLtpW:Q2");
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("VXcbM^e{`", "VXcbM^e{`");
      // Undeclared exception!
      try { 
        document0.prependElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Document.createShell("_ M](bF7bE");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.prepend("_ m](cf7be");
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parse("CWD%OI?M^", ")br");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5t |<PE<$%%>nBzu", "5t |<PE<$%%>nBzu");
      TextNode textNode0 = TextNode.createFromEncoded("5t |<PE<$%%>nBzu");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.prepend("5t |<PE<$%%>nBzu");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("font", "font");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(24576);
      // Undeclared exception!
      document0.outerHtmlTail(stringBuilder0, 298, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("laY=Sj9Oz.", "laY=Sj9Oz.");
      CharBuffer charBuffer0 = CharBuffer.allocate(12);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 1898, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parse("CWD%OI?M^", "br");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      document0.outerHtmlTail(charArrayWriter0, 2147483645, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lYtSj=_z.", "lYtSj=_z.");
      MockPrintStream mockPrintStream0 = new MockPrintStream("lYtSj=_z.");
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintStream0, 58, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document0 = Parser.parseBodyFragmentRelaxed("s2Ruu,1l[nI^", "0nT\"e!,rCa`w.;,j");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("head");
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintWriter0, (-1722320336), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*EU", "KU Txpn!;f\"<H");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        document0.outerHtmlTail(pipedWriter0, 65533, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element$NodeList");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, " <%s>", attributes0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("X}j_S*]i");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        formElement0.outerHtmlHead(mockPrintWriter0, (-171), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("selgcted");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "selgcted", attributes0);
      CDataNode cDataNode0 = new CDataNode("selgcted");
      pseudoTextElement0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.nextElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Document.createShell("VomF");
      document0.appendTo(document0);
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute("VomF");
      // Undeclared exception!
      document0.is((Evaluator) evaluator_Attribute0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.element$nodelist", "tMxtarca");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = new Document("K");
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      // Undeclared exception!
      try { 
        document0.is((Evaluator) evaluator_IsRoot0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parse("Insert position out of bounds.", "#");
      // Undeclared exception!
      try { 
        document0.is("<html>\n <head></head>\n <body>\n  Insert position out of bounds.\n </body>\n</html>");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '<html>
         //  <head></head>
         //  <body>
         //   Insert position out of bounds.
         //  </body>
         // </html>': unexpected token at '<html>
         //  <head></head>
         //  <body>
         //   Insert position out of bounds.
         //  </body>
         // </html>'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", ":*nth-child(%d)");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.is("org.jsoup.nodes.CDataNode");
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("KU Txpn!;f\"<H", "");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("_ M](cF7bE", "_ M](cF7bE");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.html("_ M](cF7bE");
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("_ M](bF7bE", "_ M](bF7bE");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*EU", " />");
      Element element0 = document0.appendTo(document0);
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      element0.html(pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("F", "F");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "<html>\n <head></head>\n <body>\n  F\n </body>\n</html>");
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parse("_ M](cF7bE", "body");
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*EU", "KU Txpn!;f\"<H");
      // Undeclared exception!
      try { 
        document0.html((PipedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = new Document("K");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("value", "VXcbM^e{`");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C%OI?M^", "C%OI?M^");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("c'0Fnq&_", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "c'0Fnq&_", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Document.createShell("ft-rO5} e)gUTYE,");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("ft-rO5} e)gUTYE,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: ft-rO5} e)gUTYE,
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Element element0 = new Element("yf({~R2% '[=");
      // Undeclared exception!
      try { 
        element0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("#}ZQ%lLH4Q${jwTYcWi");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: #}ZQ%lLH4Q${jwTYcWi
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$@R 8+_v.S(", "");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5t |<PE<$%%>nBzu", "5t |<PE<$%%>nBzu");
      Comment comment0 = new Comment("5t |<PE<$%%>nBzu");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      Element element0 = document0.doClone(xmlDeclaration0);
      // Undeclared exception!
      try { 
        element0.getElementsByIndexGreaterThan((-679));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000097", "5t |<PE<$%%>nBzu");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsByClass("5t |<PE<$%%>nBzu");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lYtSj=_z.", "lYtSj=_z.");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting((String) null, "K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("VcbM^e{`", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "VcbM^e{`", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsByAttributeValueNot((String) null, "8KPt~r5FO)[~`AYp(}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = new Document("C&\"");
      Element element0 = document0.attr(" />", "C&\"");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueMatching(" />", (Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$AttributeWithValueMatching", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Element element0 = new Element("yf({~R2% '[=");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueMatching("I%T", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("on", "on");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("on", "vFaA!R`Xn<S;zS{@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: vFaA!R`Xn<S;zS{@
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Document.createShell("ft-rO5} e)gUTYE,");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding(":nth-child(%d)", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Kp||$f_|<H[]GfaO7Lt", "$VALUES");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining((String) null, "org.jsoup.select.Evaluator$AttributeWithValue");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parse("V-t@kw\"V[j", "V-t@kw\"V[j");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "m:S-d7*+Q\"G%cB_+Cv*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parse("", "kF,L7QE");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("*EU", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.nodes.Element$1", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("%)iNX", "%)iNX");
      document0.parentNode = (Node) document0;
      document0.siblingIndex = (-2083);
      // Undeclared exception!
      try { 
        document0.getAllElements();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.s[up.noes.DocumentType", "org.s[up.noes.DocumentType");
      CDataNode cDataNode0 = new CDataNode("org.s[up.noes.DocumentType");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.elementSiblingIndex();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Document.createShell("id");
      Document document1 = (Document)document0.addClass("");
      document1.childNodes = null;
      // Undeclared exception!
      try { 
        document1.doClone(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Elemnt$NodeList", "org.jsoup.nodes.Elemnt$NodeList");
      DataNode dataNode0 = new DataNode("Children collection to be inserted must not be null.");
      DocumentType documentType0 = new DocumentType(" }dOog!x8=", "=ZG}Hj", "org.jsoup.nodes.Elemnt$NodeList", " }dOog!x8=");
      dataNode0.value = (Object) documentType0;
      document0.prependChild(dataNode0);
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.body();
      element0.tagName("org.jsoup.nodes.Element$NodeList");
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.nodes.element$nodelist': unexpected token at '$nodelist'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5t |<PE<$%%>nBzu", "5t |<PE<$%%>nBzu");
      DataNode dataNode0 = new DataNode("5t |<PE<$%%>nBzu");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("cW", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("cW", "id");
      FormElement formElement0 = new FormElement(tag0, "cW", attributes1);
      attributes1.vals = null;
      // Undeclared exception!
      try { 
        formElement0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Elemnt$NodeList", "org.jsoup.nodes.Elemnt$NodeList");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.parser.Token", "Yy'Z*hd");
      // Undeclared exception!
      try { 
        document0.child(1221);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1221, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C%OI?M^", "C%OI?M^");
      // Undeclared exception!
      try { 
        document0.child((-3106));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("datalist");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "datalist", attributes0);
      TextNode textNode0 = TextNode.createFromEncoded("datalist");
      pseudoTextElement0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.before((Node) pseudoTextElement0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Element element0 = new Element("{oA{+!h");
      element0.parentNode = (Node) element0;
      // Undeclared exception!
      try { 
        element0.before((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("_ M](cF7bE", "_ M](cF7bE");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.before("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":not%s", "org.jsoup.nodes.Element$2");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document1 = document0.parser(parser1);
      Element element0 = document1.body();
      // Undeclared exception!
      try { 
        element0.before("Jr4z[^1.!+F(^,,\",fS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Document.createShell("$@R 8+_v.S(");
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":only-child", ":only-child");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.attr("Children collection to be inserted must not be null.", "n$rRT3DNei");
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Elemnt$NodeList", "org.jsoup.nodes.Elemnt$NodeList");
      // Undeclared exception!
      try { 
        document0.attr((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r:IfsoMOap#", "r:IfsoMOap#");
      Element element0 = document0.body();
      element0.setParentNode(document0);
      // Undeclared exception!
      try { 
        element0.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$@R 8+_v.S(", "");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = new Document("}%%|[6");
      Document document1 = document0.normalise();
      List<Node> list0 = document1.childNodes();
      document1.childNodes = list0;
      // Undeclared exception!
      try { 
        document1.appendText("InTable");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("OsMHpV+k5k3", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "OsMHpV+k5k3", attributes0);
      Element element0 = pseudoTextElement0.prependChild(pseudoTextElement0);
      // Undeclared exception!
      element0.appendElement("dt");
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Element element0 = new Element("$@R 8+_v.S(");
      // Undeclared exception!
      try { 
        element0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parse("[.lH$uClNO'R2{T'", "eN f5ZaE,=3-\"");
      CDataNode cDataNode0 = new CDataNode("[.lH$uClNO'R2{T'");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("yf({~R2% '[=", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "audio", attributes0);
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        document0.appendChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C%OI?M^", "#Thgd]b{");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("_ M](cF7bE", "_ M](cF7bE");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.append("_ M](cF7bE");
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.selector$selectorparseexception", "_ M](cF7bE");
      List<Node> list0 = Parser.parseXmlFragment("IlhS", "_ M](cF7bE");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.append("/KnmMZ,h+");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lYtSj=_z.", "lYtSj=_z.");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parse("_ M](bF7bE", "_ M](bF7bE");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.after("");
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("M|BiRy&", "M|BiRy&");
      DataNode dataNode0 = new DataNode(" />", " />");
      Document document1 = (Document)document0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        document1.after("#root");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lYtSj=_z.", "lYtSj=_z.");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("Mkh^UV", parseSettings0);
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Document.createShell("VXcbM^e{`");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = new Document("K");
      PipedWriter pipedWriter0 = new PipedWriter();
      document0.html(pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`y+S/61YgqRGD6l':", "`y+S/61YgqRGD6l':");
      document0.addClass("java.lang.string@0000000085 children collection ]j be inserted must not be null.");
      document0.addClass("java.lang.string@0000000085 children collection ]j be inserted must not be null.");
      document0.hasClass("]j");
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tmxtarca", "tmxtarca");
      Element element0 = document0.addClass("iua^xv|jz.|");
      document0.addClass(" />");
      element0.hasClass("</");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parse("lYtS,jO.", "lYtS,jO.");
      document0.hasClass("lYtS,jO.");
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("_ M](cF7bE", "_ M](cF7bE");
      Element element0 = document0.addClass("_ M](cF7bE");
      Set<String> set0 = document0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lYtSj=_z.", "lYtSj=_z.");
      document0.appendText("lYtSj=_z.");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5t |<PE<$%%>nz", "5t |<PE<$%%>nz");
      Element element0 = document0.body();
      element0.text("");
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5t |<PE<$%%>nz", "5t |<PE<$%%>nz");
      Element element0 = document0.body();
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C%OI?M^", "C%OI?M^");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$1");
      Document document1 = Parser.parseBodyFragment("VXcbM^e{`", "VXcbM^e{`");
      document0.appendTo(document1);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$1");
      document0.appendTo(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parse("_ M](bF7bE", "_ M](bF7bE");
      document0.parentNode = (Node) document0;
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Elemnt$NodeList", "org.jsoup.nodes.Elemnt$NodeList");
      Element element0 = document0.body();
      element0.append("org.jsoup.nodes.Elemnt$NodeList");
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("datalist");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "AfterDoctypeSystemIdentifier", attributes0);
      pseudoTextElement0.className();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6to^}={", "6to^}={");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("v}cleL-Sp$A:TU[q");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "datalist", attributes0);
      Element element0 = pseudoTextElement0.attr("", "L9@Q#ok]?g9(L");
      Pattern pattern0 = Pattern.compile("");
      element0.getElementsByAttributeValueMatching((String) null, pattern0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Elemnt$NodeList", "org.jsoup.nodes.Elemnt$NodeList");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Element element0 = new Element("gp1(b");
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("legend", "='n^l-R?Md^IZPZH( ");
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("}UuW-qS[(MOjf5=tLDi", "}UuW-qS[(MOjf5=tLDi");
      document0.is((Evaluator) evaluator_AttributeWithValueNot0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("v}cleL-Sp$A:TU[q");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "datalist", attributes0);
      Pattern pattern0 = Pattern.compile("");
      pseudoTextElement0.getElementsByAttributeValueMatching((String) null, pattern0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("datalist");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "datalist", attributes0);
      pseudoTextElement0.select("datalist");
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("_ M](cF7bE", "_ M](cF7bE");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = new Document("5");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parse("Insert position out of bounds.", "#");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parse("PxN(MU&8W", "PxN(MU&8W");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, 0, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("U1]^S<?0[BVW}>GD[", "U1]^S<?0[BVW}>GD[");
      document0.title("U1]^S<?0[BVW}>GD[");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("L+<\"':S_',S>jgC", "dUcKeJ2eUP2A)?G");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings1);
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "textarea", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.val((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("textarea");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "C%OI?M^", attributes0);
      pseudoTextElement0.val();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C%OI?M^", "C%OI?M^");
      Element element0 = document0.addClass("C%OI?M^");
      element0.addClass("IlhS");
      document0.toggleClass("IlhS");
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C%OI?M^", "C%OI?M^");
      Element element0 = document0.addClass("C%OI?M^");
      Element element1 = element0.addClass("C%OI?M^");
      element1.hasClass("textarea");
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("_ M](cF7bE", "_ M](cF7bE");
      document0.addClass("_ M](cF7bE");
      Element element0 = document0.addClass("");
      element0.hasClass("");
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = new Document("Wo17.P'+*Ejz7y>");
      Element element0 = document0.addClass("uj&");
      document0.addClass("Children collection to be inserted must not be null.");
      element0.hasClass("selgcted");
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C%OI?M^", "C%OI?M^");
      Element element0 = document0.addClass("C%OI?M^");
      Element element1 = element0.addClass("Ilh");
      element1.addClass("C%OI?M^");
      document0.getElementsByClass("Ilh");
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tMxtarca", "b3~Y^OZyXIOs3z8");
      document0.addClass("b3~Y^OZyXIOs3z8");
      document0.addClass(" >");
      document0.getElementsByClass("textarea");
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tMxtarca", "b3~Y^OZyXIOs3z8");
      document0.addClass("b3~Y^OZyXIOs3z8");
      document0.getElementsByClass("textarea");
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", "org.jsoup.nodes.Element$NodeList");
      document0.toggleClass(", currentElement=");
      document0.hasClass("There is an unread token pending!");
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("rg.jsoup.nodes.Elemnt$NodeList", "rg.jsoup.nodes.Elemnt$NodeList");
      CDataNode cDataNode0 = new CDataNode("Miwsg");
      document0.appendChild(cDataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "Tag name must not be empty.");
      Comment comment0 = new Comment("Tag name must not be empty.", "");
      document0.appendChild(comment0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Elemnt$NodeList", "org.jsoup.nodes.Elemnt$NodeList");
      DataNode dataNode0 = new DataNode("org.jsoup.nodes.Elemnt$NodeList");
      document0.appendChild(dataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Elemnt$NodeList", "org.jsoup.nodes.Elemnt$NodeList");
      DataNode dataNode0 = new DataNode("Children collection to be inserted must not be null.");
      document0.prependChild(dataNode0);
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5t |<PE<$%%>nz", "5t |<PE<$%%>nz");
      document0.text("");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";=4", ";=4");
      document0.parentNode = (Node) document0;
      document0.getElementsMatchingOwnText("Wt>>a8C~gaSZ`}");
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("value", "VXcbM^e{`");
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      CDataNode cDataNode0 = new CDataNode("body");
      linkedList0.add(cDataNode0);
      document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("U1]^S<?0[BVW}>GD[", "U1]^S<?0[BVW}>GD[");
      Pattern pattern0 = Pattern.compile("j", (-1645904068));
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lYtSj=_z.", "lYtSj=_z.");
      Element element0 = document0.appendText("lYtSj=_z.");
      Pattern pattern0 = Pattern.compile("head");
      element0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Pattern syntax error: ", "L Pp.ON~+");
      Element element0 = document0.appendText("Pattern syntax error: ");
      Pattern pattern0 = Pattern.compile("Com#ent_tartDash");
      element0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Document.createShell("lYtSjO.");
      Parser parser0 = Parser.xmlParser();
      Document document1 = parser0.parseInput("lYtSjO.", "lYtSjO.");
      document0.appendTo(document1);
      Pattern pattern0 = Pattern.compile("lYtSjO.");
      document1.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5t |<PE<$%%>nBzu", "5t |<PE<$%%>nBzu");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Elemnt$NodeList", "org.jsoup.nodes.Elemnt$NodeList");
      DataNode dataNode0 = new DataNode("org.jsoup.nodes.Elemnt$NodeList");
      Element element0 = document0.appendChild(dataNode0);
      Pattern pattern0 = Pattern.compile("br", (-1749));
      element0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'^a}A\"*", "'^a}A\"*");
      document0.getElementById("'^a}A\"*");
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = new Document("K");
      document0.parentNode = (Node) document0;
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Document.createShell("ft-rO5} e)gUTYE,");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      element1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", ":*nth-child(%d)");
      Element element0 = document0.body();
      Element element1 = document0.appendTo(element0);
      element1.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C%OI?M^", "#Thgd]b{");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Combining_valuator$And", "org.jsoup.select.Combining_valuator$And");
      document0.parentNode = (Node) document0;
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("_ M](cF7bE", "_ M](cF7bE");
      document0.parentNode = (Node) document0;
      Document document1 = Parser.parseBodyFragment("_ M](cF7bE", "lyts,jo.");
      document0.after((Node) document1);
      Elements elements0 = document0.nextElementSiblings();
      assertEquals("_ M](cF7bE", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Element element0 = new Element("yf({~R2% '[=");
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", ":*nth-child(%d)");
      Element element0 = document0.appendTo(document0);
      Elements elements0 = element0.siblingElements();
      assertEquals(1, document0.siblingIndex());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Document.createShell("C%OI?*M.");
      Element element0 = document0.body();
      Element element1 = element0.wrap("C%OI?*M.");
      String string0 = element1.cssSelector();
      assertEquals("html > head:nth-child(2) > body:nth-child(1)", string0);
      assertEquals("C%OI?*M.", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Document.createShell("ft-rO5} e)gUTYE,");
      document0.toggleClass("ft-rO5} e)gUTYE,");
      document0.cssSelector();
      assertEquals("ft-rO5} e)gUTYE,", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "?fZ2IG%~9<B%AX");
      Node[] nodeArray0 = new Node[5];
      // Undeclared exception!
      try { 
        document0.insertChildren(2204, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("VXcbM^e{`", parseSettings0);
      Element element0 = new Element(tag0, "VXcbM^e{`");
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
      try { 
        element0.insertChildren((-1839), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.siblingElements();
      // Undeclared exception!
      try { 
        document0.insertChildren(58, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      List<DataNode> list0 = document0.dataNodes();
      // Undeclared exception!
      try { 
        document0.insertChildren((-856), (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Kh`V(K>l", "Kh`V(K>l");
      DataNode dataNode0 = DataNode.createFromEncoded("Kh`V(K>l", (String) null);
      document0.appendChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("Kh`V(K>l", document0.baseUri());
      assertTrue(list0.contains(dataNode0));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.body();
      List<TextNode> list0 = element0.textNodes();
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*", "*");
      List<TextNode> list0 = document0.textNodes();
      assertTrue(list0.isEmpty());
      assertEquals("*", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("_ M](cF7bE", "_ M](cF7bE");
      document0.parentNode = (Node) document0;
      document0.nextElementSiblings();
      document0.nextElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals("_ M](cF7bE", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5t |<PE<$%%>nBzu", "5t |<PE<$%%>nBzu");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-679));
      assertEquals("5t |<PE<$%%>nBzu", document0.baseUri());
      assertEquals(5, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lYtSj=_z.", "lYtSj=_z.");
      Element element0 = document0.selectFirst("head");
      assertEquals("lYtSj=_z.", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("U1]^S<?0[BVW}>GD[", "U1]^S<?0[BVW}>GD[");
      document0.title("U1]^S<?0[BVW}>GD[");
      Pattern pattern0 = Pattern.compile("j", (-1645904068));
      document0.getElementsMatchingOwnText(pattern0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("U1]^S<?0[BVW}>GD[", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C%OI?M^", "C%OI?M^");
      Elements elements0 = document0.getElementsMatchingText("AfterDoctypeSystemIdentifier");
      assertEquals(1, document0.childNodeSize());
      assertEquals("C%OI?M^", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("%)iNX", "%)iNX");
      document0.getAllElements();
      assertEquals("%)iNX", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C%OI?M^", "C%OI?M^");
      // Undeclared exception!
      try { 
        document0.before("C%OI?M^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000022 children collection to be selgcted must not null. #root", "java.lang.string@0000000022 children collection to be selgcted must not null. #root");
      document0.getElementsByAttribute("class");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{EnZ|dOUI`", "{EnZ|dOUI`");
      Elements elements0 = document0.getElementsByAttributeValueNot("~! 8{", " ");
      assertEquals("{EnZ|dOUI`", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lYtSj=_z.", "lYtSj=_z.");
      Element element0 = document0.appendTo(document0);
      element0.attr("org.jsoup.select.Evaluator$IndexLessThan", false);
      assertEquals(1, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Elemnt$NodeList", "org.jsoup.nodes.Elemnt$NodeList");
      Element element0 = document0.shallowClone();
      assertEquals("org.jsoup.nodes.Elemnt$NodeList", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'^a}A\"*", "'^a}A\"*");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementById("'^a}A\"*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = new Document("");
      document0.doSetBaseUri("class");
      assertEquals("class", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Elemnt$NodeList", "org.jsoup.nodes.Elemnt$NodeList");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C%OI?M^", "C%OI?M^");
      document0.getElementsByAttributeValueContaining("0ifiYU[@", "org.jsoup.select.StructuralEvaluator$Parent");
      assertEquals(1, document0.childNodeSize());
      assertEquals("C%OI?M^", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$@R 8+_v.S(", "");
      Elements elements0 = document0.getElementsContainingText("O..nQ?");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C%OI?M^", "C%OI?M^");
      document0.getElementsByAttributeValueEnding("C%OI?M^", "C%OI?M^");
      assertEquals("C%OI?M^", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("datalist");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "}s79,s2_~bw?", attributes0);
      pseudoTextElement0.is("datalist");
      assertEquals("}s79,s2_~bw?", pseudoTextElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("value", "VXcbM^e{`");
      document0.getElementsByAttributeValueMatching("org.jsoup.nodes.Element$1", "value");
      assertEquals(1, document0.childNodeSize());
      assertEquals("VXcbM^e{`", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parse("5t |<pe<$%%v>n\bzu", "abs:");
      // Undeclared exception!
      try { 
        document0.wrap("#root");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = new Document("K");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      assertEquals(1, elements0.size());
      assertEquals("K", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = new Document("                 ");
      document0.getElementsByAttributeStarting(":*nth-child(%d)");
      assertEquals("                 ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("font", "font");
      Element element0 = document0.prependElement("ot");
      element0.setSiblingIndex((-1110026255));
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("font");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("O", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "O", (Attributes) null);
      formElement0.getElementsByIndexLessThan(1);
      assertEquals("O", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.after("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Elemnt$NodeList", "org.jsoup.nodes.Elemnt$NodeList");
      Element element0 = document0.head();
      assertNotNull(element0);
      
      String string0 = element0.cssSelector();
      assertEquals("org.jsoup.nodes.Elemnt$NodeList", element0.baseUri());
      assertEquals("html > head", string0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = new Document("j=#M5(<C");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("j=#M5(<C", "\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("font", "font");
      document0.getElementsByAttributeValue("font", " />");
      assertEquals("font", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parse("ZDkgA:^T8)^", "ZDkgA:^T8)^");
      Element element0 = document0.attr("ZDkgA:^T8)^", false);
      assertEquals(1, element0.childNodeSize());
      assertEquals("ZDkgA:^T8)^", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = new Document("&~K");
      Element element0 = document0.html("");
      assertEquals("&~K", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5t |<PE<$%%>nBzu", "5t |<PE<$%%>nBzu");
      String string0 = document0.wholeText();
      assertEquals("5t |<PE<$%%>nBzu", document0.baseUri());
      assertEquals("5t |<$%%>nBzu", string0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Parser.parse("O@kN;T", "O@kN;T");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Parser.parse("selgcted", "selgcted");
      document0.addClass("selgcted");
      boolean boolean0 = document0.hasClass("org.jsoup.parser.TokenQueue");
      assertEquals(1, document0.childNodeSize());
      assertFalse(boolean0);
      assertEquals("selgcted", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Elements elements0 = document0.getElementsContainingOwnText("!B/kp\"");
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("value", "VXcbM^e{`");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
      assertEquals("VXcbM^e{`", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parse("lYtS,jO.", "lYtS,jO.");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Combining_valuator$And", "org.jsoup.select.Combining_valuator$And");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.select.Combining_valuator$And", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      document0.prependText("br");
      assertEquals(2, document0.childNodeSize());
  }
}
