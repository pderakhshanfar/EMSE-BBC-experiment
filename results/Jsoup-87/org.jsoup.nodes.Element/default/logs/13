* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: org.jsoup.nodes.Element
* Starting Client-0
* Connecting to master process on port 3342
* Analyzing classpath: 
  - subjects/buggy-versions/Jsoup-87/target/classes
* Finished analyzing classpath
* Generating tests for class org.jsoup.nodes.Element
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2768
* Using seed 4094093400
* Starting evolution
* Initial Number of Goals in DynaMOSA = 1405 / 2768
[MASTER] 02:15:20.231 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 02:15:25.383 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] org.jsoup.nodes.Element.parents()Lorg/jsoup/select/Elements;
[MASTER] 02:15:25.384 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] org.jsoup.nodes.Element.parents()Lorg/jsoup/select/Elements;
[MASTER] 02:15:54.609 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
* Search finished after 310s and 55 generations, 32911 statements, best individual has fitness: 568.0
* Minimizing test suite
[MASTER] 02:21:01.462 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 96%
* Total number of goals: 410
* Number of covered goals: 392
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 308
* Number of covered goals: 275
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 72
* Number of covered goals: 72
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 92%
* Total number of goals: 843
* Number of covered goals: 773
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 49%
* Total number of goals: 695
* Number of covered goals: 340
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 99%
* Total number of goals: 102
* Number of covered goals: 101
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 96%
* Total number of goals: 102
* Number of covered goals: 98
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 86%
* Total number of goals: 308
* Number of covered goals: 264
* Generated 337 tests with total length 3881
* Resulting test suite's coverage: 84% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 02:21:59.170 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7077% of time used, but only 14/337 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 5%
* Compiling and checking tests
[MASTER] 02:22:32.913 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_27_1605579752509/org/jsoup/nodes/Element_27_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_27_1605579752509/org/jsoup/nodes/Element_27_tmp__ESTest_scaffolding.java]]
[MASTER] 02:22:32.913 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Jsoup-87/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Jsoup-87/target/classes
[MASTER] 02:22:32.913 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Jsoup-87/target/classes
[MASTER] 02:22:32.923 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,org.jsoup.nodes.Comment>> cannot be converted to java.util.Comparator<java.util.Map.Entry<org.jsoup.nodes.TextNode,org.jsoup.nodes.Comment>>: 61
[MASTER] 02:22:32.923 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_27_1605579752509/org/jsoup/nodes/Element_27_tmp__ESTest.java uses or overrides a deprecated API.: -1
[MASTER] 02:22:32.923 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:deprecation for details.: -1
[MASTER] 02:22:32.923 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_27_1605579752509/org/jsoup/nodes/Element_27_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 02:22:32.924 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 02:22:32.945 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_27_1605579752509/org/jsoup/nodes/Element_27_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 02:22:32 GMT 2020
4:  */
5: 
6: package org.jsoup.nodes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.Comparator;
13: import java.util.List;
14: import java.util.Map;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.evosuite.runtime.ViolatedAssumptionAnswer;
18: import org.jsoup.nodes.Attribute;
19: import org.jsoup.nodes.Attributes;
20: import org.jsoup.nodes.CDataNode;
21: import org.jsoup.nodes.Comment;
22: import org.jsoup.nodes.Element;
23: import org.jsoup.nodes.FormElement;
24: import org.jsoup.nodes.Node;
25: import org.jsoup.nodes.TextNode;
26: import org.jsoup.parser.Tag;
27: import org.junit.runner.RunWith;
28: 
29: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
30: public class Element_27_tmp__ESTest extends Element_27_tmp__ESTest_scaffolding {
31: 
32:   @Test(timeout = 4000)
33:   public void test0()  throws Throwable  {
34:       Tag tag0 = Tag.valueOf("~");
35:       assertNotNull(tag0);
36:       assertFalse(tag0.preserveWhitespace());
37:       assertFalse(tag0.canContainBlock());
38:       assertFalse(tag0.isFormListed());
39:       assertTrue(tag0.formatAsBlock());
40:       assertTrue(tag0.isInline());
41:       assertEquals("~", tag0.toString());
42:       assertFalse(tag0.isKnownTag());
43:       assertFalse(tag0.isEmpty());
44:       assertFalse(tag0.isData());
45:       assertEquals("~", tag0.getName());
46:       assertFalse(tag0.isFormSubmittable());
47:       assertFalse(tag0.isSelfClosing());
48:       assertFalse(tag0.isBlock());
49:       
50:       Attributes attributes0 = new Attributes();
51:       assertNotNull(attributes0);
52:       assertEquals(0, attributes0.size());
53:       
54:       Attribute attribute0 = new Attribute("~", "y&@e", attributes0);
55:       assertNotNull(attribute0);
56:       assertEquals(0, attributes0.size());
57:       assertEquals("~", attribute0.getKey());
58:       assertEquals("y&@e", attribute0.getValue());
59:       
60:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
61:       Comparator<Map.Entry<TextNode, Comment>> comparator1 = (Comparator<Map.Entry<TextNode, Comment>>)Map.Entry.comparingByValue((Comparator<? super Comment>) comparator0);
62:       assertNotNull(comparator1);
63:       
64:       Attribute attribute1 = Attribute.createFromEncoded("y&@e", "=CpPG{VsLp9");
65:       assertNotSame(attribute1, attribute0);
66:       assertNotNull(attribute1);
67:       assertFalse(attribute1.equals((Object)attribute0));
68:       assertEquals("y&@e", attribute1.getKey());
69:       assertEquals("=CpPG{VsLp9", attribute1.getValue());
70:       
71:       Attributes attributes1 = attributes0.put(attribute0);
72:       assertSame(attributes0, attributes1);
73:       assertNotSame(attribute0, attribute1);
74:       assertSame(attributes1, attributes0);
75:       assertNotNull(attributes1);
76:       assertFalse(attribute0.equals((Object)attribute1));
77:       assertEquals(1, attributes0.size());
78:       assertEquals("~", attribute0.getKey());
79:       assertEquals("y&@e", attribute0.getValue());
80:       assertEquals(1, attributes1.size());
81:       
82:       FormElement formElement0 = new FormElement(tag0, "~", attributes0);
83:       assertNotNull(formElement0);
84:       assertFalse(tag0.preserveWhitespace());
85:       assertFalse(tag0.canContainBlock());
86:       assertFalse(tag0.isFormListed());
87:       assertTrue(tag0.formatAsBlock());
88:       assertTrue(tag0.isInline());
89:       assertEquals("~", tag0.toString());
90:       assertFalse(tag0.isKnownTag());
91:       assertFalse(tag0.isEmpty());
92:       assertFalse(tag0.isData());
93:       assertEquals("~", tag0.getName());
94:       assertFalse(tag0.isFormSubmittable());
95:       assertFalse(tag0.isSelfClosing());
96:       assertFalse(tag0.isBlock());
97:       assertEquals(1, attributes0.size());
98:       assertEquals(0, formElement0.childNodeSize());
99:       assertEquals("~", formElement0.baseUri());
100:       assertFalse(formElement0.hasParent());
101:       assertEquals("~", formElement0.nodeName());
102:       assertFalse(formElement0.isBlock());
103:       assertEquals("~", formElement0.tagName());
104:       assertEquals(0, formElement0.siblingIndex());
105:       
106:       List<Node> list0 = formElement0.ensureChildNodes();
107:       assertSame(attributes0, attributes1);
108:       assertNotNull(list0);
109:       assertFalse(tag0.preserveWhitespace());
110:       assertFalse(tag0.canContainBlock());
111:       assertFalse(tag0.isFormListed());
112:       assertTrue(tag0.formatAsBlock());
113:       assertTrue(tag0.isInline());
114:       assertEquals("~", tag0.toString());
115:       assertFalse(tag0.isKnownTag());
116:       assertFalse(tag0.isEmpty());
117:       assertFalse(tag0.isData());
118:       assertEquals("~", tag0.getName());
119:       assertFalse(tag0.isFormSubmittable());
120:       assertFalse(tag0.isSelfClosing());
121:       assertFalse(tag0.isBlock());
122:       assertEquals(1, attributes0.size());
123:       assertEquals(0, formElement0.childNodeSize());
124:       assertEquals("~", formElement0.baseUri());
125:       assertFalse(formElement0.hasParent());
126:       assertEquals("~", formElement0.nodeName());
127:       assertFalse(formElement0.isBlock());
128:       assertEquals("~", formElement0.tagName());
129:       assertEquals(0, formElement0.siblingIndex());
130:       assertTrue(list0.isEmpty());
131:       assertEquals(0, list0.size());
132:       
133:       CDataNode cDataNode0 = new CDataNode("=CpPG{VsLp9");
134:       assertNotNull(cDataNode0);
135:       assertFalse(cDataNode0.hasParent());
136:       assertEquals("#cdata", cDataNode0.nodeName());
137:       assertEquals(0, cDataNode0.siblingIndex());
138:       
139:       Node[] nodeArray0 = cDataNode0.childNodesAsArray();
140:       assertNotNull(nodeArray0);
141:       assertEquals(0, nodeArray0.length);
142:       assertFalse(cDataNode0.hasParent());
143:       assertEquals("#cdata", cDataNode0.nodeName());
144:       assertEquals(0, cDataNode0.siblingIndex());
145:       
146:       // Undeclared exception!
147:       try { 
148:         cDataNode0.wrap("PZMe0Szd{(");
149:         fail("Expecting exception: NullPointerException");
150:       
151:       } catch(NullPointerException e) {
152:          //
153:          // no message in exception (getMessage() returned null)
154:          //
155:          verifyException("org.jsoup.nodes.Node", e);
156:       }
157:   }
158: }
RegularFileObject[/tmp/EvoSuite_27_1605579752509/org/jsoup/nodes/Element_27_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 02:22:32 GMT 2020
5:  */
6: 
7: package org.jsoup.nodes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class Element_27_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.jsoup.nodes.Element"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Element_27_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.jsoup.nodes.Document$QuirksMode",
84:       "org.jsoup.parser.HtmlTreeBuilderState$18",
85:       "org.jsoup.select.StructuralEvaluator$ImmediateParent",
86:       "org.jsoup.parser.HtmlTreeBuilderState$19",
87:       "org.jsoup.parser.HtmlTreeBuilderState$16",
88:       "org.jsoup.helper.ChangeNotifyingArrayList",
89:       "org.jsoup.parser.HtmlTreeBuilderState$17",
90:       "org.jsoup.parser.HtmlTreeBuilderState$14",
91:       "org.jsoup.parser.HtmlTreeBuilderState$15",
92:       "org.jsoup.select.Evaluator$IndexEvaluator",
93:       "org.jsoup.select.Evaluator$IsOnlyOfType",
94:       "org.jsoup.nodes.Entities$CoreCharset",
95:       "org.jsoup.nodes.Element",
96:       "org.jsoup.parser.HtmlTreeBuilderState$12",
97:       "org.jsoup.parser.HtmlTreeBuilderState$13",
98:       "org.jsoup.parser.HtmlTreeBuilderState$10",
99:       "org.jsoup.parser.HtmlTreeBuilderState$11",
100:       "org.jsoup.select.NodeTraversor",
101:       "org.jsoup.select.Evaluator$MatchesOwn",
102:       "org.jsoup.select.CombiningEvaluator$And",
103:       "org.jsoup.parser.Token$EndTag",
104:       "org.jsoup.nodes.Document",
105:       "org.jsoup.parser.HtmlTreeBuilder",
106:       "org.jsoup.nodes.FormElement",
107:       "org.jsoup.select.StructuralEvaluator",
108:       "org.jsoup.select.Evaluator$IndexEquals",
109:       "org.jsoup.select.Selector$SelectorParseException",
110:       "org.jsoup.parser.Token$Tag",
111:       "org.jsoup.nodes.XmlDeclaration",
112:       "org.jsoup.parser.Token$Doctype",
113:       "org.jsoup.parser.HtmlTreeBuilderState$23",
114:       "org.jsoup.parser.HtmlTreeBuilderState$24",
115:       "org.jsoup.select.Evaluator$Tag",
116:       "org.jsoup.parser.HtmlTreeBuilderState$21",
117:       "org.jsoup.nodes.Document$OutputSettings$Syntax",
118:       "org.jsoup.parser.HtmlTreeBuilderState$22",
119:       "org.jsoup.parser.HtmlTreeBuilderState$20",
120:       "org.jsoup.internal.StringUtil",
121:       "org.jsoup.parser.Tokeniser",
122:       "org.jsoup.nodes.Comment",
123:       "org.jsoup.select.Evaluator$IndexGreaterThan",
124:       "org.jsoup.nodes.LeafNode",
125:       "org.jsoup.select.Selector",
126:       "org.jsoup.select.Evaluator$AttributeWithValueEnding",
127:       "org.jsoup.select.Collector$FirstFinder",
128:       "org.jsoup.nodes.Node",
129:       "org.jsoup.parser.HtmlTreeBuilderState",
130:       "org.jsoup.select.Evaluator$AttributeStarting",
131:       "org.jsoup.nodes.DataNode",
132:       "org.jsoup.nodes.Attributes",
133:       "org.jsoup.parser.XmlTreeBuilder",
134:       "org.jsoup.nodes.Document$OutputSettings",
135:       "org.jsoup.select.CombiningEvaluator",
136:       "org.jsoup.select.Evaluator$ContainsData",
137:       "org.jsoup.internal.Normalizer",
138:       "org.jsoup.nodes.Attributes$Dataset$EntrySet",
139:       "org.jsoup.nodes.Attributes$Dataset",
140:       "org.jsoup.helper.Validate",
141:       "org.jsoup.select.Evaluator$CssNthEvaluator",
142:       "org.jsoup.parser.Token$Comment",
143:       "org.jsoup.select.Evaluator$IsFirstOfType",
144:       "org.jsoup.nodes.Element$NodeList",
145:       "org.jsoup.parser.TokeniserState$56",
146:       "org.jsoup.parser.TokeniserState$57",
147:       "org.jsoup.parser.TokeniserState$58",
148:       "org.jsoup.parser.TokeniserState$59",
149:       "org.jsoup.parser.TokeniserState$52",
150:       "org.jsoup.parser.TokeniserState$53",
151:       "org.jsoup.parser.TreeBuilder",
152:       "org.jsoup.parser.TokeniserState$54",
153:       "org.jsoup.parser.TokeniserState$55",
154:       "org.jsoup.nodes.PseudoTextElement",
155:       "org.jsoup.parser.TokeniserState$50",
156:       "org.jsoup.parser.TokeniserState$51",
157:       "org.jsoup.parser.Parser",
158:       "org.jsoup.select.Evaluator$IsEmpty",
159:       "org.jsoup.select.Evaluator$AttributeWithValueMatching",
160:       "org.jsoup.select.Evaluator$IsNthChild",
161:       "org.jsoup.select.Evaluator$Class",
162:       "org.jsoup.parser.TokeniserState$67",
163:       "org.jsoup.parser.TokeniserState$63",
164:       "org.jsoup.nodes.Node$OuterHtmlVisitor",
165:       "org.jsoup.parser.TokeniserState$64",
166:       "org.jsoup.parser.TokeniserState$65",
167:       "org.jsoup.parser.Token",
168:       "org.jsoup.parser.TokeniserState$66",
169:       "org.jsoup.parser.TokeniserState$60",
170:       "org.jsoup.select.Evaluator$AttributeKeyPair",
171:       "org.jsoup.parser.TokeniserState$61",
172:       "org.jsoup.parser.TokeniserState$62",
173:       "org.jsoup.select.Evaluator$IsNthLastOfType",
174:       "org.jsoup.parser.Tag",
175:       "org.jsoup.parser.Token$Character",
176:       "org.jsoup.select.Evaluator$IsLastOfType",
177:       "org.jsoup.select.Evaluator$Attribute",
178:       "org.jsoup.select.NodeFilter$FilterResult",
179:       "org.jsoup.nodes.Entities",
180:       "org.jsoup.select.Evaluator$AttributeWithValueContaining",
181:       "org.jsoup.select.Elements",
182:       "org.jsoup.parser.Token$CData",
183:       "org.jsoup.nodes.Element$2",
184:       "org.jsoup.select.Evaluator$AllElements",
185:       "org.jsoup.nodes.Element$1",
186:       "org.jsoup.nodes.TextNode",
187:       "org.jsoup.select.Evaluator$AttributeWithValue",
188:       "org.jsoup.select.Evaluator$AttributeWithValueNot",
189:       "org.jsoup.parser.ParseErrorList",
190:       "org.jsoup.nodes.BooleanAttribute",
191:       "org.jsoup.SerializationException",
192:       "org.jsoup.select.CombiningEvaluator$Or",
193:       "org.jsoup.select.Evaluator$ContainsText",
194:       "org.jsoup.select.Evaluator$Id",
195:       "org.jsoup.select.Evaluator$IsNthOfType",
196:       "org.jsoup.select.StructuralEvaluator$PreviousSibling",
197:       "org.jsoup.select.Collector",
198:       "org.jsoup.select.Collector$Accumulator",
199:       "org.jsoup.nodes.Attributes$Dataset$DatasetIterator",
200:       "org.jsoup.parser.XmlTreeBuilder$1",
201:       "org.jsoup.parser.CharacterReader",
202:       "org.jsoup.select.Evaluator$IsFirstChild",
203:       "org.jsoup.select.StructuralEvaluator$Root",
204:       "org.jsoup.nodes.Node$1",
205:       "org.jsoup.select.NodeVisitor",
206:       "org.jsoup.parser.TokeniserState$2",
207:       "org.jsoup.parser.TokeniserState$12",
208:       "org.jsoup.parser.TokeniserState$1",
209:       "org.jsoup.parser.TokeniserState$13",
210:       "org.jsoup.nodes.Attributes$1",
211:       "org.jsoup.parser.TokeniserState$14",
212:       "org.jsoup.parser.TokeniserState$15",
213:       "org.jsoup.select.Evaluator$AttributeWithValueStarting",
214:       "org.jsoup.parser.Token$StartTag",
215:       "org.jsoup.parser.Token$EOF",
216:       "org.jsoup.parser.TokeniserState$10",
217:       "org.jsoup.parser.TokeniserState$11",
218:       "org.jsoup.nodes.DocumentType",
219:       "org.jsoup.parser.TokeniserState$9",
220:       "org.jsoup.parser.TokeniserState$8",
221:       "org.jsoup.parser.TokeniserState$7",
222:       "org.jsoup.parser.TokeniserState$6",
223:       "org.jsoup.parser.TokeniserState$5",
224:       "org.jsoup.parser.TokeniserState$4",
225:       "org.jsoup.select.QueryParser",
226:       "org.jsoup.parser.TokeniserState$3",
227:       "org.jsoup.nodes.NodeUtils",
228:       "org.jsoup.select.Evaluator$Matches",
229:       "org.jsoup.select.Evaluator$IsOnlyChild",
230:       "org.jsoup.parser.TokeniserState$16",
231:       "org.jsoup.parser.TokeniserState$17",
232:       "org.jsoup.parser.TokeniserState$18",
233:       "org.jsoup.nodes.Entities$1",
234:       "org.jsoup.parser.TokeniserState$19",
235:       "org.jsoup.parser.TokeniserState$23",
236:       "org.jsoup.UncheckedIOException",
237:       "org.jsoup.parser.TokeniserState$24",
238:       "org.jsoup.parser.TokeniserState$25",
239:       "org.jsoup.parser.TokeniserState$26",
240:       "org.jsoup.parser.TokeniserState$20",
241:       "org.jsoup.parser.TokeniserState$21",
242:       "org.jsoup.parser.TokeniserState$22",
243:       "org.jsoup.parser.TokenQueue",
244:       "org.jsoup.parser.ParseSettings",
245:       "org.jsoup.select.NodeFilter",
246:       "org.jsoup.select.Evaluator$ContainsOwnText",
247:       "org.jsoup.parser.TokeniserState$27",
248:       "org.jsoup.parser.TokeniserState",
249:       "org.jsoup.parser.TokeniserState$28",
250:       "org.jsoup.parser.TokeniserState$29",
251:       "org.jsoup.parser.TokeniserState$34",
252:       "org.jsoup.select.Evaluator$IndexLessThan",
253:       "org.jsoup.parser.TokeniserState$35",
254:       "org.jsoup.parser.TokeniserState$36",
255:       "org.jsoup.parser.TokeniserState$37",
256:       "org.jsoup.parser.TokeniserState$30",
257:       "org.jsoup.parser.TokeniserState$31",
258:       "org.jsoup.parser.TokeniserState$32",
259:       "org.jsoup.parser.TokeniserState$33",
260:       "org.jsoup.nodes.Entities$EscapeMode",
261:       "org.jsoup.select.Evaluator$MatchText",
262:       "org.jsoup.select.Evaluator",
263:       "org.jsoup.Connection",
264:       "org.jsoup.select.Evaluator$IsRoot",
265:       "org.jsoup.parser.TokeniserState$38",
266:       "org.jsoup.parser.TokeniserState$39",
267:       "org.jsoup.nodes.CDataNode",
268:       "org.jsoup.parser.TokeniserState$45",
269:       "org.jsoup.parser.TokeniserState$46",
270:       "org.jsoup.parser.TokeniserState$47",
271:       "org.jsoup.select.StructuralEvaluator$Parent",
272:       "org.jsoup.parser.TokeniserState$48",
273:       "org.jsoup.select.Evaluator$IsLastChild",
274:       "org.jsoup.parser.TokeniserState$41",
275:       "org.jsoup.select.Evaluator$IsNthLastChild",
276:       "org.jsoup.parser.TokeniserState$42",
277:       "org.jsoup.parser.TokeniserState$43",
278:       "org.jsoup.parser.TokeniserState$44",
279:       "org.jsoup.parser.TokeniserState$40",
280:       "org.jsoup.parser.Token$TokenType",
281:       "org.jsoup.parser.HtmlTreeBuilderState$2",
282:       "org.jsoup.parser.HtmlTreeBuilderState$1",
283:       "org.jsoup.parser.HtmlTreeBuilderState$4",
284:       "org.jsoup.nodes.Attribute",
285:       "org.jsoup.parser.HtmlTreeBuilderState$3",
286:       "org.jsoup.parser.HtmlTreeBuilderState$9",
287:       "org.jsoup.parser.TokeniserState$49",
288:       "org.jsoup.parser.HtmlTreeBuilderState$6",
289:       "org.jsoup.parser.HtmlTreeBuilderState$5",
290:       "org.jsoup.parser.HtmlTreeBuilderState$8",
291:       "org.jsoup.parser.HtmlTreeBuilderState$7"
292:     );
293:   } 
294:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
295:     mock(Class.forName("java.util.Comparator", false, Element_27_tmp__ESTest_scaffolding.class.getClassLoader()));
296:   }
297: 
298:   private static void resetClasses() {
299:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Element_27_tmp__ESTest_scaffolding.class.getClassLoader()); 
300: 
301:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
302:       "org.jsoup.nodes.Node",
303:       "org.jsoup.nodes.Element",
304:       "org.jsoup.helper.ChangeNotifyingArrayList",
305:       "org.jsoup.nodes.Element$NodeList",
306:       "org.jsoup.nodes.Element$1",
307:       "org.jsoup.nodes.Element$2",
308:       "org.jsoup.helper.Validate",
309:       "org.jsoup.parser.Tag",
310:       "org.jsoup.parser.ParseSettings",
311:       "org.jsoup.select.NodeFilter$FilterResult",
312:       "org.jsoup.internal.StringUtil",
313:       "org.jsoup.nodes.Document$OutputSettings$Syntax",
314:       "org.jsoup.nodes.Attributes",
315:       "org.jsoup.nodes.PseudoTextElement",
316:       "org.jsoup.nodes.Document",
317:       "org.jsoup.internal.Normalizer",
318:       "org.jsoup.parser.Parser",
319:       "org.jsoup.parser.TreeBuilder",
320:       "org.jsoup.parser.HtmlTreeBuilder",
321:       "org.jsoup.parser.Token",
322:       "org.jsoup.parser.Token$Tag",
323:       "org.jsoup.parser.Token$StartTag",
324:       "org.jsoup.parser.Token$TokenType",
325:       "org.jsoup.parser.Token$EndTag",
326:       "org.jsoup.parser.ParseErrorList",
327:       "org.jsoup.parser.Tokeniser",
328:       "org.jsoup.parser.TokeniserState",
329:       "org.jsoup.parser.Token$Character",
330:       "org.jsoup.parser.Token$Doctype",
331:       "org.jsoup.parser.Token$Comment",
332:       "org.jsoup.parser.HtmlTreeBuilderState",
333:       "org.jsoup.parser.Token$EOF",
334:       "org.jsoup.nodes.Node$OuterHtmlVisitor",
335:       "org.jsoup.nodes.NodeUtils",
336:       "org.jsoup.nodes.Entities$CoreCharset",
337:       "org.jsoup.select.NodeTraversor",
338:       "org.jsoup.parser.HtmlTreeBuilderState$24",
339:       "org.jsoup.nodes.LeafNode",
340:       "org.jsoup.nodes.TextNode",
341:       "org.jsoup.nodes.Entities$1",
342:       "org.jsoup.nodes.CDataNode",
343:       "org.jsoup.select.Evaluator",
344:       "org.jsoup.select.Evaluator$Id",
345:       "org.jsoup.select.Collector",
346:       "org.jsoup.select.Elements",
347:       "org.jsoup.select.Collector$Accumulator",
348:       "org.jsoup.select.Evaluator$Class",
349:       "org.jsoup.select.Evaluator$ContainsText",
350:       "org.jsoup.nodes.Attribute",
351:       "org.jsoup.select.Selector",
352:       "org.jsoup.select.QueryParser",
353:       "org.jsoup.parser.TokenQueue",
354:       "org.jsoup.select.StructuralEvaluator$Root",
355:       "org.jsoup.select.Evaluator$Tag",
356:       "org.jsoup.select.CombiningEvaluator",
357:       "org.jsoup.select.CombiningEvaluator$And",
358:       "org.jsoup.select.StructuralEvaluator",
359:       "org.jsoup.select.StructuralEvaluator$PreviousSibling",
360:       "org.jsoup.select.Collector$FirstFinder",
361:       "org.jsoup.nodes.FormElement",
362:       "org.jsoup.nodes.Node$1",
363:       "org.jsoup.select.Evaluator$IndexEvaluator",
364:       "org.jsoup.select.Evaluator$IndexLessThan",
365:       "org.jsoup.parser.XmlTreeBuilder",
366:       "org.jsoup.parser.XmlTreeBuilder$1",
367:       "org.jsoup.nodes.Attributes$Dataset",
368:       "org.jsoup.nodes.Attributes$Dataset$EntrySet",
369:       "org.jsoup.nodes.Attributes$Dataset$DatasetIterator",
370:       "org.jsoup.nodes.Attributes$1",
371:       "org.jsoup.select.Evaluator$MatchesOwn",
372:       "org.jsoup.nodes.DataNode",
373:       "org.jsoup.select.Evaluator$Matches",
374:       "org.jsoup.select.Evaluator$AttributeWithValueMatching",
375:       "org.jsoup.select.Evaluator$AttributeStarting",
376:       "org.jsoup.select.Evaluator$AttributeKeyPair",
377:       "org.jsoup.select.Evaluator$AttributeWithValueNot",
378:       "org.jsoup.select.Evaluator$AllElements",
379:       "org.jsoup.select.Evaluator$AttributeWithValueContaining",
380:       "org.jsoup.select.Evaluator$IndexEquals",
381:       "org.jsoup.nodes.Comment",
382:       "org.jsoup.select.Evaluator$IndexGreaterThan",
383:       "org.jsoup.select.Selector$SelectorParseException",
384:       "org.jsoup.select.StructuralEvaluator$ImmediateParent",
385:       "org.jsoup.select.StructuralEvaluator$Parent",
386:       "org.jsoup.select.Evaluator$ContainsOwnText",
387:       "org.jsoup.select.Evaluator$AttributeWithValueStarting",
388:       "org.jsoup.select.Evaluator$CssNthEvaluator",
389:       "org.jsoup.select.Evaluator$IsNthLastOfType",
390:       "org.jsoup.select.Evaluator$IsLastOfType",
391:       "org.jsoup.nodes.XmlDeclaration",
392:       "org.jsoup.parser.HtmlTreeBuilderState$Constants",
393:       "org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling",
394:       "org.jsoup.select.Evaluator$AttributeWithValueEnding",
395:       "org.jsoup.select.Evaluator$Attribute",
396:       "org.jsoup.select.Evaluator$AttributeWithValue",
397:       "org.jsoup.select.Evaluator$IsNthOfType",
398:       "org.jsoup.nodes.DocumentType",
399:       "org.jsoup.select.Evaluator$IsOnlyChild",
400:       "org.jsoup.nodes.BooleanAttribute",
401:       "org.jsoup.select.Evaluator$IsNthLastChild",
402:       "org.jsoup.Jsoup"
403:     );
404:   }
405: }

[MASTER] 02:22:32.962 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Tag tag0 = Tag.valueOf("~");
assertNotNull(tag0);
assertFalse(tag0.preserveWhitespace());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isFormListed());
assertTrue(tag0.formatAsBlock());
assertTrue(tag0.isInline());
assertEquals("~", tag0.toString());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isData());
assertEquals("~", tag0.getName());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isBlock());

Attributes attributes0 = new Attributes();
assertNotNull(attributes0);
assertEquals(0, attributes0.size());

Attribute attribute0 = new Attribute("~", "y&@e", attributes0);
assertNotNull(attribute0);
assertEquals(0, attributes0.size());
assertEquals("~", attribute0.getKey());
assertEquals("y&@e", attribute0.getValue());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<TextNode, Comment>> comparator1 = (Comparator<Map.Entry<TextNode, Comment>>)Map.Entry.comparingByValue((Comparator<? super Comment>) comparator0);
assertNotNull(comparator1);

Attribute attribute1 = Attribute.createFromEncoded("y&@e", "=CpPG{VsLp9");
assertNotSame(attribute1, attribute0);
assertNotNull(attribute1);
assertFalse(attribute1.equals((Object)attribute0));
assertEquals("y&@e", attribute1.getKey());
assertEquals("=CpPG{VsLp9", attribute1.getValue());

Attributes attributes1 = attributes0.put(attribute0);
assertSame(attributes0, attributes1);
assertNotSame(attribute0, attribute1);
assertSame(attributes1, attributes0);
assertNotNull(attributes1);
assertFalse(attribute0.equals((Object)attribute1));
assertEquals(1, attributes0.size());
assertEquals("~", attribute0.getKey());
assertEquals("y&@e", attribute0.getValue());
assertEquals(1, attributes1.size());

FormElement formElement0 = new FormElement(tag0, "~", attributes0);
assertNotNull(formElement0);
assertFalse(tag0.preserveWhitespace());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isFormListed());
assertTrue(tag0.formatAsBlock());
assertTrue(tag0.isInline());
assertEquals("~", tag0.toString());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isData());
assertEquals("~", tag0.getName());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isBlock());
assertEquals(1, attributes0.size());
assertEquals(0, formElement0.childNodeSize());
assertEquals("~", formElement0.baseUri());
assertFalse(formElement0.hasParent());
assertEquals("~", formElement0.nodeName());
assertFalse(formElement0.isBlock());
assertEquals("~", formElement0.tagName());
assertEquals(0, formElement0.siblingIndex());

List<Node> list0 = formElement0.ensureChildNodes();
assertSame(attributes0, attributes1);
assertNotNull(list0);
assertFalse(tag0.preserveWhitespace());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isFormListed());
assertTrue(tag0.formatAsBlock());
assertTrue(tag0.isInline());
assertEquals("~", tag0.toString());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isData());
assertEquals("~", tag0.getName());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isBlock());
assertEquals(1, attributes0.size());
assertEquals(0, formElement0.childNodeSize());
assertEquals("~", formElement0.baseUri());
assertFalse(formElement0.hasParent());
assertEquals("~", formElement0.nodeName());
assertFalse(formElement0.isBlock());
assertEquals("~", formElement0.tagName());
assertEquals(0, formElement0.siblingIndex());
assertTrue(list0.isEmpty());
assertEquals(0, list0.size());

CDataNode cDataNode0 = new CDataNode("=CpPG{VsLp9");
assertNotNull(cDataNode0);
assertFalse(cDataNode0.hasParent());
assertEquals("#cdata", cDataNode0.nodeName());
assertEquals(0, cDataNode0.siblingIndex());

Node[] nodeArray0 = cDataNode0.childNodesAsArray();
assertNotNull(nodeArray0);
assertEquals(0, nodeArray0.length);
assertFalse(cDataNode0.hasParent());
assertEquals("#cdata", cDataNode0.nodeName());
assertEquals(0, cDataNode0.siblingIndex());

cDataNode0.wrap("PZMe0Szd{(");

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 7
* Writing tests to file
* Writing JUnit test case 'Element_ESTest' to results/Jsoup-87/org.jsoup.nodes.Element/default/tests/13
* Done!

* Computation finished
