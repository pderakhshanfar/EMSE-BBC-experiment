/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 08:44:53 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = new Document("textarea");
      document0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Document.createShell("/2Fb");
      Element element0 = document0.appendText("gvtaK$tVqFXv~o%t");
      element0.html();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Element element0 = new Element("#root");
      element0.getElementsByAttributeValueMatching("html", "#root");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r(8e6=>Knjr#;UwBB<", ", state=");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("x0Ci&()Gdq*P G*\"2j", "<Z+F?\"`{j2 y4+tBc;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: <Z+F?\"`{j2 y4+tBc;
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Document.createShell("6(4Twd]umNGu");
      document0.getElementsByAttributeValueContaining("3", "Iu'j[v\"}{Nni$");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Document.createShell("6(4Twd]umNGu");
      document0.getElementsByAttributeValueNot("Pattern syntax error: ", "6(4Twd]umNGu");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.head();
      element0.reparentChild(document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Document.createShell("'Ouy{a.9oBimkjiyY");
      LinkedList<Element> linkedList0 = new LinkedList<Element>();
      document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Element element0 = new Element("Children collection to be inserted must not be null.");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Children collection to be inserted must not be null.");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element0.outerHtmlTail(stringBuffer0, 1910, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("d i/mfU6#Zgzny.C:L", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "class", attributes0);
      pseudoTextElement0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("[HHa=(_vP}GH4E!Y", "[HHa=(_vP}GH4E!Y");
      document0.wrap(" &q}iwZDD>+Cy(m-+>");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.noes.Element$NodeList", "org.jsoup.noes.Element$NodeList");
      Element element0 = document0.head();
      element0.wrap("org.jsoup.noes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Document.createShell("6(4Twd]umNGu");
      Document document1 = Parser.parseBodyFragment("6(4Twd]umNGu", "6(4Twd]umNGu");
      Element element0 = document0.appendElement("hBtm(");
      element0.after((Node) document1);
      document1.val("6(4Twd]umNGu");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Tag tag0 = Tag.valueOf(")Twi");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ")Twi", (Attributes) null);
      pseudoTextElement0.setSiblingIndex((-1432352094));
      pseudoTextElement0.val(")Twi");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s+", "s+");
      Element element0 = document0.head();
      element0.val("html > head");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("optgroug", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Element$2", (Attributes) null);
      formElement0.val("Pattern syntax error:");
      formElement0.val();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("?&_?_@[WA98'}(0bOY", "value");
      Element element0 = document0.body();
      element0.toggleClass("");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'Ouy{a.9oBimkjiyY", "'Ouy{a.9oBimkjiyY");
      Element element0 = document0.head();
      element0.text("^Fse![)6]GMQ(");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.appendElement("br");
      element0.text("br");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.text("br");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Tag tag0 = Tag.valueOf("optgroug");
      FormElement formElement0 = new FormElement(tag0, "optgroug", (Attributes) null);
      formElement0.text();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("sgM@Aa3>yj5", "zkk");
      Element element0 = document0.body();
      element0.tagName("hH~6 -zr4");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Tag tag0 = Tag.valueOf("i");
      Element element0 = new Element(tag0, "R_7ZBF}pVbJwp7O1j");
      element0.setSiblingIndex((-598));
      element0.tagName("i>hG'Af$9MhEjD L+R");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Document.createShell("6(4Twd]umNGu");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parse("", "br");
      Element element0 = document0.appendElement("br");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.evaluator$attribute", "org.jsoup.select.evaluator$attribute");
      Element element0 = document0.head();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Document.createShell("6(4Twd]umNGu");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Tag tag0 = Tag.valueOf("optgroug");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "optgroug", (Attributes) null);
      pseudoTextElement0.selectFirst("optgroug");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6(4Twd]umNGu", "6(4Twd]umNGu");
      document0.selectFirst("body");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Element element0 = new Element("#root");
      element0.select("html");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$1");
      Element element0 = document0.appendElement("id");
      element0.select("id");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      Element element0 = document0.head();
      element0.removeClass("lXl");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.appendElement("# \\");
      element0.removeClass("# \\");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Document.createShell("6(4Twd]umNGu");
      Element element0 = document0.appendElement("6(4Twd]umNGu");
      element0.after((Node) document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Tag tag0 = Tag.valueOf("i");
      Element element0 = new Element(tag0, "R_7ZBF}pVbJwp7O1j");
      element0.setSiblingIndex((-598));
      element0.prependText("mt/q!v?.@V-/Gfvf_");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.head();
      element0.prependText("CommentEnd");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'Ouy{a.9oBimkjiyY", "'Ouy{a.9oBimkjiyY");
      document0.appendTo(document0);
      document0.prependText("~rUu");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Gr", "Gr");
      Element element0 = document0.appendElement("Gr");
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.noes.Element$NodeList", "org.jsoup.noes.Element$NodeList");
      Element element0 = document0.head();
      element0.prependChild(element0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("0Gr", "0Gr");
      document0.setSiblingIndex((-1841956614));
      document0.prepend("0Gr");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("2.TEOW>x#", "2.TEOW>x#");
      Element element0 = document0.body();
      element0.prepend("2.TEOW>x#");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = Parser.parseBodyFragment("", "l_S#U/#PRJ$&\"");
      document0.appendTo(document1);
      document0.prepend("l_S#U/#PRJ$&\"");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = new Document("6(4Twd]umNGu");
      document0.prepend("");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6(4Twd]umNGu", "6(4Twd]umNGu");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.head();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("lXT|Qx@U<mJkp:iC2V?", "o$ObBmxa@&ml5{Kd8G|");
      Element element0 = document0.createElement("lXT|Qx@U<mJkp:iC2V?");
      document0.setParentNode(element0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parse("}|", "}|");
      Element element0 = document0.appendElement("|H");
      element0.reparentChild(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.head();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("[HHa=(_vP}GH4E!Y", "[HHa=(_vP}GH4E!Y");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("async", "GP%t(1.s");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Document.createShell("                   ");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      document0.appendElement("Pattern syntax error: ");
      document0.reparentChild(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G';e'", "G';e'");
      Evaluator.ContainsData evaluator_ContainsData0 = new Evaluator.ContainsData((String) null);
      document0.is((Evaluator) evaluator_ContainsData0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3#x", "3#x");
      Pattern pattern0 = Pattern.compile("qYJa6&Kw_");
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches(pattern0);
      document0.is((Evaluator) evaluator_Matches0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parse("PatteGn syntax eor: ", "PatteGn syntax eor: ");
      Element element0 = document0.head();
      element0.is("head");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Document.createShell("6(4Twd]umNGu");
      Element element0 = document0.appendElement("hBtm(");
      element0.after((Node) document0);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) element0;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = new Document("oYQJBA");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Document document0 = new Document("Ge'");
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6n", "6n");
      Elements elements0 = document0.nextElementSiblings();
      Element element0 = document0.appendElement("6n");
      element0.insertChildren((-1), (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parse("/,g+yJ", "/,g+yJ");
      Element element0 = document0.head();
      Elements elements0 = document0.getElementsByAttributeValueStarting("{l/=g<pchox%:*2", "#root");
      element0.insertChildren((-1), (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Document.createShell("'Ouy{a.9oBimkjiyY");
      Elements elements0 = document0.getElementsByAttributeValueStarting("/,g+yJ", "'Ouy{a.9oBimkjiyY");
      document0.insertChildren((-1), (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("2.TEOW>x#", "2.TEOW>x#");
      Element element0 = document0.body();
      element0.html("2.TEOW>x#");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b!#YX{`;ID", "");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Tag tag0 = Tag.valueOf("qYJ6&Kw_");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "qYJ6&Kw_", attributes0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      formElement0.html(bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Tag tag0 = Tag.valueOf("s+");
      Element element0 = new Element(tag0, "s+");
      element0.html();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.LeafNode", "org.jsoup.nodes.LeafNode");
      document0.getElementsByClass("CommentStartDash");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Element element0 = new Element("#root");
      Pattern pattern0 = Pattern.compile("t?'Cwg2");
      element0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Element element0 = new Element("head");
      Pattern pattern0 = Pattern.compile("#;QU1s", 4);
      element0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.LeafNode", "org.jsoup.nodes.LeafNode");
      Pattern pattern0 = Pattern.compile("header");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G';e'", "G';e'");
      Pattern pattern0 = Pattern.compile("G';e'");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parse("id", "^");
      document0.getElementsContainingOwnText("id");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parse("V", "V");
      document0.getElementsByTag("html");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Document.createShell("53pk^2Q(~!R[`");
      document0.getElementsByIndexLessThan(369);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Document.createShell("6(4Twd]umNGu");
      document0.getElementsByIndexGreaterThan((-34));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = new Document("Ge'");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = new Document("{");
      document0.getElementsByAttributeValue("{", "{");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Put%\"Gn synmt8 eor: ");
      CDataNode cDataNode0 = new CDataNode("Put%\"Gn synmt8 eor: ");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("Put%\"Gn synmt8 eor: ", true);
      FormElement formElement0 = new FormElement(tag0, "Put%\"Gn synmt8 eor: ", attributes1);
      formElement0.getElementsByAttributeStarting("Put%\"Gn synmt8 eor: ");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("Gr", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("Gr", "Gr");
      attributes0.put(attribute0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Gr", attributes0);
      pseudoTextElement0.getElementsByAttribute("Gr");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#3ZMas", "#3ZMas");
      Tag tag0 = Tag.valueOf("tSt!T");
      CDataNode cDataNode0 = new CDataNode("|=x?O\"bwR 0)6t;m>:t");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "tSt!T", attributes0);
      document0.prependChild(pseudoTextElement0);
      pseudoTextElement0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Document.createShell("'Ouy{a.9oBimkjiyY");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("P(", "P(");
      document0.childNodes = null;
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("html", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "html", attributes0);
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'Ouy{a.9oBimkjiyY", "'Ouy{a.9oBimkjiyY");
      document0.appendTo(document0);
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Document.createShell("e");
      Element element0 = document0.body();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = new Document("=W-a-<Q-rM");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Document.createShell("output");
      document0.tagName("tr");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Document.createShell("output");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parse("", "br");
      Element element0 = document0.appendElement("br");
      Locale locale0 = new Locale("");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Document.createShell("6(4Twd]umNGu");
      Element element0 = document0.prependElement("ul");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = new Document("3(");
      document0.toggleClass("org.jsoup.nodes.Element$1");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("?&_?_@[WA98'}(0bOY", "value");
      document0.toggleClass("");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Element element0 = new Element("rg.jsoup.node.Element$1");
      element0.children();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Tag tag0 = Tag.valueOf("qYJ6&Kw_");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "qYJ6&Kw_", attributes0);
      formElement0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6n", "6n");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Document.createShell("6(4Twd]umNGu");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("lXT|Qx@U<mJkp:iC2V?", "o$ObBmxa@&ml5{Kd8G|");
      document0.setParentNode(document0);
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Tag tag0 = Tag.valueOf("optgroug");
      CDataNode cDataNode0 = new CDataNode("6");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "optgroug", attributes0);
      Document document0 = new Document("6");
      formElement0.reparentChild(document0);
      document0.before("i.UhB");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Document.createShell("6(4Twd]umNGu");
      Element element0 = document0.appendElement("hBtm(");
      element0.before("=");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.body();
      element0.before("java.lang.string@0000000054 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default vsfmgv9urp+^_fbg iso646-us ibm367 646 us");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Tag tag0 = Tag.valueOf("optgroug");
      FormElement formElement0 = new FormElement(tag0, "optgroug", (Attributes) null);
      formElement0.doSetBaseUri((String) null);
      formElement0.baseUri();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parse("", "br");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Element element0 = new Element("Children collection to be inserted must not be null.");
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$IsFirstOfType", "org.jsoup.select.Evaluator$IsFirstOfType");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parse("cx$gt", "cx$gt");
      Element element0 = document0.head();
      element0.before((Node) document0);
      element0.attr("cx$gt", false);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parse("cx$gt", "cx$gt");
      Element element0 = document0.head();
      element0.attr("cx$gt", false);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syn&ax error: ", "Pattern syn&ax error: ");
      document0.attr("Pattern syn&ax error: ", false);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r(8e6=>Knjr#;UwBB<", "qYJ6&Kw_");
      Element element0 = document0.appendElement("-");
      element0.attr("WQ}\n&pv:?>vpV>W#R", "6(4twd]umngu");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.noes.Element$NodeList", "org.jsoup.noes.Element$NodeList");
      Element element0 = document0.head();
      element0.attr("org.jsoup.noes.Element$NodeList", "5v\"");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G';e'", "G';e'");
      document0.attr("G';e'", "class");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = new Document("Ge'");
      document0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parse("PatteGn syntax eor: ", "PatteGn syntax eor: ");
      Element element0 = document0.head();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Document.createShell("/2Fb");
      Element element0 = document0.body();
      element0.appendText("gvtaK$tVqFXv~o%t");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.head();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      document0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3(", "3(");
      Element element0 = document0.head();
      element0.append("org.jsoup.select.Evaluator$AttributeWithValueEnding");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Document.createShell("6(4Twd]umNGu");
      Document document1 = Parser.parseBodyFragment("6(4Twd]umNGu", "6(4Twd]umNGu");
      Element element0 = document0.appendElement("hBtm(");
      element0.after((Node) document1);
      document1.append("^?d:R");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Tag tag0 = Tag.valueOf("qYJ6&Kw_");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "qYJ6&Kw_", attributes0);
      formElement0.append("");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.LeafNode", "org.jsoup.nodes.LeafNode");
      Element element0 = document0.head();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Document.createShell("6(4Twd]umNGu");
      Element element0 = document0.appendElement("hBtm(");
      element0.after((Node) document0);
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parse("hz", "hz");
      Element element0 = document0.appendElement("hz");
      element0.after("hz");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("pategn synax or:", "pategn synax or:");
      Element element0 = document0.body();
      element0.after("pategn synax or:");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#3ZMas", "#3ZMas");
      Element element0 = document0.appendElement("<+[nu<k*i/lnhd");
      element0.addClass(":containsOwn(");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parse("/,g+yJ", "/,g+yJ");
      Element element0 = document0.head();
      element0.addClass("o1Cj'");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parse("o-!uX@jKm", "o-!uX@jKm");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.wrap("o-!uX@jKm");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Document.createShell("},G8}EY!CN");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.NodeUtils", "org.jsoup.nodes.NodeUtils");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.val("org.jsoup.nodes.NodeUtils");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Gr");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("Gr", true);
      attributes1.keys = null;
      FormElement formElement0 = new FormElement(tag0, "#text", attributes1);
      // Undeclared exception!
      try { 
        formElement0.val();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parse("tetre", "tetre");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = new Document("PatteGn syntax or: ");
      // Undeclared exception!
      try { 
        document0.text("PatteGn syntax or: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.tagName("^D]$w");
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#text", "head");
      parser0.settings((ParseSettings) null);
      // Undeclared exception!
      try { 
        document0.tagName("Pa^+pk)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("OC&", "OC&");
      // Undeclared exception!
      try { 
        document0.tagName(" ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$IsFirstOfType");
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      CDataNode cDataNode0 = new CDataNode("br");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.siblingElements();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.selpct.evaluator$attribute", "org.jsoup.selpct.evaluator$attribute");
      // Undeclared exception!
      try { 
        document0.selectFirst("org.jsoup.selpct.evaluator$attribute");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.selpct.evaluator$attribute': unexpected token at '$attribute'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s~-ip-6", "s~-ip-6");
      // Undeclared exception!
      try { 
        document0.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Document.createShell("br");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "optgroug");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = new Document("</");
      Comment comment0 = new Comment(":rJL*U25[3", "#");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      Element element0 = document0.doClone(xmlDeclaration0);
      // Undeclared exception!
      try { 
        element0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = new Document("#text");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.prependElement("#text");
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Gr", "Gr");
      Element element0 = document0.appendElement("Gr");
      element0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.prependChild(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("UG6@^if;t|9>DDb", "UG6@^if;t|9>DDb");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.prepend("UG6@^if;t|9>DDb");
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.evaluator$attribute", "org.jsoup.select.evaluator$attribute");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parse("/>", "/>");
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(729);
      // Undeclared exception!
      document0.outerHtmlTail(stringWriter0, 948, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = new Document("#text");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "#text");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 46, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 31, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("d", "d");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, 132, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("PutteGn syntax eor: ", "PutteGn syntax eor: ");
      StringBuffer stringBuffer0 = new StringBuffer("org.jsoup.select.Collector$FirstFinder");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(stringBuffer0, (-2214), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "u_");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      MockFile mockFile0 = new MockFile("u_", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      document0.outerHtmlHead(mockPrintWriter0, 97692013, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.evaluator$attribute", "$VALUES");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "org.jsoup.select.evaluator$attribute");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 46, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("utC,hD(`", "utC,hD(`");
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 4, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pattegn syntax eor:", "pattegn syntax eor:");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, 1178, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("textarea");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockPrintWriter0, (-1800), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parse("Gr", "Gr");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlHead(pipedWriter0, 877, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Document.createShell("9YE#");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("9YE#", "img", false);
      Element element0 = document0.doClone(xmlDeclaration0);
      // Undeclared exception!
      try { 
        element0.nextElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parse("PatteGn syntax eor: ", "PatteGn syntax eor: ");
      DocumentType documentType0 = new DocumentType(";!", "vN6KyqFD zzKbxe6X_", (String) null, "?hZ5V.l=e0sb[S47$6");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.nextElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parse("od", "od");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("iso646-us", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("&\"$v~v-=");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "!zQ7bAcK)RLCZPF%u", attributes0);
      formElement0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        formElement0.lastElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = new Document("PatteGn syntax or: ");
      document0.reparentChild(document0);
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan((-1449));
      // Undeclared exception!
      document0.is((Evaluator) evaluator_IndexLessThan0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#%c4O2i.|*icsz", "#%c4O2i.|*icsz");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.is("Pattern syntax error: ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'error:': unexpected token at ':'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parse("--", "--");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.is("#root");
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Element element0 = new Element("StartTag");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) element0;
      // Undeclared exception!
      try { 
        element0.insertChildren((-1), nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.html("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pattegn syntax eor:", "pattegn syntax eor:");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("RCDATAEndTagName", "EY|W.3N<Cg?s@");
      Comment comment0 = new Comment("EY|W.3N<Cg?s@");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document0.html("J(");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("PutteGn syntax eor: ", "PutteGn syntax eor: ");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("PatteGn syntax eor: ", "PatteGn syntax eor: ");
      document0.reparentChild(document0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(394);
      // Undeclared exception!
      document0.html(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("orBgjsoup.select.Evalua|or$IsFirstPfType", "orBgjsoup.select.Evalua|or$IsFirstPfType");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.noes.E0ement$NodeList", "org.jsoup.noes.E0ement$NodeList");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Document.createShell("atteGn syntaxeory ");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("utC,hD(`", "utC,hD(`");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("utC,hD(`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: utC,hD(`
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("gzip", "gzip");
      Comment comment0 = new Comment("gzip", "gzip");
      document0.setParentNode(comment0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("qh5@LXXNE");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("PatteGn syntax eor: ", "PatteGn syntax eor: ");
      document0.setSiblingIndex((-1432352094));
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("PatteGn syntax eor: ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parse("xGr", "xGr");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#%cV4O2iq.|*icsz", "#%cV4O2iq.|*icsz");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("#%cV4O2iq.|*icsz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: #%cV4O2iq.|*icsz
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ptegn synax o:", "ptegn synax o:");
      document0.setSiblingIndex((-2313));
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("ptegn synax o:");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = new Document("org.jsoup.sele9t.evaluator$attribute");
      Element element0 = document0.appendElement("}|");
      element0.setSiblingIndex((-3091));
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("org.jsoup.sele9t.evaluator$attribute");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.getElementsByTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$IsFirstOfType", "org.jsoup.select.Evaluator$IsFirstOfType");
      TextNode textNode0 = TextNode.createFromEncoded("x@F0'A4Q%", "nqp1i]");
      document0.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexGreaterThan(15);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Tag tag0 = Tag.valueOf("\"");
      FormElement formElement0 = new FormElement(tag0, "F", (Attributes) null);
      // Undeclared exception!
      try { 
        formElement0.getElementsByAttributeValueStarting("U_?;HY", "\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Tag tag0 = Tag.valueOf("optgroup");
      Element element0 = new Element(tag0, "optgroup");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueMatching("InputStream data not supported in URL query string.", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Put%\"Gn synt8 eor: ", "Put%\"Gn synt8 eor: ");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("Put%\"Gn synt8 eor: ", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pattegn syntax eor:", "pattegn syntax eor:");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#text", "#text");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("PutteGn syntax eor: ", "PutteGn syntax eor: ");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.head();
      element0.tagName("_YOwEMwB-1?=l;1w7(V");
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at 'v'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.prependElement("br");
      element1.siblingIndex = (-3029);
      // Undeclared exception!
      try { 
        element1.cssSelector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("optgroug", "1");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      // Undeclared exception!
      try { 
        document0.child((-144935909));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$IsFirstOfType", "org.jsoup.select.Evaluator$IsFirstOfType");
      CDataNode cDataNode0 = new CDataNode("\"\"D-5E<>[tZ-53:");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = new Document("PatteGn syntax or: ");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.before("PatteGn syntax or: ");
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      TextNode textNode0 = TextNode.createFromEncoded("Children collection to be inserted must not be null.");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.before("R?/O58Eoi");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Document.createShell("cx$gt");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.attr("cx$gt", "cx$gt");
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parse("@s.r/0o", "@s.r/0o");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("PatteGn syntax eor: ", "PatteGn syntax eor: ");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.appendElement("PatteGn syntax eor: ");
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Gr", "Gr");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-2580));
      List<Node> list0 = Parser.parseFragment("Gr", (Element) document0, "M?r+dn+L*yP1]a+", parseErrorList0);
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendElement("Gr");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Putt\"Gn synt8 eor: ", "Putt\"Gn synt8 eor: ");
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document1 = document0.parser(parser1);
      // Undeclared exception!
      try { 
        document1.appendElement("Putt\"Gn synt8 eor: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Element element0 = new Element("|M");
      CDataNode cDataNode0 = new CDataNode("tag name must not be empty.");
      Element element1 = element0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.appendChild(element1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = new Document(">I9{5rpaWiE");
      CDataNode cDataNode0 = new CDataNode(">I9{5rpaWiE");
      Node node0 = cDataNode0.doClone(document0);
      // Undeclared exception!
      try { 
        document0.appendChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = new Document("org.jsoupselpct.evalua\"or$attribute");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = new Document("PatteGn syntax or: ");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.append("PatteGn syntax or: ");
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Document.createShell("@9");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parse("optgroug", "optgroug");
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parse("PatteGn syntax eor: ", "PatteGn syntax eor: ");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.after("PatteGn syntax eor: ");
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$IsFirstOfType", "org.jsoup.select.Evaluator$IsFirstOfType");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "org.jsoup.nodes.Element", (Attributes) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "S|p;$\"B'YeLtQVga$Lu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = new Document("Bs P:ws~");
      document0.html((PipedWriter) null);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Document.createShell("6(4Twd]umNGu");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      document0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.reparentChild(document0);
      DocumentType documentType0 = new DocumentType("Children collection to be inserted must not be null.", "", "", "", "Children collection to be inserted must not be null.");
      document0.after((Node) documentType0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.appendText("mz_51ZY[szB6_wl");
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'Ouy{a.9oBimkjiyY", "'Ouy{a.9oBimkjiyY");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'Ouy{a.9oBimkjiyY", "'Ouy{a.9oBimkjiyY");
      document0.appendTo(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parse("f", "f");
      document0.reparentChild(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("PutteGn syntax eor: ", "PutteGn syntax eor: ");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parse("PatteGn syntax eor: ", "PatteGn syntax eor: ");
      document0.reparentChild(document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.reparentChild(document0);
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("JrbPJ]y:(]rx(<B", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("2EqV^K");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "2:n", attributes0);
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parse("head", ";K/4se5!");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Gr", "Gr");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$Class");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = new Document("nobr");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "#root");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Element element0 = new Element("AfterDoctypeSystemIdentifier");
      // Undeclared exception!
      try { 
        element0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6(4Twd]umNGu", "6(4Twd]umNGu");
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute((String) null);
      // Undeclared exception!
      try { 
        document0.is((Evaluator) evaluator_Attribute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("LA]f;7@-/", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "C", attributes0);
      Pattern pattern0 = Pattern.compile("LA]f;7@-/");
      formElement0.getElementsByAttributeValueMatching("", pattern0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("4FZXpX=", "4FZXpX=");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = new Document("3(");
      Set<String> set0 = document0.classNames();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings1);
      document0.html();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Gr", "Gr");
      // Undeclared exception!
      try { 
        document0.html((OutputStreamWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Element element0 = new Element("br");
      element0.prependElement("br");
      StringBuilder stringBuilder0 = new StringBuilder();
      element0.outerHtml((Appendable) stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.appendElement("br");
      StringBuilder stringBuilder0 = new StringBuilder();
      element0.outerHtml((Appendable) stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("textarea");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(mockPrintWriter0, (-1800), document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "textarea", (Attributes) null);
      pseudoTextElement0.val("textarea");
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      FormElement formElement0 = new FormElement(tag0, "textarea", (Attributes) null);
      formElement0.val();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Tag tag0 = Tag.valueOf("CB7P{G");
      CDataNode cDataNode0 = new CDataNode("class");
      Attributes attributes0 = cDataNode0.attributes();
      attributes0.putIgnoreCase("class", "MarkupDeclarationOpen");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "class", attributes0);
      pseudoTextElement0.toggleClass("MarkupDeclarationOpen");
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Document document0 = Parser.parseBodyFragment("ddoRmi", "ddoRmi");
      document0.classNames(set0);
      document0.hasClass("ddoRmi");
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Document document0 = Parser.parse("iso-ir-6", "iso-ir-6");
      document0.classNames(set0);
      document0.hasClass("iso-ir-6");
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
      document0.hasClass("br");
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000038 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us #te;xt 646 us", "java.lang.string@0000000038 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us #te;xt 646 us");
      document0.classNames(set0);
      document0.hasClass("java.lang.string@0000000038 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us #te;xt 646 us");
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.NodeTraversor", "org.jsoup.select.NodeTraversor");
      document0.toggleClass("org.jsoup.select.NodeTraversor");
      document0.hasClass("org.jsoup.select.NodeTraversor");
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parse("text>re!", "text>re!");
      document0.addClass("text>re!");
      document0.hasClass("text>re!");
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      document0.hasClass("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parse("f!mm[,!3<!`BJ>^S>", "pgoxW-[-");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parse("<!doctype", "]E7AH20Iz1v'7");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", "_textare");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'Ouy{a.9oBimkjiyY", "'Ouy{a.9oBimkjiyY");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      document0.reparentChild(document0);
      document0.getElementsContainingText("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.appendElement("br");
      document0.appendElement("br");
      document0.getElementsMatchingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.appendElement("br");
      document0.getElementsMatchingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parse("g\"+6!w>^lh", "g\"+6!w>^lh");
      CDataNode cDataNode0 = new CDataNode("g\"+6!w>^lh");
      document0.prependChild(cDataNode0);
      document0.getElementsMatchingOwnText("g\"+6!w>^lh");
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("UG6@^if;t|9>DDb", "UG6@^if;t|9>DDb");
      document0.title("UG6@^if;t|9>DDb");
      document0.getElementsMatchingOwnText("UG6@^if;t|9>DDb");
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parse("B)UDiv/.7L@<?[", "B)UDiv/.7L@<?[");
      document0.getElementsMatchingOwnText("~jf41cBcO;X");
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Put%\"Gn synt8 eor: ", "Put%\"Gn synt8 eor: ");
      document0.appendText("+O`)((%SGaOG");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Gr", "Gr");
      document0.append("Gr");
      document0.getElementsMatchingText("Gr");
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parse("optgroug", "optgroug");
      document0.prepend("optgroug");
      document0.getElementsMatchingText("optgroug");
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.appendElement("br");
      document0.getElementsMatchingText("br");
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parse("|", "|");
      document0.appendElement("|");
      document0.getElementsMatchingText("|");
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parse("dt", "dt");
      document0.appendElement("dt");
      document0.getElementsMatchingText("dt");
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gq |<!;!o.%", "gq |<!;!o.%");
      document0.getElementsMatchingText("gq |<!;!o.%");
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      Element element0 = document0.body();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.reparentChild(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parse("rs~-ic$6", "rs~-ic$6");
      document0.reparentChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("gq |5!;!o.7", "gq |5!;!o.7");
      Element element0 = document0.appendElement("gq |5!;!o.7");
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = new Document("6(4Twd]umNGu");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parse("cx$gt", "cx$gt");
      Element element0 = document0.head();
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.evaluator$attribute", "org.jsoup.select.evaluator$attribute");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parse("PatteGn syntax error: ", "PatteGn syntax error: ");
      document0.nextElementSibling();
      assertEquals("PatteGn syntax error: ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.selpct.evaluator$attribute", "org.jsoup.selpct.evaluator$attribute");
      document0.siblingElements();
      assertEquals("org.jsoup.selpct.evaluator$attribute", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.appendElement("br");
      Elements elements0 = element0.siblingElements();
      assertEquals("br", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Document.createShell("cx$gt");
      Element element0 = document0.head();
      element0.after("cx$gt");
      String string0 = element0.cssSelector();
      assertEquals("html > head:nth-child(1)", string0);
      assertEquals("cx$gt", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertEquals("html > head", string0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ptegn synax o:", "ptegn synax o:");
      Element element0 = document0.toggleClass("ptegn synax o:");
      element0.cssSelector();
      assertEquals(1, element0.childNodeSize());
      assertEquals("ptegn synax o:", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("sortable", "sortable");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1872), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      Node[] nodeArray0 = document0.childNodesAsArray();
      // Undeclared exception!
      try { 
        document0.insertChildren(8364, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-2994), (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("d", "d");
      Elements elements0 = document0.getElementsByIndexEquals(147);
      // Undeclared exception!
      try { 
        document0.insertChildren(147, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Put%\"Gn synt8 eor: ", "Put%\"Gn synt8 eor: ");
      DataNode dataNode0 = new DataNode("Put%\"Gn synt8 eor: ", "Put%\"Gn synt8 eor: ");
      document0.appendChild(dataNode0);
      document0.dataNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G';e'", "G';e'");
      document0.prependText("");
      document0.textNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$IsFirstOfType", "org.jsoup.select.Evaluator$IsFirstOfType");
      document0.reparentChild(document0);
      document0.appendText("org.jsoup.select.Evaluator$IsFirstOfType");
      document0.nextElementSiblings();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G';e6", "G';e6");
      Elements elements0 = document0.getElementsByIndexGreaterThan(374);
      assertEquals("G';e6", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parse("xGr", "xGr");
      document0.selectFirst("xGr");
      assertEquals(1, document0.childNodeSize());
      assertEquals("xGr", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = new Document("=L");
      document0.getElementsByTag("=L");
      assertEquals("=L", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.evaluator$attribute", "org.jsoup.select.evaluator$attribute");
      Elements elements0 = document0.getAllElements();
      assertEquals(4, elements0.size());
      assertEquals("org.jsoup.select.evaluator$attribute", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Element element0 = new Element("GL");
      // Undeclared exception!
      try { 
        element0.before("GL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syn&ax error: ", "Pattern syn&ax error: ");
      document0.getElementsByAttribute("Pattern syn&ax error: ");
      assertEquals("Pattern syn&ax error: ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Element element0 = new Element("multipart/form-data; boundary=");
      Element element1 = element0.clone();
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Gr", "Gr");
      // Undeclared exception!
      try { 
        document0.after((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parse("cx$gt", "cx$gt");
      Elements elements0 = document0.getElementsContainingText("cx$gt");
      assertEquals(3, elements0.size());
      assertEquals("cx$gt", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = new Document("=9b");
      // Undeclared exception!
      try { 
        document0.getElementsByClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Document.createShell("eAyDHcef0XS;=~B");
      document0.getElementsByAttributeValueEnding("eAyDHcef0XS;=~B", "eAyDHcef0XS;=~B");
      assertEquals("eAyDHcef0XS;=~B", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("text>re!", "text>re!");
      document0.is(":only-child");
      assertEquals(1, document0.childNodeSize());
      assertEquals("text>re!", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Element element0 = new Element("`wS,:NAF7s2|/)a");
      // Undeclared exception!
      try { 
        element0.wrap("`wS,:NAF7s2|/)a");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parse(":sNE", ":sNE");
      document0.getElementsByAttributeStarting(":sNE");
      assertEquals(1, document0.childNodeSize());
      assertEquals(":sNE", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Document.createShell("Hj)g\"2.l%=,jMt");
      // Undeclared exception!
      try { 
        document0.prependElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("j=~k!l{!?1QH-b.5(", "j=~k!l{!?1QH-b.5(");
      Elements elements0 = document0.getElementsByIndexLessThan((-1));
      assertEquals("j=~k!l{!?1QH-b.5(", document0.baseUri());
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.after("Pattern syntax error: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Document.createShell("uZG4Dn#|yvH2(~T6ou\"");
      // Undeclared exception!
      try { 
        document0.select("uZG4Dn#|yvH2(~T6ou\"");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("textarea", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = new Document("N'%l,S<@'^Mx=>]Wzb");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue((String) null, "N'%l,S<@'^Mx=>]Wzb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = new Document("j=~k!l{!?1QH-b.5(");
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Element element0 = new Element("r[WfYjT=Jn-|");
      String string0 = element0.wholeText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E Bzde$", "E Bzde$");
      // Undeclared exception!
      try { 
        document0.before((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Element element0 = new Element("Pattern syntax error: ");
      Elements elements0 = element0.getElementsContainingOwnText("?R[r4MWUt;u");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Attributes$1");
      document0.dataset();
      assertEquals("org.jsoup.nodes.Attributes$1", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$IsFirstOfType", "org.jsoup.select.Evaluator$IsFirstOfType");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$IsFirstOfType", "org.jsoup.select.Evaluator$IsFirstOfType");
      // Undeclared exception!
      try { 
        document0.child(126);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 126, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Element element0 = new Element("EndTag");
      // Undeclared exception!
      try { 
        element0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("PatteGn syntax eor: ", "PatteGn syntax eor: ");
      Elements elements0 = document0.getElementsMatchingText("PatteGn syntax eor: ");
      assertEquals("PatteGn syntax eor: ", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Put%\"Gn synt8 eor: ", "Put%\"Gn synt8 eor: ");
      Element element0 = document0.removeClass("Put%\"Gn synt8 eor: ");
      assertEquals(1, element0.childNodeSize());
      assertEquals("Put%\"Gn synt8 eor: ", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Putt\"Gn synt8 eor: ", "Putt\"Gn synt8 eor: ");
      Elements elements0 = document0.children();
      assertFalse(elements0.isEmpty());
      assertEquals("Putt\"Gn synt8 eor: ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.evaluator$attribute", "org.jsoup.select.evaluator$attribute");
      document0.getElementById("org.jsoup.select.evaluator$attribute");
  }
}
