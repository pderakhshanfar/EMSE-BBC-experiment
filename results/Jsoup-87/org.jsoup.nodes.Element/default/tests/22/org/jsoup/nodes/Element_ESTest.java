/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 02:29:23 GMT 2020
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.Writer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Spliterator;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;
import sun.nio.cs.US_ASCII;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse("Children collection tobe inserted must notbe null.", "Children collection tobe inserted must notbe null.");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection tobe inserted must notbe null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("Children collection tobe inserted must notbe null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      document0.reparentChild(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection tobe inserted must notbe null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection tobe inserted must notbe null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      String string0 = "tg)xtare=";
      // Undeclared exception!
      document0.attr("tg)xtare=", "Children collection tobe inserted must notbe null.");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Document.createShell("hT9/");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("hT9/", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("hT9/", document0.baseUri());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("hT9/", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("hT9/", document0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("hT9/", element0.baseUri());
      
      Element element1 = element0.shallowClone();
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("hT9/", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("hT9/", document0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("hT9/", element0.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("hT9/", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Map<String, String> map0 = element0.dataset();
      assertNotNull(map0);
      assertFalse(element0.equals((Object)element1));
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("hT9/", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("hT9/", document0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("hT9/", element0.baseUri());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotSame(element0, element1);
      
      Document document1 = (Document)document0.toggleClass("java.lang.string@0000000071");
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("hT9/", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("hT9/", document0.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("hT9/", document1.baseUri());
      assertEquals("hT9/", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.toggleClass("java.lang.string@0000000071");
      assertNotNull(document2);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("hT9/", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("hT9/", document0.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("hT9/", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("hT9/", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      boolean boolean0 = document0.hasClass("java.lang.string@0000000071");
      assertTrue(boolean0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("hT9/", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("hT9/", document0.baseUri());
      assertSame(document0, document1);
      assertSame(document0, document2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Children collection to be inserted must notbe null.", "Children collection to be inserted must notbe null.");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      document0.setSiblingIndex((-3323));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-3323), document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertFalse(document0.isBlock());
      
      boolean boolean0 = document0.hasClass("Children collection to be inserted must notbe null.");
      assertFalse(boolean0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-3323), document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.html("java.lang.string@0000000052");
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-3323), document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals((-3323), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document1.baseUri());
      assertEquals("Children collection to be inserted must notbe null.", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Document.createShell("shTc");
      assertNotNull(document0);
      assertEquals("shTc", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("shTc", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      document0.siblingIndex = (-1);
      assertEquals("shTc", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("shTc", document0.location());
      assertEquals((-1), document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.toggleClass("java.lang.string@0000000071");
      assertNotNull(document1);
      assertEquals("shTc", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("shTc", document0.location());
      assertEquals((-1), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("shTc", document1.location());
      assertEquals("shTc", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals((-1), document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = new Document("shTc");
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals("shTc", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("shTc", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      
      boolean boolean0 = document0.hasClass("java.lang.string@0000000071");
      assertFalse(boolean0);
      assertFalse(document0.equals((Object)document2));
      assertEquals("shTc", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("shTc", document0.location());
      assertEquals((-1), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      
      Elements elements0 = document0.getElementsByAttribute("java.lang.string@0000000071");
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document2));
      assertEquals("shTc", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("shTc", document0.location());
      assertEquals((-1), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      
      Document document3 = (Document)document1.attr("shTc", "p");
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertEquals("shTc", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("shTc", document0.location());
      assertEquals((-1), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("shTc", document1.location());
      assertEquals("shTc", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals((-1), document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("shTc", document3.location());
      assertEquals((-1), document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("shTc", document3.baseUri());
      assertFalse(document3.hasParent());
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";j6BRU*MCJ", ";j6BRU*MCJ");
      assertNotNull(document0);
      assertEquals(";j6BRU*MCJ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";j6BRU*MCJ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      String string0 = document0.data();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(";j6BRU*MCJ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";j6BRU*MCJ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("3=z:G)5R");
      assertNotNull(stringReader0);
      
      Document document0 = parser0.parseInput((Reader) stringReader0, "3=z:G)5R");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("3=z:G)5R", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3=z:G)5R", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.parser(parser0);
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertEquals("3=z:G)5R", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3=z:G)5R", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("3=z:G)5R", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("3=z:G)5R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("3=z:G)5R", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3=z:G)5R", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("3=z:G)5R", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("3=z:G)5R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("3=z:G)5R", element0.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = element0.ownerDocument();
      assertNotNull(document2);
      assertFalse(parser0.isTrackErrors());
      assertEquals("3=z:G)5R", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3=z:G)5R", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("3=z:G)5R", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("3=z:G)5R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("3=z:G)5R", element0.baseUri());
      assertEquals("3=z:G)5R", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("3=z:G)5R", document2.baseUri());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Element element1 = document2.head();
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertFalse(parser0.isTrackErrors());
      assertEquals("3=z:G)5R", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3=z:G)5R", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("3=z:G)5R", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("3=z:G)5R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("3=z:G)5R", element0.baseUri());
      assertEquals("3=z:G)5R", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("3=z:G)5R", document2.baseUri());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals("3=z:G)5R", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(element0, element1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(element1, element0);
      
      List<Node> list0 = element1.ensureChildNodes();
      assertNotNull(list0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(parser0.isTrackErrors());
      assertEquals("3=z:G)5R", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3=z:G)5R", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("3=z:G)5R", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("3=z:G)5R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("3=z:G)5R", element0.baseUri());
      assertEquals("3=z:G)5R", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("3=z:G)5R", document2.baseUri());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals("3=z:G)5R", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(element0, element1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(element1, element0);
      
      Document document3 = (Document)document1.text("ohW#$=rWnSL.ZpvF");
      assertNotNull(document3);
      assertFalse(parser0.isTrackErrors());
      assertEquals("3=z:G)5R", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3=z:G)5R", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("3=z:G)5R", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("3=z:G)5R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals("3=z:G)5R", document3.baseUri());
      assertEquals("3=z:G)5R", document3.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      Set<String> set0 = element1.classNames();
      assertNotNull(set0);
      assertFalse(set0.contains("ohW#$=rWnSL.ZpvF"));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(parser0.isTrackErrors());
      assertEquals("3=z:G)5R", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3=z:G)5R", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("3=z:G)5R", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("3=z:G)5R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("3=z:G)5R", element0.baseUri());
      assertEquals("3=z:G)5R", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("3=z:G)5R", document2.baseUri());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals("3=z:G)5R", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(element0, element1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(element1, element0);
      
      Element element2 = element0.classNames(set0);
      assertNotNull(element2);
      assertFalse(set0.contains("ohW#$=rWnSL.ZpvF"));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(parser0.isTrackErrors());
      assertEquals("3=z:G)5R", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3=z:G)5R", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("3=z:G)5R", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("3=z:G)5R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("3=z:G)5R", element0.baseUri());
      assertEquals("3=z:G)5R", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("3=z:G)5R", document2.baseUri());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals("3=z:G)5R", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(1, element2.childNodeSize());
      assertEquals("body", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals(1, element2.siblingIndex());
      assertEquals("body", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals("3=z:G)5R", element2.baseUri());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      
      Map<String, String> map0 = element2.dataset();
      assertNotNull(map0);
      assertFalse(set0.contains("ohW#$=rWnSL.ZpvF"));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(parser0.isTrackErrors());
      assertEquals("3=z:G)5R", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3=z:G)5R", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("3=z:G)5R", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("3=z:G)5R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("3=z:G)5R", element0.baseUri());
      assertEquals("3=z:G)5R", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("3=z:G)5R", document2.baseUri());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals("3=z:G)5R", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(1, element2.childNodeSize());
      assertEquals("body", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals(1, element2.siblingIndex());
      assertEquals("body", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals("3=z:G)5R", element2.baseUri());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      
      Document document4 = (Document)document1.empty();
      assertNotNull(document4);
      assertFalse(parser0.isTrackErrors());
      assertEquals("3=z:G)5R", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3=z:G)5R", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("3=z:G)5R", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("3=z:G)5R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("3=z:G)5R", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals("3=z:G)5R", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      
      Document document5 = (Document)document1.appendTo(document0);
      assertNotNull(document5);
      assertFalse(parser0.isTrackErrors());
      assertEquals("3=z:G)5R", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3=z:G)5R", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("3=z:G)5R", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("3=z:G)5R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("3=z:G)5R", document5.baseUri());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertTrue(document5.hasParent());
      assertEquals("3=z:G)5R", document5.location());
      assertEquals(1, document5.childNodeSize());
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document1, document2);
      assertSame(document5, document0);
      assertSame(document5, document2);
      assertSame(document5, document3);
      assertSame(document5, document1);
      assertSame(document5, document4);
      
      Element element3 = element1.text("Pattern syntax error: ");
      assertNotNull(element3);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element0));
      assertFalse(parser0.isTrackErrors());
      assertEquals("3=z:G)5R", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3=z:G)5R", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("3=z:G)5R", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("3=z:G)5R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("3=z:G)5R", element0.baseUri());
      assertTrue(document2.hasParent());
      assertEquals("3=z:G)5R", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("3=z:G)5R", document2.baseUri());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals("3=z:G)5R", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element3.hasParent());
      assertEquals("head", element3.nodeName());
      assertEquals("3=z:G)5R", element3.baseUri());
      assertEquals(0, element3.siblingIndex());
      assertEquals("head", element3.tagName());
      assertEquals(1, element3.childNodeSize());
      assertTrue(element3.isBlock());
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document1, document2);
      assertNotSame(element0, element3);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertSame(document2, document3);
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertSame(element1, element3);
      assertSame(element3, element1);
      assertNotSame(element3, element2);
      assertNotSame(element3, element0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must notbe null.", "Children collection to be inserted must notbe null.");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Children collection to be inserted must notbe null.", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      
      Document document1 = (Document)document0.appendTo(element0);
      assertNotNull(document1);
      assertTrue(document0.hasParent());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertEquals("Children collection to be inserted must notbe null.", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must notbe null.", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("Children collection to be inserted must notbe null.", document1.baseUri());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = Element.preserveWhitespace(document1);
      assertFalse(boolean0);
      assertTrue(document0.hasParent());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertEquals("Children collection to be inserted must notbe null.", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must notbe null.", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("Children collection to be inserted must notbe null.", document1.baseUri());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      document1.before("java.lang.string@0000000081");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parse("e", "       ");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("       ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("       ", document0.location());
      
      Document document1 = Parser.parse("k\" IA(}*FQq>bEpw1|E", "e");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals(1, document1.childNodeSize());
      assertEquals("e", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("e", document1.location());
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document0.appendTo(document1);
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals("#root", document0.tagName());
      assertEquals("       ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("       ", document0.location());
      assertEquals("e", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("e", document1.location());
      assertTrue(document2.hasParent());
      assertEquals("       ", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("       ", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document2.prependChild(document1);
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertEquals("#root", document0.tagName());
      assertEquals("       ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("       ", document0.location());
      assertEquals("e", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("e", document1.location());
      assertTrue(document2.hasParent());
      assertEquals("       ", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("       ", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertTrue(document3.hasParent());
      assertEquals("       ", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("       ", document3.location());
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      Elements elements0 = document2.previousElementSiblings();
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertEquals("#root", document0.tagName());
      assertEquals("       ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("       ", document0.location());
      assertEquals("e", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("e", document1.location());
      assertTrue(document2.hasParent());
      assertEquals("       ", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("       ", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Element$1";
      Document document0 = Parser.parse("CHC*fIZ$", "org.jsoup.nodes.Element$1");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = document1.parser((Parser) null);
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document2.baseUri());
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertNotNull(document_OutputSettings1);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.prettyPrint(false);
      assertNotNull(document_OutputSettings2);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      
      Document document3 = (Document)document0.traverse(nodeVisitor0);
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      
      Pattern pattern0 = Pattern.compile("tgxTtare=", 8);
      assertNotNull(pattern0);
      assertEquals("tgxTtare=", pattern0.toString());
      assertEquals(8, pattern0.flags());
      assertEquals("tgxTtare=", pattern0.pattern());
      
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("tgxTtare=", pattern0.toString());
      assertEquals(8, pattern0.flags());
      assertEquals("tgxTtare=", pattern0.pattern());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings0.clone();
      assertNotNull(document_OutputSettings3);
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      
      Document document4 = document2.outputSettings(document_OutputSettings3);
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document2.baseUri());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals("org.jsoup.nodes.Element$1", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document4, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      
      DataNode dataNode0 = new DataNode("value", "R,ux");
      assertNotNull(dataNode0);
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      
      document4.setParentNode(dataNode0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document2.baseUri());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals("org.jsoup.nodes.Element$1", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertTrue(document4.hasParent());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document4, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      
      Elements elements1 = document4.getElementsByAttribute("org.jsoup.nodes.Element$1");
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document2.baseUri());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals("org.jsoup.nodes.Element$1", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertTrue(document4.hasParent());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertNotSame(elements1, elements0);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document4, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      
      Document document5 = (Document)document1.prependText("CHC*fIZ$");
      assertNotNull(document5);
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document5.location());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$1", document5.baseUri());
      assertTrue(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(2, document5.childNodeSize());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertNotSame(document5, document3);
      assertSame(document5, document2);
      assertSame(document5, document1);
      assertSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertNotSame(document1, document3);
      
      int int0 = 31;
      // Undeclared exception!
      try { 
        document1.getElementsByIndexEquals(31);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000085 textarea", "java.lang.string@0000000085 textarea");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      List<Node> list0 = Parser.parseXmlFragment("java.lang.string@0000000085 textarea", "java.lang.string@0000000085 textarea");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.createElement("textarea");
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.nodeName());
      assertEquals("textarea", element0.tagName());
      
      Element element1 = element0.val("textarea");
      assertNotNull(element1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.tagName());
      assertEquals("textarea", element1.nodeName());
      assertEquals("textarea", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("textarea", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      int int0 = (-109);
      document0.siblingIndex = (-109);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals((-109), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      String string0 = element0.outerHtml();
      assertNotNull(string0);
      assertEquals("<textarea>textarea</textarea>", string0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals((-109), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.tagName());
      assertSame(element0, element1);
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals((-109), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        element0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Element element0 = new Element("tgxtare6=");
      assertNotNull(element0);
      assertEquals("tgxtare6=", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tgxtare6=", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      Element element1 = element0.text("Insert position out of bounds.");
      assertNotNull(element1);
      assertEquals("tgxtare6=", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("tgxtare6=", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.hasParent());
      assertEquals("tgxtare6=", element1.tagName());
      assertEquals("", element1.baseUri());
      assertEquals("tgxtare6=", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      element1.setSiblingIndex((-2546));
      assertEquals("tgxtare6=", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals((-2546), element0.siblingIndex());
      assertEquals("tgxtare6=", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("tgxtare6=", element1.tagName());
      assertEquals("", element1.baseUri());
      assertEquals("tgxtare6=", element1.nodeName());
      assertEquals((-2546), element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Element element2 = element0.val("gxtaYKa");
      assertNotNull(element2);
      assertEquals("tgxtare6=", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals((-2546), element0.siblingIndex());
      assertEquals("tgxtare6=", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element2.baseUri());
      assertFalse(element2.hasParent());
      assertEquals((-2546), element2.siblingIndex());
      assertEquals("tgxtare6=", element2.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertFalse(element2.isBlock());
      assertEquals("tgxtare6=", element2.tagName());
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element2, element1);
      assertSame(element2, element0);
      
      String string1 = element2.cssSelector();
      assertNotNull(string1);
      assertEquals("tgxtare6=", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("tgxtare6=", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals((-2546), element0.siblingIndex());
      assertEquals("tgxtare6=", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element2.baseUri());
      assertFalse(element2.hasParent());
      assertEquals((-2546), element2.siblingIndex());
      assertEquals("tgxtare6=", element2.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertFalse(element2.isBlock());
      assertEquals("tgxtare6=", element2.tagName());
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element2, element1);
      assertSame(element2, element0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Element element0 = new Element("tgxtare=");
      assertNotNull(element0);
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tgxtare=", element0.tagName());
      assertEquals("tgxtare=", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      
      // Undeclared exception!
      try { 
        element0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must notbe null.");
      assertNotNull(document0);
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must notbe null.", document1.location());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.previousElementSiblings();
      assertNotNull(elements0);
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      
      Document document2 = (Document)document0.parent();
      assertNotNull(document2);
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("Children collection to be inserted must notbe null.", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document2.location());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Element element0 = new Element("tgxtare=");
      assertNotNull(element0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("tgxtare=", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tgxtare=", element0.tagName());
      
      String string0 = element0.val();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("tgxtare=", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tgxtare=", element0.tagName());
      
      Document document0 = Parser.parseBodyFragment("Queue not long enough to consume sequence", "CommentStart");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("CommentStart", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("CommentStart", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = (Document)document0.appendTo(element0);
      assertNotNull(document1);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("tgxtare=", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("tgxtare=", element0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CommentStart", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("CommentStart", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("CommentStart", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("CommentStart", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = element0.previousElementSiblings();
      assertNotNull(elements0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("tgxtare=", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("tgxtare=", element0.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      MockFile mockFile0 = new MockFile("CommentStart");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      assertNotNull(mockFileWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(276);
      assertNotNull(document_OutputSettings1);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(276, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(276, document_OutputSettings1.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(true);
      assertNotNull(document_OutputSettings2);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(276, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(276, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(276, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      assertNotNull(document_OutputSettings3);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(276, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(276, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(276, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(276, document_OutputSettings3.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      assertNotNull(uS_ASCII0);
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertTrue(uS_ASCII0.isRegistered());
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.charset((Charset) uS_ASCII0);
      assertNotNull(document_OutputSettings4);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(276, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(276, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(276, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(276, document_OutputSettings3.indentAmount());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertTrue(uS_ASCII0.isRegistered());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(276, document_OutputSettings4.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      
      // Undeclared exception!
      document1.outerHtmlHead(mockFileWriter0, 2518, document_OutputSettings3);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      assertNotNull(document0);
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      
      String string0 = document0.outerHtml();
      assertNotNull(string0);
      assertEquals("<html>\n <head></head>\n <body>\n  textarea\n </body>\n</html>", string0);
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      
      String string1 = document0.cssSelector();
      assertNotNull(string1);
      assertEquals("#root", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("s+", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      
      Element element1 = element0.before("tgxtare=");
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(3, element0.siblingIndex());
      assertEquals("tgxtare=", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(3, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string0 = element0.cssSelector();
      assertNotNull(string0);
      assertEquals("html > body:nth-child(4)", string0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(3, element0.siblingIndex());
      assertSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must notbe null.");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must notbe null.", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("Children collection to be inserted must notbe null.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.previousElementSiblings();
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      
      Document document2 = (Document)document1.text("Children collection to be inserted must notbe null.");
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must notbe null.", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("Children collection to be inserted must notbe null.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = new Element("tgxtare=");
      assertNotNull(element0);
      assertEquals("tgxtare=", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("tgxtare=", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      
      Element element1 = element0.toggleClass("0F(bv:Hz}v#r\"%{L@nU");
      assertNotNull(element1);
      assertEquals("tgxtare=", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("tgxtare=", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("tgxtare=", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("tgxtare=", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Element element2 = (Element)element0.clearAttributes();
      assertNotNull(element2);
      assertEquals("tgxtare=", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("tgxtare=", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertEquals("tgxtare=", element2.tagName());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals("tgxtare=", element2.nodeName());
      assertFalse(element2.isBlock());
      assertFalse(element2.hasParent());
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertSame(element2, element1);
      
      Document document1 = Parser.parseBodyFragmentRelaxed("0F(bv:Hz}v#r\"%{L@nU", "0F(bv:Hz}v#r\"%{L@nU");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("0F(bv:Hz}v#r\"%{L@nU", document1.baseUri());
      assertEquals("0F(bv:Hz}v#r\"%{L@nU", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertNotSame(document1, document0);
      
      String string0 = element0.val();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("tgxtare=", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("tgxtare=", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertSame(element0, element1);
      assertSame(element0, element2);
      
      Element element3 = element0.prepend("");
      assertNotNull(element3);
      assertEquals("tgxtare=", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("tgxtare=", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element3.hasParent());
      assertEquals(0, element3.siblingIndex());
      assertEquals("tgxtare=", element3.nodeName());
      assertFalse(element3.isBlock());
      assertEquals("", element3.baseUri());
      assertEquals(0, element3.childNodeSize());
      assertEquals("tgxtare=", element3.tagName());
      assertSame(element0, element3);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element3, element2);
      assertSame(element3, element1);
      assertSame(element3, element0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      
      String string0 = element0.cssSelector();
      assertNotNull(string0);
      assertEquals("html > body", string0);
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      
      Element element1 = element0.appendTo(document0);
      assertNotNull(element1);
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("tgxtare=", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string1 = element0.val();
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertSame(element0, element1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("6-&O+35<");
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "6-&O+35<", objectArray0);
      assertNotNull(printStream0);
      assertEquals(1, objectArray0.length);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      assertNotNull(mockPrintWriter0);
      assertEquals(1, objectArray0.length);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      assertNotNull(printWriter0);
      assertEquals(1, objectArray0.length);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        element1.outerHtmlTail(printWriter0, 35, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Document.createShell("slec");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("slec", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("slec", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Document document1 = (Document)document0.toggleClass("slec");
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("slec", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("slec", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals("slec", document1.location());
      assertEquals("slec", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.toggleClass("slec");
      assertNotNull(document2);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("slec", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("slec", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("slec", document2.location());
      assertEquals("slec", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      document2.doSetBaseUri("slec");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("slec", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("slec", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("slec", document2.location());
      assertEquals("slec", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      List<DataNode> list0 = document1.dataNodes();
      assertNotNull(list0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("slec", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("slec", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals("slec", document1.location());
      assertEquals("slec", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      boolean boolean0 = document0.hasClass("slec");
      assertTrue(boolean0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("slec", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("slec", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      Elements elements0 = document1.previousElementSiblings();
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("slec", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("slec", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals("slec", document1.location());
      assertEquals("slec", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Document.createShell("shTc");
      assertNotNull(document0);
      assertEquals("shTc", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("shTc", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertEquals("shTc", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("shTc", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("shTc", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("shTc", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.appendTo(document1);
      assertNotNull(document2);
      assertEquals("shTc", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("shTc", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("shTc", document1.location());
      assertEquals("shTc", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("shTc", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("shTc", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Elements elements0 = document1.previousElementSiblings();
      assertNotNull(elements0);
      assertEquals("shTc", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("shTc", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("shTc", document1.location());
      assertEquals("shTc", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      // Undeclared exception!
      document1.after("textarea");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must notbe null.");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.toggleClass("Children collection to be inserted must notbe null.");
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Children collection to be inserted must notbe null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document0.normalise();
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Children collection to be inserted must notbe null.", document2.location());
      assertEquals("Children collection to be inserted must notbe null.", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document2.toggleClass("java.lang.string@0000000071 slec");
      assertNotNull(document3);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Children collection to be inserted must notbe null.", document2.location());
      assertEquals("Children collection to be inserted must notbe null.", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("Children collection to be inserted must notbe null.", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("Children collection to be inserted must notbe null.", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      
      document0.doSetBaseUri("java.lang.string@0000000071 slec");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      boolean boolean0 = document3.hasClass("java.lang.string@0000000071 slec");
      assertFalse(boolean0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Children collection to be inserted must notbe null.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("Children collection to be inserted must notbe null.", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      
      Elements elements0 = document2.previousElementSiblings();
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Children collection to be inserted must notbe null.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parse("CHC*fIZ$", "org.jsoup.nodes.Element$1");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = document1.parser((Parser) null);
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertNotNull(document_OutputSettings1);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.prettyPrint(false);
      assertNotNull(document_OutputSettings2);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      
      Document document3 = (Document)document0.traverse(nodeVisitor0);
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document3.location());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      
      Pattern pattern0 = Pattern.compile("tgxTtare=", 8);
      assertNotNull(pattern0);
      assertEquals(8, pattern0.flags());
      assertEquals("tgxTtare=", pattern0.pattern());
      assertEquals("tgxTtare=", pattern0.toString());
      
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(8, pattern0.flags());
      assertEquals("tgxTtare=", pattern0.pattern());
      assertEquals("tgxTtare=", pattern0.toString());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings0.clone();
      assertNotNull(document_OutputSettings3);
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      
      Document document4 = document2.outputSettings(document_OutputSettings3);
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertEquals("#root", document4.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document4.location());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document4, document0);
      assertSame(document4, document2);
      assertNotSame(document4, document3);
      assertSame(document4, document1);
      
      Elements elements1 = document4.getElementsByAttribute("org.jsoup.nodes.Element$1");
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertEquals("#root", document4.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document4.location());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document4, document0);
      assertSame(document4, document2);
      assertNotSame(document4, document3);
      assertSame(document4, document1);
      assertNotSame(elements1, elements0);
      
      Document document5 = (Document)document1.prependText("CHC*fIZ$");
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document5.location());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.hasParent());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertEquals(2, document5.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertNotSame(document5, document0);
      assertNotSame(document5, document3);
      assertSame(document5, document1);
      assertSame(document5, document2);
      assertSame(document5, document4);
      
      int int0 = 31;
      Elements elements2 = document1.getElementsByIndexEquals(31);
      assertNotNull(elements2);
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      
      Elements elements3 = document2.getElementsByTag("org.jsoup.nodes.Element$1");
      assertNotNull(elements3);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document5);
      
      Document document6 = (Document)document1.removeClass("org.jsoup.nodes.Element$1");
      assertNotNull(document6);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document6.location());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("#document", document6.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document6.baseUri());
      assertEquals(2, document6.childNodeSize());
      assertFalse(document6.hasParent());
      assertFalse(document6.isBlock());
      assertSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document0, document6);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document1, document6);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document6, document4);
      assertSame(document6, document5);
      assertNotSame(document6, document3);
      assertNotSame(document6, document0);
      assertSame(document6, document2);
      assertSame(document6, document1);
      
      String string0 = document6.outerHtml();
      assertNotNull(string0);
      assertEquals("CHC*fIZ$<html><head></head><body>CHC*fIZ$</body></html>", string0);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document6.location());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("#document", document6.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document6.baseUri());
      assertEquals(2, document6.childNodeSize());
      assertFalse(document6.hasParent());
      assertFalse(document6.isBlock());
      assertSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document0, document6);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document1, document6);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document6, document4);
      assertSame(document6, document5);
      assertNotSame(document6, document3);
      assertNotSame(document6, document0);
      assertSame(document6, document2);
      assertSame(document6, document1);
      
      Elements elements4 = document6.getElementsContainingText("hgroup");
      assertNotNull(elements4);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document0));
      assertTrue(elements4.equals((Object)elements0));
      assertTrue(elements4.equals((Object)elements2));
      assertTrue(elements4.equals((Object)elements1));
      assertTrue(elements4.equals((Object)elements3));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document6.location());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("#document", document6.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document6.baseUri());
      assertEquals(2, document6.childNodeSize());
      assertFalse(document6.hasParent());
      assertFalse(document6.isBlock());
      assertTrue(elements4.isEmpty());
      assertEquals(0, elements4.size());
      assertSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document0, document6);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document1, document6);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document6, document4);
      assertSame(document6, document5);
      assertNotSame(document6, document3);
      assertNotSame(document6, document0);
      assertSame(document6, document2);
      assertSame(document6, document1);
      assertNotSame(elements4, elements2);
      assertNotSame(elements4, elements1);
      assertNotSame(elements4, elements3);
      assertNotSame(elements4, elements0);
      
      // Undeclared exception!
      try { 
        document6.child(31);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 31, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      
      Element element1 = new Element("tgxtare=");
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("tgxtare=", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("tgxtare=", element1.nodeName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      
      Elements elements0 = element0.getElementsByAttribute("tgxtare=");
      assertNotNull(elements0);
      assertFalse(element0.equals((Object)element1));
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotSame(element0, element1);
      
      Elements elements1 = document0.getElementsByAttributeValueStarting("tgxtare=", "ud?RD;qA'f|");
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotSame(elements1, elements0);
      
      Document document1 = (Document)document0.appendTo(element1);
      assertNotNull(document1);
      assertFalse(element1.equals((Object)element0));
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("tgxtare=", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("tgxtare=", element1.nodeName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertNotSame(element1, element0);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.before("tgxtare=");
      assertNotNull(document2);
      assertFalse(element1.equals((Object)element0));
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertEquals("tgxtare=", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("tgxtare=", element1.nodeName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("tgxtare=", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("tgxtare=", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(element1, element0);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements2 = element1.getAllElements();
      assertNotNull(elements2);
      assertFalse(element1.equals((Object)element0));
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertEquals("", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertEquals("tgxtare=", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("tgxtare=", element1.nodeName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals(5, elements2.size());
      assertFalse(elements2.isEmpty());
      assertNotSame(element1, element0);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("GmY.QF", "6");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("6", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("6", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6");
      assertFalse(boolean0);
      
      Element element0 = document0.appendElement("ohj[.O978q%uvc");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("6", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("6", document0.baseUri());
      assertEquals("ohj[.o978q%uvc", element0.nodeName());
      assertEquals("ohj[.o978q%uvc", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("6", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Set<String> set0 = element0.classNames();
      assertNotNull(set0);
      assertFalse(set0.contains("ohj[.O978q%uvc"));
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("6", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("6", document0.baseUri());
      assertEquals("ohj[.o978q%uvc", element0.nodeName());
      assertEquals("ohj[.o978q%uvc", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("6", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = document0.val();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("6", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("6", document0.baseUri());
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`#F?rw;8cbd5D!v");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Document document1 = (Document)document0.val("");
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("6", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("6", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("6", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("6", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.nextElementSiblings();
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("6", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("6", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("6", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("6", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.nodelistChanged();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("6", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("6", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("6", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("6", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element1 = element0.toggleClass("ohj[.O978q%uvc");
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("6", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("6", document0.baseUri());
      assertEquals("ohj[.o978q%uvc", element0.nodeName());
      assertEquals("ohj[.o978q%uvc", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("6", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("6", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("ohj[.o978q%uvc", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("ohj[.o978q%uvc", element1.tagName());
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Element element2 = element1.shallowClone();
      assertNotNull(element2);
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("6", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("6", document0.baseUri());
      assertEquals("ohj[.o978q%uvc", element0.nodeName());
      assertEquals("ohj[.o978q%uvc", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("6", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("6", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("ohj[.o978q%uvc", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("ohj[.o978q%uvc", element1.tagName());
      assertEquals("6", element2.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertEquals("ohj[.o978q%uvc", element2.nodeName());
      assertFalse(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals("ohj[.o978q%uvc", element2.tagName());
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element1, element2);
      assertSame(element1, element0);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      
      Set<String> set1 = element2.classNames();
      assertNotNull(set1);
      assertFalse(set1.contains(""));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(set1.equals((Object)set0));
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("6", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("6", document0.baseUri());
      assertEquals("ohj[.o978q%uvc", element0.nodeName());
      assertEquals("ohj[.o978q%uvc", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("6", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("6", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("ohj[.o978q%uvc", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("ohj[.o978q%uvc", element1.tagName());
      assertEquals("6", element2.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertEquals("ohj[.o978q%uvc", element2.nodeName());
      assertFalse(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals("ohj[.o978q%uvc", element2.tagName());
      assertEquals(1, set1.size());
      assertFalse(set1.isEmpty());
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element1, element2);
      assertSame(element1, element0);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotSame(set1, set0);
      
      Element element3 = element1.previousElementSibling();
      assertNotNull(element3);
      assertFalse(element0.equals((Object)element2));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element1));
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("6", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("6", document0.baseUri());
      assertEquals("ohj[.o978q%uvc", element0.nodeName());
      assertEquals("ohj[.o978q%uvc", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("6", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("6", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("ohj[.o978q%uvc", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("ohj[.o978q%uvc", element1.tagName());
      assertEquals(0, element3.siblingIndex());
      assertEquals(2, element3.childNodeSize());
      assertTrue(element3.hasParent());
      assertEquals("html", element3.tagName());
      assertEquals("6", element3.baseUri());
      assertEquals("html", element3.nodeName());
      assertTrue(element3.isBlock());
      assertSame(document0, document1);
      assertNotSame(element0, element3);
      assertSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element1, element3);
      assertNotSame(element1, element2);
      assertSame(element1, element0);
      assertNotSame(element3, element2);
      assertNotSame(element3, element0);
      assertNotSame(element3, element1);
      
      // Undeclared exception!
      try { 
        element2.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("tgxtare=", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      
      String string0 = element0.cssSelector();
      assertNotNull(string0);
      assertEquals("html > body", string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("tgxtare=", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      
      boolean boolean0 = Element.preserveWhitespace(document0);
      assertFalse(boolean0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Element element1 = document0.selectFirst("html > body");
      assertNotNull(element1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Element element0 = new Element("textarea");
      assertNotNull(element0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.nodeName());
      
      Element element1 = element0.getElementById("textarea");
      assertNull(element1);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.nodeName());
      
      String string0 = element0.val();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.nodeName());
      
      Element element2 = element0.val("textarea");
      assertNotNull(element2);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element2.hasParent());
      assertEquals("", element2.baseUri());
      assertEquals(1, element2.childNodeSize());
      assertEquals("textarea", element2.nodeName());
      assertFalse(element2.isBlock());
      assertEquals("textarea", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertSame(element0, element2);
      assertSame(element2, element0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Elements elements0 = document0.getElementsByAttributeValue("tgxtare=", " > ");
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Elements elements1 = document0.getElementsByTag("tgxtare=");
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotSame(elements1, elements0);
      
      StringBuffer stringBuffer0 = new StringBuffer("tgxtare=");
      assertNotNull(stringBuffer0);
      assertEquals("tgxtare=", stringBuffer0.toString());
      assertEquals(8, stringBuffer0.length());
      
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      assertNotNull(stringBuilder0);
      assertEquals("tgxtare=", stringBuffer0.toString());
      assertEquals(8, stringBuffer0.length());
      assertEquals("tgxtare=", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append((-1105L));
      assertNotNull(stringBuilder1);
      assertEquals("tgxtare=", stringBuffer0.toString());
      assertEquals(8, stringBuffer0.length());
      assertEquals("tgxtare=-1105", stringBuilder0.toString());
      assertEquals("tgxtare=-1105", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder1.append((-611));
      assertNotNull(stringBuilder2);
      assertEquals("tgxtare=", stringBuffer0.toString());
      assertEquals(8, stringBuffer0.length());
      assertEquals("tgxtare=-1105-611", stringBuilder0.toString());
      assertEquals("tgxtare=-1105-611", stringBuilder1.toString());
      assertEquals("tgxtare=-1105-611", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertNotNull(document_OutputSettings1);
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(58);
      assertNotNull(document_OutputSettings2);
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(58, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(58, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(58, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(stringBuilder2, (-611), document_OutputSettings2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must notbe null.");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      document0.reparentChild(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      
      Elements elements0 = document0.previousElementSiblings();
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      // Undeclared exception!
      document0.append("Children collection to be inserted must notbe null.");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parse("Childrn collection to be inserted must not be null.", "Childrn collection to be inserted must not be null.");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Childrn collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Childrn collection to be inserted must not be null.", document0.location());
      
      Document document1 = Parser.parseBodyFragmentRelaxed("Childrn collection to be inserted must not be null.", "Childrn collection to be inserted must not be null.");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals("#root", document1.tagName());
      assertEquals("Childrn collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Childrn collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document0.appendTo(document1);
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Childrn collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Childrn collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document1.tagName());
      assertEquals("Childrn collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Childrn collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Childrn collection to be inserted must not be null.", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Childrn collection to be inserted must not be null.", document2.baseUri());
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document1));
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Childrn collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Childrn collection to be inserted must not be null.", document0.location());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Elements elements0 = document1.previousElementSiblings();
      assertNotNull(elements0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertEquals("#root", document1.tagName());
      assertEquals("Childrn collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Childrn collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Document document3 = (Document)document2.html("e_zz'yai@");
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Childrn collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Childrn collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document1.tagName());
      assertEquals("Childrn collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Childrn collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Childrn collection to be inserted must not be null.", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Childrn collection to be inserted must not be null.", document2.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("Childrn collection to be inserted must not be null.", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals("Childrn collection to be inserted must not be null.", document3.baseUri());
      assertEquals(1, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      List<TextNode> list1 = document3.textNodes();
      assertNotNull(list1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Childrn collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Childrn collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document1.tagName());
      assertEquals("Childrn collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Childrn collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Childrn collection to be inserted must not be null.", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Childrn collection to be inserted must not be null.", document2.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("Childrn collection to be inserted must not be null.", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals("Childrn collection to be inserted must not be null.", document3.baseUri());
      assertEquals(1, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must notbe null.");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = new Document("Unexpected character '%s' in input state [%s]");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Unexpected character '%s' in input state [%s]", document0.location());
      assertEquals("Unexpected character '%s' in input state [%s]", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.append("Unexpected character '%s' in input state [%s]");
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Unexpected character '%s' in input state [%s]", document0.location());
      assertEquals("Unexpected character '%s' in input state [%s]", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Unexpected character '%s' in input state [%s]", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("Unexpected character '%s' in input state [%s]", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.title();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Unexpected character '%s' in input state [%s]", document0.location());
      assertEquals("Unexpected character '%s' in input state [%s]", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertSame(document0, document1);
      
      Document document2 = (Document)document1.prependText("a6");
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Unexpected character '%s' in input state [%s]", document0.location());
      assertEquals("Unexpected character '%s' in input state [%s]", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Unexpected character '%s' in input state [%s]", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("Unexpected character '%s' in input state [%s]", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Unexpected character '%s' in input state [%s]", document2.location());
      assertEquals("Unexpected character '%s' in input state [%s]", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      document0.charset((Charset) null);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals("Unexpected character '%s' in input state [%s]", document0.location());
      assertEquals("Unexpected character '%s' in input state [%s]", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      Document document3 = (Document)document1.toggleClass(" />");
      assertNotNull(document3);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals("Unexpected character '%s' in input state [%s]", document0.location());
      assertEquals("Unexpected character '%s' in input state [%s]", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Unexpected character '%s' in input state [%s]", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("Unexpected character '%s' in input state [%s]", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals("Unexpected character '%s' in input state [%s]", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(2, document3.childNodeSize());
      assertEquals("Unexpected character '%s' in input state [%s]", document3.location());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      
      document3.parentNode = (Node) document0;
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals("Unexpected character '%s' in input state [%s]", document0.location());
      assertEquals("Unexpected character '%s' in input state [%s]", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Unexpected character '%s' in input state [%s]", document1.location());
      assertEquals("Unexpected character '%s' in input state [%s]", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.updateMetaCharsetElement());
      assertEquals("Unexpected character '%s' in input state [%s]", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals(2, document3.childNodeSize());
      assertEquals("Unexpected character '%s' in input state [%s]", document3.location());
      assertTrue(document3.parentNode.hasParent());
      assertEquals(0, document3.parentNode.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document$OutputSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Document.createShell("tgxtare=");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      boolean boolean0 = document0.hasClass("tgxtare=");
      assertFalse(boolean0);
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "tgxtare=");
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(8, charBuffer0.remaining());
      assertEquals(8, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(8, charBuffer0.limit());
      assertEquals("tgxtare=", charBuffer0.toString());
      assertEquals(8, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertNotNull(document_OutputSettings1);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 2, document_OutputSettings1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parse("4w-0j^:WD|rvB", "o=#G2Bj}f0af");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("o=#G2Bj}f0af", document0.baseUri());
      assertEquals("o=#G2Bj}f0af", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.getElementById("AfterDoctypePublicKeyword");
      assertNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("o=#G2Bj}f0af", document0.baseUri());
      assertEquals("o=#G2Bj}f0af", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) document0;
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) "\"Sdh";
      PrintStream printStream0 = mockPrintStream0.printf("\"Sdh", objectArray0);
      assertNotNull(printStream0);
      assertEquals(5, objectArray0.length);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      assertNotNull(mockPrintWriter0);
      assertEquals(5, objectArray0.length);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "4w-0j^:WD|rvB", objectArray0);
      assertNotNull(printWriter0);
      assertEquals(5, objectArray0.length);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertNotNull(document_OutputSettings1);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(false);
      assertNotNull(document_OutputSettings2);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.indentAmount(1094);
      assertNotNull(document_OutputSettings3);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(1094, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1094, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(1094, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1094, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.clone();
      assertNotNull(document_OutputSettings4);
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(1094, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1094, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(1094, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(1094, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1094, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      
      document0.outerHtmlTail(printWriter0, 46, document_OutputSettings4);
      assertEquals(5, objectArray0.length);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("o=#G2Bj}f0af", document0.baseUri());
      assertEquals("o=#G2Bj}f0af", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1094, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(1094, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1094, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(1094, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(1094, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      
      Elements elements0 = document0.getElementsByAttributeValue("o=#G2Bj}f0af", "o=#G2Bj}f0af");
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("o=#G2Bj}f0af", document0.baseUri());
      assertEquals("o=#G2Bj}f0af", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Document document1 = (Document)document0.addClass("4w-0j^:WD|rvB");
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("o=#G2Bj}f0af", document0.baseUri());
      assertEquals("o=#G2Bj}f0af", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("o=#G2Bj}f0af", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("o=#G2Bj}f0af", document1.baseUri());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      
      Document document1 = (Document)document0.text("Children collection to be inserted must not be null.");
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.appendTo(document1);
      assertNotNull(document2);
      assertEquals(2, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      Elements elements0 = document1.previousElementSiblings();
      assertNotNull(elements0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      document2.html("e_zz'yai@");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.text("Children collection to be inserted must not be null.");
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.reparentChild(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertSame(document0, document1);
      
      String string0 = document0.data();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertSame(document0, document1);
      
      Element element1 = element0.nextElementSibling();
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertSame(document0, document1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      // Undeclared exception!
      try { 
        document1.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      String string0 = document0.id();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      
      String string1 = element0.data();
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      
      Element element1 = element0.nextElementSibling();
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      // Undeclared exception!
      try { 
        document0.selectFirst("hsdsa|SL ]`Yy{");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ']`Yy{': unexpected token at ']`Yy{'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textar3a", "B");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("B", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("B", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("B", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("B", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.getElementsByTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Document.createShell("Children collection tobe inserted must notbe null.");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection tobe inserted must notbe null.", document0.baseUri());
      assertEquals("Children collection tobe inserted must notbe null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      boolean boolean0 = document0.hasClass("Children collection tobe inserted must notbe null.");
      assertFalse(boolean0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection tobe inserted must notbe null.", document0.baseUri());
      assertEquals("Children collection tobe inserted must notbe null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.createElement("Children collection tobe inserted must notbe null.");
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection tobe inserted must notbe null.", document0.baseUri());
      assertEquals("Children collection tobe inserted must notbe null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection tobe inserted must notbe null.", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Children collection tobe inserted must notbe null.", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("Children collection tobe inserted must notbe null.", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      Document document1 = (Document)document0.appendTo(element0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection tobe inserted must notbe null.", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("Children collection tobe inserted must notbe null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection tobe inserted must notbe null.", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Children collection tobe inserted must notbe null.", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("Children collection tobe inserted must notbe null.", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Children collection tobe inserted must notbe null.", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("Children collection tobe inserted must notbe null.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, 44, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Document.createShell("tgxtare=");
      assertNotNull(document0);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Document document1 = new Document("tgxtare=");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      
      Document document2 = new Document("tgxtare=");
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertEquals("tgxtare=", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("tgxtare=", document2.location());
      
      Document document3 = (Document)document1.prependChild(document0);
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("tgxtare=", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      
      boolean boolean0 = document1.hasClass("MN01CM6xVh3TTv6");
      assertFalse(boolean0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertNotNull(document_OutputSettings1);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        document1.outerHtmlTail((Appendable) null, 46, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.createElement("textarea");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.nodeName());
      
      Element element1 = element0.val("textarea");
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element0.baseUri());
      assertEquals("textarea", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("textarea", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("textarea", element1.baseUri());
      assertEquals("textarea", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Document document1 = (Document)document0.appendTo(element0);
      assertNotNull(document1);
      assertEquals("textarea", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(2, element0.childNodeSize());
      assertEquals("textarea", element0.baseUri());
      assertEquals("textarea", element0.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(document1, document0);
      
      boolean boolean0 = Element.preserveWhitespace(element0);
      assertTrue(boolean0);
      assertEquals("textarea", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(2, element0.childNodeSize());
      assertEquals("textarea", element0.baseUri());
      assertEquals("textarea", element0.nodeName());
      assertSame(document0, document1);
      assertSame(element0, element1);
      
      Element element2 = element1.empty();
      assertNotNull(element2);
      assertEquals("textarea", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("textarea", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("textarea", element1.baseUri());
      assertEquals("textarea", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element2.childNodeSize());
      assertFalse(element2.hasParent());
      assertEquals("textarea", element2.tagName());
      assertEquals("textarea", element2.baseUri());
      assertEquals("textarea", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element0);
      assertSame(element2, element1);
      
      Document document2 = (Document)document0.tagName("textarea");
      assertNotNull(document2);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("textarea", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("textarea", document2.baseUri());
      assertEquals("textarea", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document0.attr("org.jsoup.parser.Token$EndTag", true);
      assertNotNull(document3);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("textarea", document3.location());
      assertEquals(1, document3.siblingIndex());
      assertEquals("textarea", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.childNodeSize());
      assertEquals("textarea", document3.baseUri());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.getElementsMatchingText("Children collection to be inserted must not be null.");
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      
      Element element1 = element0.attr("Children collection to be inserted must not be null.", false);
      assertNotNull(element1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("Children collection to be inserted must not be null.", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      Elements elements1 = document0.children();
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertNotSame(elements1, elements0);
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Document.createShell("shTc");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("shTc", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("shTc", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.toggleClass("java.lang.string@0000000071");
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("shTc", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("shTc", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("shTc", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("shTc", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = new Document("shTc");
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertEquals("shTc", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("shTc", document2.baseUri());
      
      String string0 = document1.className();
      assertNotNull(string0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("shTc", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("shTc", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("shTc", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("shTc", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.hasClass("java.lang.string@0000000071");
      assertFalse(boolean0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("shTc", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("shTc", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      
      Elements elements0 = document1.previousElementSiblings();
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("shTc", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("shTc", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("shTc", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("shTc", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = document0.val();
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("shTc", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("shTc", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      String string0 = document0.id();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.prepend("Children collection to be inserted must not be null.");
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsMatchingText("Children collection to be inserted must not be null.");
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      
      Document document2 = (Document)document0.val("html");
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      document1.setParentNode(element0);
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      Element element1 = element0.doClone(document1);
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string0 = null;
      // Undeclared exception!
      try { 
        document0.select((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.prepend("");
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertSame(document0, document1);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals(2, nodeArray0.length);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertSame(document0, document1);
      
      Pattern pattern0 = Pattern.compile("");
      assertNotNull(pattern0);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      
      Document document2 = (Document)document0.val("");
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Element element1 = document0.body();
      assertNotNull(element1);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(element1, element0);
      
      Element element2 = element1.toggleClass("&lt;");
      assertNotNull(element2);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element2.nodeName());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertEquals("body", element2.tagName());
      assertEquals("", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertSame(element2, element1);
      assertSame(element2, element0);
      
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("ICmX5sS");
      assertNotNull(evaluator_ContainsOwnText0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Childre4 collection to be inserted must not be null.", "Childre4 collection to be inserted must not be null.");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("Childre4 collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Childre4 collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("Childre4 collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Childre4 collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Childre4 collection to be inserted must not be null.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Childre4 collection to be inserted must not be null.", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.QuirksMode document_QuirksMode1 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode1);
      assertNotNull(document2);
      assertFalse(document_QuirksMode0.equals((Object)document_QuirksMode1));
      assertFalse(document_QuirksMode1.equals((Object)document_QuirksMode0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("Childre4 collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Childre4 collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Childre4 collection to be inserted must not be null.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Childre4 collection to be inserted must not be null.", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Childre4 collection to be inserted must not be null.", document2.baseUri());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("Childre4 collection to be inserted must not be null.", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document_QuirksMode0, document_QuirksMode1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document_QuirksMode1, document_QuirksMode0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      document0.reparentChild(document1);
      assertFalse(document_QuirksMode0.equals((Object)document_QuirksMode1));
      assertEquals(1, document0.childNodeSize());
      assertEquals("Childre4 collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Childre4 collection to be inserted must not be null.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Childre4 collection to be inserted must not be null.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Childre4 collection to be inserted must not be null.", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document_QuirksMode0, document_QuirksMode1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      Document.QuirksMode document_QuirksMode2 = Document.QuirksMode.limitedQuirks;
      Document document3 = document2.quirksMode(document_QuirksMode2);
      assertNotNull(document3);
      assertFalse(document_QuirksMode0.equals((Object)document_QuirksMode1));
      assertFalse(document_QuirksMode1.equals((Object)document_QuirksMode2));
      assertFalse(document_QuirksMode1.equals((Object)document_QuirksMode0));
      assertFalse(document_QuirksMode2.equals((Object)document_QuirksMode1));
      assertEquals(1, document0.childNodeSize());
      assertEquals("Childre4 collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Childre4 collection to be inserted must not be null.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Childre4 collection to be inserted must not be null.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Childre4 collection to be inserted must not be null.", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Childre4 collection to be inserted must not be null.", document2.baseUri());
      assertEquals("Childre4 collection to be inserted must not be null.", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("Childre4 collection to be inserted must not be null.", document3.location());
      assertEquals("Childre4 collection to be inserted must not be null.", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertFalse(document3.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document_QuirksMode0, document_QuirksMode2);
      assertNotSame(document_QuirksMode0, document_QuirksMode1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document_QuirksMode1, document_QuirksMode2);
      assertNotSame(document_QuirksMode1, document_QuirksMode0);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document_QuirksMode2, document_QuirksMode0);
      assertNotSame(document_QuirksMode2, document_QuirksMode1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      Element element0 = document2.head();
      assertNotNull(element0);
      assertFalse(document_QuirksMode0.equals((Object)document_QuirksMode1));
      assertFalse(document_QuirksMode1.equals((Object)document_QuirksMode2));
      assertFalse(document_QuirksMode1.equals((Object)document_QuirksMode0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("Childre4 collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Childre4 collection to be inserted must not be null.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Childre4 collection to be inserted must not be null.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Childre4 collection to be inserted must not be null.", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Childre4 collection to be inserted must not be null.", document2.baseUri());
      assertEquals("Childre4 collection to be inserted must not be null.", document2.location());
      assertFalse(document2.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals("Childre4 collection to be inserted must not be null.", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document_QuirksMode0, document_QuirksMode2);
      assertNotSame(document_QuirksMode0, document_QuirksMode1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document_QuirksMode1, document_QuirksMode2);
      assertNotSame(document_QuirksMode1, document_QuirksMode0);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      
      // Undeclared exception!
      element0.prependElement("Lz_`Y\"6X1v");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|R+G0N~jD1J708", "|R+G0N~jD1J708");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("|R+G0N~jD1J708", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("|R+G0N~jD1J708", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, int0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("|R+G0N~jD1J708", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("|R+G0N~jD1J708", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(document0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Document document1 = Parser.parseBodyFragmentRelaxed("|R+G0N~jD1J708", "|R+G0N~jD1J708");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.hasParent());
      assertEquals("|R+G0N~jD1J708", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("|R+G0N~jD1J708", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertNotSame(document1, document0);
      
      Document document2 = Document.createShell("|R+G0N~jD1J708");
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("|R+G0N~jD1J708", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("|R+G0N~jD1J708", document2.location());
      assertFalse(document2.hasParent());
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document3 = document2.quirksMode(document_QuirksMode0);
      assertNotNull(document3);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("|R+G0N~jD1J708", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("|R+G0N~jD1J708", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals("|R+G0N~jD1J708", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("|R+G0N~jD1J708", document3.baseUri());
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      
      document2.reparentChild(document1);
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals("|R+G0N~jD1J708", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("|R+G0N~jD1J708", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("|R+G0N~jD1J708", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("|R+G0N~jD1J708", document2.location());
      assertFalse(document2.hasParent());
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Document.QuirksMode document_QuirksMode1 = Document.QuirksMode.limitedQuirks;
      Document document4 = document0.quirksMode(document_QuirksMode1);
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document_QuirksMode1.equals((Object)document_QuirksMode0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("|R+G0N~jD1J708", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("|R+G0N~jD1J708", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals("|R+G0N~jD1J708", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals("|R+G0N~jD1J708", document4.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document_QuirksMode1, document_QuirksMode0);
      assertNotSame(document4, document3);
      assertSame(document4, document0);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      
      Element element0 = document3.head();
      assertNotNull(element0);
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document_QuirksMode0.equals((Object)document_QuirksMode1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document0));
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("|R+G0N~jD1J708", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("|R+G0N~jD1J708", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals("|R+G0N~jD1J708", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("|R+G0N~jD1J708", document3.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("|R+G0N~jD1J708", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document_QuirksMode0, document_QuirksMode1);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document4);
      assertNotSame(document3, document0);
      
      String string0 = document3.data();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document_QuirksMode0.equals((Object)document_QuirksMode1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document0));
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("|R+G0N~jD1J708", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("|R+G0N~jD1J708", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals("|R+G0N~jD1J708", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("|R+G0N~jD1J708", document3.baseUri());
      assertSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document_QuirksMode0, document_QuirksMode1);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document4);
      assertNotSame(document3, document0);
      
      Element element1 = document1.nextElementSibling();
      assertNull(element1);
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertEquals("|R+G0N~jD1J708", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("|R+G0N~jD1J708", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertNotSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      
      Elements elements0 = document2.getElementsByIndexEquals(0);
      assertNotNull(elements0);
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("|R+G0N~jD1J708", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("|R+G0N~jD1J708", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.createElement("textarea");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("textarea", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      
      Element element1 = element0.val("textarea");
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("textarea", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("textarea", element1.tagName());
      assertEquals("textarea", element1.nodeName());
      assertEquals("textarea", element1.baseUri());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Tag tag0 = element1.tag();
      assertNotNull(tag0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("textarea", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("textarea", element1.tagName());
      assertEquals("textarea", element1.nodeName());
      assertEquals("textarea", element1.baseUri());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isFormSubmittable());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.preserveWhitespace());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.getElementsMatchingText("org.jsoup.nodes.Element$2");
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      Elements elements1 = document0.children();
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertNotSame(elements1, elements0);
      
      Document document1 = Parser.parseBodyFragmentRelaxed("", "tgxtare=");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertNotSame(document1, document0);
      
      List<DataNode> list0 = document1.dataNodes();
      assertNotNull(list0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotSame(document1, document0);
      
      Elements elements2 = document0.previousElementSiblings();
      assertNotNull(elements2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.hasParent());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertNotSame(document0, document1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      Element element1 = element0.val("org.jsoup.nodes.Element$2");
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document1));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertNotSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Element element2 = document1.appendElement("org.jsoup.nodes.Element$2");
      assertNotNull(element2);
      assertFalse(document1.equals((Object)document0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(element2.isBlock());
      assertEquals("org.jsoup.nodes.element$2", element2.tagName());
      assertEquals("tgxtare=", element2.baseUri());
      assertEquals("org.jsoup.nodes.element$2", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertNotSame(document1, document0);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      
      Element element3 = element0.after("tgxtare=");
      assertNotNull(element3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element3.equals((Object)element2));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", element3.baseUri());
      assertEquals("body", element3.nodeName());
      assertTrue(element3.isBlock());
      assertTrue(element3.hasParent());
      assertEquals(1, element3.siblingIndex());
      assertEquals(0, element3.childNodeSize());
      assertEquals("body", element3.tagName());
      assertNotSame(document0, document1);
      assertSame(element0, element3);
      assertNotSame(element0, element2);
      assertSame(element0, element1);
      assertNotSame(element3, element2);
      assertSame(element3, element1);
      assertSame(element3, element0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Document.createShell("slec");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("slec", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("slec", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      String string0 = document0.cssSelector();
      assertNotNull(string0);
      assertEquals("#root", string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("slec", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("slec", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("slec", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("slec", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("slec", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("slec", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("slec", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      
      Document document1 = (Document)document0.appendTo(element0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("slec", document0.baseUri());
      assertEquals("slec", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("slec", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("slec", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("slec", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = Element.preserveWhitespace(document1);
      assertFalse(boolean0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("slec", document0.baseUri());
      assertEquals("slec", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("slec", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("slec", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("slec", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.after((Node) element0);
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("slec", document0.baseUri());
      assertEquals("slec", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("slec", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("slec", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("slec", document1.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("slec", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("slec", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("slec", document0.baseUri());
      assertEquals("slec", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, attributes0.size());
      assertSame(document0, document2);
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("Q;un )2>;}'s8:oI", parseSettings0);
      assertNotNull(tag0);
      assertEquals("Q;un )2>;}'s8:oI", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("Q;un )2>;}'s8:oI", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      
      CDataNode cDataNode0 = new CDataNode("Q;un )2>;}'s8:oI");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      
      Attributes attributes1 = attributes0.clone();
      assertNotNull(attributes1);
      assertFalse(attributes1.equals((Object)attributes0));
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "Q;un )2>;}'s8:oI", attributes1);
      assertNotNull(formElement0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertEquals("Q;un )2>;}'s8:oI", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("Q;un )2>;}'s8:oI", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("Q;un )2>;}'s8:oI", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("Q;un )2>;}'s8:oI", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals("Q;un )2>;}'s8:oI", formElement0.tagName());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)3;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)58, (byte)19, (byte) (-10), (byte)102, (byte)3}, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = parseSettings0.normalizeTag("Q;un )2>;}'s8:oI");
      assertNotNull(string0);
      assertEquals("Q;un )2>;}'s8:oI", string0);
      
      Document document0 = Parser.parseBodyFragment("X><fE75DtKi/N2-", "G5~VF%eH[~BTd+=Qj5w");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("G5~VF%eH[~BTd+=Qj5w", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("G5~VF%eH[~BTd+=Qj5w", document0.location());
      assertEquals("#document", document0.nodeName());
      
      Iterator<Attribute> iterator0 = attributes1.iterator();
      assertNotNull(iterator0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      
      FormElement formElement1 = formElement0.addElement(document0);
      assertNotNull(formElement1);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertEquals("Q;un )2>;}'s8:oI", formElement1.baseUri());
      assertEquals("Q;un )2>;}'s8:oI", formElement1.nodeName());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("Q;un )2>;}'s8:oI", formElement1.tagName());
      assertEquals("Q;un )2>;}'s8:oI", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("Q;un )2>;}'s8:oI", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("Q;un )2>;}'s8:oI", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("Q;un )2>;}'s8:oI", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals("Q;un )2>;}'s8:oI", formElement0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("G5~VF%eH[~BTd+=Qj5w", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("G5~VF%eH[~BTd+=Qj5w", document0.location());
      assertEquals("#document", document0.nodeName());
      assertSame(formElement1, formElement0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      
      String string1 = formElement1.id();
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertEquals("Q;un )2>;}'s8:oI", formElement1.baseUri());
      assertEquals("Q;un )2>;}'s8:oI", formElement1.nodeName());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("Q;un )2>;}'s8:oI", formElement1.tagName());
      assertEquals("Q;un )2>;}'s8:oI", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("Q;un )2>;}'s8:oI", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("Q;un )2>;}'s8:oI", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("Q;un )2>;}'s8:oI", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals("Q;un )2>;}'s8:oI", formElement0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("G5~VF%eH[~BTd+=Qj5w", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("G5~VF%eH[~BTd+=Qj5w", document0.location());
      assertEquals("#document", document0.nodeName());
      assertSame(formElement1, formElement0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      
      Spliterator<Attribute> spliterator0 = attributes1.spliterator();
      assertNotNull(spliterator0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      
      String string2 = parseSettings0.normalizeTag("encoding");
      assertNotNull(string2);
      assertEquals("encoding", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Map<String, String> map0 = document0.dataset();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("G5~VF%eH[~BTd+=Qj5w", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("G5~VF%eH[~BTd+=Qj5w", document0.location());
      assertEquals("#document", document0.nodeName());
      
      int int0 = formElement1.elementSiblingIndex();
      assertEquals(0, int0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertEquals("Q;un )2>;}'s8:oI", formElement1.baseUri());
      assertEquals("Q;un )2>;}'s8:oI", formElement1.nodeName());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("Q;un )2>;}'s8:oI", formElement1.tagName());
      assertEquals("Q;un )2>;}'s8:oI", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("Q;un )2>;}'s8:oI", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("Q;un )2>;}'s8:oI", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("Q;un )2>;}'s8:oI", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals("Q;un )2>;}'s8:oI", formElement0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("G5~VF%eH[~BTd+=Qj5w", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("G5~VF%eH[~BTd+=Qj5w", document0.location());
      assertEquals("#document", document0.nodeName());
      assertSame(formElement1, formElement0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      
      Element element0 = formElement1.clone();
      assertNotNull(element0);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertFalse(element0.equals((Object)formElement1));
      assertFalse(element0.equals((Object)formElement0));
      assertEquals("Q;un )2>;}'s8:oI", formElement1.baseUri());
      assertEquals("Q;un )2>;}'s8:oI", formElement1.nodeName());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("Q;un )2>;}'s8:oI", formElement1.tagName());
      assertEquals("Q;un )2>;}'s8:oI", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("Q;un )2>;}'s8:oI", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("Q;un )2>;}'s8:oI", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("Q;un )2>;}'s8:oI", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals("Q;un )2>;}'s8:oI", formElement0.tagName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("Q;un )2>;}'s8:oI", element0.tagName());
      assertEquals("Q;un )2>;}'s8:oI", element0.baseUri());
      assertEquals("Q;un )2>;}'s8:oI", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("G5~VF%eH[~BTd+=Qj5w", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("G5~VF%eH[~BTd+=Qj5w", document0.location());
      assertEquals("#document", document0.nodeName());
      assertNotSame(formElement1, element0);
      assertSame(formElement1, formElement0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertNotSame(element0, formElement1);
      assertNotSame(element0, formElement0);
      
      Elements elements0 = document0.getElementsByAttributeValueEnding("[%s!=%s]", "[%s!=%s]");
      assertNotNull(elements0);
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("G5~VF%eH[~BTd+=Qj5w", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("G5~VF%eH[~BTd+=Qj5w", document0.location());
      assertEquals("#document", document0.nodeName());
      
      Elements elements1 = formElement0.getElementsByAttributeValueNot("VY(G'Z", ":contains");
      assertNotNull(elements1);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertFalse(formElement0.equals((Object)element0));
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("Q;un )2>;}'s8:oI", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("Q;un )2>;}'s8:oI", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("Q;un )2>;}'s8:oI", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("Q;un )2>;}'s8:oI", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals("Q;un )2>;}'s8:oI", formElement0.tagName());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = formElement1.getElementsByAttributeValueMatching((String) null, (Pattern) null);
      assertNotNull(elements2);
      assertFalse(formElement1.equals((Object)element0));
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertFalse(formElement0.equals((Object)element0));
      assertTrue(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertEquals("Q;un )2>;}'s8:oI", formElement1.baseUri());
      assertEquals("Q;un )2>;}'s8:oI", formElement1.nodeName());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("Q;un )2>;}'s8:oI", formElement1.tagName());
      assertEquals("Q;un )2>;}'s8:oI", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("Q;un )2>;}'s8:oI", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("Q;un )2>;}'s8:oI", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("Q;un )2>;}'s8:oI", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals("Q;un )2>;}'s8:oI", formElement0.tagName());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("G5~VF%eH[~BTd+=Qj5w", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("G5~VF%eH[~BTd+=Qj5w", document0.location());
      assertEquals("#document", document0.nodeName());
      assertNotSame(formElement1, element0);
      assertSame(formElement1, formElement0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      
      Element element1 = document0.shallowClone();
      assertNotNull(element1);
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("#root", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("#root", element1.nodeName());
      assertEquals("G5~VF%eH[~BTd+=Qj5w", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("G5~VF%eH[~BTd+=Qj5w", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("G5~VF%eH[~BTd+=Qj5w", document0.location());
      assertEquals("#document", document0.nodeName());
      
      Elements elements3 = element1.getElementsByTag("<;7");
      assertNotNull(elements3);
      assertFalse(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements2));
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("#root", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("#root", element1.nodeName());
      assertEquals("G5~VF%eH[~BTd+=Qj5w", element1.baseUri());
      assertFalse(element1.hasParent());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("G5~VF%eH[~BTd+=Qj5w", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("G5~VF%eH[~BTd+=Qj5w", document0.location());
      assertEquals("#document", document0.nodeName());
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      
      Map<String, String> map1 = formElement0.dataset();
      assertNotNull(map1);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertFalse(formElement0.equals((Object)element0));
      assertTrue(map1.equals((Object)map0));
      assertEquals("Q;un )2>;}'s8:oI", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("Q;un )2>;}'s8:oI", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("Q;un )2>;}'s8:oI", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("Q;un )2>;}'s8:oI", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals("Q;un )2>;}'s8:oI", formElement0.tagName());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertNotSame(map1, map0);
      
      Element element2 = formElement0.clone();
      assertNotNull(element2);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertFalse(formElement0.equals((Object)element0));
      assertFalse(element2.equals((Object)formElement0));
      assertFalse(element2.equals((Object)formElement1));
      assertFalse(element2.equals((Object)element0));
      assertEquals("Q;un )2>;}'s8:oI", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("Q;un )2>;}'s8:oI", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("Q;un )2>;}'s8:oI", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("Q;un )2>;}'s8:oI", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals("Q;un )2>;}'s8:oI", formElement0.tagName());
      assertEquals("Q;un )2>;}'s8:oI", element2.tagName());
      assertFalse(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertEquals("Q;un )2>;}'s8:oI", element2.baseUri());
      assertEquals("Q;un )2>;}'s8:oI", element2.nodeName());
      assertFalse(element2.isBlock());
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotSame(formElement0, element0);
      assertNotSame(formElement0, element2);
      assertSame(formElement0, formElement1);
      assertNotSame(element2, formElement0);
      assertNotSame(element2, formElement1);
      assertNotSame(element2, element0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertNotNull(document0);
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      
      Document document1 = (Document)document0.prepend("");
      assertNotNull(document1);
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertSame(document0, document1);
      
      Document document2 = (Document)document1.text("extended");
      assertNotNull(document2);
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      String string0 = element0.cssSelector();
      assertNotNull(string0);
      assertEquals("html > body", string0);
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      List<Node> list0 = document1.ensureChildNodes();
      assertNotNull(list0);
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("html > body");
      assertNotNull(evaluator_ContainsOwnText0);
      
      Document document3 = (Document)document2.appendTo(document0);
      assertNotNull(document3);
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("", document2.location());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("", document3.location());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.siblingIndex());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      boolean boolean0 = Element.preserveWhitespace(document0);
      assertFalse(boolean0);
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      
      Element element1 = element0.lastElementSibling();
      assertNotNull(element1);
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parse("form", "form");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("form", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("form", document0.location());
      
      Element element0 = document0.appendElement("form");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("form", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("form", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("form", element0.nodeName());
      assertEquals("form", element0.baseUri());
      assertEquals("form", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      
      String string0 = document0.wholeText();
      assertNotNull(string0);
      assertEquals("form", string0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("form", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("form", document0.location());
      assertEquals(2, document0.childNodeSize());
      
      String string1 = "yy4)_)#:TIm";
      Document document1 = (Document)document0.prependText("yy4)_)#:TIm");
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("form", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("form", document0.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("form", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("form", document1.location());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        Pattern.compile(":nth-child(");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 11
         // :nth-child(
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parse("shTc", "_D*#34CxA3_B3'");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("_D*#34CxA3_B3'", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("_D*#34CxA3_B3'", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals("_D*#34CxA3_B3'", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("_D*#34CxA3_B3'", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.hasParent());
      assertEquals("_D*#34CxA3_B3'", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      
      Document document1 = (Document)document0.appendTo(element0);
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals("_D*#34CxA3_B3'", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("_D*#34CxA3_B3'", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.hasParent());
      assertEquals("_D*#34CxA3_B3'", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("_D*#34CxA3_B3'", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("_D*#34CxA3_B3'", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = Element.preserveWhitespace(document1);
      assertFalse(boolean0);
      assertEquals("#root", document0.tagName());
      assertEquals("_D*#34CxA3_B3'", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("_D*#34CxA3_B3'", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.hasParent());
      assertEquals("_D*#34CxA3_B3'", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("_D*#34CxA3_B3'", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("_D*#34CxA3_B3'", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      document1.tagName("_D*#34CxA3_B3'");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Document.createShell("slec");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("slec", document0.baseUri());
      assertEquals("slec", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.toggleClass("java.lang.string@0000000071");
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("slec", document0.baseUri());
      assertEquals("slec", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("slec", document1.location());
      assertEquals("slec", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.toggleClass("org.jsoup.nodes.Element");
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("slec", document0.baseUri());
      assertEquals("slec", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("slec", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("slec", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean0 = document0.hasClass("org.jsoup.select.evaluator$containsdata");
      assertFalse(boolean0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("slec", document0.baseUri());
      assertEquals("slec", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      Document document3 = (Document)document0.appendText("java.lang.string@0000000071");
      assertNotNull(document3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("slec", document0.baseUri());
      assertEquals("slec", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("slec", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals("slec", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      boolean boolean1 = document2.hasClass("k1|nx{:3~");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("slec", document0.baseUri());
      assertEquals("slec", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("slec", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("slec", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      
      String string0 = document2.data();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("slec", document0.baseUri());
      assertEquals("slec", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("slec", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("slec", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("tgxtare=");
      assertNotNull(pattern0);
      assertEquals("tgxtare=", pattern0.toString());
      assertEquals("tgxtare=", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      
      document1.reparentChild(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.toggleClass("org.jsoup.select.Collector$FirstFinder");
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("tgxtare=", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("tgxtare=", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document2.toggleClass("tgxtare=");
      assertNotNull(document3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("tgxtare=", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("tgxtare=", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("tgxtare=", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertEquals("tgxtare=", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      
      Document document4 = Parser.parse("java.lang.string@0000000089 html", "java.lang.string@0000000089 html");
      assertNotNull(document4);
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      
      Document document5 = (Document)document3.appendTo(document4);
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("tgxtare=", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("tgxtare=", document2.baseUri());
      assertEquals(1, document2.siblingIndex());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("tgxtare=", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals("tgxtare=", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.isBlock());
      assertEquals("tgxtare=", document5.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertTrue(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertEquals("tgxtare=", document5.location());
      assertEquals(1, document5.siblingIndex());
      assertEquals(0, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document2, document5);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document4);
      assertSame(document3, document5);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document5);
      assertNotSame(document4, document1);
      assertSame(document5, document1);
      assertSame(document5, document3);
      assertNotSame(document5, document4);
      assertSame(document5, document0);
      assertSame(document5, document2);
      
      Element element0 = document3.nextElementSibling();
      assertNull(element0);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document3.equals((Object)document4));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("tgxtare=", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("tgxtare=", document2.baseUri());
      assertEquals(1, document2.siblingIndex());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("tgxtare=", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals("tgxtare=", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document2, document5);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document4);
      assertSame(document3, document5);
      
      boolean boolean0 = document3.hasClass("paCp");
      assertFalse(boolean0);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document3.equals((Object)document4));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("tgxtare=", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("tgxtare=", document2.baseUri());
      assertEquals(1, document2.siblingIndex());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("tgxtare=", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals("tgxtare=", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document2, document5);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document4);
      assertSame(document3, document5);
      
      Document document6 = (Document)document2.appendText("paCp");
      assertNotNull(document6);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document6.equals((Object)document4));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("tgxtare=", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("tgxtare=", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("tgxtare=", document6.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals(1, document6.siblingIndex());
      assertFalse(document6.updateMetaCharsetElement());
      assertFalse(document6.isBlock());
      assertEquals(1, document6.childNodeSize());
      assertEquals("#root", document6.tagName());
      assertEquals("tgxtare=", document6.location());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document2, document5);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document6);
      assertSame(document2, document0);
      assertSame(document6, document0);
      assertSame(document6, document5);
      assertSame(document6, document2);
      assertSame(document6, document1);
      assertNotSame(document6, document4);
      assertSame(document6, document3);
      
      boolean boolean1 = document2.hasClass("paCp");
      assertFalse(boolean1);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertTrue(boolean1 == boolean0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("tgxtare=", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("tgxtare=", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document2, document5);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document6);
      assertSame(document2, document0);
      
      String string0 = document0.data();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.equals((Object)document4));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      
      boolean boolean2 = document0.hasText();
      assertTrue(boolean2);
      assertFalse(document0.equals((Object)document4));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Document.createShell("tgxtare=");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = Parser.parse("H.&So7", "tgxtare=");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document0.toggleClass("org.jsoup.nodes.Element");
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("tgxtare=", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("tgxtare=", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      
      boolean boolean0 = document2.hasClass("); oCW59");
      assertFalse(boolean0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("tgxtare=", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("tgxtare=", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      
      Document document3 = (Document)document0.appendText("H.&So7");
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("tgxtare=", document3.location());
      assertEquals("tgxtare=", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      
      boolean boolean1 = document3.hasClass("Tag name must not be empty.");
      assertFalse(boolean1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertTrue(boolean1 == boolean0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("tgxtare=", document3.location());
      assertEquals("tgxtare=", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      
      String string0 = document1.data();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Document.createShell("shT9/c");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("shT9/c", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("shT9/c", document0.baseUri());
      
      Document document1 = (Document)document0.toggleClass("java.lang.string@0000000071");
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("shT9/c", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("shT9/c", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("shT9/c", document1.location());
      assertEquals("shT9/c", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.hasClass("java.lang.string@0000000071");
      assertFalse(boolean0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("shT9/c", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("shT9/c", document0.baseUri());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      
      Elements elements0 = document0.getElementsMatchingText("Children collection to be inserted must not be null.");
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      Document document1 = (Document)document0.appendText("Children collection to be inserted must not be null.");
      assertNotNull(document1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements1 = document0.getElementsByAttributeValueMatching("Children collection to be inserted must not be null.", "org.jsoup.select.Evaluator$Class");
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      Document document2 = (Document)document0.insertChildren((-1), (Collection<? extends Node>) elements0);
      assertNotNull(document2);
      assertTrue(elements0.equals((Object)elements1));
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements0, elements1);
      assertSame(document2, document0);
      assertSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.getElementsMatchingText("Children collection to be inserted must not be null.");
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      
      String string0 = element0.outerHtml();
      assertNotNull(string0);
      assertEquals("<body></body>", string0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      
      Pattern pattern0 = Pattern.compile("<body></body>");
      assertNotNull(pattern0);
      assertEquals("<body></body>", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("<body></body>", pattern0.pattern());
      
      Elements elements1 = document0.getElementsByAttributeValueMatching("h9/:uq", pattern0);
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("<body></body>", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("<body></body>", pattern0.pattern());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotSame(elements1, elements0);
      
      Elements elements2 = document0.children();
      assertNotNull(elements2);
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, elements2.size());
      assertFalse(elements2.isEmpty());
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Elements elements3 = element0.previousElementSiblings();
      assertNotNull(elements3);
      assertFalse(elements3.equals((Object)elements1));
      assertFalse(elements3.equals((Object)elements2));
      assertFalse(elements3.equals((Object)elements0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertFalse(elements3.isEmpty());
      assertEquals(1, elements3.size());
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      
      String string1 = document0.wholeText();
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      
      Element element1 = element0.prepend("h;");
      assertNotNull(element1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Document.createShell("tgxtare=");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("tgxtare=", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("tgxtare=", document2.location());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      document1.reparentChild(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      Document.QuirksMode document_QuirksMode1 = Document.QuirksMode.noQuirks;
      Document document3 = document0.quirksMode(document_QuirksMode1);
      assertNotNull(document3);
      assertFalse(document_QuirksMode1.equals((Object)document_QuirksMode0));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("tgxtare=", document3.location());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("tgxtare=", document3.baseUri());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document_QuirksMode1, document_QuirksMode0);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      Element element0 = new Element("tgxtare=");
      assertNotNull(element0);
      assertEquals("", element0.baseUri());
      assertEquals("tgxtare=", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("tgxtare=", element0.tagName());
      assertFalse(element0.hasParent());
      
      String string0 = document0.data();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      
      Element element1 = document1.nextElementSibling();
      assertNull(element1);
      assertFalse(document_QuirksMode0.equals((Object)document_QuirksMode1));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document_QuirksMode0, document_QuirksMode1);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      // Undeclared exception!
      try { 
        element0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("tgxtare=");
      assertNotNull(pattern0);
      assertEquals("tgxtare=", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("tgxtare=", pattern0.toString());
      
      Document document0 = Document.createShell("tgxtare=");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.text("org.jsoup.nodes.Element$2");
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.appendTo(document1);
      assertNotNull(document2);
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tgxtare=", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("tgxtare=", document2.location());
      assertTrue(document2.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      boolean boolean0 = Element.preserveWhitespace(document2);
      assertFalse(boolean0);
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tgxtare=", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("tgxtare=", document2.location());
      assertTrue(document2.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document0.empty();
      assertNotNull(document3);
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("tgxtare=", document3.baseUri());
      assertEquals(1, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals("tgxtare=", document3.location());
      assertEquals(0, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      String string0 = "#root";
      // Undeclared exception!
      document2.wrap("#root");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      
      Document document1 = (Document)document0.val(":contains");
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("textarea", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("textarea", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("#document");
      assertNotNull(pattern0);
      assertEquals("#document", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("#document", pattern0.pattern());
      
      boolean boolean0 = document0.hasAttr("org.jsoup.select.evaluator$containsdata");
      assertFalse(boolean0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertSame(document0, document1);
      
      Document document2 = (Document)document0.toggleClass("textarea");
      assertNotNull(document2);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("textarea", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("textarea", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean1 = document0.hasClass(":contains");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      Document document3 = (Document)document0.appendText(":contains");
      assertNotNull(document3);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document3.location());
      assertEquals("textarea", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      
      boolean boolean2 = document3.hasText();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document3.location());
      assertEquals("textarea", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document4 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document4);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals(2, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals("textarea", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertEquals("textarea", document4.location());
      assertFalse(document4.isBlock());
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document2);
      
      String string0 = document4.data();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals(2, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals("textarea", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertEquals("textarea", document4.location());
      assertFalse(document4.isBlock());
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document2);
      
      // Undeclared exception!
      try { 
        document1.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "tgxtare=";
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      String string1 = ":contains";
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      
      Pattern pattern0 = Pattern.compile("tgxtare=");
      assertNotNull(pattern0);
      assertEquals("tgxtare=", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("tgxtare=", pattern0.pattern());
      
      Element element1 = element0.val(":contains");
      assertNotNull(element1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals("tgxtare=", element1.baseUri());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      // Undeclared exception!
      try { 
        Pattern.compile("6QUt$4dr5#1(/1%q", 449);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 16
         // 6QUt$4dr5#1(/1%q
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      
      Document document1 = (Document)document0.appendTo(element0);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = Element.preserveWhitespace(document1);
      assertFalse(boolean0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      element0.parentNode = (Node) document1;
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(0, element0.parentNode.siblingIndex());
      assertTrue(element0.parentNode.hasParent());
      
      Document document2 = (Document)document1.empty();
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("tgxtare=", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("tgxtare=", document2.baseUri());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Element element1 = document1.lastElementSibling();
      assertNull(element1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("tgxtare=");
      assertNotNull(pattern0);
      assertEquals("tgxtare=", pattern0.pattern());
      assertEquals("tgxtare=", pattern0.toString());
      assertEquals(0, pattern0.flags());
      
      document1.reparentChild(document0);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.toggleClass("org.jsoup.select.Collector$FirstFinder");
      assertNotNull(document2);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("tgxtare=", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements0 = document1.siblingElements();
      assertNotNull(elements0);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      CDataNode cDataNode0 = new CDataNode((String) null);
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      Attributes attributes1 = cDataNode0.attributes();
      assertNotNull(attributes1);
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, attributes1.size());
      assertNotSame(attributes1, attributes0);
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      // Undeclared exception!
      document2.html(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Document.createShell("shT9/c");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("shT9/c", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("shT9/c", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.toggleClass("java.lang.string@0000000071");
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("shT9/c", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("shT9/c", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("shT9/c", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("shT9/c", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.toggleClass("java.lang.string@0000000071");
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("shT9/c", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("shT9/c", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("shT9/c", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("shT9/c", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = Parser.parse("java.lang.string@0000000071", "java.lang.string@0000000071");
      assertNotNull(document3);
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      
      boolean boolean0 = document0.hasClass("java.lang.string@0000000071");
      assertTrue(boolean0);
      assertFalse(document0.equals((Object)document3));
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("shT9/c", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("shT9/c", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("tgxtare=");
      assertNotNull(pattern0);
      assertEquals("tgxtare=", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("tgxtare=", pattern0.toString());
      
      document0.reparentChild(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.toggleClass("$VALUES");
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("tgxtare=", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("tgxtare=", document2.location());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document1.toggleClass("head");
      assertNotNull(document3);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("tgxtare=", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertTrue(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("tgxtare=", document3.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      boolean boolean0 = document1.hasClass("$VALUES");
      assertFalse(boolean0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.isBlock());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      
      Document document4 = (Document)document1.appendText("Ak8ozEh5.l)a");
      assertNotNull(document4);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(2, document4.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals("tgxtare=", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertTrue(document4.hasParent());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals("tgxtare=", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document2);
      
      boolean boolean1 = document4.hasClass("html");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(2, document4.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals("tgxtare=", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertTrue(document4.hasParent());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals("tgxtare=", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document2);
      
      String string0 = document0.data();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("tgxtare=");
      assertNotNull(pattern0);
      assertEquals("tgxtare=", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("tgxtare=", pattern0.pattern());
      
      document1.reparentChild(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.toggleClass("org.jsoup.select.Collector$FirstFinder");
      assertNotNull(document2);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("tgxtare=", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("tgxtare=", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document2.toggleClass("tgxtare=");
      assertNotNull(document3);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("tgxtare=", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("tgxtare=", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("tgxtare=", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertEquals("tgxtare=", document3.baseUri());
      assertFalse(document3.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      
      boolean boolean0 = document3.hasClass("paCp");
      assertFalse(boolean0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("tgxtare=", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("tgxtare=", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("tgxtare=", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertEquals("tgxtare=", document3.baseUri());
      assertFalse(document3.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      
      Document document4 = (Document)document2.appendText("paCp");
      assertNotNull(document4);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("tgxtare=", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("tgxtare=", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("tgxtare=", document4.location());
      assertEquals("tgxtare=", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document2);
      
      boolean boolean1 = document2.hasClass("paCp");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("tgxtare=", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("tgxtare=", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document2, document3);
      
      String string0 = document0.data();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Document.createShell("slec");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("slec", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("slec", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.toggleClass("java.lang.string@0000000071");
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("slec", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("slec", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("slec", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("slec", document1.baseUri());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.toggleClass("org.jsoup.nodes.Element");
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("slec", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("slec", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("slec", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("slec", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      boolean boolean0 = document0.hasClass("java.lang.string@0000000071");
      assertFalse(boolean0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("slec", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("slec", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      // Undeclared exception!
      try { 
        document1.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Charset charset0 = document0.charset();
      assertNotNull(charset0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertFalse(set0.contains("tgxtare="));
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      
      Document document1 = (Document)document0.classNames(set0);
      assertNotNull(document1);
      assertFalse(set0.contains("tgxtare="));
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertSame(document0, document1);
      
      Elements elements0 = document0.getElementsByClass("tgxtare=");
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("tgxtare=");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("tgxtare=", pattern0.toString());
      assertEquals("tgxtare=", pattern0.pattern());
      
      document1.reparentChild(document0);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("tgxtare=", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.toggleClass("org.jsoup.select.Collector$FirstFinder");
      assertNotNull(document2);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("tgxtare=", document2.baseUri());
      assertEquals("tgxtare=", document2.location());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean0 = document1.hasClass("tgxtare=");
      assertFalse(boolean0);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("tgxtare=", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      Document document3 = (Document)document1.appendText("tgxtare=");
      assertNotNull(document3);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("tgxtare=", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tgxtare=", document3.location());
      assertEquals("tgxtare=", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      
      boolean boolean1 = document0.hasClass("html");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      
      String string0 = document2.data();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("tgxtare=", document2.baseUri());
      assertEquals("tgxtare=", document2.location());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      
      Elements elements0 = document3.getElementsByIndexLessThan(8212);
      assertNotNull(elements0);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("tgxtare=", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tgxtare=", document3.location());
      assertEquals("tgxtare=", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      
      Element element0 = document2.nextElementSibling();
      assertNull(element0);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("tgxtare=", document2.baseUri());
      assertEquals("tgxtare=", document2.location());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Document.createShell("tgxtare=");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      
      Document document1 = new Document("tgxtare=");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      
      document1.siblingIndex = 2054;
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(2054, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = Node.EmptyString;
      assertNotNull(string1);
      assertEquals("", string1);
      
      Element element0 = document1.head();
      assertNull(element0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(2054, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.toggleClass("tgxtare=");
      assertNotNull(document2);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(2054, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("tgxtare=", document2.location());
      assertEquals(2054, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("tgxtare=", document2.baseUri());
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("Pattern syntax error: ", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Pattern syntax error: ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("Pattern syntax error: ");
      assertNotNull(pattern0);
      assertEquals("Pattern syntax error: ", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("Pattern syntax error: ", pattern0.toString());
      
      document0.reparentChild(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Pattern syntax error: ", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Pattern syntax error: ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("#");
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("Pattern syntax error: ", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Pattern syntax error: ", document2.baseUri());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document1.before((Node) document0);
      assertNotNull(document3);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Pattern syntax error: ", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Pattern syntax error: ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(1, document3.childNodeSize());
      assertEquals("Pattern syntax error: ", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals("Pattern syntax error: ", document3.location());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      Element element0 = new Element("eof");
      assertNotNull(element0);
      assertEquals("eof", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("eof", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      
      String string0 = "p#kkLbvT+,gl=?A`qC";
      String string1 = "w/F)/eOJCkIs";
      // Undeclared exception!
      try { 
        Pattern.compile("w/F)/eOJCkIs", (-1849));
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 2
         // w/F)/eOJCkIs
         //   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.createElement("tgxtare=");
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(element0.hasParent());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("tgxtare=", element0.tagName());
      assertEquals("tgxtare=", element0.nodeName());
      assertFalse(element0.isBlock());
      
      Pattern pattern0 = Pattern.compile("tgxtare=");
      assertNotNull(pattern0);
      assertEquals("tgxtare=", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("tgxtare=", pattern0.pattern());
      
      Elements elements0 = element0.getElementsByAttributeValueMatching("tgxtare=", pattern0);
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(element0.hasParent());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("tgxtare=", element0.tagName());
      assertEquals("tgxtare=", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("tgxtare=", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("tgxtare=", pattern0.pattern());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Element element1 = element0.val(":contains");
      assertNotNull(element1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(element0.hasParent());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("tgxtare=", element0.tagName());
      assertEquals("tgxtare=", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("tgxtare=", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("tgxtare=", element1.nodeName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("tgxtare=", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Elements elements1 = element1.select("BeforeHtml");
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(element0.hasParent());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("tgxtare=", element0.tagName());
      assertEquals("tgxtare=", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("tgxtare=", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("tgxtare=", element1.nodeName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("tgxtare=", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(elements1, elements0);
      
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("ZKPBVJ$qTtk;");
      assertNotNull(evaluator_ContainsOwnText0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      
      Element element1 = element0.addClass("Children collection to be inserted must not be null.");
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertEquals("Children collection to be inserted must not be null.", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Pattern pattern0 = Pattern.compile("#document", (-1849));
      assertNotNull(pattern0);
      assertEquals("#document", pattern0.pattern());
      assertEquals("#document", pattern0.toString());
      assertEquals((-1849), pattern0.flags());
      
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#document", pattern0.pattern());
      assertEquals("#document", pattern0.toString());
      assertEquals((-1849), pattern0.flags());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = Document.createShell("org.jsoup.nodes.Element");
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Element", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("org.jsoup.nodes.Element", document2.baseUri());
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      String string0 = document0.val();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      
      Element element2 = null;
      try {
        element2 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Document.createShell("tgxtare=");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Document document1 = new Document("tgxtare=");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = document1.wholeText();
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(document1.equals((Object)document0));
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertNotSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueContaining("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.prepend("Children collection to be inserted must not be null.");
      assertNotNull(document1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsMatchingText("Children collection to be inserted must not be null.");
      assertNotNull(elements0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertSame(document0, document1);
      
      String string0 = element0.outerHtml();
      assertNotNull(string0);
      assertEquals("<body></body>", string0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertSame(document0, document1);
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertSame(document0, document1);
      
      element0.setParentNode(document0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertSame(document0, document1);
      
      List<Node> list1 = document0.ensureChildNodes();
      assertNotNull(list1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(list1.isEmpty());
      assertEquals(2, list1.size());
      assertSame(document0, document1);
      assertSame(list1, list0);
      
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("<body></body>");
      assertNotNull(evaluator_ContainsOwnText0);
      
      Element element1 = element0.prependText("<body></body>");
      assertNotNull(element1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals("Children collection to be inserted must not be null.", element1.baseUri());
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("tgxtare=");
      assertNotNull(pattern0);
      assertEquals("tgxtare=", pattern0.toString());
      assertEquals("tgxtare=", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      
      document1.reparentChild(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = "%=z:w96q";
      Document document2 = (Document)document0.addClass("%=z:w96q");
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("tgxtare=", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("tgxtare=", document2.location());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Element element0 = new Element("%=z:w96q");
      assertNotNull(element0);
      assertFalse(element0.hasParent());
      assertEquals("%=z:w96q", element0.tagName());
      assertEquals("%=z:w96q", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = document2.lastElementSibling();
      assertNull(element1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("tgxtare=", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("tgxtare=", document2.location());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      // Undeclared exception!
      document2.outerHtml();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, element0.siblingIndex());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      
      Elements elements0 = document0.getElementsContainingText("yfO@~4jhcwE");
      assertNotNull(elements0);
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = document0.hasClass("tgxtare=");
      assertFalse(boolean0);
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element1 = element0.lastElementSibling();
      assertNotNull(element1);
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, element0.siblingIndex());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("tgxtare=", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = new Document("Children collection to be inserted must not be null.");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.isBlock());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertNotSame(document0, document1);
      
      Elements elements0 = element0.getElementsMatchingOwnText("0ZU$]gbj`8-W");
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotSame(document0, document1);
      
      Element element1 = element0.previousElementSibling();
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
      assertNotSame(document0, document1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Element element2 = element0.lastElementSibling();
      assertNotNull(element2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", element2.baseUri());
      assertEquals("body", element2.tagName());
      assertEquals("body", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertNotSame(document0, document1);
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      
      Document document2 = document1.clone();
      assertNotNull(document2);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Elements elements1 = document2.children();
      assertNotNull(elements1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertTrue(elements1.equals((Object)elements0));
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(elements1, elements0);
      
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.createElement("textarea");
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element0.baseUri());
      assertEquals("textarea", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = document0.head();
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals("textarea", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertNotSame(element1, element0);
      
      DataNode dataNode0 = new DataNode("textarea", "textarea");
      assertNotNull(dataNode0);
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      
      boolean boolean0 = Element.preserveWhitespace(dataNode0);
      assertFalse(boolean0);
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Document.createShell("slec");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("slec", document0.location());
      assertEquals("slec", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.toggleClass("java.lang.string@0000000071");
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("slec", document0.location());
      assertEquals("slec", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("slec", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("slec", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = new Document("slec");
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals("slec", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("slec", document2.baseUri());
      assertFalse(document2.isBlock());
      
      boolean boolean0 = document0.hasClass("java.lang.string@0000000071");
      assertFalse(boolean0);
      assertFalse(document0.equals((Object)document2));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("slec", document0.location());
      assertEquals("slec", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      
      boolean boolean1 = document0.hasText();
      assertFalse(boolean1);
      assertFalse(document0.equals((Object)document2));
      assertTrue(boolean1 == boolean0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("slec", document0.location());
      assertEquals("slec", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      
      Elements elements0 = document0.getElementsByIndexLessThan(32);
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document2));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("slec", document0.location());
      assertEquals("slec", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charArrayWriter0, (-236), (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parse("Children collection tobe inserted must notbe null.", "Children collection tobe inserted must notbe null.");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Children collection tobe inserted must notbe null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection tobe inserted must notbe null.", document0.baseUri());
      
      document0.reparentChild(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Children collection tobe inserted must notbe null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection tobe inserted must notbe null.", document0.baseUri());
      
      // Undeclared exception!
      document0.val("br");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      String string0 = document0.nodeName();
      assertNotNull(string0);
      assertEquals("#document", string0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.createElement("#document");
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals("#document", element0.tagName());
      
      Element element1 = element0.doClone(document0);
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals("#document", element0.tagName());
      assertEquals("Children collection to be inserted must not be null.", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("#document", element1.tagName());
      assertEquals("#document", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      String string1 = element0.val();
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(element0.equals((Object)element1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals("#document", element0.tagName());
      assertNotSame(element0, element1);
      
      Document document1 = (Document)document0.empty();
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.tagName("Children collection to be inserted must not be null.");
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("children collection to be inserted must not be null.", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("children collection to be inserted must not be null.", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals(0, document2.childNodeSize());
      assertEquals("children collection to be inserted must not be null.", document2.tagName());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Tag tag0 = document1.tag();
      assertNotNull(tag0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("children collection to be inserted must not be null.", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("children collection to be inserted must not be null.", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertEquals("children collection to be inserted must not be null.", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("children collection to be inserted must not be null.", tag0.toString());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.createElement(":contains");
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(":contains", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(":contains", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      
      Document document1 = (Document)document0.val("tgxtare=");
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document1.outerHtml();
      assertNotNull(string0);
      assertEquals("<html>\n <head></head>\n <body>\n  tgxtare=\n </body>\n</html>", string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile(":contains");
      assertNotNull(pattern0);
      assertEquals(":contains", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals(":contains", pattern0.toString());
      
      Charset charset0 = document1.charset();
      assertNotNull(charset0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertFalse(set0.contains(":contains"));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element1 = element0.classNames(set0);
      assertNotNull(element1);
      assertFalse(set0.contains(":contains"));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(":contains", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(":contains", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(":contains", element1.tagName());
      assertEquals(":contains", element1.nodeName());
      assertEquals("tgxtare=", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(document1, document0);
      assertSame(element1, element0);
      
      Elements elements0 = document1.parents();
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string1 = document1.val();
      assertNotNull(string1);
      assertEquals("tgxtare=", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element2 = element0.getElementById("s|Vc2Wzuy>FC");
      assertNull(element2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(":contains", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(":contains", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertSame(document0, document1);
      assertSame(element0, element1);
      
      String string2 = document0.ownText();
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = new Document("G`v5oL");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("G`v5oL", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("G`v5oL", document0.location());
      
      String string0 = document0.toString();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("G`v5oL", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("G`v5oL", document0.location());
      
      String string1 = document0.wholeText();
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("G`v5oL", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("G`v5oL", document0.location());
      
      Set<String> set0 = document0.classNames();
      assertNotNull(set0);
      assertFalse(set0.contains(string1));
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("G`v5oL", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("G`v5oL", document0.location());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Elements elements0 = document0.getElementsMatchingText("oI[@8*9Z]5#");
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("G`v5oL", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("G`v5oL", document0.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Element element0 = document0.body();
      assertNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("G`v5oL", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("G`v5oL", document0.location());
      
      String string2 = document0.outerHtml();
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("G`v5oL", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("G`v5oL", document0.location());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document1 = document0.parser(parser0);
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("G`v5oL", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("G`v5oL", document0.location());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("G`v5oL", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("G`v5oL", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      List<Node> list0 = document1.ensureChildNodes();
      assertNotNull(list0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("G`v5oL", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("G`v5oL", document0.location());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("G`v5oL", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("G`v5oL", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string3 = document1.wholeText();
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("G`v5oL", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("G`v5oL", document0.location());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("G`v5oL", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("G`v5oL", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.val("");
      assertNotNull(document2);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("G`v5oL", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("G`v5oL", document0.location());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("G`v5oL", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("G`v5oL", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("G`v5oL", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("G`v5oL", document2.baseUri());
      assertFalse(document2.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      String string4 = document0.text();
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("G`v5oL", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("G`v5oL", document0.location());
      assertSame(document0, document1);
      assertSame(document0, document2);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("tgxtare=");
      assertNotNull(pattern0);
      assertEquals("tgxtare=", pattern0.pattern());
      assertEquals("tgxtare=", pattern0.toString());
      assertEquals(0, pattern0.flags());
      
      Elements elements0 = document1.getElementsByAttributeValueNot("#root", "tgxtare=");
      assertNotNull(elements0);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.reparentChild(document1);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      List<DataNode> list0 = document1.dataNodes();
      assertNotNull(list0);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      int int0 = document0.childNodeSize();
      assertEquals(1, int0);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertSame(document0, document1);
      
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertNotNull(document2);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("tgxtare=", document2.location());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Pattern pattern1 = Pattern.compile("#root");
      assertNotNull(pattern1);
      assertFalse(pattern1.equals((Object)pattern0));
      assertEquals(0, pattern1.flags());
      assertEquals("#root", pattern1.pattern());
      assertEquals("#root", pattern1.toString());
      assertNotSame(pattern1, pattern0);
      
      Elements elements1 = document1.getElementsByAttributeValueMatching("tgxtare=", pattern1);
      assertNotNull(elements1);
      assertFalse(pattern1.equals((Object)pattern0));
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, pattern1.flags());
      assertEquals("#root", pattern1.pattern());
      assertEquals("#root", pattern1.toString());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(pattern1, pattern0);
      assertNotSame(elements1, elements0);
      
      Document document3 = (Document)document1.appendText("&m\"My,-%");
      assertNotNull(document3);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("tgxtare=", document3.location());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("tgxtare=", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      String string0 = document2.ownText();
      assertNotNull(string0);
      assertEquals("&m\"My,-%", string0);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("tgxtare=", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      
      String string0 = element0.wholeText();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      
      document0.setSiblingIndex(1566);
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(1566, document0.siblingIndex());
      
      Element element1 = element0.before("ascii");
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(1566, document0.siblingIndex());
      assertEquals(2, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("tgxtare=", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals(2, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.createElement(":contains");
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(":contains", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(":contains", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      
      Document document1 = (Document)document0.val("tgxtare=");
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document1.outerHtml();
      assertNotNull(string0);
      assertEquals("<html>\n <head></head>\n <body>\n  tgxtare=\n </body>\n</html>", string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile(":contains");
      assertNotNull(pattern0);
      assertEquals(":contains", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals(":contains", pattern0.toString());
      
      boolean boolean0 = document0.hasAttr("tgxtare=");
      assertFalse(boolean0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertSame(document0, document1);
      
      Document document2 = (Document)document0.toggleClass("v)fKzQFY9lpc'U^c");
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("tgxtare=", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("tgxtare=", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Document document3 = Document.createShell(":contains");
      assertNotNull(document3);
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(":contains", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(":contains", document3.location());
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      
      String string1 = document1.val();
      assertNotNull(string1);
      assertEquals("tgxtare=", string1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(string1.equals((Object)string0));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      Document document4 = (Document)document3.empty();
      assertNotNull(document4);
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals(":contains", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(":contains", document3.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(":contains", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.hasParent());
      assertEquals(":contains", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertNotSame(document3, document2);
      assertSame(document3, document4);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      
      Document document5 = (Document)document2.appendText("P^q!\"4U%Do*w ");
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("tgxtare=", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("tgxtare=", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("tgxtare=", document5.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals("tgxtare=", document5.location());
      assertEquals("#document", document5.nodeName());
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertSame(document5, document0);
      assertSame(document5, document1);
      assertSame(document5, document2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      int int0 = document1.elementSiblingIndex();
      assertEquals(0, int0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.getElementsByAttributeValueNot("tgxtare=", "tgxtare=");
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.insertChildren(0, (Collection<? extends Node>) elements0);
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(4, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(4, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("tgxtare=", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("tgxtare=", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(4, document2.childNodeSize());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      document0.remove();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      String string0 = document0.wholeText();
      assertNotNull(string0);
      assertEquals("tgxtare=", string0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      Document document3 = document1.normalise();
      assertNotNull(document3);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("tgxtare=", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("tgxtare=", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      
      Document document4 = (Document)document3.val("G[_:");
      assertNotNull(document4);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("tgxtare=", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("tgxtare=", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("tgxtare=", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertEquals("tgxtare=", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document3);
      
      boolean boolean0 = document4.hasClass("br");
      assertFalse(boolean0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("tgxtare=", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("tgxtare=", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("tgxtare=", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertEquals("tgxtare=", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document3);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.prepend("Children collection to be inserted must not be null.");
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsMatchingText("Children collection to be inserted must not be null.");
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertSame(document0, document1);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertSame(document0, document1);
      
      Element element1 = element0.tagName("w]DVr%5");
      assertNotNull(element1);
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals("w]dvr%5", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("w]dvr%5", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("w]dvr%5", element1.tagName());
      assertEquals("Children collection to be inserted must not be null.", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals("w]dvr%5", element1.nodeName());
      assertFalse(element1.isBlock());
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Element element2 = document0.head();
      assertNotNull(element2);
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element2.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element2.baseUri());
      assertEquals("head", element2.nodeName());
      assertEquals(0, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.tagName());
      assertSame(document0, document1);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      
      Document document2 = (Document)document0.val("Children collection to be inserted must not be null.");
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertFalse(document2.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parse("Children collection tobe inserted must notbe null.", "Children collection tobe inserted must notbe null.");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Children collection tobe inserted must notbe null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("Children collection tobe inserted must notbe null.", document0.baseUri());
      
      Document document1 = (Document)document0.toggleClass("Children collection tobe inserted must notbe null.");
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Children collection tobe inserted must notbe null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("Children collection tobe inserted must notbe null.", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("Children collection tobe inserted must notbe null.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Children collection tobe inserted must notbe null.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.hasClass("Children collection tobe inserted must notbe null.");
      assertFalse(boolean0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Children collection tobe inserted must notbe null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("Children collection tobe inserted must notbe null.", document0.baseUri());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.prepend("Children collection to be inserted must not be null.");
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertSame(document0, document1);
      
      Element element1 = element0.before((Node) document0);
      assertNotNull(element1);
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("Children collection to be inserted must not be null.", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document2 = (Document)document0.appendText("#ro,t");
      assertNotNull(document2);
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertFalse(document2.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      boolean boolean1 = document0.hasClass("org.jsoup.nodes.Node$OuterHtmlVisitor");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document3 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document3);
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      Attributes attributes0 = document3.attributes();
      assertNotNull(attributes0);
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(0, attributes0.size());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("3=z:G)5R");
      assertNotNull(stringReader0);
      
      Document document0 = parser0.parseInput((Reader) stringReader0, "3=z:G)5R");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("3=z:G)5R", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("3=z:G)5R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("3=z:G)5R", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("3=z:G)5R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("3=z:G)5R", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("3=z:G)5R", document1.baseUri());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("3=z:G)5R", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("3=z:G)5R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("3=z:G)5R", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("3=z:G)5R", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("3=z:G)5R", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = element0.ownerDocument();
      assertNotNull(document2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("3=z:G)5R", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("3=z:G)5R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("3=z:G)5R", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("3=z:G)5R", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("3=z:G)5R", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("3=z:G)5R", document2.baseUri());
      assertEquals("3=z:G)5R", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Element element1 = document2.head();
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("3=z:G)5R", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("3=z:G)5R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("3=z:G)5R", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("3=z:G)5R", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("3=z:G)5R", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("3=z:G)5R", document2.baseUri());
      assertEquals("3=z:G)5R", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("3=z:G)5R", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(element0, element1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(element1, element0);
      
      List<Node> list0 = element1.ensureChildNodes();
      assertNotNull(list0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("3=z:G)5R", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("3=z:G)5R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("3=z:G)5R", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("3=z:G)5R", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("3=z:G)5R", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("3=z:G)5R", document2.baseUri());
      assertEquals("3=z:G)5R", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("3=z:G)5R", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(element0, element1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(element1, element0);
      
      Tag tag0 = element1.tag();
      assertNotNull(tag0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("3=z:G)5R", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("3=z:G)5R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("3=z:G)5R", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("3=z:G)5R", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("3=z:G)5R", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("3=z:G)5R", document2.baseUri());
      assertEquals("3=z:G)5R", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("3=z:G)5R", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertTrue(tag0.isBlock());
      assertEquals("head", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals("head", tag0.getName());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(element0, element1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(element1, element0);
      
      Document document3 = (Document)document1.text("ohW#$=rWnSL.ZpvF");
      assertNotNull(document3);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("3=z:G)5R", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("3=z:G)5R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("3=z:G)5R", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("3=z:G)5R", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("3=z:G)5R", document3.location());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("3=z:G)5R", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      Set<String> set0 = element1.classNames();
      assertNotNull(set0);
      assertFalse(set0.contains("3=z:G)5R"));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("3=z:G)5R", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("3=z:G)5R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("3=z:G)5R", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("3=z:G)5R", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("3=z:G)5R", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("3=z:G)5R", document2.baseUri());
      assertEquals("3=z:G)5R", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("3=z:G)5R", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(element0, element1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(element1, element0);
      
      Element element2 = element0.classNames(set0);
      assertNotNull(element2);
      assertFalse(set0.contains("3=z:G)5R"));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("3=z:G)5R", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("3=z:G)5R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("3=z:G)5R", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("3=z:G)5R", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("3=z:G)5R", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("3=z:G)5R", document2.baseUri());
      assertEquals("3=z:G)5R", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("3=z:G)5R", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals("3=z:G)5R", element2.baseUri());
      assertEquals("body", element2.tagName());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertTrue(element2.isBlock());
      assertEquals(1, element2.childNodeSize());
      assertEquals("body", element2.nodeName());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      
      Map<String, String> map0 = element2.dataset();
      assertNotNull(map0);
      assertFalse(set0.contains("3=z:G)5R"));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("3=z:G)5R", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("3=z:G)5R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("3=z:G)5R", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("3=z:G)5R", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("3=z:G)5R", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("3=z:G)5R", document2.baseUri());
      assertEquals("3=z:G)5R", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("3=z:G)5R", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals("3=z:G)5R", element2.baseUri());
      assertEquals("body", element2.tagName());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertTrue(element2.isBlock());
      assertEquals(1, element2.childNodeSize());
      assertEquals("body", element2.nodeName());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      
      Document document4 = (Document)document1.empty();
      assertNotNull(document4);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("3=z:G)5R", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("3=z:G)5R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("3=z:G)5R", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("3=z:G)5R", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.hasParent());
      assertEquals("3=z:G)5R", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("3=z:G)5R", document4.location());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document3);
      
      Document document5 = (Document)document1.appendTo(document0);
      assertNotNull(document5);
      assertFalse(parser0.isTrackErrors());
      assertEquals("3=z:G)5R", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("3=z:G)5R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("3=z:G)5R", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("3=z:G)5R", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertTrue(document5.hasParent());
      assertEquals(1, document5.childNodeSize());
      assertEquals("3=z:G)5R", document5.location());
      assertEquals(Document.QuirksMode.quirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals("3=z:G)5R", document5.baseUri());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document5, document2);
      assertSame(document5, document4);
      assertSame(document5, document1);
      assertSame(document5, document0);
      assertSame(document5, document3);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.prepend("Children collection to be inserted must not be null.");
      assertNotNull(document1);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsMatchingText("Children collection to be inserted must not be null.");
      assertNotNull(elements0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertSame(document0, document1);
      
      String string0 = element0.outerHtml();
      assertNotNull(string0);
      assertEquals("<body></body>", string0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertSame(document0, document1);
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertSame(document0, document1);
      
      CDataNode cDataNode0 = new CDataNode("7y|wpy");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      Element element1 = document1.nextElementSibling();
      assertNull(element1);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string1 = document0.wholeText();
      assertNotNull(string1);
      assertEquals("Children collection to be inserted must not be null.", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertSame(document0, document1);
      
      Node[] nodeArray0 = new Node[9];
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTrackErrors(8);
      assertNotNull(parser1);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document2 = parser1.parseInput("Children collection to be inserted must not be null.", "_om.gSb{nqCiRTw^(K!");
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("_om.gSb{nqCiRTw^(K!", document2.baseUri());
      assertEquals("_om.gSb{nqCiRTw^(K!", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      nodeArray0[0] = (Node) document2;
      nodeArray0[1] = (Node) null;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) null;
      nodeArray0[4] = (Node) document1;
      nodeArray0[5] = (Node) element0;
      nodeArray0[6] = (Node) element0;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) document1;
      // Undeclared exception!
      try { 
        document0.insertChildren((-1284), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.prepend("Children collection to be inserted must not be null.");
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsMatchingText("Children collection to be inserted must not be null.");
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertSame(document0, document1);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertSame(document0, document1);
      
      String string0 = element0.outerHtml();
      assertNotNull(string0);
      assertEquals("<body></body>", string0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertSame(document0, document1);
      
      Element element1 = element0.appendElement("Children collection to be inserted must not be null.");
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("children collection to be inserted must not be null.", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("children collection to be inserted must not be null.", element1.nodeName());
      assertSame(document0, document1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertSame(document0, document1);
      
      String string1 = element0.data();
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(element0.equals((Object)element1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertSame(document0, document1);
      assertNotSame(element0, element1);
      
      String string2 = document1.val();
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element2 = document1.getElementById("blockquote");
      assertNull(element2);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      int int0 = 1871;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      assertNotNull(document_OutputSettings1);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      assertNotNull(document_OutputSettings2);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      assertNotNull(document_OutputSettings3);
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        document_OutputSettings3.charset("N@");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // N@
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.attr((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = new Document("body");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", document0.location());
      
      String string0 = document0.toString();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", document0.location());
      
      String string1 = document0.wholeText();
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", document0.location());
      
      Document document1 = document0.ownerDocument();
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", document0.location());
      assertEquals("body", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("body", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Set<String> set0 = document1.classNames();
      assertNotNull(set0);
      assertFalse(set0.contains(string1));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", document0.location());
      assertEquals("body", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("body", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.classNames(set0);
      assertNotNull(document2);
      assertFalse(set0.contains(string1));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", document0.location());
      assertEquals("body", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("body", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("body", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("body", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Tag tag0 = Tag.valueOf("body");
      assertNotNull(tag0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals("body", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      
      Elements elements0 = document0.parents();
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", document0.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      String string2 = document1.val();
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", document0.location());
      assertEquals("body", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("body", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      Element element0 = document0.prependElement("body");
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", document0.location());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      Document document3 = (Document)document0.empty();
      assertNotNull(document3);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", document0.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("body", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("body", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      
      Element element1 = element0.selectFirst("bdo");
      assertNull(element1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", document0.location());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      Elements elements1 = document0.getElementsContainingText((String) null);
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", document0.location());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must notbe null.", "Children collection to be inserted must notbe null.");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("Children collection to be inserted must notbe null.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must notbe null.", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = Element.preserveWhitespace(document1);
      assertFalse(boolean0);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("Children collection to be inserted must notbe null.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must notbe null.", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      document1.appendElement("_B1#r96FDP.");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "tgxtare=";
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("tgxtare=");
      assertNotNull(pattern0);
      assertEquals("tgxtare=", pattern0.toString());
      assertEquals("tgxtare=", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      
      String string1 = "#root";
      Elements elements0 = document1.getElementsByAttributeValueNot("#root", "tgxtare=");
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.reparentChild(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.location());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      document0.is("#root");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Document.createShell("shT9/c");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("shT9/c", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("shT9/c", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("tgxtare=", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("tgxtare=");
      assertNotNull(pattern0);
      assertEquals("tgxtare=", pattern0.toString());
      assertEquals("tgxtare=", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      
      document1.reparentChild(document0);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("tgxtare=", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("3=z:w)5R");
      assertNotNull(document2);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("tgxtare=", document2.location());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("tgxtare=", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Element element0 = new Element("3=z:w)5R");
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("3=z:w)5R", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("3=z:w)5R", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      
      String string0 = document2.cssSelector();
      assertNotNull(string0);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("tgxtare=", document2.location());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("tgxtare=", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      // Undeclared exception!
      document2.outerHtml();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Document.createShell("shT9/c");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("shT9/c", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("shT9/c", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.toggleClass("java.lang.string@0000000071");
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("shT9/c", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("shT9/c", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("shT9/c", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("shT9/c", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.cssSelector();
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("shT9/c", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("shT9/c", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertSame(document0, document1);
      
      Document document2 = (Document)document0.empty();
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("shT9/c", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("shT9/c", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("shT9/c", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("shT9/c", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Document.createShell("tgxtare=");
      assertNotNull(document0);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.text("Children collection to be inserted must not be null.");
      assertNotNull(document1);
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.appendTo(document0);
      assertNotNull(document2);
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      // Undeclared exception!
      document1.prepend("{MEk<j`Ktr 4nOd<MV");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Document.createShell("tgxtare=");
      assertNotNull(document0);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Elements elements0 = document0.getElementsByClass("tgxtare=");
      assertNotNull(elements0);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Document document1 = new Document("tgxtare=");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      
      Set<String> set0 = document1.classNames();
      assertNotNull(set0);
      assertFalse(set0.contains("tgxtare="));
      assertFalse(document1.equals((Object)document0));
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document1.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.prepend("Children collection to be inserted must not be null.");
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsMatchingText("Children collection to be inserted must not be null.");
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertSame(document0, document1);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertSame(document0, document1);
      
      String string0 = element0.outerHtml();
      assertNotNull(string0);
      assertEquals("<body></body>", string0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertSame(document0, document1);
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertSame(document0, document1);
      
      String string1 = document0.data();
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertSame(document0, document1);
      
      String string2 = document1.val();
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element1 = element0.getElementById("%^mA");
      assertNull(element1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parse("#root", "org.jsoup.nodes.Element$1");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.jsoup.nodes.Element$1");
      assertFalse(boolean0);
      
      Elements elements0 = document0.nextElementSiblings();
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Document document1 = (Document)document0.traverse(nodeVisitor0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertEquals("#root", string0);
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertSame(document0, document1);
      
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Document document2 = (Document)document0.filter(nodeFilter0);
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements1 = document0.getElementsByTag("#root");
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = document0.getElementsContainingText("body");
      assertNotNull(elements2);
      assertFalse(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      
      Pattern pattern0 = Pattern.compile("org.jsoup.select.evaluator$containsdata");
      assertNotNull(pattern0);
      assertEquals("org.jsoup.select.evaluator$containsdata", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("org.jsoup.select.evaluator$containsdata", pattern0.pattern());
      
      Elements elements3 = document0.getElementsByAttributeValueMatching("#root", pattern0);
      assertNotNull(elements3);
      assertTrue(elements3.equals((Object)elements0));
      assertFalse(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements2));
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.select.evaluator$containsdata", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("org.jsoup.select.evaluator$containsdata", pattern0.pattern());
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements2);
      
      // Undeclared exception!
      try { 
        document0.after("org.jsoup.nodes.Element$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      
      Element element0 = new Element("textarea");
      assertNotNull(element0);
      assertEquals("", element0.baseUri());
      assertEquals("textarea", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertFalse(element0.hasParent());
      
      Element element1 = element0.val("textarea");
      assertNotNull(element1);
      assertEquals("", element0.baseUri());
      assertEquals("textarea", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("textarea", element1.tagName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("textarea", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string0 = element0.outerHtml();
      assertNotNull(string0);
      assertEquals("<textarea>textarea</textarea>", string0);
      assertEquals("", element0.baseUri());
      assertEquals("textarea", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = new Document("applet");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("applet", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("applet", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.removeClass("applet");
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("applet", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("applet", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("applet", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("applet", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      List<Node> list0 = document1.childNodesCopy();
      assertNotNull(list0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("applet", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("applet", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("applet", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("applet", document1.baseUri());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = new Document("applet");
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals("applet", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("applet", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      
      Document document3 = (Document)document0.toggleClass(" > ");
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("applet", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("applet", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("applet", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("applet", document3.location());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      
      boolean boolean0 = document3.hasClass(" > ");
      assertFalse(boolean0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("applet", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("applet", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("applet", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("applet", document3.location());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      
      Element element0 = document0.shallowClone();
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("applet", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("applet", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(element0.isBlock());
      assertEquals("#root", element0.tagName());
      assertEquals("applet", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#root", element0.nodeName());
      assertFalse(element0.hasParent());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("applet", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("applet", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, attributes0.size());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      
      Document document4 = (Document)document2.prependChild(document1);
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("applet", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("applet", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("applet", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("applet", document1.baseUri());
      assertEquals("applet", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("applet", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document4.hasParent());
      assertEquals("applet", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("applet", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = new Document("");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#root");
      assertFalse(boolean0);
      
      String string0 = document0.html();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, attributes0.size());
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string1 = document0.nodeName();
      assertNotNull(string1);
      assertEquals("#document", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      String string2 = document0.outerHtml();
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      List<Node> list1 = document0.ensureChildNodes();
      assertNotNull(list1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText(";A-HCL<i;k8K3");
      assertNotNull(evaluator_ContainsOwnText0);
      
      String string3 = document0.data();
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      Document document1 = Document.createShell("mRL/D'z(rzpVX");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("mRL/D'z(rzpVX", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("mRL/D'z(rzpVX", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document0.appendChild(document1);
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("mRL/D'z(rzpVX", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("mRL/D'z(rzpVX", document1.baseUri());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      
      String string4 = document2.id();
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("mRL/D'z(rzpVX", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("mRL/D'z(rzpVX", document1.baseUri());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.prepend("Children collection to be inserted must not be null.");
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsMatchingText("Children collection to be inserted must not be null.");
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertSame(document0, document1);
      
      Pattern pattern0 = Pattern.compile("html");
      assertNotNull(pattern0);
      assertEquals("html", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("html", pattern0.toString());
      
      Document document2 = (Document)document1.appendText("select");
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(3, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      boolean boolean0 = element0.is("head");
      assertFalse(boolean0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      String string0 = document0.wholeText();
      assertNotNull(string0);
      assertEquals("Children collection to be inserted must not be null.select", string0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      Elements elements1 = document0.getElementsMatchingText("org.jsoup.parser.XmlTreeBuilder$1");
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      Document document3 = (Document)document1.append("Children collection to be inserted must not be null.");
      assertNotNull(document3);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(4, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(4, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(4, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.createElement("tgxtare=");
      assertNotNull(element0);
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("tgxtare=", element0.nodeName());
      assertEquals("tgxtare=", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      
      Pattern pattern0 = Pattern.compile("tgxtare=");
      assertNotNull(pattern0);
      assertEquals("tgxtare=", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("tgxtare=", pattern0.toString());
      
      Elements elements0 = element0.getElementsByAttributeValueMatching("tgxtare=", pattern0);
      assertNotNull(elements0);
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("tgxtare=", element0.nodeName());
      assertEquals("tgxtare=", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tgxtare=", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("tgxtare=", pattern0.toString());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Element element1 = element0.val(":contains");
      assertNotNull(element1);
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("tgxtare=", element0.nodeName());
      assertEquals("tgxtare=", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("tgxtare=", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("tgxtare=", element1.baseUri());
      assertEquals("tgxtare=", element1.nodeName());
      assertFalse(element1.isBlock());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string0 = element0.outerHtml();
      assertNotNull(string0);
      assertEquals("<tgxtare= value=\":contains\"></tgxtare=>", string0);
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("tgxtare=", element0.nodeName());
      assertEquals("tgxtare=", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertSame(element0, element1);
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Elements elements1 = document0.getElementsMatchingText(" ");
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotSame(elements1, elements0);
      
      Element element2 = document0.body();
      assertNotNull(element2);
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element2.nodeName());
      assertEquals("body", element2.tagName());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals("tgxtare=", element2.baseUri());
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      
      String string1 = element2.outerHtml();
      assertNotNull(string1);
      assertEquals("<body>\n tgxtare=\n</body>", string1);
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element2.nodeName());
      assertEquals("body", element2.tagName());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals("tgxtare=", element2.baseUri());
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      
      List<Node> list1 = document0.ensureChildNodes();
      assertNotNull(list1);
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertSame(list1, list0);
      
      String string2 = document0.wholeText();
      assertNotNull(string2);
      assertEquals("tgxtare=", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Elements elements2 = element2.siblingElements();
      assertNotNull(elements2);
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element2.nodeName());
      assertEquals("body", element2.tagName());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals("tgxtare=", element2.baseUri());
      assertEquals(1, elements2.size());
      assertFalse(elements2.isEmpty());
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      Document document1 = (Document)document0.val("tgxtare=");
      assertNotNull(document1);
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string3 = element2.text();
      assertNotNull(string3);
      assertEquals("tgxtare=", string3);
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element2.nodeName());
      assertEquals("body", element2.tagName());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals("tgxtare=", element2.baseUri());
      assertSame(document0, document1);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("tgxtare=");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("tgxtare=", pattern0.pattern());
      assertEquals("tgxtare=", pattern0.toString());
      
      document1.reparentChild(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("3=z:w)5R");
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("tgxtare=", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertEquals("tgxtare=", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Elements elements0 = document1.siblingElements();
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      CDataNode cDataNode0 = new CDataNode("tgxtare=");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      Attributes attributes1 = cDataNode0.attributes();
      assertNotNull(attributes1);
      assertFalse(attributes1.equals((Object)attributes0));
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes1.size());
      assertNotSame(attributes1, attributes0);
      
      boolean boolean0 = document1.hasText();
      assertTrue(boolean0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.location());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      Elements elements1 = document0.getElementsByIndexEquals(126);
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      
      Document document1 = (Document)document0.prepend("Children collection to be inserted must not be null.");
      assertNotNull(document1);
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsMatchingText("Children collection to be inserted must not be null.");
      assertNotNull(elements0);
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertSame(document0, document1);
      
      Document document2 = (Document)document1.text("extended");
      assertNotNull(document2);
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertFalse(document2.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      String string0 = element0.cssSelector();
      assertNotNull(string0);
      assertEquals("html > body", string0);
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      List<Node> list0 = document1.ensureChildNodes();
      assertNotNull(list0);
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("html > body");
      assertNotNull(evaluator_ContainsOwnText0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("tgxtare=");
      assertNotNull(pattern0);
      assertEquals("tgxtare=", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("tgxtare=", pattern0.toString());
      
      int int0 = document1.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.getElementsByAttributeValueNot("#root", "tgxtare=");
      assertNotNull(elements0);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.reparentChild(document1);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      List<DataNode> list0 = document1.dataNodes();
      assertNotNull(list0);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern1 = Pattern.compile("", 0);
      assertNotNull(pattern1);
      assertFalse(pattern1.equals((Object)pattern0));
      assertEquals("", pattern1.toString());
      assertEquals("", pattern1.pattern());
      assertEquals(0, pattern1.flags());
      assertNotSame(pattern1, pattern0);
      
      Elements elements1 = document1.getElementsMatchingOwnText(pattern0);
      assertNotNull(elements1);
      assertFalse(pattern0.equals((Object)pattern1));
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertEquals("tgxtare=", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("tgxtare=", pattern0.toString());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(pattern0, pattern1);
      assertNotSame(elements1, elements0);
      
      Document document2 = document1.clone();
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("tgxtare=", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("tgxtare=", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Document document3 = Document.createShell("#root");
      assertNotNull(document3);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertEquals("#root", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      assertNotNull(document_OutputSettings1);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document document4 = document3.outputSettings(document_OutputSettings1);
      assertNotNull(document4);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertEquals("#root", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#root", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals("#root", document4.baseUri());
      assertFalse(document4.isBlock());
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document5 = document4.parser(parser0);
      assertNotNull(document5);
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.isBlock());
      assertEquals("#root", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertEquals("#root", document5.location());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#root", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals("#root", document4.baseUri());
      assertFalse(document4.isBlock());
      assertNotSame(document5, document0);
      assertSame(document5, document3);
      assertSame(document5, document4);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document5);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document4, document2);
      assertSame(document4, document5);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      
      Element element0 = document5.prependElement("#root");
      assertNotNull(element0);
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.isBlock());
      assertEquals("#root", document5.baseUri());
      assertEquals(2, document5.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertEquals("#root", document5.location());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertTrue(element0.hasParent());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#root", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("#root", element0.baseUri());
      assertEquals("#root", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertFalse(document4.hasParent());
      assertEquals(2, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#root", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals("#root", document4.baseUri());
      assertFalse(document4.isBlock());
      assertNotSame(document5, document0);
      assertSame(document5, document3);
      assertSame(document5, document4);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document5);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document4, document2);
      assertSame(document4, document5);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      
      Element element1 = document0.firstElementSibling();
      assertNull(element1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document5));
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotSame(document0, document5);
      
      String string0 = document5.wholeText();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.isBlock());
      assertEquals("#root", document5.baseUri());
      assertEquals(2, document5.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertEquals("#root", document5.location());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertFalse(document4.hasParent());
      assertEquals(2, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#root", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals("#root", document4.baseUri());
      assertFalse(document4.isBlock());
      assertNotSame(document5, document0);
      assertSame(document5, document3);
      assertSame(document5, document4);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document5);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document4, document2);
      assertSame(document4, document5);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      int int0 = document1.elementSiblingIndex();
      assertEquals(0, int0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.getElementsByAttributeValueNot("#root", "tgxtare=");
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document0.reparentChild(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document1.nodeName();
      assertNotNull(string0);
      assertEquals("#document", string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements1 = document0.getElementsByAttributeValueEnding("m)E", "Insert position out of bounds.");
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = document1.getElementsByClass("<!doctype");
      assertNotNull(elements2);
      assertFalse(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      
      Element element0 = document1.firstElementSibling();
      assertNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("tgxtare=");
      assertNotNull(pattern0);
      assertEquals("tgxtare=", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("tgxtare=", pattern0.toString());
      
      Element element0 = document0.prependElement("tgxtare=");
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tgxtare=", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("tgxtare=", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("tgxtare=", element0.baseUri());
      assertTrue(element0.hasParent());
      assertSame(document0, document1);
      
      int int0 = document1.elementSiblingIndex();
      assertEquals(0, int0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      List<TextNode> list0 = element0.textNodes();
      assertNotNull(list0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tgxtare=", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("tgxtare=", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("tgxtare=", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(document0, document1);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      
      Set<String> set0 = document1.classNames();
      assertNotNull(set0);
      assertFalse(set0.contains("tgxtare="));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.classNames(set0);
      assertNotNull(document2);
      assertFalse(set0.contains("tgxtare="));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals("tgxtare=", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("tgxtare=", document2.location());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Element element1 = element0.after("tgxtare=");
      assertNotNull(element1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tgxtare=", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("tgxtare=", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("tgxtare=", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("tgxtare=", element1.baseUri());
      assertEquals("tgxtare=", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("tgxtare=", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Tag tag0 = Tag.valueOf("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.");
      assertNotNull(tag0);
      assertEquals("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertEquals("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      
      Elements elements0 = document1.parents();
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      String string0 = document1.val();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      Element element2 = document0.prependElement("X");
      assertNotNull(element2);
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertEquals(4, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", element2.baseUri());
      assertEquals("x", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertEquals("x", element2.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      
      Element element3 = element0.empty();
      assertNotNull(element3);
      assertFalse(element3.equals((Object)element2));
      assertFalse(element0.equals((Object)element2));
      assertEquals("tgxtare=", element3.baseUri());
      assertEquals("tgxtare=", element3.nodeName());
      assertEquals(1, element3.siblingIndex());
      assertEquals(0, element3.childNodeSize());
      assertEquals("tgxtare=", element3.tagName());
      assertTrue(element3.hasParent());
      assertFalse(element3.isBlock());
      assertEquals(4, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tgxtare=", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("tgxtare=", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("tgxtare=", element0.baseUri());
      assertTrue(element0.hasParent());
      assertNotSame(element3, element2);
      assertSame(element3, element0);
      assertSame(element3, element1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertNotSame(element0, element2);
      assertSame(element0, element3);
      
      Element element4 = element2.firstElementSibling();
      assertNotNull(element4);
      assertFalse(element4.equals((Object)element0));
      assertFalse(element4.equals((Object)element3));
      assertFalse(element4.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element3));
      assertFalse(element2.equals((Object)element1));
      assertEquals(4, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", element4.baseUri());
      assertFalse(element4.isBlock());
      assertEquals("x", element4.tagName());
      assertEquals("x", element4.nodeName());
      assertEquals(0, element4.siblingIndex());
      assertTrue(element4.hasParent());
      assertEquals(0, element4.childNodeSize());
      assertEquals("tgxtare=", element2.baseUri());
      assertEquals("x", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertEquals("x", element2.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(element4, element0);
      assertNotSame(element4, element3);
      assertSame(element4, element2);
      assertNotSame(element4, element1);
      assertSame(element2, element4);
      assertNotSame(element2, element0);
      assertNotSame(element2, element3);
      assertNotSame(element2, element1);
      
      Elements elements1 = element2.nextElementSiblings();
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element3));
      assertFalse(element2.equals((Object)element1));
      assertEquals(4, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, elements1.size());
      assertFalse(elements1.isEmpty());
      assertEquals("tgxtare=", element2.baseUri());
      assertEquals("x", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertEquals("x", element2.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertSame(element2, element4);
      assertNotSame(element2, element0);
      assertNotSame(element2, element3);
      assertNotSame(element2, element1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      assertNotNull(document0);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.createElement("textarea");
      assertNotNull(element0);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("textarea", element0.tagName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.nodeName());
      assertEquals("textarea", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      
      String string0 = element0.outerHtml();
      assertNotNull(string0);
      assertEquals("<textarea></textarea>", string0);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("textarea", element0.tagName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.nodeName());
      assertEquals("textarea", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("select", "select");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, int0);
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("select");
      assertNotNull(stringReader0);
      
      Document document1 = parser0.parseInput((Reader) stringReader0, "CwB2:8wbOB!");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CwB2:8wbOB!", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("CwB2:8wbOB!", document1.location());
      assertNotSame(document1, document0);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("select", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertNotSame(document0, document1);
      
      Element element1 = document0.body();
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals("select", element1.baseUri());
      assertTrue(element1.hasParent());
      assertNotSame(document0, document1);
      assertNotSame(element1, element0);
      
      int int1 = element1.elementSiblingIndex();
      assertEquals(1, int1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(int1 == int0);
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals("select", element1.baseUri());
      assertTrue(element1.hasParent());
      assertNotSame(document0, document1);
      assertNotSame(element1, element0);
      
      List<TextNode> list0 = document1.textNodes();
      assertNotNull(list0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CwB2:8wbOB!", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("CwB2:8wbOB!", document1.location());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotSame(document1, document0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      
      Set<String> set0 = document0.classNames();
      assertNotNull(set0);
      assertFalse(set0.contains("select"));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotSame(document0, document1);
      
      Element element2 = element0.classNames(set0);
      assertNotNull(element2);
      assertFalse(set0.contains("select"));
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("select", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("head", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertEquals("select", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertNotSame(document0, document1);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      
      Element element3 = element2.after("7y|Wpy");
      assertNotNull(element3);
      assertFalse(set0.contains("7y|Wpy"));
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element1));
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("select", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("head", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertEquals("select", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element3.childNodeSize());
      assertEquals("select", element3.baseUri());
      assertTrue(element3.isBlock());
      assertEquals("head", element3.tagName());
      assertEquals(0, element3.siblingIndex());
      assertTrue(element3.hasParent());
      assertEquals("head", element3.nodeName());
      assertNotSame(document0, document1);
      assertSame(element0, element2);
      assertSame(element0, element3);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element3);
      assertSame(element2, element0);
      assertSame(element3, element0);
      assertNotSame(element3, element1);
      assertSame(element3, element2);
      
      String string0 = document0.wholeText();
      assertNotNull(string0);
      assertEquals("7y|Wpyselect", string0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertNotSame(document0, document1);
      
      Element element4 = element3.appendText("CwB2:8wbOB!");
      assertNotNull(element4);
      assertFalse(set0.contains("7y|Wpy"));
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element4.equals((Object)element1));
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("select", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("head", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals("select", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals("select", element3.baseUri());
      assertTrue(element3.isBlock());
      assertEquals(1, element3.childNodeSize());
      assertEquals("head", element3.tagName());
      assertEquals(0, element3.siblingIndex());
      assertTrue(element3.hasParent());
      assertEquals("head", element3.nodeName());
      assertEquals("head", element4.tagName());
      assertEquals("select", element4.baseUri());
      assertEquals(1, element4.childNodeSize());
      assertEquals("head", element4.nodeName());
      assertEquals(0, element4.siblingIndex());
      assertTrue(element4.hasParent());
      assertTrue(element4.isBlock());
      assertNotSame(document0, document1);
      assertSame(element0, element2);
      assertSame(element0, element3);
      assertSame(element0, element4);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element3);
      assertSame(element2, element4);
      assertSame(element2, element0);
      assertSame(element3, element0);
      assertSame(element3, element4);
      assertNotSame(element3, element1);
      assertSame(element3, element2);
      assertSame(element4, element0);
      assertSame(element4, element2);
      assertNotSame(element4, element1);
      assertSame(element4, element3);
      
      Element element5 = element3.prependElement("?");
      assertNotNull(element5);
      assertFalse(set0.contains("7y|Wpy"));
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element5.equals((Object)element0));
      assertFalse(element5.equals((Object)element3));
      assertFalse(element5.equals((Object)element4));
      assertFalse(element5.equals((Object)element1));
      assertFalse(element5.equals((Object)element2));
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("select", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.childNodeSize());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("head", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(2, element2.childNodeSize());
      assertEquals("select", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals("select", element3.baseUri());
      assertTrue(element3.isBlock());
      assertEquals("head", element3.tagName());
      assertEquals(0, element3.siblingIndex());
      assertTrue(element3.hasParent());
      assertEquals("head", element3.nodeName());
      assertEquals(2, element3.childNodeSize());
      assertEquals("?", element5.tagName());
      assertTrue(element5.hasParent());
      assertEquals(0, element5.siblingIndex());
      assertFalse(element5.isBlock());
      assertEquals("?", element5.nodeName());
      assertEquals(0, element5.childNodeSize());
      assertEquals("select", element5.baseUri());
      assertNotSame(document0, document1);
      assertNotSame(element0, element5);
      assertSame(element0, element2);
      assertSame(element0, element3);
      assertSame(element0, element4);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element3);
      assertSame(element2, element4);
      assertNotSame(element2, element5);
      assertSame(element2, element0);
      assertSame(element3, element0);
      assertSame(element3, element4);
      assertNotSame(element3, element1);
      assertNotSame(element3, element5);
      assertSame(element3, element2);
      assertNotSame(element5, element0);
      assertNotSame(element5, element3);
      assertNotSame(element5, element4);
      assertNotSame(element5, element1);
      assertNotSame(element5, element2);
      
      // Undeclared exception!
      try { 
        document1.after((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      int int0 = document1.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      StringReader stringReader0 = new StringReader("#root");
      assertNotNull(stringReader0);
      
      Document document2 = parser1.parseInput((Reader) stringReader0, "T/E d5T7-M+rGh");
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("T/E d5T7-M+rGh", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("T/E d5T7-M+rGh", document2.baseUri());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Element element0 = document1.head();
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      
      Element element1 = document0.prependElement("#root");
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(element1.equals((Object)element0));
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("#root", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("#root", element1.tagName());
      assertEquals("tgxtare=", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(element1, element0);
      
      int int1 = document2.elementSiblingIndex();
      assertEquals(0, int1);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertTrue(int1 == int0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("T/E d5T7-M+rGh", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("T/E d5T7-M+rGh", document2.baseUri());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      List<TextNode> list0 = element1.textNodes();
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(element1.equals((Object)element0));
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("#root", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("#root", element1.tagName());
      assertEquals("tgxtare=", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(element1, element0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      
      Set<String> set0 = element0.classNames();
      assertNotNull(set0);
      assertFalse(set0.contains("#root"));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(element0.equals((Object)element1));
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      
      Document document3 = (Document)document0.classNames(set0);
      assertNotNull(document3);
      assertFalse(set0.contains("#root"));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(element0.equals((Object)element1));
      assertEquals("tgxtare=", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals("tgxtare=", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(element0, element1);
      
      Element element2 = element1.after("tgxtare=");
      assertNotNull(element2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element1.equals((Object)element0));
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertEquals("#root", element2.tagName());
      assertEquals("tgxtare=", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("#root", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("#root", element1.tagName());
      assertEquals("tgxtare=", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(element2, element0);
      assertSame(element2, element1);
      assertSame(element1, element2);
      assertNotSame(element1, element0);
      
      Tag tag0 = Tag.valueOf("CwB2:8wbOB!");
      assertNotNull(tag0);
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertEquals("CwB2:8wbOB!", tag0.toString());
      assertEquals("CwB2:8wbOB!", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      
      Document document4 = Parser.parse("]NrGb*cXTO-6p", "CwB2:8wbOB!");
      assertNotNull(document4);
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertEquals("CwB2:8wbOB!", document4.baseUri());
      assertEquals("CwB2:8wbOB!", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      
      Elements elements0 = document4.parents();
      assertNotNull(elements0);
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertEquals("CwB2:8wbOB!", document4.baseUri());
      assertEquals("CwB2:8wbOB!", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      
      String string0 = document4.val();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertEquals("CwB2:8wbOB!", document4.baseUri());
      assertEquals("CwB2:8wbOB!", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      
      Element element3 = document0.prependElement("7y|Wpy");
      assertNotNull(element3);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element2));
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(4, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(element3.hasParent());
      assertFalse(element3.isBlock());
      assertEquals("7y|wpy", element3.tagName());
      assertEquals("tgxtare=", element3.baseUri());
      assertEquals(0, element3.siblingIndex());
      assertEquals(0, element3.childNodeSize());
      assertEquals("7y|wpy", element3.nodeName());
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(element3, element1);
      assertNotSame(element3, element0);
      assertNotSame(element3, element2);
      
      Element element4 = element2.empty();
      assertNotNull(element4);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element3));
      assertFalse(element4.equals((Object)element3));
      assertFalse(element4.equals((Object)element0));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element3));
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(4, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", element2.nodeName());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertEquals("#root", element2.tagName());
      assertEquals("tgxtare=", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals("tgxtare=", element4.baseUri());
      assertFalse(element4.isBlock());
      assertEquals(1, element4.siblingIndex());
      assertTrue(element4.hasParent());
      assertEquals(0, element4.childNodeSize());
      assertEquals("#root", element4.tagName());
      assertEquals("#root", element4.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("#root", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("#root", element1.tagName());
      assertEquals("tgxtare=", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(element2, element0);
      assertSame(element2, element4);
      assertNotSame(element2, element3);
      assertSame(element2, element1);
      assertNotSame(element4, element3);
      assertSame(element4, element1);
      assertNotSame(element4, element0);
      assertSame(element4, element2);
      assertSame(element1, element2);
      assertNotSame(element1, element0);
      assertSame(element1, element4);
      assertNotSame(element1, element3);
      
      // Undeclared exception!
      try { 
        document2.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      
      Document document1 = (Document)document0.prepend("Children collection to be inserted must not be null.");
      assertNotNull(document1);
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = new Document("Children collection to be inserted must not be null.");
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      
      Elements elements0 = document1.getElementsByAttributeValueContaining("Children collection to be inserted must not be null.", "s+");
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      
      String string0 = document0.absUrl(" -wzv.D^~ssD$7MRy,v");
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.equals((Object)document2));
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      
      boolean boolean1 = true;
      Document document3 = (Document)document0.attr(" -wzv.D^~ssD$7MRy,v", true);
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      
      Node node0 = document2.previousSibling();
      assertNull(node0);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      
      Elements elements1 = document0.previousElementSiblings();
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document2));
      assertTrue(elements1.equals((Object)elements0));
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertFalse(set0.contains("Children collection to be inserted must not be null."));
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Document document4 = (Document)document2.classNames(set0);
      assertNotNull(document4);
      assertFalse(set0.contains("Children collection to be inserted must not be null."));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("#root", document4.tagName());
      assertEquals("Children collection to be inserted must not be null.", document4.location());
      assertFalse(document4.hasParent());
      assertEquals(0, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      
      Elements elements2 = document2.parents();
      assertNotNull(elements2);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      String string1 = document4.html();
      assertNotNull(string1);
      assertFalse(set0.contains("Children collection to be inserted must not be null."));
      assertEquals("", string1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("#root", document4.tagName());
      assertEquals("Children collection to be inserted must not be null.", document4.location());
      assertFalse(document4.hasParent());
      assertEquals(0, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null, "Children collection to be inserted must not be null.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("select", "select");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, int0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("select");
      assertNotNull(stringReader0);
      
      Document document1 = parser0.parseInput((Reader) stringReader0, "CwB2:8wbOB!");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertEquals("CwB2:8wbOB!", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("CwB2:8wbOB!", document1.location());
      assertFalse(document1.hasParent());
      assertNotSame(document1, document0);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", element0.tagName());
      assertEquals("select", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertNotSame(document0, document1);
      
      Element element1 = document0.prependElement("7y|Wpy");
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals("select", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("7y|wpy", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("7y|wpy", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("select", element1.baseUri());
      assertNotSame(document0, document1);
      assertNotSame(element1, element0);
      
      int int1 = element1.elementSiblingIndex();
      assertEquals(0, int1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertTrue(int1 == int0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals("select", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("7y|wpy", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("7y|wpy", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("select", element1.baseUri());
      assertNotSame(document0, document1);
      assertNotSame(element1, element0);
      
      List<TextNode> list0 = document1.textNodes();
      assertNotNull(list0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertEquals("CwB2:8wbOB!", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("CwB2:8wbOB!", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotSame(document1, document0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      
      Set<String> set0 = document0.classNames();
      assertNotNull(set0);
      assertFalse(set0.contains("CwB2:8wbOB!"));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals("select", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotSame(document0, document1);
      
      Element element2 = element0.classNames(set0);
      assertNotNull(element2);
      assertFalse(set0.contains("CwB2:8wbOB!"));
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals("select", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", element0.tagName());
      assertEquals("select", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertEquals("head", element2.tagName());
      assertEquals(0, element2.childNodeSize());
      assertEquals("select", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.nodeName());
      assertNotSame(document0, document1);
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      
      Element element3 = element2.after("7y|Wpy");
      assertNotNull(element3);
      assertFalse(set0.contains("CwB2:8wbOB!"));
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element1));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals("select", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", element0.tagName());
      assertEquals("select", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertEquals("head", element2.tagName());
      assertEquals(0, element2.childNodeSize());
      assertEquals("select", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.nodeName());
      assertEquals(0, element3.childNodeSize());
      assertEquals("head", element3.tagName());
      assertTrue(element3.isBlock());
      assertTrue(element3.hasParent());
      assertEquals("head", element3.nodeName());
      assertEquals(0, element3.siblingIndex());
      assertEquals("select", element3.baseUri());
      assertNotSame(document0, document1);
      assertNotSame(element0, element1);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertSame(element2, element3);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertSame(element3, element0);
      assertNotSame(element3, element1);
      assertSame(element3, element2);
      
      Tag tag0 = Tag.valueOf("CwB2:8wbOB!");
      assertNotNull(tag0);
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("CwB2:8wbOB!", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals("CwB2:8wbOB!", tag0.toString());
      
      Elements elements0 = document0.parents();
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals("select", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotSame(document0, document1);
      
      String string0 = element1.val();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element3));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals("select", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("7y|wpy", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("7y|wpy", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("select", element1.baseUri());
      assertNotSame(document0, document1);
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      assertNotSame(element1, element3);
      
      Document document2 = (Document)document0.toggleClass("}:Q\"#]50kA%Qs/gLU");
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.hasParent());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("select", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals("select", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      
      String string1 = element2.ownText();
      assertNotNull(string1);
      assertFalse(set0.contains(string0));
      assertEquals("", string1);
      assertFalse(document0.equals((Object)document1));
      assertTrue(string1.equals((Object)string0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals("select", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", element0.tagName());
      assertEquals("select", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertEquals("head", element2.tagName());
      assertEquals(0, element2.childNodeSize());
      assertEquals("select", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.nodeName());
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(element0, element1);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertSame(element2, element3);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      
      Elements elements1 = document0.children();
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements1.equals((Object)elements0));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals("select", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(elements1.isEmpty());
      assertEquals(2, elements1.size());
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = document0.getElementsContainingText("YwhcP=p6D~");
      assertNotNull(elements2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals("select", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Document.createShell("tgxtare=");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren((-3376), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, attributes0.size());
      
      Document document1 = (Document)document0.prepend("tgxtare=");
      assertNotNull(document1);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsMatchingText(":prev*%s");
      assertNotNull(elements0);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertSame(document0, document1);
      
      String string0 = document1.outerHtml();
      assertNotNull(string0);
      assertEquals("tgxtare=\n<html>\n <head></head>\n <body>\n  tgxtare=\n </body>\n</html>", string0);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertSame(document0, document1);
      
      String string1 = document1.val();
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element1 = document0.prependElement("id");
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("tgxtare=", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("id", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("id", element1.tagName());
      assertSame(document0, document1);
      assertNotSame(element1, element0);
      
      Element element2 = element1.firstElementSibling();
      assertNotNull(element2);
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("tgxtare=", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("id", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("id", element1.tagName());
      assertEquals("id", element2.nodeName());
      assertTrue(element2.hasParent());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("id", element2.tagName());
      assertEquals("tgxtare=", element2.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertSame(document0, document1);
      assertSame(element1, element2);
      assertNotSame(element1, element0);
      assertSame(element2, element1);
      assertNotSame(element2, element0);
      
      int int0 = element1.childNodeSize();
      assertEquals(0, int0);
      assertFalse(element1.equals((Object)element0));
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("tgxtare=", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("id", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("id", element1.tagName());
      assertSame(document0, document1);
      assertSame(element1, element2);
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = Document.createShell("InFrameset");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("InFrameset", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("InFrameset", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.text("InFrameset");
      assertNotNull(document2);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("InFrameset", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("InFrameset", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("InFrameset", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("InFrameset", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      String string0 = document2.cssSelector();
      assertNotNull(string0);
      assertEquals("#root", string0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("InFrameset", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("InFrameset", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("InFrameset", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("InFrameset", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      String string1 = document1.outerHtml();
      assertNotNull(string1);
      assertEquals("<html>\n <head></head>\n <body>\n  InFrameset\n </body>\n</html>", string1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("InFrameset", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("InFrameset", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("Children collection to be inserted must not be null.");
      assertNotNull(evaluator_ContainsOwnText0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Element element0 = new Element("nohref");
      assertNotNull(element0);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("nohref", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("nohref", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      
      Elements elements0 = element0.getElementsByAttributeValueContaining("nohref", "nohref");
      assertNotNull(elements0);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("nohref", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("nohref", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      String string0 = element0.cssSelector();
      assertNotNull(string0);
      assertEquals("nohref", string0);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("nohref", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("nohref", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Document.createShell("shT9/c");
      assertNotNull(document0);
      assertEquals("shT9/c", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("shT9/c", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.toggleClass("shT9/c");
      assertNotNull(document1);
      assertEquals("shT9/c", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("shT9/c", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("shT9/c", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("shT9/c", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.hasClass("shT9/c");
      assertFalse(boolean0);
      assertEquals("shT9/c", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("shT9/c", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Document document0 = new Document("head");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("head", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Elements elements0 = document0.getElementsByAttributeValueContaining("head", "head");
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("head", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      String string0 = document0.absUrl(" -wzv.D^~ssD$7MRy,v");
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("head", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = (Document)document0.attr("ScriptDataEscapedDash", false);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("head", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("head", document1.location());
      assertEquals("head", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Node node0 = document1.previousSibling();
      assertNull(node0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("head", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("head", document1.location());
      assertEquals("head", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements1 = document0.previousElementSiblings();
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("head", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertFalse(set0.contains("head"));
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Document document2 = (Document)document1.classNames(set0);
      assertNotNull(document2);
      assertFalse(set0.contains("head"));
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("head", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("head", document1.location());
      assertEquals("head", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(document2.hasParent());
      assertEquals("head", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("head", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements2 = document0.parents();
      assertNotNull(elements2);
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("head", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      
      String string1 = document1.html();
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("head", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("head", document1.location());
      assertEquals("head", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      Document document3 = (Document)document0.toggleClass(" -wzv.D^~ssD$7MRy,v");
      assertNotNull(document3);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("head", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("head", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("head", document3.location());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      
      String string2 = document2.ownText();
      assertNotNull(string2);
      assertFalse(set0.contains(string0));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("head", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("head", document1.location());
      assertEquals("head", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(document2.hasParent());
      assertEquals("head", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("head", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      
      Elements elements3 = document0.children();
      assertNotNull(elements3);
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements1));
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("head", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements2);
      
      Elements elements4 = document1.getElementsContainingText("6kkP+cJ%g");
      assertNotNull(elements4);
      assertTrue(elements4.equals((Object)elements1));
      assertTrue(elements4.equals((Object)elements0));
      assertTrue(elements4.equals((Object)elements2));
      assertTrue(elements4.equals((Object)elements3));
      assertTrue(elements4.isEmpty());
      assertEquals(0, elements4.size());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("head", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("head", document1.location());
      assertEquals("head", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertNotSame(elements4, elements3);
      assertNotSame(elements4, elements0);
      assertNotSame(elements4, elements1);
      assertNotSame(elements4, elements2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = (Document)document0.prepend("Children collection to be inserted must not be null.");
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsMatchingText("Children collection to be inserted must not be null.");
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertSame(document0, document1);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertSame(document0, document1);
      
      Element element1 = element0.attr("Children collection to be inserted must not be null.", "org.jsoup.nodes.Element$1");
      assertNotNull(element1);
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string0 = element0.outerHtml();
      assertNotNull(string0);
      assertEquals("<body children collection to be inserted must not be null.=\"org.jsoup.nodes.Element$1\"></body>", string0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertSame(document0, document1);
      assertSame(element0, element1);
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertSame(document0, document1);
      
      String string1 = document0.val();
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertSame(document0, document1);
      
      Document document2 = (Document)document0.val("Children collection to be inserted must not be null.");
      assertNotNull(document2);
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      String string2 = document1.className();
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      Elements elements1 = document1.getElementsByAttribute("Children collection to be inserted must not be null.");
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = "tgxtare=";
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      String string1 = null;
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(document0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Document document1 = (Document)document0.addClass("org.jsoup.select.evaluator$containsdata");
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document1;
      DataNode dataNode0 = new DataNode("head");
      assertNotNull(dataNode0);
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      
      nodeArray0[2] = (Node) dataNode0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      nodeArray0[5] = (Node) document1;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(document0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Document document1 = Parser.parseBodyFragmentRelaxed("vX j", "vX j");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals("vX j", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("vX j", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertNotSame(document1, document0);
      
      DataNode dataNode0 = new DataNode("vX j");
      assertNotNull(dataNode0);
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertNotNull(document2);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertEquals("vX j", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("vX j", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("vX j", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("vX j", document2.baseUri());
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Node[] nodeArray0 = new Node[0];
      Document document3 = (Document)document0.insertChildren((-1), nodeArray0);
      assertNotNull(document3);
      assertEquals(0, nodeArray0.length);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("tgxtare=", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("tgxtare=", document3.baseUri());
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document0);
      
      Element element0 = document3.nextElementSibling();
      assertNull(element0);
      assertEquals(0, nodeArray0.length);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("tgxtare=", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("tgxtare=", document3.baseUri());
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = new Document("");
      assertNotNull(document0);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string0 = document0.nodeName();
      assertNotNull(string0);
      assertEquals("#document", string0);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = new Document("");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      
      Elements elements0 = document1.getElementsByAttributeValueMatching("AfterDoctypeName", "org.jsoup.select.Evaluator$AttributeKeyPair");
      assertNotNull(elements0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotSame(document1, document0);
      
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      // Undeclared exception!
      try { 
        document0.insertChildren(9, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      int int0 = document1.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      attributes0.remove("code");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, attributes0.size());
      assertSame(document0, document1);
      
      Elements elements0 = document1.getElementsByAttributeValueNot("#root", "tgxtare=");
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.addClass("body");
      assertNotNull(document2);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("tgxtare=", document2.location());
      assertEquals("tgxtare=", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Element element0 = new Element("#root");
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", element0.nodeName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#root", element0.tagName());
      
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document2;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document2;
      nodeArray0[5] = (Node) document1;
      nodeArray0[6] = (Node) document0;
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("xP6opL=V-;l", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertEquals("xp6opl=v-;l", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("xp6opl=v-;l", tag0.toString());
      assertFalse(tag0.isBlock());
      
      Element element1 = new Element(tag0, "xP6opL=V-;l", attributes0);
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, attributes0.size());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertEquals("xp6opl=v-;l", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("xp6opl=v-;l", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals("xP6opL=V-;l", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("xp6opl=v-;l", element1.nodeName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("xp6opl=v-;l", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      
      Elements elements1 = element1.getElementsByAttributeValueMatching("<UND\"{i0K", "br");
      assertNotNull(elements1);
      assertFalse(element1.equals((Object)element0));
      assertFalse(elements1.equals((Object)elements0));
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, attributes0.size());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertEquals("xp6opl=v-;l", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("xp6opl=v-;l", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals("xP6opL=V-;l", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("xp6opl=v-;l", element1.nodeName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("xp6opl=v-;l", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(element1, element0);
      assertNotSame(elements1, elements0);
      
      nodeArray0[7] = (Node) element1;
      // Undeclared exception!
      try { 
        document1.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "tgxtare=";
      Document document0 = Document.createShell("tgxtare=");
      assertNotNull(document0);
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      
      String string1 = Node.EmptyString;
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren(31, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      
      Document document1 = (Document)document0.prepend("Children collection to be inserted must not be null.");
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      CDataNode cDataNode0 = new CDataNode("Children collection to be inserted must not be null.");
      assertNotNull(cDataNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertSame(document0, document1);
      
      Elements elements0 = document1.getElementsByAttributeValueNot("Children collection to be inserted must not be null.", "class");
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document0.reparentChild(cDataNode0);
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertTrue(cDataNode0.hasParent());
      assertSame(document0, document1);
      
      Document document2 = (Document)document1.addClass("[_{MU");
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertFalse(document2.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Element element0 = new Element("class");
      assertNotNull(element0);
      assertFalse(element0.isBlock());
      assertEquals("class", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("class", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      
      Pattern pattern0 = Pattern.compile("Iq@?m`.s&u", 28);
      assertNotNull(pattern0);
      assertEquals("Iq@?m`.s&u", pattern0.toString());
      assertEquals(28, pattern0.flags());
      assertEquals("Iq@?m`.s&u", pattern0.pattern());
      
      Elements elements1 = document1.getElementsMatchingOwnText(pattern0);
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("Iq@?m`.s&u", pattern0.toString());
      assertEquals(28, pattern0.flags());
      assertEquals("Iq@?m`.s&u", pattern0.pattern());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(elements1, elements0);
      
      Document document3 = document0.clone();
      assertNotNull(document3);
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      assertNotNull(tag0);
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals("textarea", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isFormListed());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.formatAsBlock());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Element element1 = new Element(tag0, "p#kkLbvT+,gl=?A`qC", attributes0);
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals("textarea", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isFormListed());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.formatAsBlock());
      assertEquals(0, attributes0.size());
      assertFalse(element1.isBlock());
      assertEquals("textarea", element1.nodeName());
      assertEquals("textarea", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("p#kkLbvT+,gl=?A`qC", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      
      boolean boolean0 = element1.is("textarea");
      assertTrue(boolean0);
      assertFalse(element1.equals((Object)element0));
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals("textarea", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isFormListed());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.formatAsBlock());
      assertEquals(0, attributes0.size());
      assertFalse(element1.isBlock());
      assertEquals("textarea", element1.nodeName());
      assertEquals("textarea", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("p#kkLbvT+,gl=?A`qC", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertNotSame(element1, element0);
      
      Elements elements2 = document3.getElementsMatchingText("r>6V1?y");
      assertNotNull(elements2);
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      
      // Undeclared exception!
      try { 
        document0.after((Node) document2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Za -}yGD^d;G0RN", "Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.createElement("Children collection to be inserted must not be null.");
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.tagName());
      assertEquals("Children collection to be inserted must not be null.", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      
      int int0 = element0.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.tagName());
      assertEquals("Children collection to be inserted must not be null.", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("Children collection to be inserted must not be null.");
      assertNotNull(stringReader0);
      
      Document document1 = parser0.parseInput((Reader) stringReader0, "CwB2:8wbOB!");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertEquals("CwB2:8wbOB!", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CwB2:8wbOB!", document1.baseUri());
      assertNotSame(document1, document0);
      
      Element element1 = document0.head();
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertNotSame(document0, document1);
      assertNotSame(element1, element0);
      
      Element element2 = element1.prependElement("Za -}yGD^d;G0RN");
      assertNotNull(element2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", element2.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertEquals("za -}ygd^d;g0rn", element2.tagName());
      assertTrue(element2.hasParent());
      assertFalse(element2.isBlock());
      assertEquals("za -}ygd^d;g0rn", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertNotSame(document0, document1);
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      
      int int1 = element2.elementSiblingIndex();
      assertEquals(0, int1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertTrue(int1 == int0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", element2.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertEquals("za -}ygd^d;g0rn", element2.tagName());
      assertTrue(element2.hasParent());
      assertFalse(element2.isBlock());
      assertEquals("za -}ygd^d;g0rn", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertNotSame(document0, document1);
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      
      List<TextNode> list0 = document1.textNodes();
      assertNotNull(list0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertEquals("CwB2:8wbOB!", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CwB2:8wbOB!", document1.baseUri());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotSame(document1, document0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      
      Set<String> set0 = document1.classNames();
      assertNotNull(set0);
      assertFalse(set0.contains("Za -}yGD^d;G0RN"));
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertEquals("CwB2:8wbOB!", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CwB2:8wbOB!", document1.baseUri());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotSame(document1, document0);
      
      Element element3 = element0.append("org.jsoup.nodes.Element");
      assertNotNull(element3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element3.equals((Object)element2));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.tagName());
      assertEquals("Children collection to be inserted must not be null.", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element3.isBlock());
      assertEquals(0, element3.siblingIndex());
      assertEquals(1, element3.childNodeSize());
      assertFalse(element3.hasParent());
      assertEquals("Children collection to be inserted must not be null.", element3.baseUri());
      assertEquals("Children collection to be inserted must not be null.", element3.nodeName());
      assertEquals("Children collection to be inserted must not be null.", element3.tagName());
      assertNotSame(document0, document1);
      assertSame(element0, element3);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element3, element1);
      assertSame(element3, element0);
      assertNotSame(element3, element2);
      
      Element element4 = element0.classNames(set0);
      assertNotNull(element4);
      assertFalse(set0.contains("Za -}yGD^d;G0RN"));
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element4.equals((Object)element1));
      assertFalse(element4.equals((Object)element2));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.tagName());
      assertEquals("Children collection to be inserted must not be null.", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertFalse(parser0.isTrackErrors());
      assertEquals("CwB2:8wbOB!", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CwB2:8wbOB!", document1.baseUri());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals("Children collection to be inserted must not be null.", element4.nodeName());
      assertEquals(1, element4.childNodeSize());
      assertEquals(0, element4.siblingIndex());
      assertFalse(element4.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element4.baseUri());
      assertEquals("Children collection to be inserted must not be null.", element4.tagName());
      assertFalse(element4.hasParent());
      assertNotSame(document0, document1);
      assertSame(element0, element3);
      assertNotSame(element0, element2);
      assertSame(element0, element4);
      assertNotSame(element0, element1);
      assertNotSame(document1, document0);
      assertSame(element4, element0);
      assertNotSame(element4, element1);
      assertSame(element4, element3);
      assertNotSame(element4, element2);
      
      Tag tag0 = Tag.valueOf("Tag name must not be empty.");
      assertNotNull(tag0);
      assertFalse(tag0.isData());
      assertEquals("Tag name must not be empty.", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("Tag name must not be empty.", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      
      Elements elements0 = document1.parents();
      assertNotNull(elements0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertEquals("CwB2:8wbOB!", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CwB2:8wbOB!", document1.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotSame(document1, document0);
      
      String string0 = document1.val();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertEquals("CwB2:8wbOB!", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CwB2:8wbOB!", document1.baseUri());
      assertNotSame(document1, document0);
      
      Document document2 = Parser.parse("Children collection to be inserted must not be null.", "O");
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("O", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("O", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Element element5 = document2.prependElement("CwB2:8wbOB!");
      assertNotNull(element5);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(element5.equals((Object)element3));
      assertFalse(element5.equals((Object)element1));
      assertFalse(element5.equals((Object)element0));
      assertFalse(element5.equals((Object)element4));
      assertFalse(element5.equals((Object)element2));
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("O", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("O", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, element5.childNodeSize());
      assertTrue(element5.hasParent());
      assertEquals("cwb2:8wbob!", element5.tagName());
      assertEquals(0, element5.siblingIndex());
      assertEquals("cwb2:8wbob!", element5.nodeName());
      assertFalse(element5.isBlock());
      assertEquals("O", element5.baseUri());
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(element5, element3);
      assertNotSame(element5, element1);
      assertNotSame(element5, element0);
      assertNotSame(element5, element4);
      assertNotSame(element5, element2);
      
      Document document3 = (Document)document2.empty();
      assertNotNull(document3);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("O", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("O", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("O", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals("O", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      
      List<Node> list1 = document3.childNodesCopy();
      assertNotNull(list1);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("O", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("O", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("O", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals("O", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      
      Element element6 = element1.firstElementSibling();
      assertNotNull(element6);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(element6.equals((Object)element3));
      assertFalse(element6.equals((Object)element2));
      assertFalse(element6.equals((Object)element4));
      assertFalse(element6.equals((Object)element5));
      assertFalse(element6.equals((Object)element0));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element3));
      assertFalse(element1.equals((Object)element4));
      assertFalse(element1.equals((Object)element5));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element6.nodeName());
      assertTrue(element6.isBlock());
      assertEquals(1, element6.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", element6.baseUri());
      assertEquals(0, element6.siblingIndex());
      assertTrue(element6.hasParent());
      assertEquals("head", element6.tagName());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(element6, element3);
      assertNotSame(element6, element2);
      assertSame(element6, element1);
      assertNotSame(element6, element4);
      assertNotSame(element6, element5);
      assertNotSame(element6, element0);
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      assertNotSame(element1, element3);
      assertNotSame(element1, element4);
      assertNotSame(element1, element5);
      assertSame(element1, element6);
      
      Elements elements1 = document0.children();
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = element0.nextElementSiblings();
      assertNotNull(elements2);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(element0.equals((Object)element6));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element5));
      assertFalse(element0.equals((Object)element1));
      assertTrue(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.tagName());
      assertEquals("Children collection to be inserted must not be null.", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(element0, element6);
      assertSame(element0, element3);
      assertNotSame(element0, element2);
      assertSame(element0, element4);
      assertNotSame(element0, element5);
      assertNotSame(element0, element1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("UKcqQYLG(#s#'4_1", "d?\")KU4?(:@{E9]1_A");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("d?\")KU4?(:@{E9]1_A", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("d?\")KU4?(:@{E9]1_A", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching((String) null, "jlBOL^^PZ:~Ib(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: jlBOL^^PZ:~Ib(
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Tag tag0 = Tag.valueOf("b@)vY8+Q^6#}K}<]*Q>");
      assertNotNull(tag0);
      assertFalse(tag0.isKnownTag());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", tag0.getName());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      
      CDataNode cDataNode0 = new CDataNode("select");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "l:sE&z?9w", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isKnownTag());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", tag0.getName());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", formElement0.nodeName());
      assertEquals("l:sE&z?9w", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      
      Element element0 = new Element(tag0, "b@)vY8+Q^6#}K}<]*Q>");
      assertNotNull(element0);
      assertFalse(tag0.isKnownTag());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", tag0.getName());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", element0.tagName());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", element0.nodeName());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", element0.baseUri());
      
      FormElement formElement1 = formElement0.addElement(element0);
      assertNotNull(formElement1);
      assertFalse(tag0.isKnownTag());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", tag0.getName());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", formElement0.nodeName());
      assertEquals("l:sE&z?9w", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", element0.tagName());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", element0.nodeName());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", element0.baseUri());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", formElement1.nodeName());
      assertEquals("l:sE&z?9w", formElement1.baseUri());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", formElement1.tagName());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      
      // Undeclared exception!
      try { 
        formElement0.getElementsByAttributeValueMatching("l:sE&z?9w", "b@)vY8+Q^6#}K}<]*Q>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: b@)vY8+Q^6#}K}<]*Q>
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Element element0 = new Element("#root");
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", element0.nodeName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      
      Pattern pattern0 = Pattern.compile("tgxtare=");
      assertNotNull(pattern0);
      assertEquals("tgxtare=", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("tgxtare=", pattern0.toString());
      
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("yFW%(+'");
      assertNotNull(evaluator_ContainsOwnText0);
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      Element element1 = element0.doClone((Node) null);
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", element0.nodeName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("#root", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("#root", element1.tagName());
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Element element0 = new Element("tgxtare=");
      assertNotNull(element0);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tgxtare=", element0.tagName());
      assertEquals("tgxtare=", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      
      String string0 = element0.val();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tgxtare=", element0.tagName());
      assertEquals("tgxtare=", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      
      Element element1 = element0.val("tgxtare=");
      assertNotNull(element1);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tgxtare=", element0.tagName());
      assertEquals("tgxtare=", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("tgxtare=", element1.nodeName());
      assertEquals("tgxtare=", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Map<String, String> map0 = element0.dataset();
      assertNotNull(map0);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tgxtare=", element0.tagName());
      assertEquals("tgxtare=", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "o1%0N%;xS4l");
      assertFalse(boolean0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("{b}b", "o1%0N%;xS4l");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("o1%0N%;xS4l", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("o1%0N%;xS4l", document0.location());
      
      Element element0 = document0.createElement("{b}b");
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("o1%0N%;xS4l", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("o1%0N%;xS4l", document0.location());
      assertFalse(element0.hasParent());
      assertEquals("{b}b", element0.nodeName());
      assertEquals("o1%0N%;xS4l", element0.baseUri());
      assertEquals("{b}b", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      
      Map<String, String> map0 = document0.dataset();
      assertNotNull(map0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("o1%0N%;xS4l", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("o1%0N%;xS4l", document0.location());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Element element1 = element0.prependText("{b}b");
      assertNotNull(element1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("o1%0N%;xS4l", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("o1%0N%;xS4l", document0.location());
      assertFalse(element0.hasParent());
      assertEquals("{b}b", element0.nodeName());
      assertEquals("o1%0N%;xS4l", element0.baseUri());
      assertEquals("{b}b", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("{b}b", element1.nodeName());
      assertEquals("o1%0N%;xS4l", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("{b}b", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string0 = element0.data();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("o1%0N%;xS4l", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("o1%0N%;xS4l", document0.location());
      assertFalse(element0.hasParent());
      assertEquals("{b}b", element0.nodeName());
      assertEquals("o1%0N%;xS4l", element0.baseUri());
      assertEquals("{b}b", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertSame(element0, element1);
      
      boolean boolean1 = document0.hasText();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("o1%0N%;xS4l", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("o1%0N%;xS4l", document0.location());
      
      Elements elements0 = document0.getElementsMatchingOwnText("html");
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("o1%0N%;xS4l", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("o1%0N%;xS4l", document0.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Tag tag0 = Tag.valueOf("b@)vY8+Q^6#}K}<]*Q>");
      assertNotNull(tag0);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      
      CDataNode cDataNode0 = new CDataNode("select");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "l:sE&z?9w", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertEquals("l:sE&z?9w", formElement0.baseUri());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      
      Element element0 = new Element(tag0, "b@)vY8+Q^6#}K}<]*Q>");
      assertNotNull(element0);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", element0.tagName());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", element0.nodeName());
      
      FormElement formElement1 = formElement0.addElement(element0);
      assertNotNull(formElement1);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertEquals("l:sE&z?9w", formElement0.baseUri());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", element0.tagName());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", element0.nodeName());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", formElement1.tagName());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", formElement1.nodeName());
      assertEquals("l:sE&z?9w", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      
      Elements elements0 = formElement1.getElementsByAttributeValueMatching("v", "select");
      assertNotNull(elements0);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertEquals("l:sE&z?9w", formElement0.baseUri());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", element0.tagName());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", element0.nodeName());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", formElement1.tagName());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("b@)vY8+Q^6#}K}<]*Q>", formElement1.nodeName());
      assertEquals("l:sE&z?9w", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = "tgxtare=";
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertEquals(0, attributes0.size());
      
      Document document1 = new Document("tgxtare=");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("tgxtare=", document1.location());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      
      Pattern pattern0 = Pattern.compile("tgxtare=");
      assertNotNull(pattern0);
      assertEquals("tgxtare=", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("tgxtare=", pattern0.pattern());
      
      int int0 = document1.elementSiblingIndex();
      assertEquals(0, int0);
      assertFalse(document1.equals((Object)document0));
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("tgxtare=", document1.location());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotSame(document1, document0);
      
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(document0));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Document document2 = (Document)document1.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      assertNotNull(document2);
      assertFalse(linkedHashSet0.contains(document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("tgxtare=", document1.location());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("tgxtare=", document2.location());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("tgxtare=", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      // Undeclared exception!
      try { 
        document2.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("select", "select");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("select");
      assertNotNull(stringReader0);
      
      Document document1 = parser0.parseInput((Reader) stringReader0, "CwB2:8wbOB!");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("CwB2:8wbOB!", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CwB2:8wbOB!", document1.location());
      assertFalse(document1.hasParent());
      assertNotSame(document1, document0);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document1));
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("select", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertNotSame(document0, document1);
      
      Element element1 = document0.prependElement("7y|Wpy");
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7y|wpy", element1.nodeName());
      assertEquals("select", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("7y|wpy", element1.tagName());
      assertNotSame(document0, document1);
      assertNotSame(element1, element0);
      
      int int1 = element1.elementSiblingIndex();
      assertEquals(0, int1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertTrue(int1 == int0);
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7y|wpy", element1.nodeName());
      assertEquals("select", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("7y|wpy", element1.tagName());
      assertNotSame(document0, document1);
      assertNotSame(element1, element0);
      
      List<TextNode> list0 = document1.textNodes();
      assertNotNull(list0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("CwB2:8wbOB!", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CwB2:8wbOB!", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotSame(document1, document0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      
      Set<String> set0 = document0.classNames();
      assertNotNull(set0);
      assertFalse(set0.contains("select"));
      assertFalse(document0.equals((Object)document1));
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotSame(document0, document1);
      
      Element element2 = element0.classNames(set0);
      assertNotNull(element2);
      assertFalse(set0.contains("select"));
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("select", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.tagName());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertEquals("select", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertNotSame(document0, document1);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      
      Element element3 = element2.after("7y|Wpy");
      assertNotNull(element3);
      assertFalse(set0.contains("select"));
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element1));
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("select", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.tagName());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertEquals("select", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals("head", element3.nodeName());
      assertTrue(element3.hasParent());
      assertTrue(element3.isBlock());
      assertEquals("head", element3.tagName());
      assertEquals(0, element3.childNodeSize());
      assertEquals("select", element3.baseUri());
      assertEquals(0, element3.siblingIndex());
      assertNotSame(document0, document1);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element3);
      assertSame(element2, element0);
      assertSame(element3, element0);
      assertNotSame(element3, element1);
      assertSame(element3, element2);
      
      Tag tag0 = Tag.valueOf("CwB2:8wbOB!");
      assertNotNull(tag0);
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("CwB2:8wbOB!", tag0.toString());
      assertEquals("CwB2:8wbOB!", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      
      Elements elements0 = document0.parents();
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotSame(document0, document1);
      
      String string0 = element1.val();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element3));
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7y|wpy", element1.nodeName());
      assertEquals("select", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("7y|wpy", element1.tagName());
      assertNotSame(document0, document1);
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(element1, element3);
      
      Element element4 = document0.prependElement(":matches(");
      assertNotNull(element4);
      assertFalse(element4.equals((Object)element2));
      assertFalse(element4.equals((Object)element0));
      assertFalse(element4.equals((Object)element3));
      assertFalse(element4.equals((Object)element1));
      assertFalse(document0.equals((Object)document1));
      assertEquals("select", element4.baseUri());
      assertEquals(":matches(", element4.nodeName());
      assertEquals(":matches(", element4.tagName());
      assertFalse(element4.isBlock());
      assertEquals(0, element4.siblingIndex());
      assertTrue(element4.hasParent());
      assertEquals(0, element4.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotSame(element4, element2);
      assertNotSame(element4, element0);
      assertNotSame(element4, element3);
      assertNotSame(element4, element1);
      assertNotSame(document0, document1);
      
      Document document2 = (Document)document0.empty();
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("select", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      
      Element element5 = element0.firstElementSibling();
      assertNotNull(element5);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element5.equals((Object)element1));
      assertFalse(element5.equals((Object)element4));
      assertFalse(element0.equals((Object)element4));
      assertFalse(element0.equals((Object)element1));
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element5.hasParent());
      assertEquals(0, element5.siblingIndex());
      assertEquals("select", element5.baseUri());
      assertEquals(0, element5.childNodeSize());
      assertEquals("head", element5.nodeName());
      assertEquals("head", element5.tagName());
      assertTrue(element5.isBlock());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("select", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(element5, element1);
      assertSame(element5, element0);
      assertNotSame(element5, element4);
      assertSame(element5, element3);
      assertSame(element5, element2);
      assertSame(element0, element5);
      assertSame(element0, element3);
      assertNotSame(element0, element4);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      
      Elements elements1 = element5.children();
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element5.equals((Object)element1));
      assertFalse(element5.equals((Object)element4));
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(element0.equals((Object)element4));
      assertFalse(element0.equals((Object)element1));
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element5.hasParent());
      assertEquals(0, element5.siblingIndex());
      assertEquals("select", element5.baseUri());
      assertEquals(0, element5.childNodeSize());
      assertEquals("head", element5.nodeName());
      assertEquals("head", element5.tagName());
      assertTrue(element5.isBlock());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("select", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(element5, element1);
      assertSame(element5, element0);
      assertNotSame(element5, element4);
      assertSame(element5, element3);
      assertSame(element5, element2);
      assertNotSame(elements1, elements0);
      assertSame(element0, element5);
      assertSame(element0, element3);
      assertNotSame(element0, element4);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      
      Elements elements2 = element4.nextElementSiblings();
      assertNotNull(elements2);
      assertFalse(element4.equals((Object)element2));
      assertFalse(element4.equals((Object)element0));
      assertFalse(element4.equals((Object)element5));
      assertFalse(element4.equals((Object)element3));
      assertFalse(element4.equals((Object)element1));
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertEquals("select", element4.baseUri());
      assertEquals(":matches(", element4.nodeName());
      assertEquals(":matches(", element4.tagName());
      assertFalse(element4.isBlock());
      assertEquals(0, element4.siblingIndex());
      assertTrue(element4.hasParent());
      assertEquals(0, element4.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertNotSame(element4, element2);
      assertNotSame(element4, element0);
      assertNotSame(element4, element5);
      assertNotSame(element4, element3);
      assertNotSame(element4, element1);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Children collection to be inserted must notbe null.", "itemscope");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("itemscope", document0.location());
      assertEquals("itemscope", document0.baseUri());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("itemscope", document0.location());
      assertEquals("itemscope", document0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("itemscope", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      
      String string0 = element0.cssSelector();
      assertNotNull(string0);
      assertEquals("html > body", string0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("itemscope", document0.location());
      assertEquals("itemscope", document0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("itemscope", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      
      Elements elements0 = element0.nextElementSiblings();
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("itemscope", document0.location());
      assertEquals("itemscope", document0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("itemscope", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must notbe null.");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertTrue(document0.hasParent());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("Children collection to be inserted must notbe null.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
      assertTrue(document0.hasParent());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Document.createShell("ZQ7D~*4n(UJ}-r)Pbzc");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ZQ7D~*4n(UJ}-r)Pbzc", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("ZQ7D~*4n(UJ}-r)Pbzc", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Element element0 = document0.getElementById("E3'");
      assertNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ZQ7D~*4n(UJ}-r)Pbzc", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("ZQ7D~*4n(UJ}-r)Pbzc", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("head", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("head", tag0.getName());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("head", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("br", true);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.clone();
      assertNotNull(attributes2);
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      
      Attributes attributes3 = attributes2.put("is", "h4");
      assertNotNull(attributes3);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      
      FormElement formElement0 = new FormElement(tag0, "br", attributes3);
      assertNotNull(formElement0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("head", tag0.getName());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("head", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("br", formElement0.baseUri());
      assertEquals("head", formElement0.tagName());
      assertTrue(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("head", formElement0.nodeName());
      
      Element element0 = formElement0.val("org.jsoup.select.evaluator$containsdata");
      assertNotNull(element0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("head", tag0.getName());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("head", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(3, attributes2.size());
      assertEquals(3, attributes3.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("br", formElement0.baseUri());
      assertEquals("head", formElement0.tagName());
      assertTrue(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("head", formElement0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("br", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertNotSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(formElement0, element0);
      assertSame(element0, formElement0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      String string0 = parseSettings0.normalizeTag("org.jsoup.nodes.Element");
      assertNotNull(string0);
      assertEquals("org.jsoup.nodes.Element", string0);
      
      Tag tag0 = Tag.valueOf("#root", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("#root", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Tag tag1 = Tag.valueOf("#root");
      assertNotNull(tag1);
      assertTrue(tag1.equals((Object)tag0));
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.preserveWhitespace());
      assertEquals("#root", tag1.getName());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isSelfClosing());
      assertEquals("#root", tag1.toString());
      assertFalse(tag1.isBlock());
      assertTrue(tag1.isInline());
      assertFalse(tag1.isData());
      assertFalse(tag1.isKnownTag());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.canContainBlock());
      assertNotSame(tag1, tag0);
      
      Attributes attributes1 = attributes0.put("_Vr9{-Ds'ctO0:C", "html");
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.clone();
      assertNotNull(attributes2);
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      
      Attributes attributes3 = attributes2.put("#root", true);
      assertNotNull(attributes3);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      
      FormElement formElement0 = new FormElement(tag0, "#root", attributes3);
      assertNotNull(formElement0);
      assertTrue(tag0.equals((Object)tag1));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("#root", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("#root", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("#root", formElement0.baseUri());
      assertEquals("#root", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      
      Elements elements0 = formElement0.getElementsByAttributeStarting("_Vr9{-Ds'ctO0:C");
      assertNotNull(elements0);
      assertTrue(tag0.equals((Object)tag1));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("#root", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("#root", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("#root", formElement0.baseUri());
      assertEquals("#root", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotSame(tag0, tag1);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        formElement0.selectFirst("!f");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '!f': unexpected token at '!f'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      assertNotNull(document0);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document1.location());
      assertEquals("textarea", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("textarea");
      assertNotNull(pattern0);
      assertEquals("textarea", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("textarea", pattern0.toString());
      
      Elements elements0 = document0.siblingElements();
      assertNotNull(elements0);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      
      Document document2 = (Document)document1.appendText("rt");
      assertNotNull(document2);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document1.location());
      assertEquals("textarea", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document2.baseUri());
      assertEquals("textarea", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      boolean boolean0 = document1.is("textarea");
      assertFalse(boolean0);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document1.location());
      assertEquals("textarea", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      document1.setSiblingIndex(3637);
      assertEquals("textarea", document0.baseUri());
      assertEquals(3637, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document1.location());
      assertEquals("textarea", document1.baseUri());
      assertEquals(3637, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      String string0 = document1.wholeText();
      assertNotNull(string0);
      assertEquals("textareart", string0);
      assertEquals("textarea", document0.baseUri());
      assertEquals(3637, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document1.location());
      assertEquals("textarea", document1.baseUri());
      assertEquals(3637, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      document0.nodelistChanged();
      assertEquals("textarea", document0.baseUri());
      assertEquals(3637, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      Elements elements1 = document1.getElementsMatchingText("rt");
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("textarea", document0.baseUri());
      assertEquals(3637, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document1.location());
      assertEquals("textarea", document1.baseUri());
      assertEquals(3637, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(elements1, elements0);
      
      Document document3 = (Document)document1.append("rt");
      assertNotNull(document3);
      assertEquals("textarea", document0.baseUri());
      assertEquals(3637, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document1.location());
      assertEquals("textarea", document1.baseUri());
      assertEquals(3637, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals(3, document3.childNodeSize());
      assertEquals(3637, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("textarea", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      Elements elements2 = document0.children();
      assertNotNull(elements2);
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertEquals("textarea", document0.baseUri());
      assertEquals(3637, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(elements2.isEmpty());
      assertEquals(1, elements2.size());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("select", "select");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("select", document0.location());
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, int0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("select", document0.location());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("select");
      assertNotNull(stringReader0);
      
      Document document1 = parser0.parseInput((Reader) stringReader0, "CwB2:8wbOB!");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertEquals("CwB2:8wbOB!", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("CwB2:8wbOB!", document1.baseUri());
      assertNotSame(document1, document0);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("select", document0.location());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("select", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertNotSame(document0, document1);
      
      Element element1 = document0.prependElement("7y|Wpy");
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("select", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("select", document0.location());
      assertTrue(element1.hasParent());
      assertEquals("7y|wpy", element1.tagName());
      assertEquals("7y|wpy", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("select", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertNotSame(document0, document1);
      assertNotSame(element1, element0);
      
      int int1 = element1.elementSiblingIndex();
      assertEquals(0, int1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertTrue(int1 == int0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("select", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("select", document0.location());
      assertTrue(element1.hasParent());
      assertEquals("7y|wpy", element1.tagName());
      assertEquals("7y|wpy", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("select", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertNotSame(document0, document1);
      assertNotSame(element1, element0);
      
      List<TextNode> list0 = document1.textNodes();
      assertNotNull(list0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertEquals("CwB2:8wbOB!", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("CwB2:8wbOB!", document1.baseUri());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotSame(document1, document0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      Set<String> set0 = document0.classNames();
      assertNotNull(set0);
      assertFalse(set0.contains("select"));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("select", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("select", document0.location());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotSame(document0, document1);
      
      Element element2 = element0.classNames(set0);
      assertNotNull(element2);
      assertFalse(set0.contains("select"));
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("select", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("select", document0.location());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("select", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertEquals("select", element2.baseUri());
      assertEquals("head", element2.tagName());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertNotSame(document0, document1);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      
      Element element3 = element2.after("7y|Wpy");
      assertNotNull(element3);
      assertFalse(set0.contains("select"));
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element1));
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("select", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("select", document0.location());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("select", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertEquals("select", element2.baseUri());
      assertEquals("head", element2.tagName());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element3.siblingIndex());
      assertTrue(element3.isBlock());
      assertEquals("select", element3.baseUri());
      assertEquals(0, element3.childNodeSize());
      assertEquals("head", element3.tagName());
      assertEquals("head", element3.nodeName());
      assertTrue(element3.hasParent());
      assertNotSame(document0, document1);
      assertSame(element0, element2);
      assertSame(element0, element3);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertSame(element2, element3);
      assertSame(element3, element2);
      assertNotSame(element3, element1);
      assertSame(element3, element0);
      
      Tag tag0 = Tag.valueOf("CwB2:8wbOB!");
      assertNotNull(tag0);
      assertFalse(tag0.preserveWhitespace());
      assertEquals("CwB2:8wbOB!", tag0.getName());
      assertEquals("CwB2:8wbOB!", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      
      Elements elements0 = element2.siblingElements();
      assertNotNull(elements0);
      assertFalse(set0.contains("7y|Wpy"));
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("select", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("select", document0.location());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("select", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertEquals("select", element2.baseUri());
      assertEquals("head", element2.tagName());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotSame(document0, document1);
      assertSame(element0, element2);
      assertSame(element0, element3);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertSame(element2, element3);
      
      String string0 = element1.val();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element3));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("select", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("select", document0.location());
      assertTrue(element1.hasParent());
      assertEquals("7y|wpy", element1.tagName());
      assertEquals("7y|wpy", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("select", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertNotSame(document0, document1);
      assertNotSame(element1, element3);
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      
      Document document2 = (Document)document0.toggleClass("}:Q\"#]50kA%Qs/gLU");
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document0.equals((Object)document1));
      assertEquals("select", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("select", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("select", document0.location());
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      
      String string1 = element2.ownText();
      assertNotNull(string1);
      assertFalse(set0.contains("}:Q\"#]50kA%Qs/gLU"));
      assertEquals("", string1);
      assertFalse(document0.equals((Object)document1));
      assertTrue(string1.equals((Object)string0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("select", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("select", document0.location());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("select", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertEquals("select", element2.baseUri());
      assertEquals("head", element2.tagName());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(element0, element2);
      assertSame(element0, element3);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertSame(element2, element3);
      
      Elements elements1 = document0.children();
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements1.equals((Object)elements0));
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("select", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("select", document0.location());
      assertEquals(2, elements1.size());
      assertFalse(elements1.isEmpty());
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = document0.getElementsContainingText("YwhcP=p6D~");
      assertNotNull(elements2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("select", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("select", document0.location());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Tag tag0 = Tag.valueOf("frame");
      assertNotNull(tag0);
      assertTrue(tag0.isSelfClosing());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isInline());
      assertEquals("frame", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("frame", tag0.toString());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      
      Element element0 = new Element(tag0, "=IN@Pm<3F2<7iJ");
      assertNotNull(element0);
      assertTrue(tag0.isSelfClosing());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isInline());
      assertEquals("frame", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("frame", tag0.toString());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertFalse(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("frame", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("=IN@Pm<3F2<7iJ", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("frame", element0.tagName());
      
      Elements elements0 = element0.siblingElements();
      assertNotNull(elements0);
      assertTrue(tag0.isSelfClosing());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isInline());
      assertEquals("frame", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("frame", tag0.toString());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertFalse(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("frame", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("=IN@Pm<3F2<7iJ", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("frame", element0.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = "f0@emdapfu";
      Document document0 = new Document("f0@emdapfu");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f0@emdapfu");
      assertFalse(boolean0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Document document3 = document1.clone();
      assertNotNull(document3);
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      
      Document document4 = document3.ownerDocument();
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Document.QuirksMode document_QuirksMode1 = Document.QuirksMode.limitedQuirks;
      Document document5 = document4.quirksMode(document_QuirksMode1);
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertEquals(1, document5.childNodeSize());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document5);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertNotSame(document4, document0);
      assertSame(document4, document5);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertSame(document_QuirksMode1, document_QuirksMode0);
      assertNotSame(document5, document0);
      assertSame(document5, document3);
      assertSame(document5, document4);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      
      Document document6 = (Document)document1.empty();
      assertNotNull(document6);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document6.tagName());
      assertFalse(document6.hasParent());
      assertFalse(document6.isBlock());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#document", document6.nodeName());
      assertEquals(0, document6.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document6.quirksMode());
      assertFalse(document6.updateMetaCharsetElement());
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document1, document4);
      assertSame(document1, document6);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotSame(document6, document3);
      assertSame(document6, document2);
      assertNotSame(document6, document4);
      assertNotSame(document6, document5);
      assertSame(document6, document0);
      assertSame(document6, document1);
      
      Document document7 = (Document)document5.text("f0@emdapfu");
      assertNotNull(document7);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document6));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document6));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertEquals(1, document5.childNodeSize());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document7.isBlock());
      assertEquals("#document", document7.nodeName());
      assertEquals(0, document7.siblingIndex());
      assertEquals("#root", document7.tagName());
      assertEquals(1, document7.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document7.quirksMode());
      assertFalse(document7.updateMetaCharsetElement());
      assertFalse(document7.hasParent());
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document0, document7);
      assertNotSame(document1, document4);
      assertSame(document1, document6);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotSame(document1, document7);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document6);
      assertSame(document3, document5);
      assertSame(document3, document7);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertNotSame(document4, document0);
      assertNotSame(document4, document6);
      assertSame(document4, document5);
      assertSame(document4, document7);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertSame(document_QuirksMode1, document_QuirksMode0);
      assertSame(document5, document7);
      assertNotSame(document5, document0);
      assertSame(document5, document3);
      assertNotSame(document5, document6);
      assertSame(document5, document4);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertSame(document7, document3);
      assertNotSame(document7, document0);
      assertNotSame(document7, document6);
      assertSame(document7, document4);
      assertNotSame(document7, document2);
      assertSame(document7, document5);
      assertNotSame(document7, document1);
      
      String string1 = "org.jsoup.nodes.Element$1";
      Document document8 = (Document)document7.tagName("org.jsoup.nodes.Element$1");
      assertNotNull(document8);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document6));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document6));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document8.equals((Object)document6));
      assertFalse(document8.equals((Object)document1));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document8.equals((Object)document0));
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("org.jsoup.nodes.element$1", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document4.hasParent());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("org.jsoup.nodes.element$1", document4.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertEquals(1, document5.childNodeSize());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.element$1", document5.tagName());
      assertFalse(document7.isBlock());
      assertEquals("#document", document7.nodeName());
      assertEquals(0, document7.siblingIndex());
      assertEquals(1, document7.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document7.quirksMode());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.element$1", document7.tagName());
      assertFalse(document7.hasParent());
      assertFalse(document8.hasParent());
      assertFalse(document8.isBlock());
      assertEquals("org.jsoup.nodes.element$1", document8.tagName());
      assertEquals(0, document8.siblingIndex());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document8.quirksMode());
      assertEquals("#document", document8.nodeName());
      assertEquals(1, document8.childNodeSize());
      assertNotSame(document0, document4);
      assertNotSame(document0, document8);
      assertSame(document0, document1);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document0, document7);
      assertNotSame(document1, document4);
      assertSame(document1, document6);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotSame(document1, document7);
      assertNotSame(document1, document8);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document6);
      assertSame(document3, document5);
      assertSame(document3, document7);
      assertSame(document3, document8);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertNotSame(document4, document0);
      assertNotSame(document4, document6);
      assertSame(document4, document5);
      assertSame(document4, document7);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertSame(document4, document8);
      assertSame(document_QuirksMode1, document_QuirksMode0);
      assertSame(document5, document7);
      assertSame(document5, document8);
      assertNotSame(document5, document0);
      assertSame(document5, document3);
      assertNotSame(document5, document6);
      assertSame(document5, document4);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertSame(document7, document3);
      assertNotSame(document7, document0);
      assertSame(document7, document8);
      assertNotSame(document7, document6);
      assertSame(document7, document4);
      assertNotSame(document7, document2);
      assertSame(document7, document5);
      assertNotSame(document7, document1);
      assertSame(document8, document7);
      assertNotSame(document8, document6);
      assertSame(document8, document5);
      assertSame(document8, document3);
      assertNotSame(document8, document1);
      assertNotSame(document8, document2);
      assertNotSame(document8, document0);
      assertSame(document8, document4);
      
      String string2 = document5.attr("org.jsoup.nodes.Element$1");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document8));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document6));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document6));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("org.jsoup.nodes.element$1", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document4.hasParent());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("org.jsoup.nodes.element$1", document4.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertEquals(1, document5.childNodeSize());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.element$1", document5.tagName());
      assertNotSame(document0, document4);
      assertNotSame(document0, document8);
      assertSame(document0, document1);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document0, document7);
      assertNotSame(document1, document4);
      assertSame(document1, document6);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotSame(document1, document7);
      assertNotSame(document1, document8);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document6);
      assertSame(document3, document5);
      assertSame(document3, document7);
      assertSame(document3, document8);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertNotSame(document4, document0);
      assertNotSame(document4, document6);
      assertSame(document4, document5);
      assertSame(document4, document7);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertSame(document4, document8);
      assertSame(document_QuirksMode1, document_QuirksMode0);
      assertSame(document5, document7);
      assertSame(document5, document8);
      assertNotSame(document5, document0);
      assertSame(document5, document3);
      assertNotSame(document5, document6);
      assertSame(document5, document4);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      
      Elements elements0 = document7.siblingElements();
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document8));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document6));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document6));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document1));
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("org.jsoup.nodes.element$1", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document4.hasParent());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("org.jsoup.nodes.element$1", document4.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertEquals(1, document5.childNodeSize());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.element$1", document5.tagName());
      assertFalse(document7.isBlock());
      assertEquals("#document", document7.nodeName());
      assertEquals(0, document7.siblingIndex());
      assertEquals(1, document7.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document7.quirksMode());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.element$1", document7.tagName());
      assertFalse(document7.hasParent());
      assertNotSame(document0, document4);
      assertNotSame(document0, document8);
      assertSame(document0, document1);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document0, document7);
      assertNotSame(document1, document4);
      assertSame(document1, document6);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotSame(document1, document7);
      assertNotSame(document1, document8);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document6);
      assertSame(document3, document5);
      assertSame(document3, document7);
      assertSame(document3, document8);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertNotSame(document4, document0);
      assertNotSame(document4, document6);
      assertSame(document4, document5);
      assertSame(document4, document7);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertSame(document4, document8);
      assertSame(document_QuirksMode1, document_QuirksMode0);
      assertSame(document5, document7);
      assertSame(document5, document8);
      assertNotSame(document5, document0);
      assertSame(document5, document3);
      assertNotSame(document5, document6);
      assertSame(document5, document4);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertSame(document7, document3);
      assertNotSame(document7, document0);
      assertSame(document7, document8);
      assertNotSame(document7, document6);
      assertSame(document7, document4);
      assertNotSame(document7, document2);
      assertSame(document7, document5);
      assertNotSame(document7, document1);
      
      Elements elements1 = document7.getElementsContainingOwnText("");
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document7));
      assertFalse(elements1.equals((Object)elements0));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document8));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document6));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document6));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(elements1.isEmpty());
      assertEquals(4, elements1.size());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("org.jsoup.nodes.element$1", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document4.hasParent());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("org.jsoup.nodes.element$1", document4.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertEquals(1, document5.childNodeSize());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.element$1", document5.tagName());
      assertFalse(document7.isBlock());
      assertEquals("#document", document7.nodeName());
      assertEquals(0, document7.siblingIndex());
      assertEquals(1, document7.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document7.quirksMode());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.element$1", document7.tagName());
      assertFalse(document7.hasParent());
      assertNotSame(document0, document4);
      assertNotSame(document0, document8);
      assertSame(document0, document1);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document0, document7);
      assertNotSame(elements1, elements0);
      assertNotSame(document1, document4);
      assertSame(document1, document6);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotSame(document1, document7);
      assertNotSame(document1, document8);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document6);
      assertSame(document3, document5);
      assertSame(document3, document7);
      assertSame(document3, document8);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertNotSame(document4, document0);
      assertNotSame(document4, document6);
      assertSame(document4, document5);
      assertSame(document4, document7);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertSame(document4, document8);
      assertSame(document_QuirksMode1, document_QuirksMode0);
      assertSame(document5, document7);
      assertSame(document5, document8);
      assertNotSame(document5, document0);
      assertSame(document5, document3);
      assertNotSame(document5, document6);
      assertSame(document5, document4);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertSame(document7, document3);
      assertNotSame(document7, document0);
      assertSame(document7, document8);
      assertNotSame(document7, document6);
      assertSame(document7, document4);
      assertNotSame(document7, document2);
      assertSame(document7, document5);
      assertNotSame(document7, document1);
      
      String string3 = "h[Xi]WV `I4W0!bA*";
      Document document9 = (Document)document3.attr("", "h[Xi]WV `I4W0!bA*");
      assertNotNull(document9);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document8));
      assertFalse(document9.equals((Object)document0));
      assertFalse(document9.equals((Object)document6));
      assertFalse(document9.equals((Object)document1));
      assertFalse(document9.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.nodes.element$1", document9.tagName());
      assertFalse(document9.hasParent());
      assertEquals(0, document9.siblingIndex());
      assertFalse(document9.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document9.quirksMode());
      assertEquals(1, document9.childNodeSize());
      assertEquals("#document", document9.nodeName());
      assertFalse(document9.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("org.jsoup.nodes.element$1", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertNotSame(document0, document4);
      assertNotSame(document0, document8);
      assertSame(document0, document1);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertNotSame(document0, document9);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document0, document7);
      assertNotSame(document1, document4);
      assertSame(document1, document6);
      assertSame(document1, document2);
      assertNotSame(document1, document9);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotSame(document1, document7);
      assertNotSame(document1, document8);
      assertNotSame(document9, document0);
      assertNotSame(document9, document6);
      assertSame(document9, document5);
      assertSame(document9, document3);
      assertSame(document9, document7);
      assertNotSame(document9, document1);
      assertNotSame(document9, document2);
      assertSame(document9, document8);
      assertSame(document9, document4);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document6);
      assertSame(document3, document5);
      assertSame(document3, document7);
      assertSame(document3, document9);
      assertSame(document3, document8);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      
      Document document10 = (Document)document9.empty();
      assertNotNull(document10);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document9));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document9));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document8));
      assertFalse(document9.equals((Object)document0));
      assertFalse(document9.equals((Object)document6));
      assertFalse(document9.equals((Object)document1));
      assertFalse(document9.equals((Object)document2));
      assertFalse(document10.equals((Object)document0));
      assertFalse(document10.equals((Object)document6));
      assertFalse(document10.equals((Object)document1));
      assertFalse(document10.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.nodes.element$1", document9.tagName());
      assertFalse(document9.hasParent());
      assertEquals(0, document9.siblingIndex());
      assertFalse(document9.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document9.quirksMode());
      assertEquals(0, document9.childNodeSize());
      assertEquals("#document", document9.nodeName());
      assertFalse(document9.updateMetaCharsetElement());
      assertFalse(document10.hasParent());
      assertEquals(0, document10.childNodeSize());
      assertFalse(document10.isBlock());
      assertEquals(0, document10.siblingIndex());
      assertFalse(document10.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document10.quirksMode());
      assertEquals("#document", document10.nodeName());
      assertEquals("org.jsoup.nodes.element$1", document10.tagName());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("org.jsoup.nodes.element$1", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.childNodeSize());
      assertNotSame(document0, document4);
      assertNotSame(document0, document8);
      assertNotSame(document0, document10);
      assertSame(document0, document1);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertNotSame(document0, document9);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document0, document7);
      assertNotSame(document1, document4);
      assertSame(document1, document6);
      assertNotSame(document1, document10);
      assertSame(document1, document2);
      assertNotSame(document1, document9);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotSame(document1, document7);
      assertNotSame(document1, document8);
      assertSame(document9, document10);
      assertNotSame(document9, document0);
      assertNotSame(document9, document6);
      assertSame(document9, document5);
      assertSame(document9, document3);
      assertSame(document9, document7);
      assertNotSame(document9, document1);
      assertNotSame(document9, document2);
      assertSame(document9, document8);
      assertSame(document9, document4);
      assertNotSame(document10, document0);
      assertNotSame(document10, document6);
      assertSame(document10, document9);
      assertSame(document10, document4);
      assertSame(document10, document7);
      assertSame(document10, document3);
      assertSame(document10, document8);
      assertSame(document10, document5);
      assertNotSame(document10, document1);
      assertNotSame(document10, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document10);
      assertNotSame(document3, document6);
      assertSame(document3, document5);
      assertSame(document3, document7);
      assertSame(document3, document9);
      assertSame(document3, document8);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      
      Document document11 = (Document)document1.empty();
      assertNotNull(document11);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document10));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document9));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document10));
      assertFalse(document1.equals((Object)document9));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document8));
      assertFalse(document11.equals((Object)document5));
      assertFalse(document11.equals((Object)document10));
      assertFalse(document11.equals((Object)document4));
      assertFalse(document11.equals((Object)document8));
      assertFalse(document11.equals((Object)document9));
      assertFalse(document11.equals((Object)document3));
      assertFalse(document11.equals((Object)document7));
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document11.tagName());
      assertEquals(0, document11.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document11.quirksMode());
      assertFalse(document11.updateMetaCharsetElement());
      assertFalse(document11.hasParent());
      assertFalse(document11.isBlock());
      assertEquals("#document", document11.nodeName());
      assertEquals(0, document11.siblingIndex());
      assertNotSame(document0, document4);
      assertNotSame(document0, document8);
      assertNotSame(document0, document10);
      assertSame(document0, document1);
      assertSame(document0, document11);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertNotSame(document0, document9);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document0, document7);
      assertNotSame(document1, document4);
      assertSame(document1, document6);
      assertNotSame(document1, document10);
      assertSame(document1, document2);
      assertSame(document1, document11);
      assertNotSame(document1, document9);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotSame(document1, document7);
      assertNotSame(document1, document8);
      assertSame(document11, document2);
      assertNotSame(document11, document5);
      assertNotSame(document11, document10);
      assertSame(document11, document1);
      assertSame(document11, document0);
      assertSame(document11, document6);
      assertNotSame(document11, document4);
      assertNotSame(document11, document8);
      assertNotSame(document11, document9);
      assertNotSame(document11, document3);
      assertNotSame(document11, document7);
      
      document11.siblingIndex = 52;
      assertFalse(document0.isBlock());
      assertEquals(52, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(52, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document11.tagName());
      assertEquals(0, document11.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document11.quirksMode());
      assertFalse(document11.updateMetaCharsetElement());
      assertFalse(document11.hasParent());
      assertFalse(document11.isBlock());
      assertEquals("#document", document11.nodeName());
      assertEquals(52, document11.siblingIndex());
      
      // Undeclared exception!
      try { 
        document7.after("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("tgxtare=");
      assertNotNull(pattern0);
      assertEquals("tgxtare=", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("tgxtare=", pattern0.toString());
      
      int int0 = document1.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.getElementsByAttributeValueNot("#root", "tgxtare=");
      assertNotNull(elements0);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.reparentChild(document1);
      assertEquals("tgxtare=", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      List<DataNode> list0 = document1.dataNodes();
      assertNotNull(list0);
      assertEquals("tgxtare=", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      int int1 = document0.childNodeSize();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals("tgxtare=", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertSame(document0, document1);
      
      Document document2 = document1.clone();
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals("tgxtare=", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tgxtare=", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("tgxtare=", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("tgxtare=");
      assertNotNull(evaluator_ContainsOwnText0);
      
      Pattern pattern1 = Pattern.compile("#root");
      assertNotNull(pattern1);
      assertFalse(pattern1.equals((Object)pattern0));
      assertEquals("#root", pattern1.toString());
      assertEquals(0, pattern1.flags());
      assertEquals("#root", pattern1.pattern());
      assertNotSame(pattern1, pattern0);
      
      Elements elements1 = document1.getElementsByAttributeValueMatching("tgxtare=", pattern1);
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(pattern1.equals((Object)pattern0));
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("tgxtare=", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", pattern1.toString());
      assertEquals(0, pattern1.flags());
      assertEquals("#root", pattern1.pattern());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(pattern1, pattern0);
      assertNotSame(elements1, elements0);
      
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
      assertFalse(document0.equals((Object)document2));
      assertEquals("tgxtare=", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      
      boolean boolean0 = document2.hasText();
      assertTrue(boolean0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals("tgxtare=", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tgxtare=", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("tgxtare=", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      String string0 = Parser.unescapeEntities("", false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Document document0 = parser1.parseInput(" > ", "");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document1 = (Document)document0.clone();
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("select", "select");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, int0);
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("select");
      assertNotNull(stringReader0);
      
      Document document1 = parser0.parseInput((Reader) stringReader0, "CwB2:8wbOB!");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CwB2:8wbOB!", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("CwB2:8wbOB!", document1.location());
      assertNotSame(document1, document0);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("select", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertNotSame(document0, document1);
      
      Element element1 = document0.prependElement("7y|Wpy");
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("7y|wpy", element1.tagName());
      assertEquals("7y|wpy", element1.nodeName());
      assertEquals("select", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertNotSame(document0, document1);
      assertNotSame(element1, element0);
      
      int int1 = element1.elementSiblingIndex();
      assertEquals(0, int1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertTrue(int1 == int0);
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("7y|wpy", element1.tagName());
      assertEquals("7y|wpy", element1.nodeName());
      assertEquals("select", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertNotSame(document0, document1);
      assertNotSame(element1, element0);
      
      List<TextNode> list0 = document1.textNodes();
      assertNotNull(list0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CwB2:8wbOB!", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("CwB2:8wbOB!", document1.location());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotSame(document1, document0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      
      Set<String> set0 = document0.classNames();
      assertNotNull(set0);
      assertFalse(set0.contains("select"));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotSame(document0, document1);
      
      Element element2 = element0.classNames(set0);
      assertNotNull(element2);
      assertFalse(set0.contains("select"));
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("select", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("head", element2.tagName());
      assertTrue(element2.hasParent());
      assertEquals("select", element2.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertNotSame(document0, document1);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      
      Element element3 = element2.after("7y|Wpy");
      assertNotNull(element3);
      assertFalse(set0.contains("select"));
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element1));
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("select", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("head", element2.tagName());
      assertTrue(element2.hasParent());
      assertEquals("select", element2.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element3.hasParent());
      assertEquals(0, element3.siblingIndex());
      assertTrue(element3.isBlock());
      assertEquals("select", element3.baseUri());
      assertEquals("head", element3.nodeName());
      assertEquals(0, element3.childNodeSize());
      assertEquals("head", element3.tagName());
      assertNotSame(document0, document1);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(element2, element3);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertSame(element3, element0);
      assertNotSame(element3, element1);
      assertSame(element3, element2);
      
      Tag tag0 = Tag.valueOf("CwB2:8wbOB!");
      assertNotNull(tag0);
      assertFalse(tag0.isKnownTag());
      assertEquals("CwB2:8wbOB!", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("CwB2:8wbOB!", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      
      Elements elements0 = document0.parents();
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotSame(document0, document1);
      
      String string0 = element1.val();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element3));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("7y|wpy", element1.tagName());
      assertEquals("7y|wpy", element1.nodeName());
      assertEquals("select", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertNotSame(document0, document1);
      assertNotSame(element1, element3);
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      
      Element element4 = document0.prependElement(":matches(");
      assertNotNull(element4);
      assertFalse(element4.equals((Object)element0));
      assertFalse(element4.equals((Object)element2));
      assertFalse(element4.equals((Object)element1));
      assertFalse(element4.equals((Object)element3));
      assertFalse(document0.equals((Object)document1));
      assertEquals(":matches(", element4.tagName());
      assertEquals(":matches(", element4.nodeName());
      assertTrue(element4.hasParent());
      assertFalse(element4.isBlock());
      assertEquals(0, element4.childNodeSize());
      assertEquals("select", element4.baseUri());
      assertEquals(0, element4.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertNotSame(element4, element0);
      assertNotSame(element4, element2);
      assertNotSame(element4, element1);
      assertNotSame(element4, element3);
      assertNotSame(document0, document1);
      
      Document document2 = (Document)document0.empty();
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("select", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      
      Element element5 = element0.firstElementSibling();
      assertNotNull(element5);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element5.equals((Object)element4));
      assertFalse(element5.equals((Object)element1));
      assertFalse(element0.equals((Object)element4));
      assertFalse(element0.equals((Object)element1));
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, element5.childNodeSize());
      assertEquals("head", element5.tagName());
      assertTrue(element5.isBlock());
      assertTrue(element5.hasParent());
      assertEquals("head", element5.nodeName());
      assertEquals("select", element5.baseUri());
      assertEquals(0, element5.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("select", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(element5, element2);
      assertSame(element5, element3);
      assertNotSame(element5, element4);
      assertNotSame(element5, element1);
      assertSame(element5, element0);
      assertSame(element0, element3);
      assertNotSame(element0, element4);
      assertSame(element0, element2);
      assertSame(element0, element5);
      assertNotSame(element0, element1);
      
      Elements elements1 = element3.parents();
      assertNotNull(elements1);
      assertFalse(set0.contains("CwB2:8wbOB!"));
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements1.equals((Object)elements0));
      assertFalse(element0.equals((Object)element4));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element4));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element3.equals((Object)element4));
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertTrue(element0.isBlock());
      assertEquals("select", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("head", element2.tagName());
      assertTrue(element2.hasParent());
      assertEquals("select", element2.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element3.hasParent());
      assertEquals(0, element3.siblingIndex());
      assertTrue(element3.isBlock());
      assertEquals("select", element3.baseUri());
      assertEquals("head", element3.nodeName());
      assertEquals(0, element3.childNodeSize());
      assertEquals("head", element3.tagName());
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertSame(element0, element3);
      assertNotSame(element0, element4);
      assertSame(element0, element2);
      assertSame(element0, element5);
      assertNotSame(element0, element1);
      assertSame(element2, element3);
      assertNotSame(element2, element4);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertSame(element2, element5);
      assertSame(element3, element0);
      assertNotSame(element3, element1);
      assertNotSame(element3, element4);
      assertSame(element3, element5);
      assertSame(element3, element2);
      
      boolean boolean0 = element4.isBlock();
      assertFalse(boolean0);
      assertFalse(element4.equals((Object)element0));
      assertFalse(element4.equals((Object)element2));
      assertFalse(element4.equals((Object)element1));
      assertFalse(element4.equals((Object)element3));
      assertFalse(element4.equals((Object)element5));
      assertFalse(document0.equals((Object)document1));
      assertEquals(":matches(", element4.tagName());
      assertEquals(":matches(", element4.nodeName());
      assertTrue(element4.hasParent());
      assertFalse(element4.isBlock());
      assertEquals(0, element4.childNodeSize());
      assertEquals("select", element4.baseUri());
      assertEquals(0, element4.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotSame(element4, element0);
      assertNotSame(element4, element2);
      assertNotSame(element4, element1);
      assertNotSame(element4, element3);
      assertNotSame(element4, element5);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = new Document("tgxtare=");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Element element0 = new Element("tgxtare=");
      assertNotNull(element0);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("tgxtare=", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("tgxtare=", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(document0));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Document document1 = (Document)document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      assertNotNull(document1);
      assertFalse(linkedHashSet0.contains(document0));
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = "tgxtare=";
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("tgxtare=");
      assertNotNull(pattern0);
      assertEquals("tgxtare=", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("tgxtare=", pattern0.pattern());
      
      int int0 = document1.elementSiblingIndex();
      assertEquals(0, int0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string1 = "#root";
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(document0));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Document document2 = (Document)document1.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      assertNotNull(document2);
      assertFalse(linkedHashSet0.contains(document2));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("tgxtare=", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("tgxtare=", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      // Undeclared exception!
      try { 
        document2.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = new Document("S'4c");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("S'4c", document0.baseUri());
      assertEquals("S'4c", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("c`h", "reversed");
      assertNotNull(document0);
      assertEquals("reversed", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("reversed", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTrackErrors(1708);
      assertNotNull(parser1);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document1 = document0.parser(parser1);
      assertNotNull(document1);
      assertEquals("reversed", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("reversed", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("reversed", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("reversed", document1.baseUri());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertNotNull(document2);
      assertEquals("reversed", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("reversed", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("reversed", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("reversed", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("reversed", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("reversed", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements0 = document2.getAllElements();
      assertNotNull(elements0);
      assertEquals("reversed", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("reversed", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("reversed", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("reversed", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("reversed", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("reversed", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1");
      assertFalse(boolean0);
      
      Elements elements1 = document2.getElementsByAttributeStarting("reversed");
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("reversed", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("reversed", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("reversed", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("reversed", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("reversed", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("reversed", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(elements1, elements0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertEquals("reversed", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("reversed", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("reversed", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("reversed", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("reversed", element0.baseUri());
      assertTrue(element0.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      String string0 = document1.outerHtml();
      assertNotNull(string0);
      assertEquals("<html>\n <head></head>\n <body>\n  c`h\n </body>\n</html>", string0);
      assertEquals("reversed", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("reversed", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("reversed", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("reversed", document1.baseUri());
      assertFalse(document1.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertEquals("reversed", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("reversed", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      document0.nodelistChanged();
      assertEquals("reversed", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("reversed", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("1");
      assertNotNull(evaluator_ContainsOwnText0);
      
      Pattern pattern0 = Pattern.compile("head");
      assertNotNull(pattern0);
      assertEquals("head", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("head", pattern0.pattern());
      
      Elements elements2 = document0.getElementsByAttributeValueStarting("<html>\n <head></head>\n <body>\n  c`h\n </body>\n</html>", "reversed");
      assertNotNull(elements2);
      assertFalse(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertEquals("reversed", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("reversed", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      
      Elements elements3 = document2.children();
      assertNotNull(elements3);
      assertFalse(elements3.equals((Object)elements0));
      assertFalse(elements3.equals((Object)elements2));
      assertFalse(elements3.equals((Object)elements1));
      assertFalse(elements3.isEmpty());
      assertEquals(1, elements3.size());
      assertEquals("reversed", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("reversed", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("reversed", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("reversed", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("reversed", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("reversed", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      List<DataNode> list1 = document2.dataNodes();
      assertNotNull(list1);
      assertEquals("reversed", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("reversed", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("reversed", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("reversed", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("reversed", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("reversed", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = document1.clone();
      assertNotNull(document3);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertEquals("reversed", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("reversed", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(parser0.isTrackErrors());
      assertEquals("reversed", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("reversed", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertTrue(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("reversed", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("reversed", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      
      Elements elements4 = document3.previousElementSiblings();
      assertNotNull(elements4);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertTrue(elements4.equals((Object)elements1));
      assertFalse(elements4.equals((Object)elements3));
      assertFalse(elements4.equals((Object)elements0));
      assertTrue(elements4.equals((Object)elements2));
      assertFalse(document1.equals((Object)document3));
      assertEquals("reversed", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("reversed", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(parser0.isTrackErrors());
      assertEquals("reversed", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("reversed", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertTrue(parser1.isTrackErrors());
      assertTrue(elements4.isEmpty());
      assertEquals(0, elements4.size());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("reversed", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("reversed", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(parser1, parser0);
      assertNotSame(elements4, elements1);
      assertNotSame(elements4, elements2);
      assertNotSame(elements4, elements3);
      assertNotSame(elements4, elements0);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      
      String string1 = element0.wholeText();
      assertNotNull(string1);
      assertEquals("c`h", string1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(string1.equals((Object)string0));
      assertEquals("reversed", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("reversed", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("reversed", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("reversed", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("reversed", element0.baseUri());
      assertTrue(element0.isBlock());
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("select", "select");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("select");
      assertNotNull(stringReader0);
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertEquals("select", string0);
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = parser0.parseInput((Reader) stringReader0, "CwB2:8wbOB!");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("CwB2:8wbOB!", document1.location());
      assertEquals("CwB2:8wbOB!", document1.baseUri());
      assertFalse(document1.hasParent());
      assertNotSame(document1, document0);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document1));
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("select", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertNotSame(document0, document1);
      
      Element element1 = document0.prependElement("7y|Wpy");
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("7y|wpy", element1.tagName());
      assertEquals("7y|wpy", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("select", element1.baseUri());
      assertFalse(element1.isBlock());
      assertNotSame(document0, document1);
      assertNotSame(element1, element0);
      
      int int1 = element1.elementSiblingIndex();
      assertEquals(0, int1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertTrue(int1 == int0);
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("7y|wpy", element1.tagName());
      assertEquals("7y|wpy", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("select", element1.baseUri());
      assertFalse(element1.isBlock());
      assertNotSame(document0, document1);
      assertNotSame(element1, element0);
      
      List<TextNode> list0 = document1.textNodes();
      assertNotNull(list0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("CwB2:8wbOB!", document1.location());
      assertEquals("CwB2:8wbOB!", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotSame(document1, document0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      
      Set<String> set0 = document0.classNames();
      assertNotNull(set0);
      assertFalse(set0.contains("CwB2:8wbOB!"));
      assertFalse(document0.equals((Object)document1));
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.baseUri());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotSame(document0, document1);
      
      Element element2 = element0.classNames(set0);
      assertNotNull(element2);
      assertFalse(set0.contains("CwB2:8wbOB!"));
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("select", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals("head", element2.nodeName());
      assertEquals("head", element2.tagName());
      assertTrue(element2.isBlock());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertEquals("select", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertNotSame(document0, document1);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      
      Element element3 = element2.after("7y|Wpy");
      assertNotNull(element3);
      assertFalse(set0.contains("7y|Wpy"));
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element1));
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("select", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals("head", element2.nodeName());
      assertEquals("head", element2.tagName());
      assertTrue(element2.isBlock());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertEquals("select", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element3.siblingIndex());
      assertTrue(element3.isBlock());
      assertEquals("head", element3.tagName());
      assertEquals("select", element3.baseUri());
      assertEquals(0, element3.childNodeSize());
      assertEquals("head", element3.nodeName());
      assertTrue(element3.hasParent());
      assertNotSame(document0, document1);
      assertSame(element0, element2);
      assertSame(element0, element3);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element3);
      assertSame(element2, element0);
      assertSame(element3, element2);
      assertSame(element3, element0);
      assertNotSame(element3, element1);
      
      Tag tag0 = Tag.valueOf("CwB2:8wbOB!");
      assertNotNull(tag0);
      assertEquals("CwB2:8wbOB!", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("CwB2:8wbOB!", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      
      Elements elements0 = document0.parents();
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotSame(document0, document1);
      
      String string1 = element1.val();
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element3));
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("7y|wpy", element1.tagName());
      assertEquals("7y|wpy", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("select", element1.baseUri());
      assertFalse(element1.isBlock());
      assertNotSame(document0, document1);
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(element1, element3);
      
      Element element4 = document0.prependElement(":matches(");
      assertNotNull(element4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element4.equals((Object)element3));
      assertFalse(element4.equals((Object)element2));
      assertFalse(element4.equals((Object)element1));
      assertFalse(element4.equals((Object)element0));
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.baseUri());
      assertEquals("select", element4.baseUri());
      assertEquals(0, element4.siblingIndex());
      assertFalse(element4.isBlock());
      assertEquals(":matches(", element4.tagName());
      assertEquals(":matches(", element4.nodeName());
      assertEquals(0, element4.childNodeSize());
      assertTrue(element4.hasParent());
      assertNotSame(document0, document1);
      assertNotSame(element4, element3);
      assertNotSame(element4, element2);
      assertNotSame(element4, element1);
      assertNotSame(element4, element0);
      
      Elements elements1 = document0.previousElementSiblings();
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.baseUri());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      String string2 = element4.wholeText();
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element4.equals((Object)element3));
      assertFalse(element4.equals((Object)element2));
      assertFalse(element4.equals((Object)element1));
      assertFalse(element4.equals((Object)element0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.baseUri());
      assertEquals("select", element4.baseUri());
      assertEquals(0, element4.siblingIndex());
      assertFalse(element4.isBlock());
      assertEquals(":matches(", element4.tagName());
      assertEquals(":matches(", element4.nodeName());
      assertEquals(0, element4.childNodeSize());
      assertTrue(element4.hasParent());
      assertNotSame(document0, document1);
      assertNotSame(element4, element3);
      assertNotSame(element4, element2);
      assertNotSame(element4, element1);
      assertNotSame(element4, element0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tg)xtare=", "tg)xtare=");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("tg)xtare=", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tg)xtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.child((-1705));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Document document0 = Parser.parse("t", "t");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("t", document0.location());
      assertEquals("t", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals("#root", document0.tagName());
      assertEquals("t", document0.location());
      assertEquals("t", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals("t", document0.location());
      assertEquals("t", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("t", document1.location());
      assertEquals("t", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("html");
      assertNotNull(pattern0);
      assertEquals("html", pattern0.pattern());
      assertEquals("html", pattern0.toString());
      assertEquals(0, pattern0.flags());
      
      Document document2 = (Document)document1.appendText("rt");
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertEquals("t", document0.location());
      assertEquals("t", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("t", document1.location());
      assertEquals("t", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("t", document2.baseUri());
      assertEquals("t", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean0 = document1.is("t");
      assertFalse(boolean0);
      assertEquals("#root", document0.tagName());
      assertEquals("t", document0.location());
      assertEquals("t", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("t", document1.location());
      assertEquals("t", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      String string0 = document1.wholeText();
      assertNotNull(string0);
      assertEquals("trt", string0);
      assertEquals("#root", document0.tagName());
      assertEquals("t", document0.location());
      assertEquals("t", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("t", document1.location());
      assertEquals("t", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      document2.nodelistChanged();
      assertEquals("#root", document0.tagName());
      assertEquals("t", document0.location());
      assertEquals("t", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("t", document1.location());
      assertEquals("t", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("t", document2.baseUri());
      assertEquals("t", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Elements elements0 = document0.getElementsMatchingText("br");
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals("t", document0.location());
      assertEquals("t", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      // Undeclared exception!
      try { 
        document1.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("tgxtare=");
      assertNotNull(pattern0);
      assertEquals("tgxtare=", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("tgxtare=", pattern0.pattern());
      
      int int0 = document1.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.getElementsByAttributeValueNot("#root", "tgxtare=");
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document0.reparentChild(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      List<DataNode> list0 = document1.dataNodes();
      assertNotNull(list0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      int int1 = document0.childNodeSize();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(document0, document1);
      
      Document document2 = document1.clone();
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("tgxtare=", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("tgxtare=", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("tgxtare=");
      assertNotNull(evaluator_ContainsOwnText0);
      
      Pattern pattern1 = Pattern.compile("#root", 0);
      assertNotNull(pattern1);
      assertFalse(pattern1.equals((Object)pattern0));
      assertEquals("#root", pattern1.pattern());
      assertEquals("#root", pattern1.toString());
      assertEquals(0, pattern1.flags());
      assertNotSame(pattern1, pattern0);
      
      Elements elements1 = document1.getElementsByAttributeValueMatching("tgxtare=", pattern1);
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(pattern1.equals((Object)pattern0));
      assertFalse(elements1.equals((Object)elements0));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", pattern1.pattern());
      assertEquals("#root", pattern1.toString());
      assertEquals(0, pattern1.flags());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(pattern1, pattern0);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = document1.children();
      assertNotNull(elements2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, elements2.size());
      assertFalse(elements2.isEmpty());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      List<DataNode> list1 = document1.dataNodes();
      assertNotNull(list1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertTrue(list1.equals((Object)list0));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(list1, list0);
      
      Elements elements3 = document1.previousElementSiblings();
      assertNotNull(elements3);
      assertFalse(elements3.equals((Object)elements0));
      assertFalse(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      
      String string0 = document1.wholeText();
      assertNotNull(string0);
      assertEquals("tgxtare=", string0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      assertNotNull(document0);
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("textarea", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("textarea");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("textarea", pattern0.pattern());
      assertEquals("textarea", pattern0.toString());
      
      Elements elements0 = document1.getElementsByAttributeValueMatching("textarea", pattern0);
      assertNotNull(elements0);
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("textarea", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, pattern0.flags());
      assertEquals("textarea", pattern0.pattern());
      assertEquals("textarea", pattern0.toString());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      int int0 = document1.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("textarea", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document1.data();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("textarea", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertSame(document0, document1);
      
      String string1 = "org.jsoup.select.Evaluator$Attribute";
      Pattern pattern1 = Pattern.compile("org.jsoup.select.Evaluator$Attribute", 2);
      assertNotNull(pattern1);
      assertFalse(pattern1.equals((Object)pattern0));
      assertEquals(2, pattern1.flags());
      assertEquals("org.jsoup.select.Evaluator$Attribute", pattern1.pattern());
      assertEquals("org.jsoup.select.Evaluator$Attribute", pattern1.toString());
      assertNotSame(pattern1, pattern0);
      
      Pattern pattern2 = Pattern.compile("textarea");
      assertNotNull(pattern2);
      assertFalse(pattern2.equals((Object)pattern0));
      assertFalse(pattern2.equals((Object)pattern1));
      assertEquals("textarea", pattern2.pattern());
      assertEquals("textarea", pattern2.toString());
      assertEquals(0, pattern2.flags());
      assertNotSame(pattern2, pattern0);
      assertNotSame(pattern2, pattern1);
      
      Elements elements1 = document1.getElementsMatchingOwnText(pattern2);
      assertNotNull(elements1);
      assertFalse(pattern2.equals((Object)pattern0));
      assertFalse(pattern2.equals((Object)pattern1));
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("textarea", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("textarea", pattern2.pattern());
      assertEquals("textarea", pattern2.toString());
      assertEquals(0, pattern2.flags());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(pattern2, pattern0);
      assertNotSame(pattern2, pattern1);
      assertNotSame(elements1, elements0);
      
      Document document2 = document1.clone();
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("textarea", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("textarea", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("textarea", document2.location());
      assertFalse(document2.hasParent());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      // Undeclared exception!
      try { 
        document2.is("org.jsoup.select.Evaluator$Attribute");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.select.Evaluator$Attribute': unexpected token at '$Attribute'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.prepend("Children collection to be inserted must not be null.");
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertSame(document0, document1);
      
      String string0 = element0.outerHtml();
      assertNotNull(string0);
      assertEquals("<body></body>", string0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertSame(document0, document1);
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertSame(document0, document1);
      
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("Children collection to be inserted must not be null.");
      assertNotNull(evaluator_ContainsOwnText0);
      
      String string1 = document0.data();
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must notbe null.", "Children collection to be inserted must notbe null.");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("Children collection to be inserted must notbe null.", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must notbe null.", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = Element.preserveWhitespace(document1);
      assertFalse(boolean0);
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("Children collection to be inserted must notbe null.", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must notbe null.", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document0.firstElementSibling();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("html", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.childNodeSize());
      assertSame(document0, document1);
      
      Elements elements0 = element0.getElementsByAttributeValueStarting("Children collection to be inserted must notbe null.", "Children collection to be inserted must notbe null.");
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("html", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = Element.preserveWhitespace(document0);
      assertFalse(boolean0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("tgxtare=");
      assertNotNull(pattern0);
      assertEquals("tgxtare=", pattern0.toString());
      assertEquals("tgxtare=", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      
      int int0 = document1.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.getElementsByAttributeValueNot("#root", "tgxtare=");
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document0.reparentChild(document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      List<DataNode> list0 = document1.dataNodes();
      assertNotNull(list0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      int int1 = document0.childNodeSize();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertSame(document0, document1);
      
      String string0 = "body";
      Document document2 = (Document)document1.addClass("body");
      assertNotNull(document2);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("tgxtare=", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("tgxtare=", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Element element0 = new Element("#root");
      assertNotNull(element0);
      assertEquals(0, element0.childNodeSize());
      assertEquals("#root", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      
      Pattern pattern1 = Pattern.compile("p#kkLbvT+,gl=?A`qC", (-1849));
      assertNotNull(pattern1);
      assertFalse(pattern1.equals((Object)pattern0));
      assertEquals("p#kkLbvT+,gl=?A`qC", pattern1.toString());
      assertEquals((-1849), pattern1.flags());
      assertEquals("p#kkLbvT+,gl=?A`qC", pattern1.pattern());
      assertNotSame(pattern1, pattern0);
      
      Elements elements1 = document1.getElementsMatchingOwnText(pattern1);
      assertNotNull(elements1);
      assertFalse(pattern1.equals((Object)pattern0));
      assertFalse(elements1.equals((Object)elements0));
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("p#kkLbvT+,gl=?A`qC", pattern1.toString());
      assertEquals((-1849), pattern1.flags());
      assertEquals("p#kkLbvT+,gl=?A`qC", pattern1.pattern());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(pattern1, pattern0);
      assertNotSame(elements1, elements0);
      
      Document document3 = document1.clone();
      assertNotNull(document3);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("tgxtare=", document3.location());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("tgxtare=", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      
      // Undeclared exception!
      try { 
        document3.is("p#kkLbvT+,gl=?A`qC");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Element element0 = new Element("3w.<&0#QY\"~MMS_!jj%");
      assertNotNull(element0);
      assertEquals("3w.<&0#QY\"~MMS_!jj%", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("3w.<&0#QY\"~MMS_!jj%", element0.tagName());
      
      int int0 = element0.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals("3w.<&0#QY\"~MMS_!jj%", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("3w.<&0#QY\"~MMS_!jj%", element0.tagName());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader(" />");
      assertNotNull(stringReader0);
      
      Document document0 = parser0.parseInput((Reader) stringReader0, "7y|Wpy");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("7y|Wpy", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7y|Wpy", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      
      Element element1 = document0.head();
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("7y|Wpy", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7y|Wpy", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("7y|Wpy", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertNotSame(element1, element0);
      
      Element element2 = element1.prependElement(" />");
      assertNotNull(element2);
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("7y|Wpy", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7y|Wpy", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("7y|Wpy", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertEquals("/>", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("/>", element2.nodeName());
      assertEquals("7y|Wpy", element2.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      
      int int1 = element1.elementSiblingIndex();
      assertEquals(0, int1);
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element2));
      assertTrue(int1 == int0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("7y|Wpy", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7y|Wpy", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("7y|Wpy", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      
      List<TextNode> list0 = element0.textNodes();
      assertNotNull(list0);
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertEquals("3w.<&0#QY\"~MMS_!jj%", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("3w.<&0#QY\"~MMS_!jj%", element0.tagName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      
      String string0 = element1.toString();
      assertNotNull(string0);
      assertEquals("<head>\n </>><//>>\n</head>", string0);
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element2));
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("7y|Wpy", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7y|Wpy", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("7y|Wpy", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      
      boolean boolean0 = Element.preserveWhitespace(element2);
      assertFalse(boolean0);
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("7y|Wpy", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7y|Wpy", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("7y|Wpy", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertEquals("/>", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("/>", element2.nodeName());
      assertEquals("7y|Wpy", element2.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      
      String string1 = document0.tagName();
      assertNotNull(string1);
      assertEquals("#root", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("7y|Wpy", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7y|Wpy", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      
      Elements elements0 = element2.getElementsByAttributeValueEnding("body", "value");
      assertNotNull(elements0);
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("7y|Wpy", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7y|Wpy", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("7y|Wpy", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertEquals("/>", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("/>", element2.nodeName());
      assertEquals("7y|Wpy", element2.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      
      String string2 = document0.wholeText();
      assertNotNull(string2);
      assertEquals(" />", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("7y|Wpy", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7y|Wpy", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("7y|Wpy", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7y|Wpy", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("7y|Wpy", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("7y|Wpy", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("body", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals("body", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("7y|Wpy", "body");
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attribute attribute0 = new Attribute("select", (String) null);
      assertNotNull(attribute0);
      assertNull(attribute0.getValue());
      assertEquals("select", attribute0.getKey());
      
      Attributes attributes2 = attributes1.put(attribute0);
      assertNotNull(attributes2);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertNull(attribute0.getValue());
      assertEquals("select", attribute0.getKey());
      assertEquals(2, attributes2.size());
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      Attributes attributes3 = attributes2.clone();
      assertNotNull(attributes3);
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertNull(attribute0.getValue());
      assertEquals("select", attribute0.getKey());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "uzoc~3", attributes3);
      assertNotNull(formElement0);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals("body", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertNull(attribute0.getValue());
      assertEquals("select", attribute0.getKey());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertEquals("body", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertTrue(formElement0.isBlock());
      assertEquals("body", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("uzoc~3", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      
      Element element3 = formElement0.appendText("*Yh`FN}jXO3nd3lh4f");
      assertNotNull(element3);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals("body", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertNull(attribute0.getValue());
      assertEquals("select", attribute0.getKey());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertEquals("body", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertTrue(formElement0.isBlock());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("body", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("uzoc~3", formElement0.baseUri());
      assertFalse(element3.hasParent());
      assertTrue(element3.isBlock());
      assertEquals("uzoc~3", element3.baseUri());
      assertEquals("body", element3.tagName());
      assertEquals(0, element3.siblingIndex());
      assertEquals("body", element3.nodeName());
      assertEquals(1, element3.childNodeSize());
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(formElement0, element3);
      assertSame(element3, formElement0);
      
      Element element4 = element3.prependElement("value");
      assertNotNull(element4);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(element4.equals((Object)element2));
      assertFalse(element4.equals((Object)element0));
      assertFalse(element4.equals((Object)element1));
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals("body", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertNull(attribute0.getValue());
      assertEquals("select", attribute0.getKey());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertEquals("body", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertTrue(formElement0.isBlock());
      assertEquals("body", formElement0.tagName());
      assertEquals(2, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("uzoc~3", formElement0.baseUri());
      assertFalse(element3.hasParent());
      assertTrue(element3.isBlock());
      assertEquals("uzoc~3", element3.baseUri());
      assertEquals("body", element3.tagName());
      assertEquals(0, element3.siblingIndex());
      assertEquals("body", element3.nodeName());
      assertEquals(2, element3.childNodeSize());
      assertEquals(0, element4.childNodeSize());
      assertEquals("value", element4.tagName());
      assertEquals(0, element4.siblingIndex());
      assertFalse(element4.isBlock());
      assertTrue(element4.hasParent());
      assertEquals("value", element4.nodeName());
      assertEquals("uzoc~3", element4.baseUri());
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(formElement0, element3);
      assertSame(element3, formElement0);
      assertNotSame(element4, element2);
      assertNotSame(element4, element0);
      assertNotSame(element4, element1);
      
      // Undeclared exception!
      try { 
        document0.after((Node) element4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertNotNull(document0);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.prepend("");
      assertNotNull(document1);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertSame(document0, document1);
      
      Document document2 = Parser.parseBodyFragmentRelaxed("extended", "w-cT*Mcjz");
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals("w-cT*Mcjz", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("w-cT*Mcjz", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      boolean boolean0 = document2.hasText();
      assertTrue(boolean0);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals("w-cT*Mcjz", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("w-cT*Mcjz", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Document document3 = (Document)document2.prependChild(document1);
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals("w-cT*Mcjz", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("w-cT*Mcjz", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("w-cT*Mcjz", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(2, document3.childNodeSize());
      assertEquals("w-cT*Mcjz", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      
      List<TextNode> list0 = document0.textNodes();
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = new Document("G`v5oL");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("G`v5oL", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("G`v5oL", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      String string0 = document0.toString();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("G`v5oL", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("G`v5oL", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      String string1 = document0.wholeText();
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("G`v5oL", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("G`v5oL", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Elements elements0 = document0.getElementsMatchingText("");
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("G`v5oL", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("G`v5oL", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Document document1 = (Document)document0.append("");
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("G`v5oL", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("G`v5oL", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("G`v5oL", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("G`v5oL", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      assertNotNull(document0);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = document0.ownerDocument();
      assertNotNull(document1);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.text("#root");
      assertNotNull(document2);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("textarea", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = document0.normalise();
      assertNotNull(document3);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("textarea", document3.location());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("textarea", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      
      String string0 = document2.html();
      assertNotNull(string0);
      assertEquals("<html>\n <head></head>\n <body>\n  #root\n </body>\n</html>", string0);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("textarea", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      
      Element element0 = document1.prependElement("<html>\n <head></head>\n <body>\n  #root\n </body>\n</html>");
      assertNotNull(element0);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("<html>\n <head></head>\n <body>\n  #root\n </body>\n</html>", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("<html>\n <head></head>\n <body>\n  #root\n </body>\n</html>", element0.tagName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      
      Elements elements0 = document2.getElementsByAttributeStarting("REMOVE");
      assertNotNull(elements0);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("textarea", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      
      Elements elements1 = document1.getElementsByIndexGreaterThan(34);
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(elements1, elements0);
      
      Tag tag0 = Tag.valueOf("textarea");
      assertNotNull(tag0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isInline());
      assertEquals("textarea", tag0.toString());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isKnownTag());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.isBlock());
      
      Elements elements2 = document1.parents();
      assertNotNull(elements2);
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      
      String string1 = document0.val();
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      
      Document document4 = Document.createShell("REMOVE");
      assertNotNull(document4);
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertEquals("REMOVE", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals("REMOVE", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      
      Document document5 = document4.clone();
      assertNotNull(document5);
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertEquals("REMOVE", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals("REMOVE", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals("REMOVE", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("REMOVE", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document5);
      assertNotSame(document4, document2);
      assertNotSame(document5, document2);
      assertNotSame(document5, document0);
      assertNotSame(document5, document4);
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTrackErrors(58);
      assertNotNull(parser1);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser2 = parser1.settings((ParseSettings) null);
      assertNotNull(parser2);
      assertTrue(parser2.isTrackErrors());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      
      Document document6 = document5.parser(parser2);
      assertNotNull(document6);
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document5));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertTrue(parser2.isTrackErrors());
      assertEquals("#document", document6.nodeName());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("#root", document6.tagName());
      assertFalse(document6.hasParent());
      assertEquals("REMOVE", document6.baseUri());
      assertEquals(1, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("REMOVE", document6.location());
      assertEquals("REMOVE", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals("REMOVE", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals("REMOVE", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("REMOVE", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertNotSame(document6, document3);
      assertNotSame(document6, document2);
      assertNotSame(document6, document4);
      assertNotSame(document6, document0);
      assertSame(document6, document5);
      assertNotSame(document6, document1);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document6);
      assertNotSame(document4, document3);
      assertNotSame(document4, document5);
      assertNotSame(document4, document2);
      assertNotSame(document5, document2);
      assertNotSame(document5, document0);
      assertNotSame(document5, document4);
      assertSame(document5, document6);
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      
      // Undeclared exception!
      try { 
        document6.prependElement("#root");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      assertNotNull(document0);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.empty();
      assertNotNull(document2);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("textarea", document2.baseUri());
      assertEquals("textarea", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertFalse(set0.contains("textarea"));
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      assertNotNull(list0);
      assertFalse(set0.contains("textarea"));
      assertFalse(list0.contains("textarea"));
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Locale locale1 = Locale.ITALY;
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getVariant());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("it_IT", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertNotSame(locale1, locale0);
      
      Document document3 = (Document)document1.classNames(set0);
      assertNotNull(document3);
      assertFalse(set0.contains("textarea"));
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("textarea", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("textarea", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(locale0, locale1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      
      Document document4 = (Document)document2.attr("", true);
      assertNotNull(document4);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("textarea", document2.baseUri());
      assertEquals("textarea", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals(0, document4.childNodeSize());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("textarea", document4.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("textarea", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document1);
      
      String string0 = "_!c/i4m56#%w,P";
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("org.jsoup.nodes.Element$2");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // org.jsoup.nodes.Element$2
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = new Document("rp");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("rp", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("rp", document0.location());
      assertFalse(document0.isBlock());
      
      String string0 = "";
      Document document1 = (Document)document0.addClass("");
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("rp", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("rp", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("rp", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("rp", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.getAllElements();
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      
      Elements elements1 = document0.children();
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertNotSame(elements1, elements0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.jsoup.nodes.Element$1");
      assertNotNull(mockFileWriter0);
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 822);
      assertNotNull(bufferedWriter0);
      
      Writer writer0 = bufferedWriter0.append('d');
      assertNotNull(writer0);
      assertSame(bufferedWriter0, writer0);
      assertSame(writer0, bufferedWriter0);
      
      BufferedWriter bufferedWriter1 = document0.html(bufferedWriter0);
      assertNotNull(bufferedWriter1);
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertSame(bufferedWriter0, writer0);
      assertSame(bufferedWriter0, bufferedWriter1);
      assertSame(bufferedWriter1, bufferedWriter0);
      assertSame(bufferedWriter1, writer0);
      
      boolean boolean0 = document0.hasAttributes();
      assertFalse(boolean0);
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = document0.ownerDocument();
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Attributes attributes0 = document1.attributes();
      assertNotNull(attributes0);
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document1.baseUri());
      assertEquals(0, attributes0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      String string0 = "x29";
      Pattern pattern0 = Pattern.compile("x29", 822);
      assertNotNull(pattern0);
      assertEquals("x29", pattern0.pattern());
      assertEquals("x29", pattern0.toString());
      assertEquals(886, pattern0.flags());
      
      Elements elements2 = document1.getElementsByAttributeValueMatching("textarea", pattern0);
      assertNotNull(elements2);
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document1.baseUri());
      assertEquals("x29", pattern0.pattern());
      assertEquals("x29", pattern0.toString());
      assertEquals(886, pattern0.flags());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      // Undeclared exception!
      try { 
        document0.after((Node) document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = new Document("G`v5oL");
      assertNotNull(document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("G`v5oL", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("G`v5oL", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      String string0 = document0.toString();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("G`v5oL", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("G`v5oL", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      String string1 = document0.wholeText();
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("G`v5oL", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("G`v5oL", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.val("o`jw*d$=#29>bF$DJ");
      assertNotNull(document1);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("G`v5oL", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("G`v5oL", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("G`v5oL", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("G`v5oL", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parse("Children collection tobe inserted must notbe null.", "Children collection tobe inserted must notbe null.");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("Children collection tobe inserted must notbe null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection tobe inserted must notbe null.", document0.location());
      assertFalse(document0.isBlock());
      
      document0.reparentChild(document0);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("Children collection tobe inserted must notbe null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection tobe inserted must notbe null.", document0.location());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.previousElementSiblings();
      assertNotNull(elements0);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("Children collection tobe inserted must notbe null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection tobe inserted must notbe null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Document document1 = (Document)document0.attr("Children collection tobe inserted must notbe null.", true);
      assertNotNull(document1);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("Children collection tobe inserted must notbe null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection tobe inserted must notbe null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Children collection tobe inserted must notbe null.", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("Children collection tobe inserted must notbe null.", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Document document1 = document0.ownerDocument();
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("textarea", document1.location());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.text("#root");
      assertNotNull(document2);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("textarea", document1.location());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("textarea", document2.location());
      assertEquals("textarea", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = document0.normalise();
      assertNotNull(document3);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("textarea", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("textarea", document3.location());
      assertFalse(document3.hasParent());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      String string0 = document2.html();
      assertNotNull(string0);
      assertEquals("<html>\n <head></head>\n <body>\n  #root\n </body>\n</html>", string0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("textarea", document1.location());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("textarea", document2.location());
      assertEquals("textarea", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      
      Element element0 = document1.prependElement("<html>\n <head></head>\n <body>\n  #root\n </body>\n</html>");
      assertNotNull(element0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("<html>\n <head></head>\n <body>\n  #root\n </body>\n</html>", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body>\n  #root\n </body>\n</html>", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      
      Elements elements0 = document2.getElementsByAttributeStarting("REMOVE");
      assertNotNull(elements0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("textarea", document2.location());
      assertEquals("textarea", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      
      Elements elements1 = document1.getElementsByIndexGreaterThan(34);
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(elements1, elements0);
      
      Document document4 = (Document)document0.attr("o=..q+C62_9Q[YCDIW", true);
      assertNotNull(document4);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("textarea", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("textarea", document4.location());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document1);
      
      Document document5 = (Document)document3.val("_!c/i4m56#%w,P");
      assertNotNull(document5);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(2, document3.childNodeSize());
      assertEquals("textarea", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("textarea", document3.location());
      assertFalse(document3.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(2, document5.childNodeSize());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertEquals("textarea", document5.location());
      assertFalse(document5.hasParent());
      assertEquals("textarea", document5.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals("#document", document5.nodeName());
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document5);
      assertSame(document5, document3);
      assertSame(document5, document0);
      assertSame(document5, document1);
      assertSame(document5, document4);
      assertSame(document5, document2);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "body");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("body", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals("body", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("body", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValue((String) null, "KLlmk");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Document.createShell("tgxtare=");
      assertNotNull(document0);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.tagName("tgxtare=");
      assertNotNull(document1);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertEquals("tgxtare=", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertEquals("tgxtare=", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.hasClass("tgxtare=");
      assertFalse(boolean0);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertEquals("tgxtare=", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("select", "head");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", document0.baseUri());
      assertEquals("head", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = Document.createShell("v,^CM:5r_Sy&");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("v,^CM:5r_Sy&", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("v,^CM:5r_Sy&", document1.location());
      assertFalse(document1.isBlock());
      assertNotSame(document1, document0);
      
      Attributes attributes0 = document1.attributes();
      assertNotNull(attributes0);
      assertFalse(document1.equals((Object)document0));
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("v,^CM:5r_Sy&", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("v,^CM:5r_Sy&", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, attributes0.size());
      assertNotSame(document1, document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertNotNull(document2);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("v,^CM:5r_Sy&", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("v,^CM:5r_Sy&", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("v,^CM:5r_Sy&", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("v,^CM:5r_Sy&", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document1.tagName("f0@emdapfu");
      assertNotNull(document3);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("v,^CM:5r_Sy&", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("v,^CM:5r_Sy&", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("v,^CM:5r_Sy&", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("v,^CM:5r_Sy&", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      
      Pattern pattern0 = Pattern.compile("select");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("select", pattern0.pattern());
      assertEquals("select", pattern0.toString());
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("br", pattern0);
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", document0.baseUri());
      assertEquals("head", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, pattern0.flags());
      assertEquals("select", pattern0.pattern());
      assertEquals("select", pattern0.toString());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      
      Document document4 = Parser.parseBodyFragmentRelaxed("P5ZCK;gtDY#,", "br");
      assertNotNull(document4);
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals(0, document4.siblingIndex());
      assertEquals("br", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("br", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      
      int int0 = document4.elementSiblingIndex();
      assertEquals(0, int0);
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals(0, document4.siblingIndex());
      assertEquals("br", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("br", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      
      String string0 = document1.data();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document4));
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("v,^CM:5r_Sy&", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("v,^CM:5r_Sy&", document1.location());
      assertFalse(document1.isBlock());
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document4);
      
      boolean boolean0 = document1.hasText();
      assertFalse(boolean0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document4));
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("v,^CM:5r_Sy&", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("v,^CM:5r_Sy&", document1.location());
      assertFalse(document1.isBlock());
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document4);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", document0.baseUri());
      assertEquals("head", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      
      Elements elements1 = document2.getElementsByAttributeValueNot("P5ZCK;gtDY#,", "head");
      assertNotNull(elements1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document4));
      assertFalse(elements1.equals((Object)elements0));
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("v,^CM:5r_Sy&", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("v,^CM:5r_Sy&", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("v,^CM:5r_Sy&", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("v,^CM:5r_Sy&", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals(4, elements1.size());
      assertFalse(elements1.isEmpty());
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document2, document0);
      assertNotSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(elements1, elements0);
      
      Document document5 = (Document)document0.html("F)eST<Ek)@ZE?Ot9aK");
      assertNotNull(document5);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", document0.baseUri());
      assertEquals("head", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document5.isBlock());
      assertEquals("head", document5.baseUri());
      assertEquals("#document", document5.nodeName());
      assertEquals("head", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.hasParent());
      assertEquals(1, document5.childNodeSize());
      assertEquals(0, document5.siblingIndex());
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document5, document2);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(document5, document1);
      assertSame(document5, document0);
      
      Document document6 = (Document)document5.addClass("");
      assertNotNull(document6);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document2));
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", document0.baseUri());
      assertEquals("head", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document5.isBlock());
      assertEquals("head", document5.baseUri());
      assertEquals("#document", document5.nodeName());
      assertEquals("head", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.hasParent());
      assertEquals(1, document5.childNodeSize());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document6.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals(1, document6.childNodeSize());
      assertEquals("#root", document6.tagName());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("head", document6.baseUri());
      assertEquals("head", document6.location());
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document5, document3);
      assertNotSame(document5, document2);
      assertNotSame(document5, document4);
      assertSame(document5, document0);
      assertNotSame(document5, document1);
      assertSame(document5, document6);
      assertNotSame(document6, document4);
      assertSame(document6, document5);
      assertNotSame(document6, document3);
      assertSame(document6, document0);
      assertNotSame(document6, document1);
      assertNotSame(document6, document2);
      
      boolean boolean1 = document1.hasText();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document4));
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("v,^CM:5r_Sy&", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("v,^CM:5r_Sy&", document1.location());
      assertFalse(document1.isBlock());
      assertSame(document1, document3);
      assertNotSame(document1, document6);
      assertNotSame(document1, document5);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document4);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("body", "textarea");
      assertNotNull(document0);
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, attributes0.size());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("textarea", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      
      Element element1 = document0.prependElement("body");
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("textarea", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertNotSame(element1, element0);
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      List<TextNode> list0 = element1.textNodes();
      assertNotNull(list0);
      assertFalse(element1.equals((Object)element0));
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("textarea", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(element1, element0);
      
      String string0 = document0.toString();
      assertNotNull(string0);
      assertEquals("<body></body>\n<html>\n <head></head>\n <body>\n  body\n </body>\n</html>", string0);
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      String string1 = document0.tagName();
      assertNotNull(string1);
      assertEquals("#root", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("org.jsoup.select.evaluator$containsdata", parseSettings0);
      assertNotNull(tag0);
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("org.jsoup.select.evaluator$containsdata", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertEquals("org.jsoup.select.evaluator$containsdata", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      
      Attribute attribute0 = Attribute.createFromEncoded("textarea", "#l");
      assertNotNull(attribute0);
      assertEquals("#l", attribute0.getValue());
      assertEquals("textarea", attribute0.getKey());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertNotNull(attributes1);
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, attributes0.size());
      assertEquals("#l", attribute0.getValue());
      assertEquals("textarea", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Element$2", attributes1);
      assertNotNull(formElement0);
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, attributes0.size());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("org.jsoup.select.evaluator$containsdata", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertEquals("org.jsoup.select.evaluator$containsdata", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertEquals("#l", attribute0.getValue());
      assertEquals("textarea", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("org.jsoup.select.evaluator$containsdata", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals("org.jsoup.select.evaluator$containsdata", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", formElement0.baseUri());
      
      Elements elements0 = formElement0.getElementsByAttributeValueEnding("rp", "#root");
      assertNotNull(elements0);
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, attributes0.size());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("org.jsoup.select.evaluator$containsdata", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertEquals("org.jsoup.select.evaluator$containsdata", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertEquals("#l", attribute0.getValue());
      assertEquals("textarea", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("org.jsoup.select.evaluator$containsdata", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals("org.jsoup.select.evaluator$containsdata", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", formElement0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      String string2 = document0.wholeText();
      assertNotNull(string2);
      assertEquals("body", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element2 = element1.removeClass("textarea");
      assertNotNull(element2);
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("textarea", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertEquals("textarea", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals("body", element2.nodeName());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertEquals("body", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(element2, element0);
      assertSame(element2, element1);
      
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan((-1842));
      assertNotNull(evaluator_IndexLessThan0);
      
      String string3 = element2.html();
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("textarea", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertEquals("textarea", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals("body", element2.nodeName());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertEquals("body", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(element2, element0);
      assertSame(element2, element1);
      
      Element element3 = new Element(tag0, "textarea");
      assertNotNull(element3);
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element1));
      assertEquals(0, element3.childNodeSize());
      assertFalse(element3.hasParent());
      assertEquals("org.jsoup.select.evaluator$containsdata", element3.nodeName());
      assertFalse(element3.isBlock());
      assertEquals("org.jsoup.select.evaluator$containsdata", element3.tagName());
      assertEquals("textarea", element3.baseUri());
      assertEquals(0, element3.siblingIndex());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("org.jsoup.select.evaluator$containsdata", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertEquals("org.jsoup.select.evaluator$containsdata", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      
      List<Node> list1 = element3.ensureChildNodes();
      assertNotNull(list1);
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element1));
      assertEquals(0, element3.childNodeSize());
      assertFalse(element3.hasParent());
      assertEquals("org.jsoup.select.evaluator$containsdata", element3.nodeName());
      assertFalse(element3.isBlock());
      assertEquals("org.jsoup.select.evaluator$containsdata", element3.tagName());
      assertEquals("textarea", element3.baseUri());
      assertEquals(0, element3.siblingIndex());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("org.jsoup.select.evaluator$containsdata", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertEquals("org.jsoup.select.evaluator$containsdata", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertNotSame(element3, element0);
      assertNotSame(element3, element2);
      assertNotSame(element3, element1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("textarea", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("textarea");
      assertNotNull(pattern0);
      assertEquals("textarea", pattern0.toString());
      assertEquals("textarea", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      
      Elements elements0 = document1.getElementsByAttributeValueMatching("textarea", pattern0);
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("textarea", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("textarea", pattern0.toString());
      assertEquals("textarea", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      int int0 = document1.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("textarea", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document1.data();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("textarea", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertSame(document0, document1);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("textarea", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertSame(document0, document1);
      
      Elements elements1 = document1.getElementsByAttributeValueNot("FFV(qQQ2C>~PlsO", "textarea");
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("textarea", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(elements1.isEmpty());
      assertEquals(4, elements1.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      
      Document document2 = (Document)document1.html("");
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("textarea", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertEquals("textarea", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("textarea", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean1 = document1.hasText();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("textarea", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.createElement("textarea");
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      
      Element element1 = element0.val("textarea");
      assertNotNull(element1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("textarea", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("textarea", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("textarea", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = element1.outerHtml();
      assertNotNull(string0);
      assertEquals("<textarea>textarea</textarea>", string0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("textarea", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("textarea", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("textarea", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf(";", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertEquals(";", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals(";", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.clone();
      assertNotNull(attributes1);
      assertTrue(attributes1.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.put(";", ";");
      assertNotNull(attributes2);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      Attributes attributes3 = new Attributes();
      assertNotNull(attributes3);
      assertFalse(attributes3.equals((Object)attributes2));
      assertTrue(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertEquals(0, attributes3.size());
      
      Element element2 = new Element(tag0, "m(A'0i02wvI5", attributes3);
      assertNotNull(element2);
      assertFalse(attributes3.equals((Object)attributes2));
      assertTrue(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertEquals(";", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals(";", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes3.size());
      assertEquals("m(A'0i02wvI5", element2.baseUri());
      assertEquals(";", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertFalse(element2.hasParent());
      assertFalse(element2.isBlock());
      assertEquals(";", element2.tagName());
      
      List<DataNode> list1 = element2.dataNodes();
      assertNotNull(list1);
      assertFalse(attributes3.equals((Object)attributes2));
      assertTrue(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertEquals(";", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals(";", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes3.size());
      assertEquals("m(A'0i02wvI5", element2.baseUri());
      assertEquals(";", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertFalse(element2.hasParent());
      assertFalse(element2.isBlock());
      assertEquals(";", element2.tagName());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      
      // Undeclared exception!
      try { 
        element2.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Document.createShell("select");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.baseUri());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.prepend("select");
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.baseUri());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("select", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("select", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.baseUri());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("select", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertSame(document0, document1);
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      Locale locale1 = new Locale("y");
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("y", locale1.getLanguage());
      assertEquals("y", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertFalse(set0.contains("y"));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("y", locale1.getLanguage());
      assertEquals("y", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotSame(locale1, locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      assertNotNull(list0);
      assertFalse(set0.contains("y"));
      assertFalse(list0.contains("y"));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("y", locale1.getLanguage());
      assertEquals("y", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(locale1, locale0);
      
      Locale locale2 = Locale.ITALY;
      assertNotNull(locale2);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertEquals("it", locale2.getLanguage());
      assertEquals("IT", locale2.getCountry());
      assertEquals("it_IT", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("ita", locale2.getISO3Language());
      assertEquals("ITA", locale2.getISO3Country());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      
      Document document2 = (Document)document0.classNames(set0);
      assertNotNull(document2);
      assertFalse(set0.contains("y"));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.baseUri());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("y", locale1.getLanguage());
      assertEquals("y", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("select", document2.baseUri());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      assertNotNull(list1);
      assertFalse(set0.contains("y"));
      assertFalse(list0.contains("y"));
      assertFalse(list1.contains("y"));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(list1.equals((Object)list0));
      assertEquals("y", locale1.getLanguage());
      assertEquals("y", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1);
      assertNotNull(list2);
      assertFalse(set0.contains("y"));
      assertFalse(list0.contains("y"));
      assertFalse(list1.contains("y"));
      assertFalse(list2.contains("y"));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertEquals("y", locale1.getLanguage());
      assertEquals("y", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      
      Tag tag0 = Tag.valueOf("-3H1@ZT");
      assertNotNull(tag0);
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertEquals("-3H1@ZT", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("-3H1@ZT", tag0.getName());
      
      Elements elements0 = document0.parents();
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.baseUri());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      String string0 = document0.val();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.baseUri());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      Element element1 = document0.prependElement("(DO<i>8!");
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertEquals(0, element1.childNodeSize());
      assertEquals("(do<i>8!", element1.tagName());
      assertEquals("select", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("(do<i>8!", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.baseUri());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertNotSame(element1, element0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      Document document3 = (Document)document2.empty();
      assertNotNull(document3);
      assertFalse(set0.contains("y"));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("select", document3.baseUri());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("select", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("y", locale1.getLanguage());
      assertEquals("y", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("select", document2.baseUri());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      
      // Undeclared exception!
      try { 
        element1.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("body", "textarea");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("rp");
      assertNotNull(pattern0);
      assertEquals("rp", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("rp", pattern0.pattern());
      
      Document document2 = (Document)document1.appendText("textarea");
      assertNotNull(document2);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("textarea", document2.location());
      assertEquals("textarea", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean0 = document2.is("body");
      assertFalse(boolean0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("textarea", document2.location());
      assertEquals("textarea", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document2.prependText("~=");
      assertNotNull(document3);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(3, document1.childNodeSize());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("textarea", document2.location());
      assertEquals("textarea", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document3.isBlock());
      assertEquals("textarea", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(3, document3.childNodeSize());
      assertEquals("textarea", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      String string0 = document0.wholeText();
      assertNotNull(string0);
      assertEquals("~=bodytextarea", string0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      
      Elements elements0 = document2.getElementsMatchingText("body");
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(3, document1.childNodeSize());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("textarea", document2.location());
      assertEquals("textarea", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      
      Document document4 = (Document)document1.append("body");
      assertNotNull(document4);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(4, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(4, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("textarea", document4.baseUri());
      assertEquals(4, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("textarea", document4.location());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document3);
      
      Element element0 = document0.prependElement("~=bodytextarea");
      assertNotNull(element0);
      assertEquals(5, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("~=bodytextarea", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("~=bodytextarea", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("textarea", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Children collection to be inserted must notbe null.", ".");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(".", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(".", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.prepend("Children collection to be inserted must notbe null.");
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(".", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(".", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(".", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(".", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertEquals("Children collection to be inserted must notbe null. Children collection to be inserted must notbe null.", string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(".", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(".", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.getAllElements();
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      
      Elements elements1 = document0.children();
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertNotSame(elements1, elements0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L?37#!zax5;~cXgr");
      assertFalse(boolean0);
      
      Elements elements2 = document0.getElementsByAttributeStarting(")ql|6RH L`c>>JW|fS");
      assertNotNull(elements2);
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertFalse(document0.hasParent());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      
      String string0 = element0.outerHtml();
      assertNotNull(string0);
      assertEquals("<body></body>", string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      document0.nodelistChanged();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertFalse(document0.hasParent());
      
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("we.9D\"*Fxp3^cKO");
      assertNotNull(evaluator_ContainsOwnText0);
      
      boolean boolean1 = document0.is((Evaluator) evaluator_ContainsOwnText0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertFalse(document0.hasParent());
      
      Pattern pattern0 = Pattern.compile("head");
      assertNotNull(pattern0);
      assertEquals("head", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("head", pattern0.pattern());
      
      Elements elements3 = document0.getElementsByAttributeValueMatching("b_elz", pattern0);
      assertNotNull(elements3);
      assertTrue(elements3.equals((Object)elements2));
      assertFalse(elements3.equals((Object)elements1));
      assertFalse(elements3.equals((Object)elements0));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("head", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("head", pattern0.pattern());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      
      Elements elements4 = document0.children();
      assertNotNull(elements4);
      assertFalse(elements4.equals((Object)elements2));
      assertFalse(elements4.equals((Object)elements0));
      assertFalse(elements4.equals((Object)elements3));
      assertTrue(elements4.equals((Object)elements1));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, elements4.size());
      assertFalse(elements4.isEmpty());
      assertNotSame(elements4, elements2);
      assertNotSame(elements4, elements1);
      assertNotSame(elements4, elements0);
      assertNotSame(elements4, elements3);
      
      List<DataNode> list1 = document0.dataNodes();
      assertNotNull(list1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      Elements elements5 = document0.previousElementSiblings();
      assertNotNull(elements5);
      assertFalse(elements5.equals((Object)elements0));
      assertTrue(elements5.equals((Object)elements2));
      assertTrue(elements5.equals((Object)elements3));
      assertFalse(elements5.equals((Object)elements4));
      assertFalse(elements5.equals((Object)elements1));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, elements5.size());
      assertTrue(elements5.isEmpty());
      assertNotSame(elements5, elements0);
      assertNotSame(elements5, elements2);
      assertNotSame(elements5, elements4);
      assertNotSame(elements5, elements3);
      assertNotSame(elements5, elements1);
      
      String string1 = document0.val();
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertFalse(document0.hasParent());
      
      Element element1 = element0.parent();
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("html", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.tagName());
      assertEquals("org.jsoup.nodes.Element$1", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertNotSame(element1, element0);
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = "textarea";
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      
      Element element0 = document0.appendElement("textarea");
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("textarea", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.baseUri());
      assertEquals("textarea", element0.tagName());
      
      Document document1 = (Document)document0.val("org.jsoup.select.Evaluator$ContainsData");
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("textarea", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsByAttributeValueEnding("textarea", "textarea");
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      
      String string1 = null;
      String string2 = "Insert position out of bunds.";
      Elements elements1 = document0.getElementsByAttributeValueEnding("textarea", "textarea");
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertEquals(1, attributes0.size());
      assertSame(document0, document1);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertFalse(document2.isBlock());
      assertEquals("textarea", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("textarea", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Pattern pattern0 = Pattern.compile("4Ch;>Ms%", 1);
      assertNotNull(pattern0);
      assertEquals("4Ch;>Ms%", pattern0.toString());
      assertEquals("4Ch;>Ms%", pattern0.pattern());
      assertEquals(1, pattern0.flags());
      
      // Undeclared exception!
      try { 
        Pattern.compile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Element element0 = new Element("3w.<&0#QY\"~MMS_!jj{");
      assertNotNull(element0);
      assertEquals(0, element0.childNodeSize());
      assertEquals("3w.<&0#QY\"~MMS_!jj{", element0.tagName());
      assertEquals("3w.<&0#QY\"~MMS_!jj{", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      int int0 = element0.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals(0, element0.childNodeSize());
      assertEquals("3w.<&0#QY\"~MMS_!jj{", element0.tagName());
      assertEquals("3w.<&0#QY\"~MMS_!jj{", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader(" />");
      assertNotNull(stringReader0);
      
      Document document0 = parser0.parseInput((Reader) stringReader0, "7y|Wpy");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("7y|Wpy", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("7y|Wpy", document0.location());
      
      Element element1 = document0.head();
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("7y|Wpy", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("7y|Wpy", document0.location());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("7y|Wpy", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertNotSame(element1, element0);
      
      Element element2 = element1.prependElement(" />");
      assertNotNull(element2);
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("7y|Wpy", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("7y|Wpy", document0.location());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("7y|Wpy", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertFalse(element2.isBlock());
      assertEquals("/>", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertEquals("7y|Wpy", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals("/>", element2.tagName());
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      
      int int1 = element1.elementSiblingIndex();
      assertEquals(0, int1);
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertTrue(int1 == int0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("7y|Wpy", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("7y|Wpy", document0.location());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("7y|Wpy", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      
      List<TextNode> list0 = element0.textNodes();
      assertNotNull(list0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element0.equals((Object)element2));
      assertEquals(0, element0.childNodeSize());
      assertEquals("3w.<&0#QY\"~MMS_!jj{", element0.tagName());
      assertEquals("3w.<&0#QY\"~MMS_!jj{", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(element0, element1);
      assertNotSame(element0, element2);
      
      boolean boolean0 = Element.preserveWhitespace(element2);
      assertFalse(boolean0);
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("7y|Wpy", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("7y|Wpy", document0.location());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("7y|Wpy", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertFalse(element2.isBlock());
      assertEquals("/>", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertEquals("7y|Wpy", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals("/>", element2.tagName());
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      
      String string0 = document0.tagName();
      assertNotNull(string0);
      assertEquals("#root", string0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("7y|Wpy", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("7y|Wpy", document0.location());
      
      Elements elements0 = element2.getElementsByAttributeValueEnding("body", "value");
      assertNotNull(elements0);
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("7y|Wpy", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("7y|Wpy", document0.location());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("7y|Wpy", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertFalse(element2.isBlock());
      assertEquals("/>", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertEquals("7y|Wpy", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals("/>", element2.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      
      String string1 = document0.wholeText();
      assertNotNull(string1);
      assertEquals(" />", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("7y|Wpy", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("7y|Wpy", document0.location());
      
      Document document1 = (Document)document0.removeClass("#root");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("7y|Wpy", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("7y|Wpy", document0.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("7y|Wpy", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("7y|Wpy", document1.location());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element3 = element2.before("#root");
      assertNotNull(element3);
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element1));
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("7y|Wpy", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("7y|Wpy", document0.location());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("7y|Wpy", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertFalse(element2.isBlock());
      assertEquals("/>", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertEquals("7y|Wpy", element2.baseUri());
      assertEquals(1, element2.siblingIndex());
      assertEquals("/>", element2.tagName());
      assertEquals(0, element3.childNodeSize());
      assertEquals("7y|Wpy", element3.baseUri());
      assertEquals(1, element3.siblingIndex());
      assertEquals("/>", element3.nodeName());
      assertTrue(element3.hasParent());
      assertEquals("/>", element3.tagName());
      assertFalse(element3.isBlock());
      assertSame(document0, document1);
      assertNotSame(element1, element2);
      assertNotSame(element1, element3);
      assertNotSame(element1, element0);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertSame(element2, element3);
      assertSame(element3, element2);
      assertNotSame(element3, element0);
      assertNotSame(element3, element1);
      
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan((-671));
      assertNotNull(evaluator_IndexLessThan0);
      
      String string2 = element1.html();
      assertNotNull(string2);
      assertEquals("#root\n</>><//>>", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element3));
      assertFalse(element1.equals((Object)element0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("7y|Wpy", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("7y|Wpy", document0.location());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("7y|Wpy", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertSame(document0, document1);
      assertNotSame(element1, element2);
      assertNotSame(element1, element3);
      assertNotSame(element1, element0);
      
      List<Node> list1 = element2.ensureChildNodes();
      assertNotNull(list1);
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element3));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("7y|Wpy", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("7y|Wpy", document0.location());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("7y|Wpy", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertFalse(element2.isBlock());
      assertEquals("/>", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertEquals("7y|Wpy", element2.baseUri());
      assertEquals(1, element2.siblingIndex());
      assertEquals("/>", element2.tagName());
      assertSame(document0, document1);
      assertNotSame(element1, element2);
      assertNotSame(element1, element3);
      assertNotSame(element1, element0);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertSame(element2, element3);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#");
      assertFalse(boolean0);
      
      Document document0 = Document.createShell("");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.prependChild(document0);
      assertNotNull(document2);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("", document2.baseUri());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":nth-child(%d)");
      assertNotNull(tag0);
      assertEquals(":nth-child(%d)", tag0.getName());
      assertEquals(":nth-child(%d)", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Element element0 = new Element(tag0, "html", attributes0);
      assertNotNull(element0);
      assertEquals(":nth-child(%d)", tag0.getName());
      assertEquals(":nth-child(%d)", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(0, attributes0.size());
      assertFalse(element0.hasParent());
      assertEquals(":nth-child(%d)", element0.tagName());
      assertEquals("html", element0.baseUri());
      assertEquals(":nth-child(%d)", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      
      attributes0.removeIgnoreCase("y<|85y5yd~");
      assertEquals(0, attributes0.size());
      
      Element element1 = element0.append("html");
      assertNotNull(element1);
      assertEquals(":nth-child(%d)", tag0.getName());
      assertEquals(":nth-child(%d)", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(0, attributes0.size());
      assertFalse(element0.hasParent());
      assertEquals(":nth-child(%d)", element0.tagName());
      assertEquals("html", element0.baseUri());
      assertEquals(":nth-child(%d)", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(":nth-child(%d)", element1.tagName());
      assertEquals("html", element1.baseUri());
      assertEquals(":nth-child(%d)", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Element element2 = (Element)element1.clearAttributes();
      assertNotNull(element2);
      assertEquals(":nth-child(%d)", tag0.getName());
      assertEquals(":nth-child(%d)", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(0, attributes0.size());
      assertFalse(element0.hasParent());
      assertEquals(":nth-child(%d)", element0.tagName());
      assertEquals("html", element0.baseUri());
      assertEquals(":nth-child(%d)", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(":nth-child(%d)", element1.tagName());
      assertEquals("html", element1.baseUri());
      assertEquals(":nth-child(%d)", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, element2.childNodeSize());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals(":nth-child(%d)", element2.tagName());
      assertFalse(element2.hasParent());
      assertEquals(":nth-child(%d)", element2.nodeName());
      assertEquals("html", element2.baseUri());
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertSame(element2, element0);
      assertSame(element2, element1);
      
      Element element3 = element1.appendChild(element0);
      assertNotNull(element3);
      assertEquals(":nth-child(%d)", tag0.getName());
      assertEquals(":nth-child(%d)", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(0, attributes0.size());
      assertEquals(":nth-child(%d)", element0.tagName());
      assertEquals("html", element0.baseUri());
      assertEquals(":nth-child(%d)", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(":nth-child(%d)", element1.tagName());
      assertEquals("html", element1.baseUri());
      assertEquals(":nth-child(%d)", element1.nodeName());
      assertEquals(2, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(2, element3.childNodeSize());
      assertEquals(":nth-child(%d)", element3.nodeName());
      assertEquals("html", element3.baseUri());
      assertTrue(element3.hasParent());
      assertFalse(element3.isBlock());
      assertEquals(":nth-child(%d)", element3.tagName());
      assertEquals(1, element3.siblingIndex());
      assertSame(element0, element1);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertSame(element1, element3);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertSame(element3, element2);
      assertSame(element3, element1);
      assertSame(element3, element0);
      
      Attributes attributes1 = attributes0.put("value", ":nth-child(%d)");
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      // Undeclared exception!
      try { 
        element1.after((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Document.createShell("shTc");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("shTc", document0.location());
      assertEquals("shTc", document0.baseUri());
      assertFalse(document0.isBlock());
      
      String string0 = document0.id();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("shTc", document0.location());
      assertEquals("shTc", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.prepend("#7~:<bbbW$!gxyA");
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("shTc", document0.location());
      assertEquals("shTc", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("shTc", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("shTc", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsMatchingText("#7~:<bbbW$!gxyA");
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("shTc", document0.location());
      assertEquals("shTc", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Element element0 = new Element("3w.<&0#QY\"~MMS_!jj{");
      assertNotNull(element0);
      assertEquals("3w.<&0#QY\"~MMS_!jj{", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("3w.<&0#QY\"~MMS_!jj{", element0.tagName());
      
      int int0 = element0.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals("3w.<&0#QY\"~MMS_!jj{", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("3w.<&0#QY\"~MMS_!jj{", element0.tagName());
      
      Document document0 = Parser.parseBodyFragment("3w.<&0#QY\"~MMS_!jj{", "5sgW.o!Io_5IwPUl~@");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("5sgW.o!Io_5IwPUl~@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("5sgW.o!Io_5IwPUl~@", document0.location());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("5sgW.o!Io_5IwPUl~@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("5sgW.o!Io_5IwPUl~@", document0.location());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("5sgW.o!Io_5IwPUl~@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("5sgW.o!Io_5IwPUl~@", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("5sgW.o!Io_5IwPUl~@", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("5sgW.o!Io_5IwPUl~@", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("#root");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("#root", pattern0.pattern());
      assertEquals("#root", pattern0.toString());
      
      Document document2 = (Document)document1.appendText("3w.<&0#QY\"~MMS_!jj{");
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("5sgW.o!Io_5IwPUl~@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("5sgW.o!Io_5IwPUl~@", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("5sgW.o!Io_5IwPUl~@", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("5sgW.o!Io_5IwPUl~@", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("5sgW.o!Io_5IwPUl~@", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("5sgW.o!Io_5IwPUl~@", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean0 = element0.is("Q");
      assertFalse(boolean0);
      assertEquals("3w.<&0#QY\"~MMS_!jj{", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("3w.<&0#QY\"~MMS_!jj{", element0.tagName());
      
      String string0 = document0.wholeText();
      assertNotNull(string0);
      assertEquals("3w.<&0#QY\"~MMS_!jj{3w.<&0#QY\"~MMS_!jj{", string0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("5sgW.o!Io_5IwPUl~@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("5sgW.o!Io_5IwPUl~@", document0.location());
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      document2.nodelistChanged();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("5sgW.o!Io_5IwPUl~@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("5sgW.o!Io_5IwPUl~@", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("5sgW.o!Io_5IwPUl~@", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("5sgW.o!Io_5IwPUl~@", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("5sgW.o!Io_5IwPUl~@", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("5sgW.o!Io_5IwPUl~@", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      // Undeclared exception!
      try { 
        document2.getElementsMatchingText("3w.<&0#QY\"~MMS_!jj{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 3w.<&0#QY\"~MMS_!jj{
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader(" />");
      assertNotNull(stringReader0);
      
      Parser parser1 = parser0.setTrackErrors((-1301));
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = parser1.parseInput((Reader) stringReader0, "'1^6:z nmbRpsva_rHI");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("'1^6:z nmbRpsva_rHI", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("'1^6:z nmbRpsva_rHI", document0.baseUri());
      assertFalse(document0.hasParent());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("'1^6:z nmbRpsva_rHI", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("'1^6:z nmbRpsva_rHI", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("'1^6:z nmbRpsva_rHI", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Element element1 = element0.prependElement("7y|Wpy");
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("'1^6:z nmbRpsva_rHI", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("'1^6:z nmbRpsva_rHI", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("'1^6:z nmbRpsva_rHI", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("7y|wpy", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("'1^6:z nmbRpsva_rHI", element1.baseUri());
      assertEquals("7y|wpy", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      int int0 = element1.elementSiblingIndex();
      assertEquals(0, int0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("'1^6:z nmbRpsva_rHI", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("'1^6:z nmbRpsva_rHI", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("'1^6:z nmbRpsva_rHI", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("7y|wpy", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("'1^6:z nmbRpsva_rHI", element1.baseUri());
      assertEquals("7y|wpy", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      List<TextNode> list0 = document0.textNodes();
      assertNotNull(list0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("'1^6:z nmbRpsva_rHI", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("'1^6:z nmbRpsva_rHI", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      String string0 = element1.toString();
      assertNotNull(string0);
      assertEquals("<7y|wpy></7y|wpy>", string0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("'1^6:z nmbRpsva_rHI", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("'1^6:z nmbRpsva_rHI", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("'1^6:z nmbRpsva_rHI", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("7y|wpy", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("'1^6:z nmbRpsva_rHI", element1.baseUri());
      assertEquals("7y|wpy", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      boolean boolean0 = Element.preserveWhitespace(document0);
      assertFalse(boolean0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("'1^6:z nmbRpsva_rHI", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("'1^6:z nmbRpsva_rHI", document0.baseUri());
      assertFalse(document0.hasParent());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      String string1 = document0.tagName();
      assertNotNull(string1);
      assertEquals("#root", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("'1^6:z nmbRpsva_rHI", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("'1^6:z nmbRpsva_rHI", document0.baseUri());
      assertFalse(document0.hasParent());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("7y|Wpy", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = new Document("q34");
      assertNotNull(document0);
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("q34", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("q34", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("q34", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("q34", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("q34", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("q34", document1.baseUri());
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      assertNotNull(document_OutputSettings1);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      assertNotNull(document_OutputSettings2);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(false);
      assertNotNull(document_OutputSettings3);
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      
      Document document2 = document1.outputSettings(document_OutputSettings3);
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("q34", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("q34", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("q34", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("q34", document1.baseUri());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(0, document2.siblingIndex());
      assertEquals("q34", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("q34", document2.location());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Elements elements0 = document2.getAllElements();
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("q34", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("q34", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("q34", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("q34", document1.baseUri());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(0, document2.siblingIndex());
      assertEquals("q34", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("q34", document2.location());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Elements elements1 = document2.previousElementSiblings();
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(elements1.equals((Object)elements0));
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("q34", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("q34", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("q34", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("q34", document1.baseUri());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(0, document2.siblingIndex());
      assertEquals("q34", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("q34", document2.location());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(elements1, elements0);
      
      BufferedWriter bufferedWriter0 = document1.html((BufferedWriter) null);
      assertNull(bufferedWriter0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("q34", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("q34", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("q34", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("q34", document1.baseUri());
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      
      boolean boolean0 = document2.hasAttributes();
      assertFalse(boolean0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("q34", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("q34", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("q34", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("q34", document1.baseUri());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(0, document2.siblingIndex());
      assertEquals("q34", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("q34", document2.location());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = document1.ownerDocument();
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("q34", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("q34", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("q34", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("q34", document1.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("q34", document3.baseUri());
      assertEquals("q34", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      
      Document document4 = document1.outputSettings(document_OutputSettings2);
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("q34", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("q34", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("q34", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("q34", document1.baseUri());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals("q34", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.childNodeSize());
      assertEquals("q34", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      
      Attributes attributes0 = document4.attributes();
      assertNotNull(attributes0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("q34", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("q34", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("q34", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("q34", document1.baseUri());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals("q34", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.childNodeSize());
      assertEquals("q34", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, attributes0.size());
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document5 = document4.quirksMode(document_QuirksMode0);
      assertNotNull(document5);
      assertFalse(document5.equals((Object)document0));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertEquals("q34", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("q34", document5.baseUri());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#root", document5.tagName());
      assertEquals(0, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("q34", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("q34", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("q34", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("q34", document1.baseUri());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals("q34", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.childNodeSize());
      assertEquals("q34", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertSame(document5, document2);
      assertNotSame(document5, document0);
      assertSame(document5, document4);
      assertSame(document5, document3);
      assertSame(document5, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document4);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      assertSame(document4, document5);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Pattern pattern0 = Pattern.compile("<uvQL", 2590);
      assertNotNull(pattern0);
      assertEquals("<uvQL", pattern0.toString());
      assertEquals(2590, pattern0.flags());
      assertEquals("<uvQL", pattern0.pattern());
      
      Elements elements2 = document0.getElementsByAttributeValueMatching("M!&oP", pattern0);
      assertNotNull(elements2);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("q34", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("q34", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("<uvQL", pattern0.toString());
      assertEquals(2590, pattern0.flags());
      assertEquals("<uvQL", pattern0.pattern());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      
      Elements elements3 = document0.children();
      assertNotNull(elements3);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements1));
      assertFalse(elements3.equals((Object)elements0));
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("q34", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("q34", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      
      List<DataNode> list0 = document3.dataNodes();
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("q34", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("q34", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("q34", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("q34", document1.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("q34", document3.baseUri());
      assertEquals("q34", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document4);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document5);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      
      Document document1 = Parser.parse("org.jsoup.nodes.Element$1", "Q}0bXlO");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Q}0bXlO", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("Q}0bXlO", document1.baseUri());
      assertNotSame(document1, document0);
      
      Document document2 = document0.normalise();
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document2.location());
      assertEquals("org.jsoup.nodes.Element$1", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      
      Elements elements0 = document2.getElementsContainingText("org.jsoup.nodes.Element$1");
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document2.location());
      assertEquals("org.jsoup.nodes.Element$1", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      
      int int0 = 58;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(58);
      assertNotNull(document_OutputSettings1);
      assertEquals(58, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(58, document_OutputSettings1.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      
      // Undeclared exception!
      try { 
        Charset.forName("org.jsoup.nodes.Element$1");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // org.jsoup.nodes.Element$1
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      assertNotNull(document0);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("textarea", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.location());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("textarea", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertSame(document0, document1);
      
      String string0 = document1.outerHtml();
      assertNotNull(string0);
      assertEquals("<html>\n <head></head>\n <body>\n  textarea\n </body>\n</html>", string0);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("textarea", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.location());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      List<Node> list0 = document1.ensureChildNodes();
      assertNotNull(list0);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("textarea", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.nodelistChanged();
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("textarea", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.location());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("<html>\n <head></head>\n <body>\n  textarea\n </body>\n</html>");
      assertNotNull(evaluator_ContainsOwnText0);
      
      boolean boolean0 = document1.is((Evaluator) evaluator_ContainsOwnText0);
      assertFalse(boolean0);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("textarea", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.location());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("head");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("head", pattern0.toString());
      assertEquals("head", pattern0.pattern());
      
      Pattern pattern1 = Pattern.compile("<html>\n <head></head>\n <body>\n  textarea\n </body>\n</html>", (-824));
      assertNotNull(pattern1);
      assertFalse(pattern1.equals((Object)pattern0));
      assertEquals((-824), pattern1.flags());
      assertEquals("<html>\n <head></head>\n <body>\n  textarea\n </body>\n</html>", pattern1.pattern());
      assertEquals("<html>\n <head></head>\n <body>\n  textarea\n </body>\n</html>", pattern1.toString());
      assertNotSame(pattern1, pattern0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("org.jsoup.UncheckedIOException", pattern1);
      assertNotNull(elements0);
      assertFalse(pattern1.equals((Object)pattern0));
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals((-824), pattern1.flags());
      assertEquals("<html>\n <head></head>\n <body>\n  textarea\n </body>\n</html>", pattern1.pattern());
      assertEquals("<html>\n <head></head>\n <body>\n  textarea\n </body>\n</html>", pattern1.toString());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      assertNotSame(pattern1, pattern0);
      
      Elements elements1 = document0.children();
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      List<DataNode> list1 = document1.dataNodes();
      assertNotNull(list1);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("textarea", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.location());
      assertFalse(document1.hasParent());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements2 = document1.previousElementSiblings();
      assertNotNull(elements2);
      assertFalse(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("textarea", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      assertNotNull(document0);
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("textarea", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("textarea", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.empty();
      assertNotNull(document2);
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("textarea", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("textarea", document1.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("textarea", document2.baseUri());
      assertEquals("textarea", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertFalse(set0.contains("textarea"));
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      assertNotNull(list0);
      assertFalse(set0.contains("textarea"));
      assertFalse(list0.contains("textarea"));
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Locale locale1 = Locale.ITALY;
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it_IT", locale1.toString());
      assertEquals("IT", locale1.getCountry());
      assertEquals("it", locale1.getLanguage());
      assertNotSame(locale1, locale0);
      
      Set<String> set1 = locale1.getUnicodeLocaleKeys();
      assertNotNull(set1);
      assertFalse(set1.contains("textarea"));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it_IT", locale1.toString());
      assertEquals("IT", locale1.getCountry());
      assertEquals("it", locale1.getLanguage());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertNotSame(locale1, locale0);
      assertSame(set1, set0);
      
      Document document3 = (Document)document1.classNames(set0);
      assertNotNull(document3);
      assertFalse(set0.contains("textarea"));
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("textarea", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("textarea", document1.baseUri());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("textarea", document3.location());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("textarea", document3.baseUri());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(locale0, locale1);
      assertSame(set0, set1);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      
      List<Attribute> list1 = attributes0.asList();
      assertNotNull(list1);
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, attributes0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      
      String string0 = document1.className();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("textarea", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("textarea", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      
      Tag tag0 = Tag.valueOf("textarea");
      assertNotNull(tag0);
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isFormSubmittable());
      assertEquals("textarea", tag0.getName());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      
      Element element0 = new Element(tag0, "textarea", attributes0);
      assertNotNull(element0);
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, attributes0.size());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isFormSubmittable());
      assertEquals("textarea", tag0.getName());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.nodeName());
      assertFalse(element0.isBlock());
      
      // Undeclared exception!
      try { 
        element0.after((Node) document3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Element element0 = new Element("meter");
      assertNotNull(element0);
      assertFalse(element0.isBlock());
      assertEquals("meter", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("meter", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      
      Pattern pattern0 = Pattern.compile("7cN");
      assertNotNull(pattern0);
      assertEquals("7cN", pattern0.pattern());
      assertEquals("7cN", pattern0.toString());
      assertEquals(0, pattern0.flags());
      
      Matcher matcher0 = pattern0.matcher("select");
      assertNotNull(matcher0);
      assertEquals("7cN", pattern0.pattern());
      assertEquals("7cN", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("java.util.regex.Matcher[pattern=7cN region=0,6 lastmatch=]", matcher0.toString());
      assertFalse(matcher0.hasTransparentBounds());
      assertEquals(0, matcher0.groupCount());
      assertTrue(matcher0.hasAnchoringBounds());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("select", "meter");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("meter", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("meter", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertEquals("meter", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("meter", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("meter", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("meter", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.clone();
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(parser0.isTrackErrors());
      assertEquals("meter", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("meter", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("meter", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("meter", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("meter", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("meter", document2.baseUri());
      assertFalse(document2.isBlock());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Elements elements0 = document2.children();
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(parser0.isTrackErrors());
      assertEquals("meter", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("meter", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("meter", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("meter", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("meter", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("meter", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      LinkedList<DataNode> linkedList0 = new LinkedList<DataNode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Document document3 = (Document)document2.appendTo(document0);
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(parser0.isTrackErrors());
      assertEquals("meter", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("meter", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("meter", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("meter", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("meter", document2.location());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("meter", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("meter", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("meter", document3.baseUri());
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      
      Document document4 = (Document)document3.empty();
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertEquals("meter", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("meter", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("meter", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("meter", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("meter", document2.location());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals(1, document2.siblingIndex());
      assertEquals("meter", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("meter", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertEquals("meter", document3.baseUri());
      assertEquals("meter", document4.baseUri());
      assertEquals(0, document4.childNodeSize());
      assertEquals("meter", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(1, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document1, document4);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document3);
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("textarea", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("textarea");
      assertNotNull(pattern0);
      assertEquals("textarea", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("textarea", pattern0.pattern());
      
      Elements elements0 = document1.getElementsByAttributeValueMatching("textarea", pattern0);
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("textarea", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("textarea", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("textarea", pattern0.pattern());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      int int0 = document1.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("textarea", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertSame(document0, document1);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("textarea", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertSame(document0, document1);
      
      Elements elements1 = document1.getElementsByAttributeValueNot("FFV(qQQ2C>~PlsO", "textarea");
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("textarea", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(4, elements1.size());
      assertFalse(elements1.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Element element0 = new Element("meter");
      assertNotNull(element0);
      assertFalse(element0.isBlock());
      assertEquals("meter", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("meter", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      
      Pattern pattern0 = Pattern.compile("7cN");
      assertNotNull(pattern0);
      assertEquals("7cN", pattern0.toString());
      assertEquals("7cN", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      
      Elements elements0 = element0.children();
      assertNotNull(elements0);
      assertFalse(element0.isBlock());
      assertEquals("meter", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("meter", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Elements elements1 = element0.getElementsByAttributeValueMatching("select", pattern0);
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(element0.isBlock());
      assertEquals("meter", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("meter", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("7cN", pattern0.toString());
      assertEquals("7cN", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotSame(elements1, elements0);
      
      int int0 = element0.elementSiblingIndex();
      assertEquals(0, int0);
      assertFalse(element0.isBlock());
      assertEquals("meter", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("meter", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
      assertFalse(element0.isBlock());
      assertEquals("meter", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("meter", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      
      Element element1 = element0.shallowClone();
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertFalse(element0.isBlock());
      assertEquals("meter", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("meter", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("meter", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("meter", element1.tagName());
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      // Undeclared exception!
      try { 
        element1.getElementsByAttributeValueNot((String) null, "select");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Document.createShell("shTc");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("shTc", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("shTc", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      String string0 = document0.val();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("shTc", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("shTc", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "html");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("html", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("html", document0.location());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("html", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("html", document0.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.val();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("html", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("html", document0.location());
      assertSame(document0, document1);
      
      // Undeclared exception!
      try { 
        document0.before((Node) document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Tag tag0 = Tag.valueOf("~=");
      assertNotNull(tag0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("~=", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("~=", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      
      CDataNode cDataNode0 = new CDataNode("~=");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      
      Attributes attributes1 = attributes0.clone();
      assertNotNull(attributes1);
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      
      List<Node> list0 = cDataNode0.childNodes();
      assertNotNull(list0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Tag tag1 = Tag.valueOf(" />");
      assertNotNull(tag1);
      assertFalse(tag1.equals((Object)tag0));
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.canContainBlock());
      assertTrue(tag1.isInline());
      assertFalse(tag1.isSelfClosing());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.isData());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isEmpty());
      assertEquals("/>", tag1.toString());
      assertEquals("/>", tag1.getName());
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isBlock());
      assertNotSame(tag1, tag0);
      
      Attributes attributes2 = attributes1.put("select", "AfterDoctypePublicIdentifier");
      assertNotNull(attributes2);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "textarea");
      assertFalse(boolean0);
      
      FormElement formElement0 = new FormElement(tag0, "~=", attributes2);
      assertNotNull(formElement0);
      assertFalse(tag0.equals((Object)tag1));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("~=", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("~=", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("~=", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals("~=", formElement0.nodeName());
      assertEquals("~=", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      
      String string0 = formElement0.id();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(tag0.equals((Object)tag1));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("~=", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("~=", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("~=", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals("~=", formElement0.nodeName());
      assertEquals("~=", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertNotSame(tag0, tag1);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("textarea", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.empty();
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("textarea", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("textarea", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("textarea", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertFalse(set0.contains("textarea"));
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      assertNotNull(list0);
      assertFalse(set0.contains("textarea"));
      assertFalse(list0.contains("textarea"));
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Locale locale1 = Locale.ITALY;
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("IT", locale1.getCountry());
      assertEquals("it", locale1.getLanguage());
      assertEquals("it_IT", locale1.toString());
      assertNotSame(locale1, locale0);
      
      Set<String> set1 = locale1.getUnicodeLocaleKeys();
      assertNotNull(set1);
      assertFalse(set1.contains("textarea"));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("IT", locale1.getCountry());
      assertEquals("it", locale1.getLanguage());
      assertEquals("it_IT", locale1.toString());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertNotSame(locale1, locale0);
      assertSame(set1, set0);
      
      Document document3 = (Document)document1.classNames(set0);
      assertNotNull(document3);
      assertFalse(set0.contains("textarea"));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("textarea", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("textarea", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("textarea", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.childNodeSize());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(locale0, locale1);
      assertSame(set0, set1);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      
      Tag tag0 = Tag.valueOf("textarea");
      assertNotNull(tag0);
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertEquals("textarea", tag0.getName());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isFormListed());
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      
      Element element0 = new Element(tag0, "textarea", attributes0);
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, attributes0.size());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertEquals("textarea", tag0.getName());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isFormListed());
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.baseUri());
      assertEquals("textarea", element0.tagName());
      assertEquals("textarea", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      // Undeclared exception!
      try { 
        element0.after((Node) document3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Element element0 = new Element("meter");
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("meter", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("meter", element0.nodeName());
      assertFalse(element0.isBlock());
      
      Pattern pattern0 = Pattern.compile("7cN");
      assertNotNull(pattern0);
      assertEquals("7cN", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("7cN", pattern0.pattern());
      
      Elements elements0 = element0.getElementsByAttributeValueMatching("select", pattern0);
      assertNotNull(elements0);
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("meter", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("meter", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("7cN", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("7cN", pattern0.pattern());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      int int0 = element0.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("meter", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("meter", element0.nodeName());
      assertFalse(element0.isBlock());
      
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("meter", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("meter", element0.nodeName());
      assertFalse(element0.isBlock());
      
      Element element1 = element0.shallowClone();
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("meter", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("meter", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("meter", element1.nodeName());
      assertEquals("meter", element1.tagName());
      assertFalse(element1.hasParent());
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueNot("p", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tg)xtare=", "tg)xtare=");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tg)xtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tg)xtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tg)xtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tg)xtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.shallowClone();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tg)xtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tg)xtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(element0.hasParent());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", element0.nodeName());
      assertEquals("tg)xtare=", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("tgxtare=");
      assertNotNull(pattern0);
      assertEquals("tgxtare=", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("tgxtare=", pattern0.toString());
      
      int int0 = document1.elementSiblingIndex();
      assertEquals(0, int0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.getElementsByAttributeValueNot("#root", "tgxtare=");
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document0.reparentChild(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      List<DataNode> list0 = document1.dataNodes();
      assertNotNull(list0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      int int1 = document0.childNodeSize();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertSame(document0, document1);
      
      String string0 = "body";
      Document document2 = (Document)document1.addClass("body");
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertEquals("tgxtare=", document2.location());
      assertEquals("tgxtare=", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      // Undeclared exception!
      try { 
        document2.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Document document1 = Parser.parseBodyFragmentRelaxed("tgxtare=", "tgxtare=");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.location());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertNotSame(document1, document0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document2 = (Document)document0.empty();
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("tgxtare=", document2.baseUri());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements0 = document1.getAllElements();
      assertNotNull(elements0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.location());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      
      // Undeclared exception!
      try { 
        document0.text("tgxtare=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Element element0 = new Element("3w.<&0#QY\"~MMS_!jj{");
      assertNotNull(element0);
      assertEquals("3w.<&0#QY\"~MMS_!jj{", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("3w.<&0#QY\"~MMS_!jj{", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      
      int int0 = element0.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals("3w.<&0#QY\"~MMS_!jj{", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("3w.<&0#QY\"~MMS_!jj{", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader(" />");
      assertNotNull(stringReader0);
      
      Document document0 = parser0.parseInput((Reader) stringReader0, "7y|Wpy");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("7y|Wpy", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7y|Wpy", document0.baseUri());
      
      Element element1 = document0.head();
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("7y|Wpy", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7y|Wpy", document0.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("7y|Wpy", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      assertNotSame(element1, element0);
      
      Element element2 = element1.prependElement(" />");
      assertNotNull(element2);
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("7y|Wpy", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7y|Wpy", document0.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.tagName());
      assertEquals("7y|Wpy", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertEquals("/>", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals("/>", element2.nodeName());
      assertEquals("7y|Wpy", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      
      int int1 = element1.elementSiblingIndex();
      assertEquals(0, int1);
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertTrue(int1 == int0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("7y|Wpy", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7y|Wpy", document0.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.tagName());
      assertEquals("7y|Wpy", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      
      List<TextNode> list0 = element0.textNodes();
      assertNotNull(list0);
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertEquals("3w.<&0#QY\"~MMS_!jj{", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("3w.<&0#QY\"~MMS_!jj{", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      
      String string0 = element1.toString();
      assertNotNull(string0);
      assertEquals("<head>\n </>><//>>\n</head>", string0);
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("7y|Wpy", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7y|Wpy", document0.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.tagName());
      assertEquals("7y|Wpy", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      
      boolean boolean0 = Element.preserveWhitespace(element2);
      assertFalse(boolean0);
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("7y|Wpy", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7y|Wpy", document0.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.tagName());
      assertEquals("7y|Wpy", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertEquals("/>", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals("/>", element2.nodeName());
      assertEquals("7y|Wpy", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      
      String string1 = document0.tagName();
      assertNotNull(string1);
      assertEquals("#root", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("7y|Wpy", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7y|Wpy", document0.baseUri());
      
      Elements elements0 = element2.getElementsByAttributeValueEnding("body", "value");
      assertNotNull(elements0);
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("7y|Wpy", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7y|Wpy", document0.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.tagName());
      assertEquals("7y|Wpy", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertEquals("/>", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals("/>", element2.nodeName());
      assertEquals("7y|Wpy", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      
      String string2 = document0.wholeText();
      assertNotNull(string2);
      assertEquals(" />", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("7y|Wpy", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7y|Wpy", document0.baseUri());
      
      Document document1 = (Document)document0.removeClass("#root");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("7y|Wpy", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7y|Wpy", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("7y|Wpy", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("7y|Wpy", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan((-671));
      assertNotNull(evaluator_IndexLessThan0);
      
      boolean boolean1 = element0.is((Evaluator) evaluator_IndexLessThan0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertEquals("3w.<&0#QY\"~MMS_!jj{", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("3w.<&0#QY\"~MMS_!jj{", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      
      boolean boolean2 = element2.hasAttributes();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("7y|Wpy", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7y|Wpy", document0.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.tagName());
      assertEquals("7y|Wpy", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertEquals("/>", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals("/>", element2.nodeName());
      assertEquals("7y|Wpy", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertSame(document0, document1);
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.getAllElements();
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      
      Elements elements1 = document0.children();
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertNotSame(elements1, elements0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L?37#!zax5;~cXgr");
      assertFalse(boolean0);
      
      Elements elements2 = document0.getElementsByAttributeStarting(")ql|6RH L`c>>JW|fS");
      assertNotNull(elements2);
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertFalse(document0.hasParent());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$1", element0.baseUri());
      assertTrue(element0.hasParent());
      
      String string0 = element0.outerHtml();
      assertNotNull(string0);
      assertEquals("<body></body>", string0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$1", element0.baseUri());
      assertTrue(element0.hasParent());
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      document0.nodelistChanged();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertFalse(document0.hasParent());
      
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("we.9D\"*Fxp3^cKO");
      assertNotNull(evaluator_ContainsOwnText0);
      
      boolean boolean1 = document0.is((Evaluator) evaluator_ContainsOwnText0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertFalse(document0.hasParent());
      
      Pattern pattern0 = Pattern.compile("head");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("head", pattern0.pattern());
      assertEquals("head", pattern0.toString());
      
      Elements elements3 = document0.getElementsByAttributeValueMatching("b_elz", pattern0);
      assertNotNull(elements3);
      assertFalse(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements2));
      assertFalse(elements3.equals((Object)elements0));
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, pattern0.flags());
      assertEquals("head", pattern0.pattern());
      assertEquals("head", pattern0.toString());
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      
      Elements elements4 = document0.children();
      assertNotNull(elements4);
      assertFalse(elements4.equals((Object)elements0));
      assertFalse(elements4.equals((Object)elements2));
      assertFalse(elements4.equals((Object)elements3));
      assertTrue(elements4.equals((Object)elements1));
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, elements4.size());
      assertFalse(elements4.isEmpty());
      assertNotSame(elements4, elements0);
      assertNotSame(elements4, elements2);
      assertNotSame(elements4, elements3);
      assertNotSame(elements4, elements1);
      
      List<DataNode> list1 = document0.dataNodes();
      assertNotNull(list1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      Elements elements5 = element0.previousElementSiblings();
      assertNotNull(elements5);
      assertFalse(elements5.equals((Object)elements1));
      assertFalse(elements5.equals((Object)elements4));
      assertFalse(elements5.equals((Object)elements2));
      assertFalse(elements5.equals((Object)elements0));
      assertFalse(elements5.equals((Object)elements3));
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$1", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(elements5.isEmpty());
      assertEquals(1, elements5.size());
      assertNotSame(elements5, elements1);
      assertNotSame(elements5, elements4);
      assertNotSame(elements5, elements2);
      assertNotSame(elements5, elements0);
      assertNotSame(elements5, elements3);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("textarea", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("textarea");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("textarea", pattern0.pattern());
      assertEquals("textarea", pattern0.toString());
      
      Matcher matcher0 = pattern0.matcher("textarea");
      assertNotNull(matcher0);
      assertEquals(0, pattern0.flags());
      assertEquals("textarea", pattern0.pattern());
      assertEquals("textarea", pattern0.toString());
      assertTrue(matcher0.hasAnchoringBounds());
      assertEquals("java.util.regex.Matcher[pattern=textarea region=0,8 lastmatch=]", matcher0.toString());
      assertFalse(matcher0.hasTransparentBounds());
      assertEquals(0, matcher0.groupCount());
      
      Elements elements0 = document1.children();
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("textarea", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      LinkedList<DataNode> linkedList0 = new LinkedList<DataNode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Document document2 = (Document)document0.appendTo(document1);
      assertNotNull(document2);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("textarea", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("textarea", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("textarea", document2.baseUri());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document0.empty();
      assertNotNull(document3);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("textarea", document3.location());
      assertTrue(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("textarea", document3.baseUri());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      // Undeclared exception!
      document1.html();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("p", "");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("p", false);
      assertNotNull(mockFileWriter0);
      
      mockFileWriter0.write((-1922));
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertNotNull(document_OutputSettings1);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      mockFileWriter0.write("p", 0, 0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.clone();
      assertNotNull(document_OutputSettings2);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings3 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings3);
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(1, document_OutputSettings3.indentAmount());
      
      Entities.EscapeMode entities_EscapeMode1 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.escapeMode(entities_EscapeMode1);
      assertNotNull(document_OutputSettings4);
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(entities_EscapeMode1.equals((Object)entities_EscapeMode0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(entities_EscapeMode1, entities_EscapeMode0);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      
      Elements elements0 = document0.getElementsMatchingOwnText("br");
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      String string0 = document0.val();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Set<String> set0 = document0.classNames();
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      String string1 = null;
      Elements elements1 = document0.getElementsByClass("br");
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotSame(elements1, elements0);
      
      Pattern pattern0 = Pattern.compile("", (-641));
      assertNotNull(pattern0);
      assertEquals("", pattern0.pattern());
      assertEquals((-641), pattern0.flags());
      assertEquals("", pattern0.toString());
      
      String string2 = "org.jsoup.select.evaluator$containsdata";
      Pattern pattern1 = Pattern.compile("org.jsoup.select.evaluator$containsdata");
      assertNotNull(pattern1);
      assertFalse(pattern1.equals((Object)pattern0));
      assertEquals("org.jsoup.select.evaluator$containsdata", pattern1.toString());
      assertEquals("org.jsoup.select.evaluator$containsdata", pattern1.pattern());
      assertEquals(0, pattern1.flags());
      assertNotSame(pattern1, pattern0);
      
      Elements elements2 = document0.getElementsByAttributeValueMatching("f0@emdapfu", pattern1);
      assertNotNull(elements2);
      assertFalse(pattern1.equals((Object)pattern0));
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.select.evaluator$containsdata", pattern1.toString());
      assertEquals("org.jsoup.select.evaluator$containsdata", pattern1.pattern());
      assertEquals(0, pattern1.flags());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertNotSame(pattern1, pattern0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      Elements elements3 = document0.getElementsByTag("p");
      assertNotNull(elements3);
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements0));
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      
      Document document1 = (Document)document0.empty();
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document0.text("p");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertEquals("textarea", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("textarea");
      assertNotNull(pattern0);
      assertEquals("textarea", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("textarea", pattern0.pattern());
      
      Document document2 = (Document)document1.appendText("rt");
      assertNotNull(document2);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertEquals("textarea", document1.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("textarea", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("textarea", document2.location());
      assertFalse(document2.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean0 = document1.is("textarea");
      assertFalse(boolean0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertEquals("textarea", document1.location());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      String string0 = document1.wholeText();
      assertNotNull(string0);
      assertEquals("textareart", string0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertEquals("textarea", document1.location());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      Elements elements0 = document1.getElementsMatchingText("rt");
      assertNotNull(elements0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertEquals("textarea", document1.location());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      Document document3 = (Document)document1.append("rt");
      assertNotNull(document3);
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertEquals("textarea", document1.location());
      assertEquals("textarea", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("textarea", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("textarea");
      assertNotNull(pattern0);
      assertEquals("textarea", pattern0.toString());
      assertEquals("textarea", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      
      Document document2 = (Document)document1.appendText("rt");
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("textarea", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("textarea", document2.location());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      boolean boolean0 = document1.is("textarea");
      assertFalse(boolean0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      String string0 = document1.wholeText();
      assertNotNull(string0);
      assertEquals("textareart", string0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      document0.nodelistChanged();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      Elements elements0 = document1.getElementsMatchingText("rt");
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      Document document3 = (Document)document1.append("rt");
      assertNotNull(document3);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.location());
      assertEquals("textarea", document1.baseUri());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document3.isBlock());
      assertEquals("textarea", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("textarea", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("select", "select");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      
      Document document1 = document0.ownerDocument();
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("select", document1.baseUri());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.clone();
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("select", document1.baseUri());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("select", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Element element0 = document2.appendElement("org.jsoup.select.Evaluator$ContainsData");
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("select", document1.baseUri());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("select", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("org.jsoup.select.evaluator$containsdata", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("org.jsoup.select.evaluator$containsdata", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("select", element0.baseUri());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      boolean boolean0 = document1.hasAttributes();
      assertFalse(boolean0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("select", document1.baseUri());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      
      Elements elements0 = document2.children();
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("select", document1.baseUri());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("select", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(elements0.isEmpty());
      assertEquals(2, elements0.size());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Node[] nodeArray0 = document2.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals(2, nodeArray0.length);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("select", document1.baseUri());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("select", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Elements elements1 = document1.getElementsByAttributeStarting("De%Ev*W;9!#%2]>");
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("select", document1.baseUri());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      
      Element element1 = document2.body();
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("select", document1.baseUri());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("select", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals("select", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(element1, element0);
      
      String string0 = document0.outerHtml();
      assertNotNull(string0);
      assertEquals("<html>\n <head></head>\n <body>\n  select\n </body>\n</html>", string0);
      assertFalse(document0.equals((Object)document2));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document2));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      
      document2.nodelistChanged();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("select", document1.baseUri());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("select", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("De%Ev*W;9!#%2]>");
      assertNotNull(evaluator_ContainsOwnText0);
      
      String string1 = evaluator_ContainsOwnText0.toString();
      assertNotNull(string1);
      assertEquals(":containsOwn(de%ev*w;9!#%2]>)", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = element1.is((Evaluator) evaluator_ContainsOwnText0);
      assertFalse(boolean1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertTrue(boolean1 == boolean0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("select", document1.baseUri());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("select", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals("select", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(element1, element0);
      
      Element element2 = document1.createElement("rr");
      assertNotNull(element2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("select", document1.baseUri());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("rr", element2.tagName());
      assertEquals("select", element2.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertFalse(element2.hasParent());
      assertEquals("rr", element2.nodeName());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      
      // Undeclared exception!
      try { 
        element1.appendElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = parser1.parseInput("Ok", "a*!-");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("a*!-", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("a*!-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Parser parser2 = parser0.setTrackErrors(63);
      assertNotNull(parser2);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      
      Document document1 = document0.parser(parser2);
      assertNotNull(document1);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("a*!-", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("a*!-", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(parser2.isTrackErrors());
      assertEquals("a*!-", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("a*!-", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(document0, document1);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertSame(document1, document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertNotNull(document2);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("a*!-", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("a*!-", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(parser2.isTrackErrors());
      assertEquals("a*!-", document1.location());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("a*!-", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("a*!-", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("a*!-", document2.location());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = document2.normalise();
      assertNotNull(document3);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("a*!-", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("a*!-", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(parser2.isTrackErrors());
      assertEquals("a*!-", document1.location());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("a*!-", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("a*!-", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("a*!-", document2.location());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("a*!-", document3.location());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("a*!-", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      Elements elements0 = document3.nextElementSiblings();
      assertNotNull(elements0);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("a*!-", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("a*!-", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(parser2.isTrackErrors());
      assertEquals("a*!-", document1.location());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("a*!-", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("a*!-", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("a*!-", document2.location());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("a*!-", document3.location());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("a*!-", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      // Undeclared exception!
      try { 
        document2.after(" G#BS{9p[}V@U");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("select", "select");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = document0.ownerDocument();
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("select", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.clone();
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("select", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("select", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Element element0 = document2.appendElement("org.jsoup.select.Evaluator$ContainsData");
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("select", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("select", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("select", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.select.evaluator$containsdata", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.select.evaluator$containsdata", element0.tagName());
      assertTrue(element0.hasParent());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      String string0 = document2.nodeName();
      assertNotNull(string0);
      assertEquals("#document", string0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("select", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("select", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      boolean boolean0 = document2.hasAttributes();
      assertFalse(boolean0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("select", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("select", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Elements elements0 = document2.children();
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("select", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("select", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(2, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals(1, nodeArray0.length);
      assertFalse(document0.equals((Object)document2));
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      
      Elements elements1 = document0.getElementsByAttributeStarting("select");
      assertNotNull(elements1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(elements1.equals((Object)elements0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      Element element1 = document0.body();
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(element1.equals((Object)element0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("select", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(element1, element0);
      
      String string1 = element0.outerHtml();
      assertNotNull(string1);
      assertEquals("<org.jsoup.select.evaluator$containsdata></org.jsoup.select.evaluator$containsdata>", string1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("select", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("select", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("select", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.select.evaluator$containsdata", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.select.evaluator$containsdata", element0.tagName());
      assertTrue(element0.hasParent());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(element0, element1);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document2.quirksMode(document_QuirksMode0);
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("select", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("select", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("select", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("select", document3.location());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      
      List<Node> list0 = document3.ensureChildNodes();
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("select", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("select", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("select", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("select", document3.location());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      
      document2.nodelistChanged();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("select", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("select", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("org.jsoup.select.Evaluator$ContainsData");
      assertNotNull(evaluator_ContainsOwnText0);
      
      boolean boolean1 = element1.is((Evaluator) evaluator_ContainsOwnText0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(element1.equals((Object)element0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("select", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(element1, element0);
      
      Document document4 = (Document)document3.text("textarea");
      assertNotNull(document4);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals("select", document4.location());
      assertEquals("select", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("select", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("select", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("select", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("select", document3.location());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document4);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      String string0 = "|U2Z]";
      Document document0 = parser0.parseInput("|U2Z]", "|U2Z]");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("|U2Z]", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("|U2Z]", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("|U2Z]", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("|U2Z]", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("|U2Z]", element0.baseUri());
      
      Document document1 = Parser.parseBodyFragmentRelaxed("|U2Z]", "|U2Z]");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals(0, document1.siblingIndex());
      assertEquals("|U2Z]", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("|U2Z]", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotSame(document1, document0);
      
      Elements elements0 = element0.getElementsContainingOwnText("|U2Z]");
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(parser0.isTrackErrors());
      assertEquals("|U2Z]", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("|U2Z]", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("|U2Z]", element0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotSame(document0, document1);
      
      String string1 = "Insert position out of bounds.";
      int int0 = 1114111;
      StringBuilder stringBuilder0 = new StringBuilder(1114111);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '0';
      charArray0[1] = '}';
      int int1 = 62;
      // Undeclared exception!
      try { 
        stringBuilder0.append(charArray0, (-3751), 62);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tg)xtare=", "tg)xtare=");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tg)xtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("tg)xtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      
      Elements elements0 = document0.getElementsByIndexEquals(1320);
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tg)xtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("tg)xtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tg)xtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("tg)xtare=", document0.location());
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragment("p", "");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("p", false);
      assertNotNull(mockFileWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertNotNull(document_OutputSettings1);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      mockFileWriter0.write("p", 0, 0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.clone();
      assertNotNull(document_OutputSettings2);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.prettyPrint(false);
      assertNotNull(document_OutputSettings3);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      
      int int0 = 55;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings1.outline(false);
      assertNotNull(document_OutputSettings4);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertFalse(document_OutputSettings4.outline());
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings3.indentAmount(55);
      assertNotNull(document_OutputSettings5);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings2));
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(55, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(55, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(55, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings5.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings5.syntax());
      assertEquals(55, document_OutputSettings5.indentAmount());
      assertFalse(document_OutputSettings5.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings5.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings5);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings5);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings5, document_OutputSettings0);
      assertSame(document_OutputSettings5, document_OutputSettings3);
      assertSame(document_OutputSettings5, document_OutputSettings4);
      assertSame(document_OutputSettings5, document_OutputSettings1);
      assertNotSame(document_OutputSettings5, document_OutputSettings2);
      
      document0.outerHtmlHead(mockFileWriter0, 0, document_OutputSettings5);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings2));
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(55, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(55, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(55, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings5.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings5.syntax());
      assertEquals(55, document_OutputSettings5.indentAmount());
      assertFalse(document_OutputSettings5.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings5.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings5);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings5);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings5, document_OutputSettings0);
      assertSame(document_OutputSettings5, document_OutputSettings3);
      assertSame(document_OutputSettings5, document_OutputSettings4);
      assertSame(document_OutputSettings5, document_OutputSettings1);
      assertNotSame(document_OutputSettings5, document_OutputSettings2);
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Set<String> set0 = document1.classNames();
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      String string1 = document0.data();
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(document0.equals((Object)document1));
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertNotSame(document0, document1);
      
      Elements elements0 = document0.getElementsByIndexEquals(6785);
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertNotSame(document0, document1);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings6 = document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      assertNotNull(document_OutputSettings6);
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings6.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings6.escapeMode());
      assertTrue(document_OutputSettings6.prettyPrint());
      assertEquals(1, document_OutputSettings6.indentAmount());
      assertFalse(document_OutputSettings6.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(55, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertNotSame(document_OutputSettings6, document_OutputSettings1);
      assertNotSame(document_OutputSettings6, document_OutputSettings5);
      assertNotSame(document_OutputSettings6, document_OutputSettings3);
      assertNotSame(document_OutputSettings6, document_OutputSettings4);
      assertNotSame(document_OutputSettings6, document_OutputSettings0);
      assertSame(document_OutputSettings6, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings6);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings5);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings6);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      
      Element element0 = null;
      try {
        element0 = new Element((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = "Children collection to be inserted must notbe null.";
      Document document0 = Document.createShell("Children collection to be inserted must notbe null.");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      // Undeclared exception!
      try { 
        document0.is("vPWCf91e/;}n|`Be");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'vPWCf91e/;}n|`Be': unexpected token at '/;}n|`Be'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("textarea", 6);
      assertNotNull(pattern0);
      assertEquals("textarea", pattern0.pattern());
      assertEquals("textarea", pattern0.toString());
      assertEquals(6, pattern0.flags());
      
      boolean boolean0 = document1.is("textarea");
      assertFalse(boolean0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document1.wholeText();
      assertNotNull(string0);
      assertEquals("textarea", string0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document0.nodelistChanged();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertSame(document0, document1);
      
      Elements elements0 = document1.getElementsMatchingText("rt");
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxar@9e=", "tgxar@9e=");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = new Element("tgxar@9e=");
      assertNotNull(element0);
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      
      Document document1 = Parser.parseBodyFragmentRelaxed("0F(bv:Hz}v#r\"%{L@nU", "0F(bv:Hz}v#r\"%{L@nU");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("0F(bv:Hz}v#r\"%{L@nU", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("0F(bv:Hz}v#r\"%{L@nU", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertNotSame(document1, document0);
      
      String string0 = element0.val();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("tgxar@9e=", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.getElementsByAttributeValueNot("textarea", "muted");
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      String string0 = Parser.unescapeEntities("", false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Document document0 = Document.createShell(" > ");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" > ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      document0.nodelistChanged();
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" > ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("");
      assertNotNull(evaluator_ContainsOwnText0);
      
      boolean boolean0 = document0.is((Evaluator) evaluator_ContainsOwnText0);
      assertTrue(boolean0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" > ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot((String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Document.createShell("}@Q(*EYh<G");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("}@Q(*EYh<G", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("}@Q(*EYh<G", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("}@Q(*EYh<G", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("}@Q(*EYh<G", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("}@Q(*EYh<G", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("}@Q(*EYh<G", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("textarea");
      assertNotNull(pattern0);
      assertEquals("textarea", pattern0.toString());
      assertEquals("textarea", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      
      Matcher matcher0 = pattern0.matcher("textarea");
      assertNotNull(matcher0);
      assertEquals("textarea", pattern0.toString());
      assertEquals("textarea", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertTrue(matcher0.hasAnchoringBounds());
      assertEquals("java.util.regex.Matcher[pattern=textarea region=0,8 lastmatch=]", matcher0.toString());
      assertEquals(0, matcher0.groupCount());
      assertFalse(matcher0.hasTransparentBounds());
      
      Elements elements0 = document1.getElementsByAttributeValueMatching("textarea", pattern0);
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.location());
      assertEquals("textarea", pattern0.toString());
      assertEquals("textarea", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements1 = document1.children();
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.location());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      
      List<DataNode> list0 = new LinkedList<DataNode>();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Document document2 = (Document)document0.appendTo(document1);
      assertNotNull(document2);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals("textarea", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.location());
      assertEquals("textarea", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals("textarea", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      int int0 = document0.childNodeSize();
      assertEquals(2, int0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.prepend("Children collection to be inserted must not be null.");
      assertNotNull(document1);
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = "org.jsoup.nodes.Element$2";
      Document document2 = (Document)document0.text("org.jsoup.nodes.Element$2");
      assertNotNull(document2);
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      String string1 = document0.nodeName();
      assertNotNull(string1);
      assertEquals("#document", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      Document document3 = (Document)document2.empty();
      assertNotNull(document3);
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, document2.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertFalse(set0.contains("Children collection to be inserted must not be null."));
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      assertNotNull(list0);
      assertFalse(set0.contains("Children collection to be inserted must not be null."));
      assertFalse(list0.contains("Children collection to be inserted must not be null."));
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Set<String> set1 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set1);
      assertFalse(set1.contains("Children collection to be inserted must not be null."));
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertSame(set1, set0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("Children collection to be inserted must not be null."));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Document document4 = (Document)document3.classNames((Set<String>) linkedHashSet0);
      assertNotNull(document4);
      assertFalse(linkedHashSet0.contains("Children collection to be inserted must not be null."));
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, document2.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document4.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("Children collection to be inserted must not be null.", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertEquals("children collection to be inserted must not be null.", tag0.getName());
      assertEquals("children collection to be inserted must not be null.", tag0.toString());
      
      // Undeclared exception!
      try { 
        document3.after((Node) document4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Document.createShell("tgxtare=");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("tgxtare=", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = new Element("tgxtare=");
      assertNotNull(element0);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("tgxtare=", element0.nodeName());
      assertEquals("tgxtare=", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("select", "select");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = document0.ownerDocument();
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("select", document1.baseUri());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.clone();
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("select", document1.baseUri());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("select", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Element element0 = document2.appendElement("org.jsoup.select.Evaluator$ContainsData");
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("select", document1.baseUri());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("select", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("select", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.select.evaluator$containsdata", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.select.evaluator$containsdata", element0.tagName());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      String string0 = document2.nodeName();
      assertNotNull(string0);
      assertEquals("#document", string0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("select", document1.baseUri());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("select", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      
      document1.siblingIndex = (-2881);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals((-2881), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals((-2881), document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("select", document1.baseUri());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      
      Locale locale1 = Locale.ROOT;
      assertNotNull(locale1);
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertSame(locale1, locale0);
      
      Document document3 = (Document)document0.empty();
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals((-2881), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("select", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.childNodeSize());
      assertEquals((-2881), document3.siblingIndex());
      assertEquals("select", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertSame(locale1, locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      assertNotNull(list0);
      assertFalse(set0.contains(string0));
      assertFalse(list0.contains(string0));
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(locale1, locale0);
      
      Set<String> set1 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set1);
      assertFalse(set1.contains(string0));
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertSame(locale0, locale1);
      assertSame(set1, set0);
      
      Document document4 = (Document)document0.classNames(set0);
      assertNotNull(document4);
      assertFalse(set0.contains(string0));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document4.equals((Object)document2));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals((-2881), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals(0, document4.childNodeSize());
      assertEquals("select", document4.baseUri());
      assertEquals("select", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals((-2881), document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(locale1, locale0);
      assertSame(set0, set1);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertNotSame(document4, document2);
      assertSame(document4, document1);
      
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.formatAsBlock());
      assertEquals("br", tag0.getName());
      assertTrue(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals("br", tag0.toString());
      
      Element element1 = new Element(tag0, "x|`=`}H");
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertEquals("br", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals("x|`=`}H", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("br", element1.tagName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.formatAsBlock());
      assertEquals("br", tag0.getName());
      assertTrue(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals("br", tag0.toString());
      
      // Undeclared exception!
      try { 
        element1.after((Node) document4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PKjOb{^#aCK!+}W\"", "PKjOb{^#aCK!+}W\"");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("PKjOb{^#aCK!+}W\"", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("PKjOb{^#aCK!+}W\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("PKjOb{^#aCK!+}W\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: PKjOb{^#aCK!+}W\"
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      
      Document document1 = (Document)document0.prepend("Children collection to be inserted must not be null.");
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertSame(document0, document1);
      
      String string0 = element0.outerHtml();
      assertNotNull(string0);
      assertEquals("<body></body>", string0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertSame(document0, document1);
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertSame(document0, document1);
      
      document0.nodelistChanged();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertSame(document0, document1);
      
      String string1 = document0.baseUri();
      assertNotNull(string1);
      assertEquals("Children collection to be inserted must not be null.", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertSame(document0, document1);
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("itNms{op$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: itNms{op$
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, attributes0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("textarea", 6);
      assertNotNull(pattern0);
      assertEquals("textarea", pattern0.toString());
      assertEquals(6, pattern0.flags());
      assertEquals("textarea", pattern0.pattern());
      
      Elements elements0 = document1.getElementsByAttributeValueMatching("textarea", pattern0);
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("textarea", pattern0.toString());
      assertEquals(6, pattern0.flags());
      assertEquals("textarea", pattern0.pattern());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements1 = document1.children();
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Element element0 = new Element("tgxtare=");
      assertNotNull(element0);
      assertEquals("", element0.baseUri());
      assertEquals("tgxtare=", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tgxtare=", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      
      Elements elements0 = element0.getElementsByAttributeValue("tgxtare=", "tgxtare=");
      assertNotNull(elements0);
      assertEquals("", element0.baseUri());
      assertEquals("tgxtare=", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tgxtare=", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      String string0 = element0.cssSelector();
      assertNotNull(string0);
      assertEquals("tgxtare=", string0);
      assertEquals("", element0.baseUri());
      assertEquals("tgxtare=", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tgxtare=", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      int int0 = (-1889);
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("E", parseSettings0);
      assertNotNull(tag0);
      assertEquals("E", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("E", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, ":", attributes0);
      assertNotNull(formElement0);
      assertEquals("E", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("E", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals("E", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("E", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(":", formElement0.baseUri());
      
      String string0 = "";
      List<Node> list0 = parser0.parseFragmentInput("E", formElement0, "");
      assertNotNull(list0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("E", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("E", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals("E", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("E", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(":", formElement0.baseUri());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      String string1 = parseSettings0.normalizeTag("E");
      assertNotNull(string1);
      assertEquals("E", string1);
      assertFalse(string1.equals((Object)string0));
      
      Parser parser1 = parser0.setTrackErrors((-1889));
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      List<Node> list1 = parser1.parseFragmentInput(":", formElement0, "");
      assertNotNull(list1);
      assertFalse(list1.equals((Object)list0));
      assertFalse(parser0.isTrackErrors());
      assertEquals("E", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("E", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals("E", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("E", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(":", formElement0.baseUri());
      assertFalse(parser1.isTrackErrors());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(list1, list0);
      
      ParseSettings parseSettings1 = ParseSettings.preserveCase;
      assertNotNull(parseSettings1);
      assertFalse(parseSettings1.equals((Object)parseSettings0));
      assertNotSame(parseSettings1, parseSettings0);
      
      String string2 = parseSettings1.normalizeAttribute("j}");
      assertNotNull(string2);
      assertEquals("j}", string2);
      assertFalse(parseSettings1.equals((Object)parseSettings0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(parseSettings1, parseSettings0);
      
      Parser parser2 = parser1.settings(parseSettings1);
      assertNotNull(parser2);
      assertFalse(parseSettings1.equals((Object)parseSettings0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertNotSame(parseSettings1, parseSettings0);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      
      Document document0 = parser2.parseInput("datalist", "#root");
      assertNotNull(document0);
      assertFalse(parseSettings1.equals((Object)parseSettings0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertNotSame(parseSettings1, parseSettings0);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string3 = parseSettings1.normalizeTag("ismap");
      assertNotNull(string3);
      assertEquals("ismap", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(parseSettings1.equals((Object)parseSettings0));
      assertNotSame(parseSettings1, parseSettings0);
      
      Elements elements0 = document0.getElementsByAttributeStarting("pre");
      assertNotNull(elements0);
      assertFalse(parseSettings1.equals((Object)parseSettings0));
      assertFalse(parser0.isTrackErrors());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertNotSame(parseSettings1, parseSettings0);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      
      boolean boolean1 = formElement0.hasClass("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(parseSettings0.equals((Object)parseSettings1));
      assertEquals("E", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("E", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals("E", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("E", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(":", formElement0.baseUri());
      assertNotSame(parseSettings0, parseSettings1);
      
      boolean boolean2 = Element.preserveWhitespace(formElement0);
      assertFalse(boolean2);
      assertFalse(parseSettings0.equals((Object)parseSettings1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals("E", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("E", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals("E", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("E", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(":", formElement0.baseUri());
      assertNotSame(parseSettings0, parseSettings1);
      
      Elements elements1 = formElement0.getElementsByAttributeValue(":", "&vy]#");
      assertNotNull(elements1);
      assertFalse(parseSettings0.equals((Object)parseSettings1));
      assertTrue(elements1.equals((Object)elements0));
      assertEquals("E", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("E", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals("E", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("E", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(":", formElement0.baseUri());
      assertNotSame(parseSettings0, parseSettings1);
      assertNotSame(elements1, elements0);
      
      Document document1 = (Document)document0.append("`<o=B[}WZN{SrFt(");
      assertNotNull(document1);
      assertFalse(parseSettings1.equals((Object)parseSettings0));
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.location());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(document1, document0);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertNotSame(parseSettings1, parseSettings0);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertSame(document0, document1);
      
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must notbe null.");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Element$1";
      Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.getAllElements();
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      
      boolean boolean0 = document0.hasAttributes();
      assertFalse(boolean0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Elements elements1 = document0.children();
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertNotSame(elements1, elements0);
      
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      String string1 = document0.val();
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals(1, nodeArray0.length);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.removeClass("");
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.val("");
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document2.baseUri());
      assertEquals("org.jsoup.nodes.Element$1", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements2 = document1.getElementsByAttributeValueEnding("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      assertNotNull(elements2);
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      
      String string2 = null;
      Elements elements3 = document1.getElementsByAttribute("org.jsoup.nodes.Element$1");
      assertNotNull(elements3);
      assertFalse(elements3.equals((Object)elements1));
      assertFalse(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements2));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements2);
      
      Document document3 = (Document)document2.append(":nth-child(%d)");
      assertNotNull(document3);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("org.jsoup.nodes.Element$1", document3.location());
      assertEquals("org.jsoup.nodes.Element$1", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      // Undeclared exception!
      try { 
        document3.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = new Document("tgxtare=");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      String string0 = document0.val();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must notbe null.");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      document0.doSetBaseUri("Children collection to be inserted must notbe null.");
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = document0.hasClass("Children collection to be inserted must notbe null.");
      assertFalse(boolean0);
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("E", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("E", tag0.toString());
      assertTrue(tag0.isInline());
      assertEquals("E", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, ":", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("E", tag0.toString());
      assertTrue(tag0.isInline());
      assertEquals("E", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals("E", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals(":", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals("E", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      
      List<Node> list0 = parser0.parseFragmentInput("E", formElement0, "");
      assertNotNull(list0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("E", tag0.toString());
      assertTrue(tag0.isInline());
      assertEquals("E", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals("E", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals(":", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals("E", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      String string0 = parseSettings0.normalizeTag("E");
      assertNotNull(string0);
      assertEquals("E", string0);
      
      Parser parser1 = parser0.setTrackErrors((-1889));
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      List<Node> list1 = parser1.parseFragmentInput(":", formElement0, "");
      assertNotNull(list1);
      assertFalse(list1.equals((Object)list0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("E", tag0.toString());
      assertTrue(tag0.isInline());
      assertEquals("E", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals("E", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals(":", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals("E", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(parser1.isTrackErrors());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(list1, list0);
      
      ParseSettings parseSettings1 = ParseSettings.preserveCase;
      assertNotNull(parseSettings1);
      assertFalse(parseSettings1.equals((Object)parseSettings0));
      assertNotSame(parseSettings1, parseSettings0);
      
      String string1 = parseSettings1.normalizeAttribute("j}");
      assertNotNull(string1);
      assertEquals("j}", string1);
      assertFalse(parseSettings1.equals((Object)parseSettings0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(parseSettings1, parseSettings0);
      
      Parser parser2 = parser1.settings(parseSettings1);
      assertNotNull(parser2);
      assertFalse(parseSettings1.equals((Object)parseSettings0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertNotSame(parseSettings1, parseSettings0);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      
      Document document0 = parser2.parseInput("datalist", "#root");
      assertNotNull(document0);
      assertFalse(parseSettings1.equals((Object)parseSettings0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertNotSame(parseSettings1, parseSettings0);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      
      boolean boolean0 = document0.isBlock();
      assertFalse(boolean0);
      assertFalse(parseSettings1.equals((Object)parseSettings0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertNotSame(parseSettings1, parseSettings0);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      
      String string2 = parseSettings1.normalizeTag("ismap");
      assertNotNull(string2);
      assertEquals("ismap", string2);
      assertFalse(parseSettings1.equals((Object)parseSettings0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(parseSettings1, parseSettings0);
      
      Elements elements0 = document0.getElementsByAttributeStarting("pre");
      assertNotNull(elements0);
      assertFalse(parseSettings1.equals((Object)parseSettings0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertNotSame(parseSettings1, parseSettings0);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      
      boolean boolean1 = formElement0.hasClass("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(parseSettings0.equals((Object)parseSettings1));
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("E", tag0.toString());
      assertTrue(tag0.isInline());
      assertEquals("E", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals("E", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals(":", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals("E", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertNotSame(parseSettings0, parseSettings1);
      
      boolean boolean2 = Element.preserveWhitespace(formElement0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(parseSettings0.equals((Object)parseSettings1));
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("E", tag0.toString());
      assertTrue(tag0.isInline());
      assertEquals("E", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals("E", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals(":", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals("E", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertNotSame(parseSettings0, parseSettings1);
      
      Element element0 = new Element(tag0, "j}");
      assertNotNull(element0);
      assertFalse(parseSettings0.equals((Object)parseSettings1));
      assertFalse(element0.hasParent());
      assertEquals("E", element0.nodeName());
      assertEquals("j}", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("E", element0.tagName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("E", tag0.toString());
      assertTrue(tag0.isInline());
      assertEquals("E", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      
      formElement0.doSetBaseUri("M7`$");
      assertFalse(parseSettings0.equals((Object)parseSettings1));
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("E", tag0.toString());
      assertTrue(tag0.isInline());
      assertEquals("E", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals("E", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("M7`$", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals("E", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertNotSame(parseSettings0, parseSettings1);
      
      Element element1 = element0.parent();
      assertNull(element1);
      assertFalse(parseSettings0.equals((Object)parseSettings1));
      assertFalse(element0.hasParent());
      assertEquals("E", element0.nodeName());
      assertEquals("j}", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("E", element0.tagName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("E", tag0.toString());
      assertTrue(tag0.isInline());
      assertEquals("E", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertNotSame(parseSettings0, parseSettings1);
      
      String string3 = element0.wholeText();
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(parseSettings0.equals((Object)parseSettings1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(element0.hasParent());
      assertEquals("E", element0.nodeName());
      assertEquals("j}", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("E", element0.tagName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("E", tag0.toString());
      assertTrue(tag0.isInline());
      assertEquals("E", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertNotSame(parseSettings0, parseSettings1);
      
      Pattern pattern0 = Pattern.compile("datalist", 0);
      assertNotNull(pattern0);
      assertEquals("datalist", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("datalist", pattern0.toString());
      
      Elements elements1 = element0.getElementsMatchingText(pattern0);
      assertNotNull(elements1);
      assertFalse(parseSettings0.equals((Object)parseSettings1));
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(element0.hasParent());
      assertEquals("E", element0.nodeName());
      assertEquals("j}", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("E", element0.tagName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("E", tag0.toString());
      assertTrue(tag0.isInline());
      assertEquals("E", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("datalist", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("datalist", pattern0.toString());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotSame(parseSettings0, parseSettings1);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" 5tn+bDi5", "");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Document$OutputSettings");
      assertNotNull(tag0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", tag0.getName());
      
      CDataNode cDataNode0 = new CDataNode("");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", tag0.getName());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertEquals("", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", formElement0.tagName());
      
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      assertNotNull(parseSettings0);
      
      Tag tag1 = Tag.valueOf(" 5tn+bDi5", parseSettings0);
      assertNotNull(tag1);
      assertFalse(tag1.equals((Object)tag0));
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isBlock());
      assertFalse(tag1.isData());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.isEmpty());
      assertEquals("5tn+bDi5", tag1.getName());
      assertFalse(tag1.preserveWhitespace());
      assertTrue(tag1.isInline());
      assertEquals("5tn+bDi5", tag1.toString());
      assertNotSame(tag1, tag0);
      
      FormElement formElement1 = formElement0.addElement(document0);
      assertNotNull(formElement1);
      assertFalse(tag0.equals((Object)tag1));
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", tag0.getName());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertEquals("", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", formElement0.tagName());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("", formElement1.baseUri());
      assertFalse(formElement1.hasParent());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", formElement1.nodeName());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", formElement1.tagName());
      assertNotSame(tag0, tag1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      
      document0.parentNode = (Node) formElement1;
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", tag0.getName());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertEquals("", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", formElement0.tagName());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("", formElement1.baseUri());
      assertFalse(formElement1.hasParent());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", formElement1.nodeName());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", formElement1.tagName());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertFalse(document0.parentNode.hasParent());
      
      Document document1 = (Document)document0.text("");
      assertNotNull(document1);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document1.nodeName();
      assertNotNull(string0);
      assertEquals("#document", string0);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        formElement1.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragmentRelaxed(" 5tn+bDi5", "");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Document$OutputSettings");
      assertNotNull(tag0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", tag0.toString());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      
      CDataNode cDataNode0 = new CDataNode("");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      boolean boolean0 = document0.hasSameValue("");
      assertFalse(boolean0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      
      String string1 = "#";
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(document0));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        document0.insertChildren((-4920), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5I@+u[E|", "5I@+u[E|");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("5I@+u[E|", document0.baseUri());
      assertEquals("5I@+u[E|", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("5I@+u[E|", document0.baseUri());
      assertEquals("5I@+u[E|", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Element element0 = new Element("A+$1");
      assertNotNull(element0);
      assertFalse(element0.isBlock());
      assertEquals("A+$1", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("A+$1", element0.tagName());
      
      Elements elements0 = element0.getElementsMatchingText("A+$1");
      assertNotNull(elements0);
      assertFalse(element0.isBlock());
      assertEquals("A+$1", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("A+$1", element0.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      // Undeclared exception!
      try { 
        element0.insertChildren((-802), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = ".\\7/:";
      Document document0 = Document.createShell(".\u0007/:");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(".\u0007/:", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(".\u0007/:", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      
      String string1 = "amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&";
      Pattern pattern0 = Pattern.compile("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      assertNotNull(pattern0);
      assertEquals("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", pattern0.pattern());
      
      Stream<String> stream0 = pattern0.splitAsStream(".\u0007/:");
      assertNotNull(stream0);
      assertEquals("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", pattern0.pattern());
      
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(".\u0007/:", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(".\u0007/:", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", pattern0.pattern());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      String string2 = " />";
      Document document1 = (Document)document0.addClass(" />");
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(".\u0007/:", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(".\u0007/:", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(".\u0007/:", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(".\u0007/:", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document1.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      
      Document document1 = (Document)document0.prepend("Children collection to be inserted must not be null.");
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertSame(document0, document1);
      
      String string0 = element0.outerHtml();
      assertNotNull(string0);
      assertEquals("<body></body>", string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertSame(document0, document1);
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertSame(document0, document1);
      
      document0.nodelistChanged();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertSame(document0, document1);
      
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("Children collection to be inserted must not be null.");
      assertNotNull(evaluator_ContainsOwnText0);
      
      boolean boolean0 = document1.is((Evaluator) evaluator_ContainsOwnText0);
      assertTrue(boolean0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.prepend("");
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertSame(document0, document1);
      
      String string0 = element0.outerHtml();
      assertNotNull(string0);
      assertEquals("<body></body>", string0);
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertSame(document0, document1);
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertSame(document0, document1);
      
      document0.nodelistChanged();
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertSame(document0, document1);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      String string1 = element0.ownText();
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertSame(document0, document1);
      
      Document document2 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      List<Node> list1 = document2.ensureChildNodes();
      assertNotNull(list1);
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(list1, list0);
      
      // Undeclared exception!
      try { 
        document0.after((Node) document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      assertNotNull(document0);
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.toggleClass("java.lang.string@0000000071");
      assertNotNull(document1);
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("textarea", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("textarea", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document1.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      String string1 = document0.html();
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, attributes0.size());
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<Node> list1 = Parser.parseFragment("", (Element) document0, "", (ParseErrorList) null);
      assertNotNull(list1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      String string2 = document0.wholeText();
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      String string3 = document0.val();
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.prependElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.child(58);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 58, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = new Document("");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      String string0 = document0.html();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, attributes0.size());
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string1 = document0.nodeName();
      assertNotNull(string1);
      assertEquals("#document", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Elements elements0 = document0.getElementsByAttributeValueEnding(";A-HCL<i;k8K3", "#document");
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Elements elements1 = document0.getElementsMatchingOwnText("");
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertNotSame(elements1, elements0);
      
      int int0 = 1522;
      // Undeclared exception!
      try { 
        document0.child(1522);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1522, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("shTc", "shTc");
      assertNotNull(document0);
      assertEquals("shTc", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("shTc", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertEquals("shTc", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("shTc", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Elements elements0 = document0.getElementsByTag("shTc");
      assertNotNull(elements0);
      assertEquals("shTc", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("shTc", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = "tgxtare=";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = new Element("tgxtare=");
      assertNotNull(element0);
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("tgxtare=", element0.nodeName());
      assertEquals("tgxtare=", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      
      // Undeclared exception!
      try { 
        element0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.createElement("textarea");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.nodeName());
      assertEquals("textarea", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      
      Element element1 = element0.val("textarea");
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertFalse(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("textarea", element1.baseUri());
      assertEquals("textarea", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("textarea", element1.nodeName());
      assertFalse(element1.isBlock());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string0 = element0.outerHtml();
      assertNotNull(string0);
      assertEquals("<textarea>textarea</textarea>", string0);
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertSame(element0, element1);
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      Pattern pattern0 = Pattern.compile("#docum^nt");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("#docum^nt", pattern0.toString());
      assertEquals("#docum^nt", pattern0.pattern());
      
      Document document1 = (Document)document0.toggleClass("v)fKzQFY9lpc'U^c");
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.appendText("org.jsoup.select.evaluator$containsdata");
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("textarea", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertEquals("textarea", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean0 = document0.hasClass("v)fKzQFY9lpc'U^c");
      assertFalse(boolean0);
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertSame(document0, document1);
      assertSame(document0, document2);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = "select";
      Document document0 = Parser.parseBodyFragment("select", "select");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      Document document1 = document0.ownerDocument();
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("select", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("select", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.clone();
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("select", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("select", document1.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("select", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Element element0 = document2.appendElement("org.jsoup.select.Evaluator$ContainsData");
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("select", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("select", document1.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("select", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, element0.childNodeSize());
      assertEquals("select", element0.baseUri());
      assertEquals("org.jsoup.select.evaluator$containsdata", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.select.evaluator$containsdata", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Document document3 = (Document)document1.val("select");
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("select", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("select", document1.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals("select", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals("select", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      
      String string1 = "org.jsoup.nodes.Element$1";
      String string2 = "style";
      Elements elements0 = element0.getElementsByAttributeValueEnding("org.jsoup.nodes.Element$1", "style");
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("select", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("select", document1.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("select", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, element0.childNodeSize());
      assertEquals("select", element0.baseUri());
      assertEquals("org.jsoup.select.evaluator$containsdata", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.select.evaluator$containsdata", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      // Undeclared exception!
      try { 
        element0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("select", "select");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("select");
      assertNotNull(stringReader0);
      
      Document document1 = parser0.parseInput((Reader) stringReader0, "CwB2:8wbOB!");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("CwB2:8wbOB!", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("CwB2:8wbOB!", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotSame(document1, document0);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document1));
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("select", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertNotSame(document0, document1);
      
      Element element1 = document0.prependElement("7y|Wpy");
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("select", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("7y|wpy", element1.tagName());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("7y|wpy", element1.nodeName());
      assertNotSame(document0, document1);
      assertNotSame(element1, element0);
      
      int int1 = element1.elementSiblingIndex();
      assertEquals(0, int1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertTrue(int1 == int0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("select", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("7y|wpy", element1.tagName());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("7y|wpy", element1.nodeName());
      assertNotSame(document0, document1);
      assertNotSame(element1, element0);
      
      List<TextNode> list0 = document1.textNodes();
      assertNotNull(list0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("CwB2:8wbOB!", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("CwB2:8wbOB!", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotSame(document1, document0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      
      Set<String> set0 = document0.classNames();
      assertNotNull(set0);
      assertFalse(set0.contains("7y|Wpy"));
      assertFalse(document0.equals((Object)document1));
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotSame(document0, document1);
      
      Element element2 = element0.classNames(set0);
      assertNotNull(element2);
      assertFalse(set0.contains("7y|Wpy"));
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("select", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertEquals("select", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals("head", element2.nodeName());
      assertEquals("head", element2.tagName());
      assertTrue(element2.isBlock());
      assertNotSame(document0, document1);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      
      Tag tag0 = Tag.valueOf("CwB2:8wbOB!");
      assertNotNull(tag0);
      assertEquals("CwB2:8wbOB!", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("CwB2:8wbOB!", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      
      Elements elements0 = document0.parents();
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotSame(document0, document1);
      
      String string0 = element1.val();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("select", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("7y|wpy", element1.tagName());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("7y|wpy", element1.nodeName());
      assertNotSame(document0, document1);
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      
      Element element3 = document0.prependElement("'a~51>S3_.XMF_");
      assertNotNull(element3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element0));
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(element3.isBlock());
      assertTrue(element3.hasParent());
      assertEquals(0, element3.childNodeSize());
      assertEquals("select", element3.baseUri());
      assertEquals(0, element3.siblingIndex());
      assertEquals("'a~51>s3_.xmf_", element3.nodeName());
      assertEquals("'a~51>s3_.xmf_", element3.tagName());
      assertNotSame(document0, document1);
      assertNotSame(element3, element1);
      assertNotSame(element3, element2);
      assertNotSame(element3, element0);
      
      Document document2 = (Document)document0.empty();
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document0.equals((Object)document1));
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertEquals("select", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("select", "select");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = document0.ownerDocument();
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("select", document1.baseUri());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.clone();
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document0.hasParent());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("select", document1.baseUri());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("select", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Element element0 = document2.appendElement("org.jsoup.select.Evaluator$ContainsData");
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document0.hasParent());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("select", document1.baseUri());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("select", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("org.jsoup.select.evaluator$containsdata", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("org.jsoup.select.evaluator$containsdata", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("select", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      String string0 = document2.nodeName();
      assertNotNull(string0);
      assertEquals("#document", string0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document0.hasParent());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("select", document1.baseUri());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("select", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      document1.siblingIndex = (-2881);
      assertFalse(document0.hasParent());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals((-2881), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals((-2881), document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("select", document1.baseUri());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertNotNull(parseErrorList0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      List<Node> list0 = Parser.parseFragment("select", (Element) document1, "99rH}", parseErrorList0);
      assertNotNull(list0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document0.hasParent());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals((-2881), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals((-2881), document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("select", document1.baseUri());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      
      String string1 = document2.wholeText();
      assertNotNull(string1);
      assertEquals("select", string1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(document0.hasParent());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals((-2881), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals((-2881), document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("select", document1.baseUri());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("select", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      String string2 = document1.val();
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(document0.hasParent());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals((-2881), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals((-2881), document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("select", document1.baseUri());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      
      Element element1 = document1.prependElement(" />");
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.hasParent());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals((-2881), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals((-2881), document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("select", document1.baseUri());
      assertEquals("select", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("select", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("/>", element1.tagName());
      assertEquals("/>", element1.nodeName());
      assertTrue(element1.hasParent());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(element1, element0);
      
      int int0 = document2.elementSiblingIndex();
      assertEquals(0, int0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document0.hasParent());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals((-2881), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals((-2881), document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("select", document1.baseUri());
      assertEquals("select", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("select", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      List<TextNode> list1 = element1.textNodes();
      assertNotNull(list1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.hasParent());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals((-2881), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals((-2881), document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("select", document1.baseUri());
      assertEquals("select", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("select", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("/>", element1.tagName());
      assertEquals("/>", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(element1, element0);
      
      boolean boolean0 = Element.preserveWhitespace(document0);
      assertFalse(boolean0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.hasParent());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals((-2881), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      
      String string3 = document0.tagName();
      assertNotNull(string3);
      assertEquals("#root", string3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(document0.hasParent());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals((-2881), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      
      Elements elements0 = element1.getElementsByAttributeValueEnding("select", "#document");
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(element1.equals((Object)element0));
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals((-2881), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals((-2881), document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("select", document1.baseUri());
      assertEquals("select", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("select", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("/>", element1.tagName());
      assertEquals("/>", element1.nodeName());
      assertTrue(element1.hasParent());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(element1, element0);
      
      String string4 = document1.wholeText();
      assertNotNull(string4);
      assertEquals("select", string4);
      assertFalse(document0.equals((Object)document2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document0.hasParent());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals((-2881), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals((-2881), document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("select", document1.baseUri());
      assertEquals("select", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      
      Document document3 = (Document)document0.removeClass("W");
      assertNotNull(document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document0.hasParent());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals((-2881), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("select", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("select", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals((-2881), document3.siblingIndex());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(0);
      assertNotNull(evaluator_IndexLessThan0);
      
      boolean boolean1 = document1.is((Evaluator) evaluator_IndexLessThan0);
      assertFalse(boolean1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertTrue(boolean1 == boolean0);
      assertFalse(document0.hasParent());
      assertEquals("select", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals((-2881), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals((-2881), document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("select", document1.baseUri());
      assertEquals("select", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must notbe null.");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertEquals(2, document0.childNodeSize());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must notbe null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      List<TextNode> list0 = document1.textNodes();
      assertNotNull(list0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must notbe null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Elements elements0 = document0.previousElementSiblings();
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      String string0 = document0.wholeText();
      assertNotNull(string0);
      assertEquals("tgxtare=", string0);
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Document.createShell("tgxtare=");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      String string0 = document0.wholeText();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" 5tn+bDi5", "");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Document$OutputSettings");
      assertNotNull(tag0);
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", tag0.getName());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      
      CDataNode cDataNode0 = new CDataNode("");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      assertNotNull(formElement0);
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", tag0.getName());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      
      FormElement formElement1 = formElement0.addElement(document0);
      assertNotNull(formElement1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", tag0.getName());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertEquals("", formElement1.baseUri());
      assertFalse(formElement1.isBlock());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", formElement1.tagName());
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      
      document0.parentNode = (Node) formElement1;
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", tag0.getName());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertEquals("", formElement1.baseUri());
      assertFalse(formElement1.isBlock());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", formElement1.tagName());
      assertFalse(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      Document document1 = (Document)document0.text("");
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document1.nodeName();
      assertNotNull(string0);
      assertEquals("#document", string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      FormElement formElement2 = (FormElement)formElement0.html("#document");
      assertNotNull(formElement2);
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", tag0.getName());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", formElement0.tagName());
      assertEquals(1, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("", formElement2.baseUri());
      assertFalse(formElement2.isBlock());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", formElement2.nodeName());
      assertEquals(0, formElement2.siblingIndex());
      assertEquals(1, formElement2.childNodeSize());
      assertEquals("org.jsoup.nodes.Document$OutputSettings", formElement2.tagName());
      assertFalse(formElement2.hasParent());
      assertSame(formElement0, formElement2);
      assertSame(formElement0, formElement1);
      assertSame(formElement2, formElement1);
      assertSame(formElement2, formElement0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "gF T\"fZ'5A kd|!~");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("gF T\"fZ'5A kd|!~", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("gF T\"fZ'5A kd|!~", document0.location());
      
      Element element0 = document0.createElement("gF T\"fZ'5A kd|!~");
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("gF T\"fZ'5A kd|!~", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("gF T\"fZ'5A kd|!~", document0.location());
      assertEquals("gF T\"fZ'5A kd|!~", element0.tagName());
      assertEquals("gF T\"fZ'5A kd|!~", element0.nodeName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("gF T\"fZ'5A kd|!~", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueEnding("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Charset charset0 = document0.charset();
      assertNotNull(charset0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertNotNull(document_OutputSettings1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertNotNull(document_OutputSettings2);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      
      Document document1 = document0.outputSettings(document_OutputSettings2);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document1.after("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.after("textarea");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = new Document("");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      String string0 = document0.html();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, attributes0.size());
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string1 = document0.nodeName();
      assertNotNull(string1);
      assertEquals("#document", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Elements elements0 = document0.getElementsByAttributeValueEnding(";A-HCL<i;k8K3", "#document");
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Elements elements1 = document0.getElementsByClass("4MI");
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotSame(elements1, elements0);
      
      String string2 = document0.html();
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      assertNotNull(document0);
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("textarea", "[%s=%s]");
      assertNotNull(elements0);
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      String string0 = document0.val();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("Q!ep Ep:XN6 !n", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isKnownTag());
      assertEquals("q!ep ep:xn6 !n", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("q!ep ep:xn6 !n", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      
      String string0 = parseSettings0.normalizeAttribute("Q!ep Ep:XN6 !n");
      assertNotNull(string0);
      assertEquals("q!ep ep:xn6 !n", string0);
      
      Element element0 = new Element(tag0, "Q!ep Ep:XN6 !n");
      assertNotNull(element0);
      assertFalse(tag0.isKnownTag());
      assertEquals("q!ep ep:xn6 !n", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("q!ep ep:xn6 !n", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals(0, element0.siblingIndex());
      assertEquals("q!ep ep:xn6 !n", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Q!ep Ep:XN6 !n", element0.baseUri());
      assertEquals("q!ep ep:xn6 !n", element0.nodeName());
      assertFalse(element0.isBlock());
      
      Tag tag1 = Tag.valueOf("<ng7T}QejN<");
      assertNotNull(tag1);
      assertFalse(tag1.equals((Object)tag0));
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isSelfClosing());
      assertTrue(tag1.isInline());
      assertFalse(tag1.isBlock());
      assertFalse(tag1.isData());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.isEmpty());
      assertEquals("<ng7T}QejN<", tag1.toString());
      assertFalse(tag1.preserveWhitespace());
      assertEquals("<ng7T}QejN<", tag1.getName());
      assertNotSame(tag1, tag0);
      
      Pattern pattern0 = Pattern.compile("<ng7T}QejN<", (-3615));
      assertNotNull(pattern0);
      assertEquals((-3615), pattern0.flags());
      assertEquals("<ng7T}QejN<", pattern0.toString());
      assertEquals("<ng7T}QejN<", pattern0.pattern());
      
      String string1 = "";
      Pattern pattern1 = Pattern.compile("", 0);
      assertNotNull(pattern1);
      assertFalse(pattern1.equals((Object)pattern0));
      assertEquals("", pattern1.toString());
      assertEquals("", pattern1.pattern());
      assertEquals(0, pattern1.flags());
      assertNotSame(pattern1, pattern0);
      
      Matcher matcher0 = pattern0.matcher("Q!ep Ep:XN6 !n");
      assertNotNull(matcher0);
      assertFalse(pattern0.equals((Object)pattern1));
      assertEquals((-3615), pattern0.flags());
      assertEquals("<ng7T}QejN<", pattern0.toString());
      assertEquals("<ng7T}QejN<", pattern0.pattern());
      assertFalse(matcher0.hasTransparentBounds());
      assertEquals(0, matcher0.groupCount());
      assertEquals("java.util.regex.Matcher[pattern=<ng7T}QejN< region=0,15 lastmatch=]", matcher0.toString());
      assertTrue(matcher0.hasAnchoringBounds());
      assertNotSame(pattern0, pattern1);
      
      Elements elements0 = element0.getElementsByAttributeValueMatching(":nth-child(%d)", pattern0);
      assertNotNull(elements0);
      assertFalse(tag0.equals((Object)tag1));
      assertFalse(pattern0.equals((Object)pattern1));
      assertFalse(tag0.isKnownTag());
      assertEquals("q!ep ep:xn6 !n", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("q!ep ep:xn6 !n", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals(0, element0.siblingIndex());
      assertEquals("q!ep ep:xn6 !n", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Q!ep Ep:XN6 !n", element0.baseUri());
      assertEquals("q!ep ep:xn6 !n", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals((-3615), pattern0.flags());
      assertEquals("<ng7T}QejN<", pattern0.toString());
      assertEquals("<ng7T}QejN<", pattern0.pattern());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotSame(tag0, tag1);
      assertNotSame(pattern0, pattern1);
      
      // Undeclared exception!
      try { 
        element0.before("Q!ep Ep:XN6 !n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      String string0 = document0.cssSelector();
      assertNotNull(string0);
      assertEquals("#root", string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.before("b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      assertNotNull(document0);
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.createElement("textarea");
      assertNotNull(element0);
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.baseUri());
      assertFalse(element0.hasParent());
      
      Element element1 = element0.val("textarea");
      assertNotNull(element1);
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("textarea", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("textarea", element1.tagName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Elements elements0 = element1.getElementsContainingOwnText("textarea");
      assertNotNull(elements0);
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("textarea", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("textarea", element1.tagName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string0 = element0.outerHtml();
      assertNotNull(string0);
      assertEquals("<textarea>textarea</textarea>", string0);
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.baseUri());
      assertFalse(element0.hasParent());
      assertSame(element0, element1);
      
      Elements elements1 = element1.previousElementSiblings();
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("textarea", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("textarea", element1.tagName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(elements1, elements0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        element0.child(48);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 48, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      assertNotNull(document0);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.createElement("textarea");
      assertNotNull(element0);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      
      Element element1 = element0.val("textarea");
      assertNotNull(element1);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("textarea", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("textarea", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      element1.reparentChild(element0);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("textarea", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("textarea", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Elements elements0 = element1.previousElementSiblings();
      assertNotNull(elements0);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("textarea", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("textarea", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Document.createShell("slec");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("slec", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("slec", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Elements elements0 = document0.getElementsContainingOwnText("slec");
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("slec", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("slec", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Document document1 = (Document)document0.text("slec");
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("slec", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("slec", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("slec", document1.location());
      assertEquals("slec", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("slec", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("slec", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, attributes0.size());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.prepend("tgxtare=");
      assertNotNull(document1);
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("tgxtare=", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = "Children collection to be inserted must not be null.";
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      
      Document document1 = (Document)document0.prepend("Children collection to be inserted must not be null.");
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertSame(document0, document1);
      
      String string1 = element0.outerHtml();
      assertNotNull(string1);
      assertEquals("<body></body>", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertSame(document0, document1);
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertSame(document0, document1);
      
      document0.nodelistChanged();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertSame(document0, document1);
      
      Document document2 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      List<Node> list1 = document2.ensureChildNodes();
      assertNotNull(list1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, list1.size());
      assertFalse(list1.isEmpty());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(list1, list0);
      
      // Undeclared exception!
      try { 
        document2.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      
      String string0 = element0.data();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      
      Element element1 = element0.nextElementSibling();
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tgxtare=", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("tgxtare=", element1.baseUri());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      // Undeclared exception!
      try { 
        element1.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = parser1.parseInput("Ok", "x9<ZOtNug 9RZ");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("x9<ZOtNug 9RZ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("x9<ZOtNug 9RZ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Parser parser2 = parser0.setTrackErrors(63);
      assertNotNull(parser2);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      
      Document document1 = document0.parser(parser2);
      assertNotNull(document1);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals("x9<ZOtNug 9RZ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("x9<ZOtNug 9RZ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(parser2.isTrackErrors());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("x9<ZOtNug 9RZ", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("x9<ZOtNug 9RZ", document1.location());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(document0, document1);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertSame(document1, document0);
      
      Elements elements0 = document1.parents();
      assertNotNull(elements0);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals("x9<ZOtNug 9RZ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("x9<ZOtNug 9RZ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(parser2.isTrackErrors());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("x9<ZOtNug 9RZ", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("x9<ZOtNug 9RZ", document1.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(document0, document1);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertSame(document1, document0);
      
      String string0 = document1.val();
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals("x9<ZOtNug 9RZ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("x9<ZOtNug 9RZ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(parser2.isTrackErrors());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("x9<ZOtNug 9RZ", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("x9<ZOtNug 9RZ", document1.location());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(document0, document1);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertSame(document1, document0);
      
      Element element0 = document1.prependElement("Ok");
      assertNotNull(element0);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals("x9<ZOtNug 9RZ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("x9<ZOtNug 9RZ", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(parser2.isTrackErrors());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("x9<ZOtNug 9RZ", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("x9<ZOtNug 9RZ", document1.location());
      assertEquals("Ok", element0.tagName());
      assertEquals("x9<ZOtNug 9RZ", element0.baseUri());
      assertEquals("Ok", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(document0, document1);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertSame(document1, document0);
      
      Element element1 = document1.head();
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals("x9<ZOtNug 9RZ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("x9<ZOtNug 9RZ", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(parser2.isTrackErrors());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("x9<ZOtNug 9RZ", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("x9<ZOtNug 9RZ", document1.location());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals("x9<ZOtNug 9RZ", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(document0, document1);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertSame(document1, document0);
      assertNotSame(element1, element0);
      
      Element element2 = element1.empty();
      assertNotNull(element2);
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals("x9<ZOtNug 9RZ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("x9<ZOtNug 9RZ", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(parser2.isTrackErrors());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("x9<ZOtNug 9RZ", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("x9<ZOtNug 9RZ", document1.location());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals("x9<ZOtNug 9RZ", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertEquals("head", element2.tagName());
      assertEquals("x9<ZOtNug 9RZ", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(document0, document1);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertSame(document1, document0);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element1);
      assertNotSame(element2, element0);
      
      String string1 = document1.html();
      assertNotNull(string1);
      assertEquals("<Ok></Ok>\n<html>\n <head></head>\n <body>\n  Ok\n </body>\n</html>", string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals("x9<ZOtNug 9RZ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("x9<ZOtNug 9RZ", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(parser2.isTrackErrors());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("x9<ZOtNug 9RZ", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("x9<ZOtNug 9RZ", document1.location());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(document0, document1);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertSame(document1, document0);
      
      Tag tag0 = Tag.valueOf("x9<ZOtNug 9RZ", parseSettings0);
      assertNotNull(tag0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("x9<ZOtNug 9RZ", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("x9<ZOtNug 9RZ", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      
      CDataNode cDataNode0 = new CDataNode("org.jsoup.select.evaluator$containsdata");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      
      Attributes attributes1 = attributes0.put("]", false);
      assertNotNull(attributes1);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "]", attributes1);
      assertNotNull(pseudoTextElement0);
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("]", pseudoTextElement0.baseUri());
      assertEquals("x9<ZOtNug 9RZ", pseudoTextElement0.nodeName());
      assertEquals("x9<ZOtNug 9RZ", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.hasParent());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("x9<ZOtNug 9RZ", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("x9<ZOtNug 9RZ", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      // Undeclared exception!
      try { 
        document0.after((Node) pseudoTextElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.createElement("textarea");
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.baseUri());
      assertEquals("textarea", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      
      String string0 = element0.outerHtml();
      assertNotNull(string0);
      assertEquals("<textarea></textarea>", string0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.baseUri());
      assertEquals("textarea", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Pattern pattern0 = Pattern.compile("#document");
      assertNotNull(pattern0);
      assertEquals("#document", pattern0.toString());
      assertEquals("#document", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("#document", pattern0);
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", pattern0.toString());
      assertEquals("#document", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Elements elements1 = document0.children();
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertNotSame(elements1, elements0);
      
      List<DataNode> list1 = document0.dataNodes();
      assertNotNull(list1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      Elements elements2 = element0.previousElementSiblings();
      assertNotNull(elements2);
      assertTrue(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.baseUri());
      assertEquals("textarea", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      
      String string1 = element0.wholeText();
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.baseUri());
      assertEquals("textarea", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Element element0 = new Element("tgxtare=");
      assertNotNull(element0);
      assertEquals("tgxtare=", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tgxtare=", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      
      Element element1 = element0.val("tgxtare=");
      assertNotNull(element1);
      assertEquals("tgxtare=", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tgxtare=", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals("tgxtare=", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("tgxtare=", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      // Undeclared exception!
      try { 
        element1.selectFirst("tgxtare=");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'tgxtare=': unexpected token at '='
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      String string0 = document0.data();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Elements elements0 = document0.previousElementSiblings();
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("p", "");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("p", false);
      assertNotNull(mockFileWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertNotNull(document_OutputSettings1);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      mockFileWriter0.write("p", 0, 0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.clone();
      assertNotNull(document_OutputSettings2);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.prettyPrint(false);
      assertNotNull(document_OutputSettings3);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings1.outline(false);
      assertNotNull(document_OutputSettings4);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings3.indentAmount(55);
      assertNotNull(document_OutputSettings5);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings2));
      assertEquals(55, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(55, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(55, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings5.escapeMode());
      assertEquals(55, document_OutputSettings5.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings5.syntax());
      assertFalse(document_OutputSettings5.prettyPrint());
      assertFalse(document_OutputSettings5.outline());
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings5);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings5);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings5, document_OutputSettings2);
      assertSame(document_OutputSettings5, document_OutputSettings1);
      assertSame(document_OutputSettings5, document_OutputSettings3);
      assertSame(document_OutputSettings5, document_OutputSettings4);
      assertSame(document_OutputSettings5, document_OutputSettings0);
      
      document0.outerHtmlHead(mockFileWriter0, 0, document_OutputSettings5);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings2));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals(55, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(55, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(55, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings5.escapeMode());
      assertEquals(55, document_OutputSettings5.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings5.syntax());
      assertFalse(document_OutputSettings5.prettyPrint());
      assertFalse(document_OutputSettings5.outline());
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings5);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings5);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings5, document_OutputSettings2);
      assertSame(document_OutputSettings5, document_OutputSettings1);
      assertSame(document_OutputSettings5, document_OutputSettings3);
      assertSame(document_OutputSettings5, document_OutputSettings4);
      assertSame(document_OutputSettings5, document_OutputSettings0);
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Set<String> set0 = document1.classNames();
      assertNotNull(set0);
      assertFalse(set0.contains("p"));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      String string0 = document0.data();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.equals((Object)document1));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertNotSame(document0, document1);
      
      Elements elements0 = document0.getElementsByIndexEquals(6785);
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotSame(document0, document1);
      
      Element element0 = null;
      try {
        element0 = new Element((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = new Document("shTc");
      assertNotNull(document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("shTc", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("shTc", document0.baseUri());
      
      Elements elements0 = document0.getElementsByIndexLessThan((-1317));
      assertNotNull(elements0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("shTc", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("shTc", document0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must notbe null.");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("Children collection to be inserted must notbe null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must notbe null.", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.previousElementSiblings();
      assertNotNull(elements0);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("Children collection to be inserted must notbe null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must notbe null.", document1.location());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Tag tag0 = Tag.valueOf("y\"iQ");
      assertNotNull(tag0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertEquals("y\"iQ", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals("y\"iQ", tag0.getName());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attribute attribute0 = new Attribute("2Z>8}8;s/QB", "y\"iQ");
      assertNotNull(attribute0);
      assertEquals("y\"iQ", attribute0.getValue());
      assertEquals("2Z>8}8;s/QB", attribute0.getKey());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals("y\"iQ", attribute0.getValue());
      assertEquals("2Z>8}8;s/QB", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "y\"iQ", attributes1);
      assertNotNull(formElement0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertEquals("y\"iQ", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals("y\"iQ", tag0.getName());
      assertEquals(1, attributes0.size());
      assertEquals("y\"iQ", attribute0.getValue());
      assertEquals("2Z>8}8;s/QB", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertFalse(formElement0.isBlock());
      assertEquals("y\"iQ", formElement0.baseUri());
      assertEquals("y\"iQ", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("y\"iQ", formElement0.tagName());
      
      int int0 = formElement0.elementSiblingIndex();
      assertEquals(0, int0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertEquals("y\"iQ", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals("y\"iQ", tag0.getName());
      assertEquals(1, attributes0.size());
      assertEquals("y\"iQ", attribute0.getValue());
      assertEquals("2Z>8}8;s/QB", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertFalse(formElement0.isBlock());
      assertEquals("y\"iQ", formElement0.baseUri());
      assertEquals("y\"iQ", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("y\"iQ", formElement0.tagName());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("~r[+l<cN{vl\u0001<", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertEquals("~r[+l<cN{vl\u0001<", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertEquals("~r[+l<cN{vl\u0001<", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      
      Element element0 = new Element(tag0, "{>l~|a=K%4e5Mra");
      assertNotNull(element0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertEquals("~r[+l<cN{vl\u0001<", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertEquals("~r[+l<cN{vl\u0001<", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("~r[+l<cN{vl\u0001<", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("{>l~|a=K%4e5Mra", element0.baseUri());
      assertEquals("~r[+l<cN{vl\u0001<", element0.tagName());
      
      Element element1 = element0.shallowClone();
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertEquals("~r[+l<cN{vl\u0001<", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertEquals("~r[+l<cN{vl\u0001<", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("~r[+l<cN{vl\u0001<", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("{>l~|a=K%4e5Mra", element0.baseUri());
      assertEquals("~r[+l<cN{vl\u0001<", element0.tagName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("~r[+l<cN{vl\u0001<", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("~r[+l<cN{vl\u0001<", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("{>l~|a=K%4e5Mra", element1.baseUri());
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000085 textarea", "java.lang.string@0000000085 textarea");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      boolean boolean0 = Element.preserveWhitespace(document1);
      assertFalse(boolean0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document1 = document0.parser(parser0);
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.clone();
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("", document2.location());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Elements elements0 = document2.children();
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("", document2.location());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      // Undeclared exception!
      try { 
        document2.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Children collection to be inserted must notbe null.", "Children collection to be inserted must notbe null.");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Elements elements0 = document0.getElementsMatchingOwnText("Children collection to be inserted must notbe null.");
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      // Undeclared exception!
      try { 
        document0.prependElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("select", "select");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = document0.ownerDocument();
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("select", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.clone();
      assertNotNull(document2);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("select", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("select", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Element element0 = document2.appendElement("org.jsoup.select.Evaluator$ContainsData");
      assertNotNull(element0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("select", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("select", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("org.jsoup.select.evaluator$containsdata", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.select.evaluator$containsdata", element0.tagName());
      assertEquals("select", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      String string0 = document2.nodeName();
      assertNotNull(string0);
      assertEquals("#document", string0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("select", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("select", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      
      document1.siblingIndex = (-2881);
      assertEquals("#document", document0.nodeName());
      assertEquals((-2881), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals((-2881), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("select", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      
      Element element1 = element0.empty();
      assertNotNull(element1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals("#document", document0.nodeName());
      assertEquals((-2881), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals((-2881), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("select", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("select", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("org.jsoup.select.evaluator$containsdata", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.select.evaluator$containsdata", element0.tagName());
      assertEquals("select", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.select.evaluator$containsdata", element1.tagName());
      assertEquals("select", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("org.jsoup.select.evaluator$containsdata", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      assertNotNull(list0);
      assertFalse(set0.contains(string0));
      assertFalse(list0.contains(string0));
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Set<String> set1 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set1);
      assertFalse(set1.contains(string0));
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertSame(set1, set0);
      
      Element element2 = element0.classNames(set1);
      assertNotNull(element2);
      assertFalse(set1.contains(string0));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals("#document", document0.nodeName());
      assertEquals((-2881), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals((-2881), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("select", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("select", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("org.jsoup.select.evaluator$containsdata", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.select.evaluator$containsdata", element0.tagName());
      assertEquals("select", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertFalse(element2.isBlock());
      assertEquals("org.jsoup.select.evaluator$containsdata", element2.tagName());
      assertEquals("select", element2.baseUri());
      assertEquals("org.jsoup.select.evaluator$containsdata", element2.nodeName());
      assertEquals(1, element2.siblingIndex());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(set1, set0);
      assertSame(element2, element0);
      assertSame(element2, element1);
      
      Element element3 = element2.after((Node) document2);
      assertNotNull(element3);
      assertFalse(set1.contains(string0));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals("#document", document0.nodeName());
      assertEquals((-2881), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals((-2881), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("select", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.siblingIndex());
      assertEquals("select", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("org.jsoup.select.evaluator$containsdata", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.select.evaluator$containsdata", element0.tagName());
      assertEquals("select", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertFalse(element2.isBlock());
      assertEquals("org.jsoup.select.evaluator$containsdata", element2.tagName());
      assertEquals("select", element2.baseUri());
      assertEquals("org.jsoup.select.evaluator$containsdata", element2.nodeName());
      assertEquals(1, element2.siblingIndex());
      assertFalse(element3.isBlock());
      assertTrue(element3.hasParent());
      assertEquals("org.jsoup.select.evaluator$containsdata", element3.nodeName());
      assertEquals(1, element3.siblingIndex());
      assertEquals("org.jsoup.select.evaluator$containsdata", element3.tagName());
      assertEquals(0, element3.childNodeSize());
      assertEquals("select", element3.baseUri());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element0, element3);
      assertSame(set1, set0);
      assertSame(element2, element3);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertSame(element3, element0);
      assertSame(element3, element2);
      assertSame(element3, element1);
      
      Elements elements0 = document1.parents();
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertEquals("#document", document0.nodeName());
      assertEquals((-2881), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals((-2881), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("select", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      
      String string1 = element3.val();
      assertNotNull(string1);
      assertFalse(set1.contains(string1));
      assertEquals("", string1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("#document", document0.nodeName());
      assertEquals((-2881), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals((-2881), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("select", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("select", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("select", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.siblingIndex());
      assertEquals("select", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("org.jsoup.select.evaluator$containsdata", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.select.evaluator$containsdata", element0.tagName());
      assertEquals("select", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertFalse(element2.isBlock());
      assertEquals("org.jsoup.select.evaluator$containsdata", element2.tagName());
      assertEquals("select", element2.baseUri());
      assertEquals("org.jsoup.select.evaluator$containsdata", element2.nodeName());
      assertEquals(1, element2.siblingIndex());
      assertFalse(element3.isBlock());
      assertTrue(element3.hasParent());
      assertEquals("org.jsoup.select.evaluator$containsdata", element3.nodeName());
      assertEquals(1, element3.siblingIndex());
      assertEquals("org.jsoup.select.evaluator$containsdata", element3.tagName());
      assertEquals(0, element3.childNodeSize());
      assertEquals("select", element3.baseUri());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element0, element3);
      assertSame(set1, set0);
      assertSame(element2, element3);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertSame(element3, element0);
      assertSame(element3, element2);
      assertSame(element3, element1);
      
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "</", (Attributes) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = "";
      CDataNode cDataNode0 = new CDataNode("owO7");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Document.createShell(".\u0007/:");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(".\u0007/:", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(".\u0007/:", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Pattern pattern0 = Pattern.compile("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", pattern0.pattern());
      assertEquals("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", pattern0.toString());
      
      Stream<String> stream0 = pattern0.splitAsStream(".\u0007/:");
      assertNotNull(stream0);
      assertEquals(0, pattern0.flags());
      assertEquals("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", pattern0.pattern());
      assertEquals("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", pattern0.toString());
      
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(".\u0007/:", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(".\u0007/:", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, pattern0.flags());
      assertEquals("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", pattern0.pattern());
      assertEquals("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", pattern0.toString());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Elements elements1 = document0.getElementsByIndexLessThan(4);
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("#root", document0.tagName());
      assertEquals(".\u0007/:", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(".\u0007/:", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(elements1.isEmpty());
      assertEquals(3, elements1.size());
      assertNotSame(elements1, elements0);
      
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(".\u0007/:", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(".\u0007/:", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(".\u0007/:", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(".\u0007/:", document1.baseUri());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Node node0 = document1.nextSibling();
      assertNull(node0);
      assertEquals("#root", document0.tagName());
      assertEquals(".\u0007/:", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(".\u0007/:", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(".\u0007/:", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(".\u0007/:", document1.baseUri());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements2 = document1.getElementsByAttribute("L7iVFkDW{");
      assertNotNull(elements2);
      assertFalse(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertEquals("#root", document0.tagName());
      assertEquals(".\u0007/:", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(".\u0007/:", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(".\u0007/:", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(".\u0007/:", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragment("rp", "");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("rp", true);
      assertNotNull(mockFileWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertNotNull(document_OutputSettings1);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      mockFileWriter0.write("rp", 0, 0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.clone();
      assertNotNull(document_OutputSettings2);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.prettyPrint(false);
      assertNotNull(document_OutputSettings3);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      
      int int0 = 55;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.indentAmount(55);
      assertNotNull(document_OutputSettings4);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(55, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(55, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(55, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(55, document_OutputSettings4.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings4.outline());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      
      document0.outerHtmlHead(mockFileWriter0, 0, document_OutputSettings4);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(55, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(55, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(55, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(55, document_OutputSettings4.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings4.outline());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Set<String> set0 = document1.classNames();
      assertNotNull(set0);
      assertFalse(set0.contains("rp"));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      String string1 = document0.data();
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(document0.equals((Object)document1));
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotSame(document0, document1);
      
      // Undeclared exception!
      try { 
        document1.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Document.createShell("tgxtare=");
      assertNotNull(document0);
      assertEquals("tgxtare=", document0.location());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.getElementsMatchingText("tgxtare=");
      assertNotNull(elements0);
      assertEquals("tgxtare=", document0.location());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertEquals("tgxtare=", document0.location());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("tgxtare=");
      assertNotNull(evaluator_ContainsOwnText0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Element element0 = new Element("shT/c");
      assertNotNull(element0);
      assertFalse(element0.isBlock());
      assertEquals("shT/c", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("shT/c", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      
      String string0 = element0.data();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(element0.isBlock());
      assertEquals("shT/c", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("shT/c", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = "A<t";
      Element element0 = new Element("A<t");
      assertNotNull(element0);
      assertFalse(element0.isBlock());
      assertEquals("A<t", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("A<t", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      
      Elements elements0 = element0.getElementsMatchingOwnText("A<t");
      assertNotNull(elements0);
      assertFalse(element0.isBlock());
      assertEquals("A<t", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("A<t", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      String string1 = element0.data();
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(element0.isBlock());
      assertEquals("A<t", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("A<t", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      
      String string2 = element0.attr("<b");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(element0.isBlock());
      assertEquals("A<t", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("A<t", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      
      Pattern pattern0 = Pattern.compile("");
      assertNotNull(pattern0);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      
      String string3 = "";
      String[] stringArray0 = pattern0.split((CharSequence) "", (-39));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      
      String[] stringArray1 = pattern0.split((CharSequence) "A<t", 0);
      assertNotNull(stringArray1);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertNotSame(stringArray1, stringArray0);
      
      Pattern pattern1 = Pattern.compile("<b", 0);
      assertNotNull(pattern1);
      assertFalse(pattern1.equals((Object)pattern0));
      assertEquals("<b", pattern1.toString());
      assertEquals("<b", pattern1.pattern());
      assertEquals(0, pattern1.flags());
      assertNotSame(pattern1, pattern0);
      
      boolean boolean0 = Pattern.matches("", "");
      assertTrue(boolean0);
      
      Elements elements1 = element0.getElementsMatchingText(pattern0);
      assertNotNull(elements1);
      assertFalse(pattern0.equals((Object)pattern1));
      assertFalse(elements1.equals((Object)elements0));
      assertFalse(element0.isBlock());
      assertEquals("A<t", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("A<t", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertNotSame(pattern0, pattern1);
      assertNotSame(elements1, elements0);
      
      // Undeclared exception!
      try { 
        element0.wrap("5{H)M");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("head", document0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.wrap("head");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Document.createShell(".UtEO&uIl~d");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(".UtEO&uIl~d", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(".UtEO&uIl~d", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = Parser.parseBodyFragmentRelaxed("tgxtare=", "tgxtare=");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertNotSame(document1, document0);
      
      boolean boolean0 = document1.hasText();
      assertTrue(boolean0);
      assertFalse(document1.equals((Object)document0));
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertNotSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.createElement("textarea");
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.baseUri());
      assertEquals("textarea", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.tagName());
      assertFalse(element0.hasParent());
      
      Document document1 = Parser.parseBodyFragmentRelaxed("0F(bv:Hz}v#r\"%{L@nU", "org.jsoup.nodes.Element");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nodes.Element", document1.location());
      assertFalse(document1.isBlock());
      assertNotSame(document1, document0);
      
      String string0 = element0.val();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.equals((Object)document1));
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.baseUri());
      assertEquals("textarea", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.tagName());
      assertFalse(element0.hasParent());
      assertNotSame(document0, document1);
      
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Element element0 = new Element("textarea");
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("textarea", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = element0.val("textarea");
      assertNotNull(element1);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("textarea", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("textarea", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Document.createShell("tgxtare=");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.getElementById("tgxtare=");
      assertNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      boolean boolean0 = document0.hasClass("tgxtare=");
      assertFalse(boolean0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.removeClass("tgxtare=");
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Element element0 = new Element("dV3DxMIyWcf_");
      assertNotNull(element0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("dV3DxMIyWcf_", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("dV3DxMIyWcf_", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      Document document0 = Parser.parseBodyFragmentRelaxed("dV3DxMIyWcf_", "dV3DxMIyWcf_");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("dV3DxMIyWcf_", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("dV3DxMIyWcf_", document0.location());
      
      String string0 = element0.val();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("dV3DxMIyWcf_", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("dV3DxMIyWcf_", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = "org.jsoup.select.Evaluator$IndexGreaterThan";
      Document document0 = new Document("org.jsoup.select.Evaluator$IndexGreaterThan");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      String string1 = "";
      Document document1 = (Document)document0.addClass("");
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.getElementsByAttributeStarting("org.jsoup.select.Evaluator$IndexGreaterThan");
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string2 = document1.val();
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.removeClass(">)]i&|(sr8'P8i6");
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document2.empty();
      assertNotNull(document3);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      
      String string3 = document2.attr("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      
      // Undeclared exception!
      try { 
        document1.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.getElementsMatchingOwnText("tgxtare=");
      assertNotNull(elements0);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Document document1 = (Document)document0.addClass("tgxtare=");
      assertNotNull(document1);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.location());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = ":nth-child(%d)";
      Document document0 = new Document(":nth-child(%d)");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals(":nth-child(%d)", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(":nth-child(%d)", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      Elements elements0 = document0.getElementsMatchingOwnText(":nth-child(%d)");
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals(":nth-child(%d)", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(":nth-child(%d)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      String string1 = "";
      // Undeclared exception!
      try { 
        document0.createElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parse("QMI,MH]=8.CWg", "QMI,MH]=8.CWg");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("QMI,MH]=8.CWg", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("QMI,MH]=8.CWg", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = document0.ownerDocument();
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals("QMI,MH]=8.CWg", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("QMI,MH]=8.CWg", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("QMI,MH]=8.CWg", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("QMI,MH]=8.CWg", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.getElementsByAttributeValueEnding("QMI,MH]=8.CWg", "value");
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals("QMI,MH]=8.CWg", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("QMI,MH]=8.CWg", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("QMI,MH]=8.CWg", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("QMI,MH]=8.CWg", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("8tvp;*:yBZ&H5", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals("8tvp;*:ybz&h5", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("8tvp;*:ybz&h5", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      
      CDataNode cDataNode0 = new CDataNode("8tvp;*:yBZ&H5");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      
      Attributes attributes1 = attributes0.put("8tvp;*:yBZ&H5", false);
      assertNotNull(attributes1);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.clone();
      assertNotNull(attributes2);
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "8tvp;*:yBZ&H5", attributes2);
      assertNotNull(pseudoTextElement0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals("8tvp;*:ybz&h5", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("8tvp;*:ybz&h5", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("8tvp;*:ybz&h5", pseudoTextElement0.nodeName());
      assertEquals("8tvp;*:ybz&h5", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("8tvp;*:yBZ&H5", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      
      Element element0 = pseudoTextElement0.appendText("8tvp;*:yBZ&H5");
      assertNotNull(element0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals("8tvp;*:ybz&h5", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("8tvp;*:ybz&h5", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("8tvp;*:ybz&h5", pseudoTextElement0.nodeName());
      assertEquals("8tvp;*:ybz&h5", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("8tvp;*:yBZ&H5", pseudoTextElement0.baseUri());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("8tvp;*:ybz&h5", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("8tvp;*:yBZ&H5", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("8tvp;*:ybz&h5", element0.nodeName());
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertSame(pseudoTextElement0, element0);
      assertSame(element0, pseudoTextElement0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("gxtar@e=", "gxtar@e=");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = Parser.parse("gxtar@e=", "gxtar@e=");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.appendText(" h)FC!q-g");
      assertNotNull(document2);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      
      Element element0 = document0.createElement("textarea");
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertEquals("textarea", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      
      Element element1 = element0.val("textarea");
      assertNotNull(element1);
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertEquals("textarea", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element1.baseUri());
      assertEquals("textarea", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("textarea", element1.tagName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string0 = element0.outerHtml();
      assertNotNull(string0);
      assertEquals("<textarea>textarea</textarea>", string0);
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertEquals("textarea", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertSame(element0, element1);
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      Pattern pattern0 = Pattern.compile("<textarea>textarea</textarea>");
      assertNotNull(pattern0);
      assertEquals("<textarea>textarea</textarea>", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("<textarea>textarea</textarea>", pattern0.pattern());
      
      Document document1 = (Document)document0.toggleClass("v)fKzQFY9lpc'U^c");
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("textarea", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.appendText("org.jsoup.select.evaluator$containsdata");
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("textarea", document2.baseUri());
      assertEquals("textarea", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements0 = document2.previousElementSiblings();
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("textarea", document2.baseUri());
      assertEquals("textarea", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      String string1 = element0.wholeText();
      assertNotNull(string1);
      assertEquals("textarea", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertEquals("textarea", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(element0, element1);
      
      Appendable appendable0 = null;
      int int0 = 1751;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1751);
      assertNotNull(document_OutputSettings1);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1751, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1751, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      assertNotNull(document_OutputSettings2);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1751, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1751, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1751, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      assertNotNull(uS_ASCII0);
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertTrue(uS_ASCII0.isRegistered());
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset((Charset) uS_ASCII0);
      assertNotNull(document_OutputSettings3);
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertEquals(1751, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1751, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1751, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1751, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertTrue(uS_ASCII0.isRegistered());
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.outline(true);
      assertNotNull(document_OutputSettings4);
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertEquals(1751, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(1751, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertTrue(document_OutputSettings4.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1751, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1751, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(1751, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertTrue(uS_ASCII0.isRegistered());
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      
      // Undeclared exception!
      try { 
        element0.outerHtmlHead((Appendable) null, 1751, document_OutputSettings4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = Document.createShell("tg)xtare=");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tg)xtare=", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tg)xtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        document0.html((MockPrintStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = new Document("3% }|");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3% }|", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("3% }|", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3% }|", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("3% }|", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("3% }|", document1.baseUri());
      assertEquals("3% }|", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      CDataNode cDataNode0 = new CDataNode("L:;v)N,Qpn");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      String string0 = TextNode.normaliseWhitespace("L:;v)N,Qpn");
      assertNotNull(string0);
      assertEquals("L:;v)N,Qpn", string0);
      
      Element element0 = document1.shallowClone();
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3% }|", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("3% }|", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("3% }|", document1.baseUri());
      assertEquals("3% }|", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("#root", element0.nodeName());
      assertEquals("3% }|", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string1 = element0.val();
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3% }|", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("3% }|", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("3% }|", document1.baseUri());
      assertEquals("3% }|", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("#root", element0.nodeName());
      assertEquals("3% }|", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      TextNode textNode0 = cDataNode0.text((String) null);
      assertNotNull(textNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertEquals("#cdata", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertSame(cDataNode0, textNode0);
      assertSame(textNode0, cDataNode0);
      
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) textNode0;
      nodeArray0[2] = (Node) cDataNode0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) cDataNode0;
      nodeArray0[5] = (Node) cDataNode0;
      document1.addChildren(nodeArray0);
      assertEquals(6, nodeArray0.length);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3% }|", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("3% }|", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("3% }|", document1.baseUri());
      assertEquals("3% }|", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)textNode0.previousSibling();
      assertNotNull(document2);
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("3% }|", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("3% }|", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, cDataNode0.siblingIndex());
      assertTrue(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertTrue(textNode0.hasParent());
      assertEquals("#cdata", textNode0.nodeName());
      assertEquals(1, textNode0.siblingIndex());
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(cDataNode0, textNode0);
      assertSame(textNode0, cDataNode0);
      
      document1.replaceChild(document0, textNode0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3% }|", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("3% }|", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("3% }|", document1.baseUri());
      assertEquals("3% }|", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, cDataNode0.siblingIndex());
      assertTrue(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertTrue(textNode0.hasParent());
      assertEquals("#cdata", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(cDataNode0, textNode0);
      assertSame(textNode0, cDataNode0);
      
      document0.nodelistChanged();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3% }|", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("3% }|", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      String string2 = document1.outerHtml();
      assertNotNull(string2);
      assertEquals("<![CDATA[null]]>", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3% }|", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("3% }|", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("3% }|", document1.baseUri());
      assertEquals("3% }|", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      Element element1 = document1.appendElement("F0@EmDApfU");
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3% }|", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("3% }|", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("3% }|", document1.baseUri());
      assertEquals("3% }|", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("3% }|", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(element1, element0);
      
      Elements elements0 = element1.getElementsByIndexGreaterThan(0);
      assertNotNull(elements0);
      assertFalse(element1.equals((Object)element0));
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3% }|", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("3% }|", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("3% }|", document1.baseUri());
      assertEquals("3% }|", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("3% }|", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(element1, element0);
      
      Elements elements1 = document1.getElementsContainingOwnText((String) null);
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3% }|", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("3% }|", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("3% }|", document1.baseUri());
      assertEquals("3% }|", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, elements1.size());
      assertFalse(elements1.isEmpty());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = document0.getElementsByAttributeStarting("Ixs+wpgTNN.%>%G");
      assertNotNull(elements2);
      assertTrue(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3% }|", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("3% }|", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      Elements elements3 = document0.getElementsByAttributeStarting(")[tNM91");
      assertNotNull(elements3);
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements2));
      assertFalse(elements3.equals((Object)elements1));
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3% }|", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("3% }|", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      
      Elements elements4 = element1.getElementsByIndexLessThan(0);
      assertNotNull(elements4);
      assertFalse(element1.equals((Object)element0));
      assertTrue(elements4.equals((Object)elements3));
      assertFalse(elements4.equals((Object)elements1));
      assertTrue(elements4.equals((Object)elements2));
      assertTrue(elements4.equals((Object)elements0));
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3% }|", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("3% }|", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("3% }|", document1.baseUri());
      assertEquals("3% }|", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("3% }|", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertTrue(elements4.isEmpty());
      assertEquals(0, elements4.size());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(element1, element0);
      assertNotSame(elements4, elements2);
      assertNotSame(elements4, elements3);
      assertNotSame(elements4, elements1);
      assertNotSame(elements4, elements0);
      
      Document document3 = (Document)element1.parent();
      assertNotNull(document3);
      assertFalse(element1.equals((Object)element0));
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3% }|", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("3% }|", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("3% }|", document1.baseUri());
      assertEquals("3% }|", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("3% }|", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("3% }|", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("3% }|", document3.baseUri());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(element1, element0);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Element element0 = new Element("tgxtare=");
      assertNotNull(element0);
      assertEquals("tgxtare=", element0.nodeName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("tgxtare=", element0.tagName());
      
      Element element1 = document0.body();
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("tgxtare=", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertNotSame(element1, element0);
      
      Elements elements0 = document0.getAllElements();
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Element$1";
      Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Elements elements0 = document0.getAllElements();
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      
      // Undeclared exception!
      try { 
        document0.html((BufferedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      
      String string0 = document0.outerHtml();
      assertNotNull(string0);
      assertEquals("<html>\n <head></head>\n <body>\n  textarea\n </body>\n</html>", string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^l+%Smd", "78}P3qY");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("78}P3qY", document0.location());
      assertEquals("78}P3qY", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
      assertNotNull(evaluator_IsLastOfType0);
      assertEquals(":last-of-type", evaluator_IsLastOfType0.toString());
      
      boolean boolean0 = document0.is((Evaluator) evaluator_IsLastOfType0);
      assertFalse(boolean0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("78}P3qY", document0.location());
      assertEquals("78}P3qY", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(":last-of-type", evaluator_IsLastOfType0.toString());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Document.createShell(":matches(%s)");
      assertNotNull(document0);
      assertEquals(":matches(%s)", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":matches(%s)", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Element element0 = document0.prependElement("org.jsoup.select.Evaluator$IsFirstChild");
      assertNotNull(element0);
      assertEquals(":matches(%s)", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":matches(%s)", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("org.jsoup.select.evaluator$isfirstchild", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(":matches(%s)", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.select.evaluator$isfirstchild", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Document.createShell("tgxtare=");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      boolean boolean0 = document0.hasClass("tgxtare=");
      assertFalse(boolean0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Document document1 = (Document)document0.prependText("tgxtare=");
      assertNotNull(document1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tgxtare=", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("HiEw>|sX", "HiEw>|sX");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("HiEw>|sX", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("HiEw>|sX", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      String string0 = document0.tagName();
      assertNotNull(string0);
      assertEquals("#root", string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("HiEw>|sX", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("HiEw>|sX", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.html("#root");
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("HiEw>|sX", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("HiEw>|sX", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("HiEw>|sX", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("HiEw>|sX", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      String string0 = "nn'~";
      Document document0 = new Document("nn'~");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("nn'~", document0.baseUri());
      assertEquals("nn'~", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      
      Document document1 = document0.ownerDocument();
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("nn'~", document0.baseUri());
      assertEquals("nn'~", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("nn'~", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("nn'~", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document1.body();
      assertNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("nn'~", document0.baseUri());
      assertEquals("nn'~", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("nn'~", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("nn'~", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Evaluator.IsNthLastOfType evaluator_IsNthLastOfType0 = new Evaluator.IsNthLastOfType((-2482), 1054);
      assertNotNull(evaluator_IsNthLastOfType0);
      
      Set<String> set0 = document1.classNames();
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("nn'~", document0.baseUri());
      assertEquals("nn'~", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("nn'~", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("nn'~", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document1.is((Evaluator) evaluator_IsNthLastOfType0);
      assertFalse(boolean0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("nn'~", document0.baseUri());
      assertEquals("nn'~", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("nn'~", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("nn'~", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string1 = "e!p2;Iy6'=p";
      Document document2 = (Document)document0.prependText("e!p2;Iy6'=p");
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("nn'~", document0.baseUri());
      assertEquals("nn'~", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("nn'~", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("nn'~", document2.location());
      assertFalse(document2.hasParent());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Node node0 = document2.nextSibling();
      assertNull(node0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("nn'~", document0.baseUri());
      assertEquals("nn'~", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("nn'~", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("nn'~", document2.location());
      assertFalse(document2.hasParent());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      String string2 = null;
      Document document3 = (Document)document2.append("nn'~");
      assertNotNull(document3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("nn'~", document0.baseUri());
      assertEquals("nn'~", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("nn'~", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("nn'~", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("nn'~", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("nn'~", document3.location());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      // Undeclared exception!
      try { 
        Pattern.compile((String) null, (-2482));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tg)xtare=", "tg)xtare=");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tg)xtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tg)xtare=", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tg)xtare=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tg)xtare=", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.prepend("Children collection to be inserted must not be null.");
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.normalise();
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document2.toggleClass("col");
      assertNotNull(document3);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      boolean boolean0 = document1.hasClass("Children collection to be inserted must not be null.");
      assertFalse(boolean0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      
      Document document4 = (Document)document1.appendText("7y|wpy");
      assertNotNull(document4);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document4.location());
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document0);
      
      Elements elements0 = document3.getElementsByIndexLessThan((-56));
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(2, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document4);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      Elements elements1 = document1.getAllElements();
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(4, elements1.size());
      assertFalse(elements1.isEmpty());
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = new Document("applet");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("applet", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("applet", document0.location());
      
      Document document1 = (Document)document0.removeClass("applet");
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("applet", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("applet", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("applet", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("applet", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      List<Node> list0 = document1.childNodesCopy();
      assertNotNull(list0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("applet", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("applet", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("applet", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("applet", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.appendTo(document1);
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertEquals("applet", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("applet", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("applet", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("applet", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("applet", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("applet", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document0.toggleClass(" > ");
      assertNotNull(document3);
      assertEquals("#root", document0.tagName());
      assertEquals("applet", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("applet", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("applet", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertTrue(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("applet", document3.location());
      assertEquals("#document", document3.nodeName());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      boolean boolean0 = document3.hasClass(" > ");
      assertFalse(boolean0);
      assertEquals("#root", document0.tagName());
      assertEquals("applet", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("applet", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("applet", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertTrue(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("applet", document3.location());
      assertEquals("#document", document3.nodeName());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals("#root", document0.tagName());
      assertEquals("applet", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("applet", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, attributes0.size());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must notbe null.", "Children collection to be inserted must notbe null.");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = new Document("Children collection to be inserted must notbe null.");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("Children collection to be inserted must notbe null.", document1.baseUri());
      assertEquals("Children collection to be inserted must notbe null.", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Elements elements0 = document1.getElementsByAttributeStarting("Children collection to be inserted must notbe null.");
      assertNotNull(elements0);
      assertFalse(document1.equals((Object)document0));
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("Children collection to be inserted must notbe null.", document1.baseUri());
      assertEquals("Children collection to be inserted must notbe null.", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.createElement(":contains");
      assertNotNull(element0);
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(":contains", element0.nodeName());
      assertEquals("tgxtare=", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(":contains", element0.tagName());
      
      Document document1 = (Document)document0.val("tgxtare=");
      assertNotNull(document1);
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document1.outerHtml();
      assertNotNull(string0);
      assertEquals("<html>\n <head></head>\n <body>\n  tgxtare=\n </body>\n</html>", string0);
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile(":contains");
      assertNotNull(pattern0);
      assertEquals(":contains", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals(":contains", pattern0.toString());
      
      boolean boolean0 = document0.hasAttr("tgxtare=");
      assertFalse(boolean0);
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertSame(document0, document1);
      
      Document document2 = (Document)document0.toggleClass("v)fKzQFY9lpc'U^c");
      assertNotNull(document2);
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("tgxtare=", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("tgxtare=", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean1 = document2.hasClass("paCp");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("tgxtare=", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("tgxtare=", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document0.appendText("html");
      assertNotNull(document3);
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertEquals("tgxtare=", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("tgxtare=", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      String string1 = document0.wholeText();
      assertNotNull(string1);
      assertEquals("tgxtare=html", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      
      Comment comment0 = new Comment("v)fKzQFY9lpc'U^c");
      assertNotNull(comment0);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      
      boolean boolean2 = Element.preserveWhitespace(comment0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      
      Elements elements0 = document2.nextElementSiblings();
      assertNotNull(elements0);
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("tgxtare=", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("tgxtare=", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("E", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isKnownTag());
      assertEquals("E", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("E", tag0.toString());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, ":", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isKnownTag());
      assertEquals("E", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("E", tag0.toString());
      assertEquals(0, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals(":", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals("E", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("E", formElement0.nodeName());
      
      List<Node> list0 = parser0.parseFragmentInput("E", formElement0, "");
      assertNotNull(list0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(tag0.isKnownTag());
      assertEquals("E", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("E", tag0.toString());
      assertEquals(0, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals(":", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals("E", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("E", formElement0.nodeName());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      String string0 = parseSettings0.normalizeTag("E");
      assertNotNull(string0);
      assertEquals("E", string0);
      
      Parser parser1 = parser0.setTrackErrors((-1889));
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      List<Node> list1 = parser1.parseFragmentInput(":", formElement0, "");
      assertNotNull(list1);
      assertFalse(list1.equals((Object)list0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(tag0.isKnownTag());
      assertEquals("E", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("E", tag0.toString());
      assertEquals(0, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals(":", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals("E", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("E", formElement0.nodeName());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(list1, list0);
      
      ParseSettings parseSettings1 = ParseSettings.preserveCase;
      assertNotNull(parseSettings1);
      assertFalse(parseSettings1.equals((Object)parseSettings0));
      assertNotSame(parseSettings1, parseSettings0);
      
      String string1 = parseSettings1.normalizeAttribute("j}");
      assertNotNull(string1);
      assertEquals("j}", string1);
      assertFalse(parseSettings1.equals((Object)parseSettings0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(parseSettings1, parseSettings0);
      
      Parser parser2 = parser1.settings(parseSettings1);
      assertNotNull(parser2);
      assertFalse(parseSettings1.equals((Object)parseSettings0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertNotSame(parseSettings1, parseSettings0);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      
      String string2 = "datalist";
      Document document0 = parser2.parseInput("datalist", "#root");
      assertNotNull(document0);
      assertFalse(parseSettings1.equals((Object)parseSettings0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertNotSame(parseSettings1, parseSettings0);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      
      boolean boolean0 = document0.isBlock();
      assertFalse(boolean0);
      assertFalse(parseSettings1.equals((Object)parseSettings0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertNotSame(parseSettings1, parseSettings0);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      
      String string3 = parseSettings1.normalizeTag("ismap");
      assertNotNull(string3);
      assertEquals("ismap", string3);
      assertFalse(parseSettings1.equals((Object)parseSettings0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(parseSettings1, parseSettings0);
      
      Elements elements0 = document0.getElementsByAttributeStarting("pre");
      assertNotNull(elements0);
      assertFalse(parseSettings1.equals((Object)parseSettings0));
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertNotSame(parseSettings1, parseSettings0);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      
      boolean boolean1 = formElement0.hasClass("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(parseSettings0.equals((Object)parseSettings1));
      assertFalse(tag0.isKnownTag());
      assertEquals("E", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("E", tag0.toString());
      assertEquals(0, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals(":", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals("E", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("E", formElement0.nodeName());
      assertNotSame(parseSettings0, parseSettings1);
      
      boolean boolean2 = Element.preserveWhitespace(formElement0);
      assertFalse(boolean2);
      assertFalse(parseSettings0.equals((Object)parseSettings1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(tag0.isKnownTag());
      assertEquals("E", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("E", tag0.toString());
      assertEquals(0, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals(":", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals("E", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("E", formElement0.nodeName());
      assertNotSame(parseSettings0, parseSettings1);
      
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Document document0 = new Document("tgxtare=");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Elements elements0 = document0.nextElementSiblings();
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Document document1 = (Document)document0.val("tgxtare=");
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Document document0 = Document.createShell("tgxtare=");
      assertNotNull(document0);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.previousElementSiblings();
      assertNotNull(elements0);
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = parser1.parseInput("Ok", "x9<ZOtNug 9RZ");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("x9<ZOtNug 9RZ", document0.location());
      assertEquals("x9<ZOtNug 9RZ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Parser parser2 = parser0.setTrackErrors(63);
      assertNotNull(parser2);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      
      Document document1 = document0.parser(parser2);
      assertNotNull(document1);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("x9<ZOtNug 9RZ", document0.location());
      assertEquals("x9<ZOtNug 9RZ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(parser2.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("x9<ZOtNug 9RZ", document1.location());
      assertEquals("x9<ZOtNug 9RZ", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(document0, document1);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertSame(document1, document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertNotNull(document2);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("x9<ZOtNug 9RZ", document0.location());
      assertEquals("x9<ZOtNug 9RZ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(parser2.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("x9<ZOtNug 9RZ", document1.location());
      assertEquals("x9<ZOtNug 9RZ", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("x9<ZOtNug 9RZ", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("x9<ZOtNug 9RZ", document2.location());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = document2.normalise();
      assertNotNull(document3);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("x9<ZOtNug 9RZ", document0.location());
      assertEquals("x9<ZOtNug 9RZ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(parser2.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("x9<ZOtNug 9RZ", document1.location());
      assertEquals("x9<ZOtNug 9RZ", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("x9<ZOtNug 9RZ", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("x9<ZOtNug 9RZ", document2.location());
      assertEquals("x9<ZOtNug 9RZ", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("x9<ZOtNug 9RZ", document3.location());
      assertFalse(document3.isBlock());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      Elements elements0 = document3.nextElementSiblings();
      assertNotNull(elements0);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("x9<ZOtNug 9RZ", document0.location());
      assertEquals("x9<ZOtNug 9RZ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(parser2.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("x9<ZOtNug 9RZ", document1.location());
      assertEquals("x9<ZOtNug 9RZ", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("x9<ZOtNug 9RZ", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("x9<ZOtNug 9RZ", document2.location());
      assertEquals("x9<ZOtNug 9RZ", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("x9<ZOtNug 9RZ", document3.location());
      assertFalse(document3.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Element element0 = new Element("tgxtare=");
      assertNotNull(element0);
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("tgxtare=", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("tgxtare=", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      
      // Undeclared exception!
      try { 
        element0.insertChildren(34, (Collection<? extends Node>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Children collection to be inserted must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      
      Elements elements0 = document0.getElementsByTag("tgxtare=");
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tgxtare=", document0.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      String string0 = "tgxtare=";
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      
      Elements elements0 = document0.getElementsMatchingOwnText("tgxtare=");
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      // Undeclared exception!
      try { 
        document0.insertChildren(34, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Document document0 = new Document("shT9/c");
      assertNotNull(document0);
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("shT9/c", document0.location());
      assertEquals("shT9/c", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      String string0 = "\"hKIP~t`O2s@H\\ux";
      Elements elements0 = document0.getElementsByAttribute(string0);
      assertNotNull(elements0);
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("shT9/c", document0.location());
      assertEquals("shT9/c", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = new Document("tgxtare=");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("tgxtare=", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tgxtare=", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      
      Elements elements0 = document0.getElementsContainingText("tgxtare=");
      assertNotNull(elements0);
      assertFalse(document0.equals((Object)document1));
      assertEquals("tgxtare=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
      assertNotSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      String string0 = "Insert position out of bounds.";
      Document document0 = Parser.parse("Insert position out of bounds.", "q34");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("q34", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("q34", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("q34", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("q34", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("q34", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("q34", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      Elements elements0 = document0.getElementsContainingText("");
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("q34", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("q34", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertSame(document0, document1);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(58);
      assertNotNull(document_OutputSettings1);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(58, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(58, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertFalse(set0.contains("Insert position out of bounds."));
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      assertNotNull(document_OutputSettings2);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(58, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(58, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(58, document_OutputSettings2.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      
      Node[] nodeArray0 = document1.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals(1, nodeArray0.length);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("q34", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("q34", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("q34", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("q34", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.outputSettings(document_OutputSettings2);
      assertNotNull(document2);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("q34", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("q34", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("q34", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("q34", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(58, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(58, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(58, document_OutputSettings2.indentAmount());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("q34", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("q34", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements1 = document2.getElementsByAttribute("Insert position out of bounds.");
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("q34", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("q34", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("q34", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("q34", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(58, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(58, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(58, document_OutputSettings2.indentAmount());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("q34", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("q34", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(elements1, elements0);
      
      // Undeclared exception!
      try { 
        document2.insertChildren(58, (Collection<? extends Node>) elements1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      boolean boolean0 = Element.preserveWhitespace(document0);
      assertFalse(boolean0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tgxtare=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Document document0 = new Document("tgxtare=");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("tgxtare=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tgxtare=", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
      assertFalse(document0.equals((Object)document1));
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tgxtare=", document0.location());
      assertEquals("tgxtare=", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      String string0 = "8k{z*r01w5yz7\"q(";
      Document document0 = Document.createShell("8k{z*r01w5yz7\"q(");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("8k{z*r01w5yz7\"q(", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("8k{z*r01w5yz7\"q(", document0.location());
      assertFalse(document0.isBlock());
      
      String string1 = "";
      Element element0 = document0.createElement("8k{z*r01w5yz7\"q(");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("8k{z*r01w5yz7\"q(", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("8k{z*r01w5yz7\"q(", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("8k{z*r01w5yz7\"q(", element0.baseUri());
      assertEquals("8k{z*r01w5yz7\"q(", element0.nodeName());
      assertEquals("8k{z*r01w5yz7\"q(", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      Document document1 = (Document)document0.doClone(element0);
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document0.hasParent());
      assertEquals("8k{z*r01w5yz7\"q(", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("8k{z*r01w5yz7\"q(", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("8k{z*r01w5yz7\"q(", element0.baseUri());
      assertEquals("8k{z*r01w5yz7\"q(", element0.nodeName());
      assertEquals("8k{z*r01w5yz7\"q(", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("8k{z*r01w5yz7\"q(", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("8k{z*r01w5yz7\"q(", document1.location());
      assertFalse(document1.isBlock());
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Element element1 = document0.previousElementSibling();
      assertNull(element1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.hasParent());
      assertEquals("8k{z*r01w5yz7\"q(", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("8k{z*r01w5yz7\"q(", document0.location());
      assertFalse(document0.isBlock());
      assertNotSame(document0, document1);
      
      // Undeclared exception!
      try { 
        document0.absUrl("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Document document0 = Parser.parse("Children collection tobe inserted must notbe null.", "Children collection tobe inserted must notbe null.");
      assertNotNull(document0);
      assertEquals("Children collection tobe inserted must notbe null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection tobe inserted must notbe null.", document0.location());
      
      document0.reparentChild(document0);
      assertEquals("Children collection tobe inserted must notbe null.", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection tobe inserted must notbe null.", document0.location());
      
      Elements elements0 = document0.previousElementSiblings();
      assertNotNull(elements0);
      assertEquals("Children collection tobe inserted must notbe null.", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection tobe inserted must notbe null.", document0.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      // Undeclared exception!
      try { 
        document0.after((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must notbe null.");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("Children collection to be inserted must notbe null.", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("Children collection to be inserted must notbe null.", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.previousElementSiblings();
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Children collection to be inserted must notbe null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("Children collection to be inserted must notbe null.", document0.baseUri());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(document0, document1);
      
      // Undeclared exception!
      try { 
        document0.after((Node) document1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      String string0 = Parser.unescapeEntities("", false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Document document0 = parser1.parseInput(" > ", "");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      // Undeclared exception!
      try { 
        document0.after((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Element element0 = new Element("tgxtare=");
      assertNotNull(element0);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("tgxtare=", element0.tagName());
      assertEquals("tgxtare=", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("tgxtare=", element0.tagName());
      assertEquals("tgxtare=", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      String string0 = element0.cssSelector();
      assertNotNull(string0);
      assertEquals("tgxtare=", string0);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("tgxtare=", element0.tagName());
      assertEquals("tgxtare=", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must notbe null.");
      Element element0 = document0.appendTo(document0);
      Element.preserveWhitespace(document0);
      // Undeclared exception!
      try { 
        element0.select("\"OG6V=^]02WM");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '\"OG6V=^]02WM': unexpected token at '\"OG6V=^]02WM'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      Elements elements0 = document0.getElementsByIndexGreaterThan(858);
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals("tgxtare=", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgxtare=", "tgxtare=");
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, int0);
      
      Elements elements0 = document0.getElementsByClass("tgxtare=");
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = new Document("tgxtare=");
      assertEquals("tgxtare=", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Document document0 = Parser.parse("EndTagOpen", "EndTagOpen");
      document0.parents();
      assertEquals("EndTagOpen", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf(".", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "~5k)", attributes0);
      formElement0.getElementsByIndexGreaterThan((-1000));
      formElement0.childNodeSize();
      // Undeclared exception!
      try { 
        formElement0.select("~5k)");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '5k)': unexpected token at ')'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
}
