/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 08:45:54 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Document.createShell(":%s(%dn%+d)");
      document0.addClass(":%s(%dn%+d)");
      document0.setSiblingIndex(1390);
      document0.hasClass("            ");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.getElementsByAttributeValueMatching("", "Children collection to be inserted must not be null.");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Element element0 = new Element("fo.UueZu4fi]");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueMatching("fo.UueZu4fi]", "V(l#fYOMEyqo hXX0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: V(l#fYOMEyqo hXX0
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("org.jsoup.nodes.Element$NodeList", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("1u5Q%${_ZN\"?#~38J7", "89de#zZZ#-U# .Jd@P");
      Node[] nodeArray0 = new Node[9];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parse("mlAbjef", "mlAbjef");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlTail(stringBuilder0, 7, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parse("ruby", "ruby");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.doSetBaseUri("hgroup");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Tag tag0 = Tag.valueOf(")p");
      Element element0 = new Element(tag0, "textar5ea");
      Document document0 = Parser.parseBodyFragmentRelaxed("textar5ea", "textar5ea");
      Element element1 = element0.appendTo(document0);
      element1.wrap(")p");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag ame must not be emt", "Tag ame must not be emt");
      Element element0 = document0.body();
      element0.wrap("[Yvb");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Element element0 = new Element(":fzw}xb8");
      element0.wholeText();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("mhAbSef", "");
      Element element0 = document0.head();
      Element element1 = element0.appendTo(document0);
      element1.val("");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("~c", "~c");
      document0.setSiblingIndex((-2));
      document0.val("u:=\n");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Element element0 = new Element("XkX}&c>o*I");
      element0.val("Insert position out of bounds.");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Document.createShell("mhAbSef");
      Element element0 = document0.empty();
      element0.toggleClass("mhAbSef");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag ame must not be emt", "[n3G`suJZR");
      Element element0 = document0.body();
      element0.text("[n3G`suJZR");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("~c", "~c");
      Element element0 = document0.appendTo(document0);
      element0.text("~c");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("~c", "~c");
      document0.text("~c");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("~c", "~c");
      document0.setSiblingIndex((-2));
      document0.tagName("'g~gB_! *Uu4/");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parse("%K7MILz", "body");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parse("bRDE0%f1zaiyJIa-", "bRDE0%f1zaiyJIa-");
      Element element0 = document0.body();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$2", "fo.UueZu4fi]");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parse("mlAbjef", "mlAbjef");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Element element0 = new Element("Efzwexb8");
      element0.selectFirst("Efzwexb8");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Efzwexb8", "Efzwexb8");
      Element element0 = document0.tagName("Efzwexb8");
      element0.selectFirst("Efzwexb8");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parse(" />", "mhAbSef");
      document0.select("mhAbSef");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Element element0 = new Element("Efzwexb8");
      element0.select("Efzwexb8");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Document.createShell("-yd1vhcjh");
      Element element0 = document0.body();
      element0.removeClass("-yd1vhcjh");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Document.createShell("~c");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
      document0.removeClass("~c");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Document.createShell("~c");
      document0.empty();
      document0.removeClass("~c");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("mhAbSef", "");
      document0.appendTo(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parse(" />", "mhAbSef");
      document0.appendTo(document0);
      document0.prependText("ZbGV3.NqV0");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parse(" />", "mhAbSef");
      Element element0 = document0.head();
      element0.prependText("ZbGV3.NqV0");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Element element0 = new Element("XkX}&c>o*I");
      element0.prependElement("SKIP_ENTIRELY");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parse("w. 2Nv(u-'Yj[c3@'H", "(9(=i@(u^DZa)");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      Element element0 = document0.body();
      element0.prepend("org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("~c", "~c");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*", "uZ[YW;M^xjh0a:");
      Element element0 = document0.head();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "br");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("t?xt:r5;", "t?xt:r5;");
      Element element0 = document0.head();
      Document document1 = (Document)document0.appendTo(element0);
      document1.parent();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Tag tag0 = Tag.valueOf("EOF");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "mlabjef", attributes0);
      Document document0 = Parser.parseBodyFragmentRelaxed("EOF", "EOF");
      element0.appendTo(document0);
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.prependText("p[|ff;AX^X}d*w;F");
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parse(" />", "mhAbSef");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parse("$SOxEm-y@_Rm<g+!", "$SOxEm-y@_Rm<g+!");
      Element element0 = document0.head();
      element0.appendTo(document0);
      document0.reparentChild(document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parse("mlAbjef", "mlAbjef");
      Element element0 = document0.appendTo(document0);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Document.createShell("/=8^Ao;FE9X_U|{{");
      document0.prependChild(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "head");
      Pattern pattern0 = Pattern.compile("");
      Evaluator.MatchesOwn evaluator_MatchesOwn0 = new Evaluator.MatchesOwn(pattern0);
      document0.is((Evaluator) evaluator_MatchesOwn0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("mhAbSef", "");
      document0.is("mhAbSef");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parse("J)l", "J)l");
      Node[] nodeArray0 = new Node[0];
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Document.createShell("~M");
      Element element0 = document0.child(0);
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      element1.val("~M");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = new Document("mhAbSef");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("C*FD", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "C*FD", attributes0);
      pseudoTextElement0.html((OutputStreamWriter) null);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "ccOZg_qv>Z5gF3c");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Element element0 = new Element("~M");
      element0.html();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parse("strong", "strong");
      Element element0 = document0.body();
      element0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parse("%K7MILz", "body");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Pattern pattern0 = Pattern.compile("aiv4='VHAB.}8", 12);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Pattern pattern0 = Pattern.compile("", 58);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.getElementsMatchingOwnText("");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Element element0 = new Element("Efzwexb8");
      element0.getElementsContainingText("Efzwexb8");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Element element0 = new Element("Efzwexb8");
      element0.getElementsContainingOwnText("Efzwexb8");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Element element0 = new Element("XkX}&c>o*I");
      element0.getElementsByTag("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Element element0 = new Element("5OHzJvxX+X|pj*P^");
      element0.getElementsByTag("5OHzJvxX+X|pj*P^");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parse(" />", "mhAbSef");
      document0.getElementsByIndexLessThan((-3041));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("mhAbSef", "");
      document0.getElementsByIndexGreaterThan(0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Document.createShell("~c");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = new Document("bdo");
      document0.getElementsByAttributeValueStarting("bdo", "bdo");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag amemust not be em", "Tag amemust not be em");
      document0.getElementsByAttributeValueNot("Tag amemust not be em", "Tag amemust not be em");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "br");
      document0.getElementsByAttributeValue("head", "_I,");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("CgP%b~~Q", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("Tag ame must not be emt", "CgP%b~~Q");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "fWQ{j-?_J", attributes1);
      formElement0.getElementsByAttributeStarting("Tag ame must not be emt");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":fzW}xB8");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("queue not long enough to consume sequence", "org.jsoup.nodes.Element$2");
      Attributes attributes1 = attributes0.put(attribute0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "class", attributes1);
      pseudoTextElement0.getElementsByAttribute("queue not long enough to consume sequence");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parse(" />", "mhAbSef");
      document0.appendTo(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      Element element0 = document0.insertChildren(0, nodeArray0);
      document0.doClone(element0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.body();
      element0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parse(">.a3", "#");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parse(" />", "mhAbSef");
      Element element0 = document0.head();
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parse("CJ)l", "CJ)l");
      Element element0 = document0.appendTo(document0);
      Set<String> set0 = document0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parse("9qK_^9rc^&4ET", "9qK_^9rc^&4ET");
      Element element0 = document0.empty();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XkX}&c>o*I", "mhAbSef");
      Element element0 = document0.addClass("mhAbSef");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element", "Q3FK]NYbTkc");
      Element element0 = document0.head();
      Element element1 = element0.appendTo(document0);
      element1.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("mhAbSef", "9qKi^9rT^s4ET");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      Element element0 = document0.insertChildren(0, nodeArray0);
      element0.child(0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("mhAbSef", "");
      Element element0 = document0.child(0);
      document0.appendTo(element0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("~c", "~c");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      Element element0 = document0.insertChildren(0, nodeArray0);
      document0.empty();
      DocumentType documentType0 = new DocumentType("~c", (String) null, "~c", "strong");
      element0.before((Node) documentType0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parse(" />", "bhAbSef");
      Element element0 = document0.head();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Tag tag0 = Tag.valueOf(")p");
      Element element0 = new Element(tag0, "textar5ea");
      Document document0 = Parser.parseBodyFragmentRelaxed("textar5ea", "textar5ea");
      element0.appendTo(document0);
      element0.append(")p");
      element0.before((Node) element0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Tag tag0 = Tag.valueOf(")p");
      Element element0 = new Element(tag0, "textar5ea");
      Document document0 = Parser.parseBodyFragmentRelaxed("textar5ea", "<)!LE{GE.//6&cibt<8");
      Element element1 = element0.appendTo(document0);
      element1.before("FMsnC*vJY");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parse("mhAbSef", "mhAbSef");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element$2");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Element$2", attributes0);
      formElement0.val("|\"X=GD5-`!J:'?:");
      formElement0.attributes();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      Element element0 = document0.body();
      element0.attr("org.jsoup.nodes.Element$2", false);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "ccOZg_qv>Z5gF3c");
      Element element0 = document0.head();
      element0.attr(".ha+V)9Jl&gb,z4zhv", "<html>\n <head></head>\n <body>\n  textarea\n </body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parse("B\"2(z0z0ULez.{^,Q", "qa%t[o");
      Document document1 = new Document(" />");
      Document document2 = (Document)document1.appendTo(document0);
      document2.attr("class", "]LXJeh>/$?qlV");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = new Document(" />");
      document0.attr("class", "]LXJeh>/$?qlV");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      Element element0 = document0.tagName("head");
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.body();
      Element element1 = element0.appendText("%K*x%G&x$'%|g^j");
      element1.toggleClass("%K*x%G&x$'%|g^j");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parse("default", "default");
      document0.appendElement("9qki^9rt^s4et");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Tag tag0 = Tag.valueOf("svg");
      Element element0 = new Element(tag0, "svg");
      element0.appendElement("svg");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ab*@n0]5>;kV&R", "Ab*@n0]5>;kV&R");
      Element element0 = document0.body();
      DataNode dataNode0 = DataNode.createFromEncoded("Unexpected characters returned for ", "Ab*@n0]5>;kV&R");
      element0.appendChild(dataNode0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("mhAbSef", "");
      Element element0 = document0.appendChild(document0);
      element0.empty();
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.body();
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.body();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t?xt:r5;", "t?xt:r5;");
      document0.reparentChild(document0);
      Element element0 = document0.head();
      document0.after((Node) element0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Tag tag0 = Tag.valueOf(")p");
      Element element0 = new Element(tag0, "textar5ea");
      Document document0 = Parser.parseBodyFragmentRelaxed("textar5ea", "textar5ea");
      element0.appendTo(document0);
      Element element1 = element0.append(")p");
      element1.after("<)p></)p>");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("~c", "~c");
      Element element0 = document0.body();
      element0.after("~c");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parse(" />", "mhAbSef");
      Element element0 = document0.appendTo(document0);
      element0.addClass(" />");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parse(" />", "mhAbSef");
      Element element0 = document0.head();
      element0.addClass(" />");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textar5ea", "textar5ea");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.wrap("textar5ea");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag ame must not Oe emt", "Tag ame must not Oe emt");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.val("Tag ame must not Oe emt");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Efzwexb8", "Efzwexb8");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(":fzw}xb8", ":fzw}xb8");
      // Undeclared exception!
      try { 
        document0.text(":fzw}xb~8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parse("Efzwexb8", "#D");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("mhAbSef", "");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
      document0.empty();
      document0.setSiblingIndex((-1029));
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t?xt:r5;", "t?xt:r5;");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.tagName("t?xt:r5;");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Document.createShell("~c");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
      document0.empty();
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hAs\"~T*Pj:usFa14^", "Tag ame must not be emt");
      // Undeclared exception!
      try { 
        document0.selectFirst("hAs\"~T*Pj:usFa14^");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'hAs\"~T*Pj:usFa14^': unexpected token at '\"~T*Pj:usFa14^'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("sUEsT@~tj_0mVQ-P", "sUEsT@~tj_0mVQ-P");
      // Undeclared exception!
      try { 
        document0.selectFirst("+nT<i(%r7fy");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'r'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parse("mlAbjef", "mlAbjef");
      // Undeclared exception!
      try { 
        document0.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("mhAbSef", "");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("html", "html");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("t?xt:r5;", "t?xt:r5;");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.prependElement("#root");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Element element0 = new Element("XkX}&c>o*I");
      CDataNode cDataNode0 = new CDataNode(" /93deQ+UZedS,(e\"");
      Node node0 = cDataNode0.doClone(element0);
      // Undeclared exception!
      try { 
        element0.prependChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$IsEmpty", "II;Xm[)k)h}&2Tfs0)T");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textar5ea", "textar5ea");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.prepend("textar5ea");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("77'xk.B", "77'xk.B");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        document0.outerHtmlTail(pipedWriter0, (-613), document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#sR6*Qi}|UVe", "#sR6*Qi}|UVe");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, (-695), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "Sbtpl[lGyqf?L:");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      Element element0 = document0.insertChildren(0, nodeArray0);
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      // Undeclared exception!
      element0.is((Evaluator) evaluator_IsFirstChild0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Element element0 = new Element("Efzwexb8");
      // Undeclared exception!
      try { 
        element0.is("&Y6OuOTAON");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '&Y6OuOTAON': unexpected token at '&Y6OuOTAON'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parse("textar5ea", "textar5ea");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.is("textar5ea");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Document.createShell("~c");
      Node[] nodeArray0 = new Node[1];
      DataNode dataNode0 = new DataNode("~c");
      document0.setParentNode(dataNode0);
      nodeArray0[0] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = new Document("");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parse("CJ)l", "CJ)l");
      List<Node> list0 = document0.ensureChildNodes();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), (Collection<? extends Node>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parse("textar5ea", "textar5ea");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.html("Tjj9?INM5X");
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "Tag name must not be empty.");
      document0.appendTo(document0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Tag name must not be empty.");
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charset0);
      // Undeclared exception!
      document0.html(outputStreamWriter0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("~c", "~c");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      Element element0 = document0.insertChildren(0, nodeArray0);
      // Undeclared exception!
      element0.html();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textar5ea", "textar5ea");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("CJ)l", "CJ)l");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("CJ)l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: CJ)l
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("t~jT", "(");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: (
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Element element0 = new Element("Efzwexb8");
      // Undeclared exception!
      try { 
        element0.getElementsByTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Element element0 = new Element("Efzwexb8");
      // Undeclared exception!
      try { 
        element0.getElementsByClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching(":nth-child(%d)", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Element element0 = new Element(":%s(%dn%+d)");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueEnding((String) null, "tt");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", "d6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("~c", "~c");
      Element element0 = document0.body();
      element0.setSiblingIndex((-2));
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("u:=\n", "'g~gB_! *Uu4/");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = new Document("mc2n+J:B)nxxy=^5mP,");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("~c", "~c");
      Element element0 = document0.body();
      element0.tagName("'g~gB_! *Uu4/");
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ''g': unexpected token at ''g'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Element element0 = new Element(":fzw}xb8");
      // Undeclared exception!
      try { 
        element0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parse("Tag ame must not be emt", "Tag ame must not be emt");
      // Undeclared exception!
      try { 
        document0.child((-1481));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.before("");
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")p", ")p");
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag ame must not be emt", "Tag ame must not be emt");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.attr("", "#root");
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = new Document("Efzwexb8");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "Efzwexb8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Document.createShell("~c");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
      Element element0 = document0.empty();
      // Undeclared exception!
      try { 
        element0.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S/XsOjoM.", "S/XsOjoM.");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.parser.ht`ltreebuilderstate", "org.jsoup.parser.ht`ltreebuilderstate");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.appendElement("#root");
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Element element0 = new Element(":fzw}xb8");
      // Undeclared exception!
      try { 
        element0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "Tag name must not be empty.");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.append("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("CJ)l", "CJ)l");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Tag tag0 = Tag.valueOf(")p");
      Element element0 = new Element(tag0, "textar5ea");
      Document document0 = Parser.parseBodyFragmentRelaxed("textar5ea", "textar5ea");
      Element element1 = element0.appendTo(document0);
      // Undeclared exception!
      try { 
        element1.after((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag ame must not be emt", "Tag ame must not be emt");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.after("Tag ame must not be emt");
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parse(":fzw}xb8", ":fzw}xb8");
      Document document1 = document0.clone();
      Element element0 = document0.appendTo(document1);
      document1.reparentChild(document0);
      // Undeclared exception!
      try { 
        element0.after("&s@r^*wjk`@8-Ia");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Element element0 = new Element("textar5ea");
      // Undeclared exception!
      try { 
        element0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "EOF", (Attributes) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "Tag ame must not be emt");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parse(" />", "mhAbSef");
      StringWriter stringWriter0 = new StringWriter();
      document0.html(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "Tag name must not be empty.");
      document0.hasClass("4*vb8g={8hE@");
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parse("CJ)l", "CJ)l");
      Element element0 = document0.toggleClass("~c");
      Set<String> set0 = document0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":fzW}xB8");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "class", attributes0);
      TextNode textNode0 = new TextNode("f[3\"wJk>", "ycX");
      Element element0 = pseudoTextElement0.prependChild(textNode0);
      element0.data();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(":fzw}xb8", ":fzw}xb8");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("mhAbSef", "9qKi^9rT^s4ET");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.body();
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.head();
      document0.appendTo(element0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("~c", "~c");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("CJ)l", "CJ)l");
      Element element0 = document0.body();
      element0.html("CJ)l");
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = new Document("Efzwexb8");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parse("mhAbSef", "mhAbSef");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Element element0 = new Element("7n/q/D?[9sMyu");
      // Undeclared exception!
      try { 
        element0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag ame must not be emt", "Tag ame must not be emt");
      document0.attr("", "#root");
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Element element0 = new Element("Efzwexzb8");
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("mhAbSef", "");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Element element0 = new Element("XkX}&c>o*I");
      Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
      element0.is((Evaluator) evaluator_IsLastOfType0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsByAttributeValueMatching("", pattern0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t?xt:r5;", "t?xt:r5;");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, (-4388), document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t?xt:r5;", "t?xt:r5;");
      // Undeclared exception!
      try { 
        document0.html((OutputStreamWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Element element0 = new Element("Efzwexb8");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      element0.outerHtmlHead(charArrayWriter0, 2455, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Element element0 = new Element(":fzw}xb8");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("li^|tmgi,b", "Efzwexb8");
      document0.addClass("org.jsoup.nodes.FormElement");
      document0.hasClass("org.jsoup.nodes.FormElement");
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#sR6*Qi}|UVe", "#sR6*Qi}|UVe");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Document.createShell("~M");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      Comment comment0 = new Comment("~M");
      linkedHashSet0.add(comment0);
      document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("mhAbSef", "");
      Element element0 = document0.text("");
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#sR6*Qi}|UVe", "#sR6*Qi}|UVe");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag ame must not be emt", "Tag ame must not be emt");
      document0.reparentChild(document0);
      document0.getElementsContainingOwnText("Tag ame must not be emt");
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Element.preserveWhitespace(nodeArray0[0]);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.title("");
      document0.getElementsMatchingText("");
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("d&xmi)", ":fzw}xb8");
      Document document1 = document0.normalise();
      document1.append("textarea");
      Pattern pattern0 = Pattern.compile(";Qt fMja;DLz72B8", (-1390));
      document1.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("CJ)l", "CJ)l");
      Element element0 = document0.append("CJ)l");
      // Undeclared exception!
      try { 
        element0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#sR6*Qi}|UVe", "#sR6*Qi}|UVe");
      Document document1 = Parser.parseBodyFragmentRelaxed("#sR6*Qi}|UVe", "#sr6*q}|u");
      document0.appendTo(document1);
      document1.getElementsContainingText("#sR6*Qi}|UVe");
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "Tag name must not be empty.");
      DataNode dataNode0 = DataNode.createFromEncoded("A?TZ~=|", "Tag name must not be empty.");
      document0.appendChild(dataNode0);
      document0.getElementsContainingText((String) null);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Efzwexb8", "Efzwexb8");
      document0.getElementById("Efzwexb8");
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Document.createShell("/=8^Ao;FE9X_U|{{");
      Element element0 = document0.body();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag ame must not be emt", "Tag ame must not be emt");
      document0.reparentChild(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.body();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.reparentChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.body();
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = new Document("");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("t?xt:r5;", "t?xt:r5;");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Element element0 = new Element(":fzw}xb8");
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("mhAbSef", "");
      document0.siblingElements();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parse("-Yd1vhcJH", "-Yd1vhcJH");
      Element element0 = document0.body();
      Elements elements0 = element0.siblingElements();
      assertEquals("-Yd1vhcJH", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.body();
      element0.after("HK}&4BpjfG");
      Element element1 = document0.appendTo(element0);
      element1.empty();
      assertEquals(1, element0.childNodeSize());
      
      String string0 = document0.cssSelector();
      assertEquals("html > body:nth-child(2) > #root", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag ame must not Oe emt", "Tag ame must not Oe emt");
      Element element0 = document0.head();
      document0.appendTo(element0);
      assertEquals(1, element0.childNodeSize());
      
      element0.empty();
      String string0 = document0.cssSelector();
      assertEquals("html > head > #root", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("title", "title");
      Element element0 = document0.appendTo(document0);
      String string0 = element0.cssSelector();
      assertEquals("title", element0.baseUri());
      assertEquals("#root", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
      Element element0 = document0.addClass("org.jsoup.nodes.Element$1");
      element0.cssSelector();
      assertEquals("org.jsoup.nodes.Element$1", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1722320336), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C;)w", "C;)w");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren(336, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Document.createShell("!w)xq,<>X*K#o");
      List<Node> list0 = document0.ensureChildNodes();
      // Undeclared exception!
      try { 
        document0.insertChildren((-576), (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Document.createShell("mhabsef");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren(2984, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Efzwexb8", "Efzwexb8");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("Efzwexb8", document0.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parse(")p", "r5]7M,3");
      Element element0 = document0.body();
      List<TextNode> list0 = element0.textNodes();
      assertEquals("r5]7M,3", element0.baseUri());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(":fzw}xb8", ":fzw}xb8");
      // Undeclared exception!
      try { 
        document0.child(1700);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1700, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parse("Tag ame must not be emt", "Tag ame must not be emt");
      Elements elements0 = document0.getElementsByIndexGreaterThan(46);
      assertEquals("Tag ame must not be emt", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Efzwexb8", "Efzwexb8");
      document0.selectFirst("Efzwexb8");
      assertEquals("Efzwexb8", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = new Document("?");
      document0.getAllElements();
      assertEquals("?", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      // Undeclared exception!
      try { 
        document0.before("org.jsoup.nodes.Element");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parse("CommentEnd", "CommentEnd");
      document0.getElementsByAttribute("CommentEnd");
      assertEquals("CommentEnd", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Document.createShell(".");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("'", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Element element0 = new Element("limitedQuirks");
      // Undeclared exception!
      try { 
        element0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parse("mlAbjef", "mlAbjef");
      Element element0 = document0.shallowClone();
      assertEquals("mlAbjef", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = new Document(":fzw}xb8");
      // Undeclared exception!
      try { 
        document0.after((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Document.createShell(":fzw}xb8");
      document0.title(":fzw}xb8");
      String string0 = document0.toString();
      assertEquals(1, document0.childNodeSize());
      assertEquals(":fzw}xb8", document0.baseUri());
      assertEquals("<html>\n <head>\n  <title>:fzw}xb8</title>\n </head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Document.createShell("I");
      document0.getElementsByAttributeValueContaining("I", "I");
      assertEquals(1, document0.childNodeSize());
      assertEquals("I", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Element element0 = new Element("Efzwexb8");
      Elements elements0 = element0.getElementsByClass("Efzwexb8");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "Tag name must not be empty.");
      document0.getElementsByAttributeValueEnding("Tag name must not be empty.", "[T");
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Element element0 = new Element("Efzwexb8");
      boolean boolean0 = element0.is("Efzwexb8");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Element element0 = new Element("EzweBx8");
      // Undeclared exception!
      try { 
        element0.wrap("EzweBx8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Element element0 = new Element(":fzw}xb8");
      Elements elements0 = element0.getElementsByIndexEquals((-8));
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parse("Tag ame must not be emt", "Tag ame must not be emt");
      document0.getElementsByAttributeStarting("Tag ame must not be emt");
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag ame must not be emt", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Efzwexb8", "Efzwexb8");
      Elements elements0 = document0.getElementsByIndexLessThan(848);
      assertEquals("Efzwexb8", document0.baseUri());
      assertFalse(elements0.isEmpty());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag ame must not be emt", "Tag ame must not be emt");
      // Undeclared exception!
      try { 
        document0.after("Tag ame must not be emt");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = new Document("ggncy98:");
      Elements elements0 = document0.getElementsMatchingOwnText("ggncy98:");
      assertEquals(0, elements0.size());
      assertEquals("ggncy98:", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t?xt:r5;", "t?xt:r5;");
      document0.prepend("t?xt:r5;");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("CJ)l", "CJ)l");
      // Undeclared exception!
      try { 
        document0.select("CJ)l");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'CJ)l': unexpected token at ')l'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error:");
      Element element0 = document0.attr("Pattern syntax error:", true);
      assertEquals("Pattern syntax error:", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("CJ)l", "CJ)l");
      document0.wholeText();
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ)l", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("l:t1`j", "l:t1`j");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = new Document("~c");
      Element element0 = document0.tagName("~c");
      assertEquals("~c", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parse(" ", "mlabjef");
      document0.prependText("mlabjef");
      document0.text();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Element element0 = new Element(":fzw}xb8");
      Elements elements0 = element0.previousElementSiblings();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = new Document("2L4*DZ'\"\"kX9s3s{T/");
      document0.prependElement("dd");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parse("Tag ame must not be emt", "Tag ame must not be emt");
      Elements elements0 = document0.getElementsMatchingText("#root");
      assertEquals("Tag ame must not be emt", document0.baseUri());
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("CJ)l", "CJ)l");
      document0.appendText("<html>\n <head></head>\n <body>\n  CJ)l\n </body>\n</html>");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = new Document("children colbection to ba inserted must not be null.");
      document0.children();
      assertEquals("children colbection to ba inserted must not be null.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      document0.nextElementSiblings();
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }
}
